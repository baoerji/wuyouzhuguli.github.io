<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Spring Boot整合Kafka]]></title>
    <url>%2Fblog%2FSpring-Boot-Kafka.html</url>
    <content type="text"><![CDATA[Kafka是一个分布式的、可分区的、可复制的消息系统，下面是Kafka的几个基本术语：Kafka将消息以topic为单位进行归纳；将向Kafka topic发布消息的程序成为producers；将预订topics并消费消息的程序成为consumer；Kafka以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个broker。producers通过网络将消息发送到Kafka集群，集群向消费者提供消息，如下图所示：创建一个topic时，可以指定partitions（分区）数目，partitions数越多，其吞吐量也越大，但是需要的资源也越多，同时也会导致更高的不可用性，kafka在接收到producers发送的消息之后，会根据均衡策略将消息存储到不同的partitions中：在每个partitions中，消息以顺序存储，最晚接收的的消息会最后被消费。producers在向kafka集群发送消息的时候，可以通过指定partitions来发送到指定的partitions中。也可以通过指定均衡策略来将消息发送到不同的partitions中。如果不指定，就会采用默认的随机均衡策略，将消息随机的存储到不同的partitions中。在consumer消费消息时，kafka使用offset来记录当前消费的位置：在kafka的设计中，可以有多个不同的group来同时消费同一个topic下的消息，如图，我们有两个不同的group同时消费，他们的的消费的记录位置offset各不项目，不互相干扰。对于一个group而言，consumer的数量不应该多于partitions的数量，因为在一个group中，每个partitions至多只能绑定到一个consumer上，即一个consumer可以消费多个partitions，一个partitions只能给一个consumer消费。因此，若一个group中的consumer数量大于partitions数量的话，多余的consumer将不会收到任何消息。Kafka安装使用这里演示在Windows下Kafka安装与使用。Kafka下载地址：http://kafka.apache.org/downloads，选择二进制文件下载（Binary downloads），然后解压即可。Kafka的配置文件位于config目录下，因为Kafka集成了Zookeeper（Kafka存储消息的地方），所以config目录下除了有Kafka的配置文件server.properties外，还可以看到一个Zookeeper配置文件zookeeper.properties：打开server.properties，将broker.id的值修改为1，每个broker的id都必须设置为Integer类型，且不能重复。Zookeeper的配置保持默认即可。接下来开始使用Kafka。启动Zookeeper在Windows下执行下面这些命令可能会出现找不到或无法加载主类的问题，解决方案可参考：https://blog.csdn.net/cx2932350/article/details/78870135。在Kafka根目录下使用cmd执行下面这条命令，启动ZK：1bin\windows\zookeeper-server-start.bat config\zookeeper.properties在Linux下，可以使用后台进程的方式启动ZK：1bin/zookeeper-server-start.sh -daemon config/zookeeper.properties启动Kafka执行下面这条命令启动Kafka：1bin\windows\kafka-server-start.bat config\server.propertiesLinux对应命令：1bin/kafka-server-start.sh config/server.properties当看到命令行打印如下信息，说明启动完毕:创建Topic执行下面这条命令创建一个Topic1bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test这条命令的意思是，创建一个Topic到ZK（指定ZK的地址），副本个数为1，分区数为1，Topic的名称为test。Linux对应的命令为:1bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test创建好后我们可以查看Kafka里的Topic列表：1bin\windows\kafka-topics.bat --list --zookeeper localhost:2181可看到目前只包含一个我们刚创建的test Topic。Linux对应的命令为：1bin/kafka-topics.sh --list --zookeeper localhost:2181查看test Topic的具体信息：1bin\windows\kafka-topics.bat --describe --zookeeper localhost:2181 --topic testLinux对应的命令为：1bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test生产消息和消费消息启动Producers1bin\windows\kafka-console-producer.bat --broker-list localhost:9092 --topic test9092为生产者的默认端口号。这里启动了生产者，准备往test Topic里发送数据。Linux下对应的命令为：1bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test启动Consumers接着启动一个消费者用于消费生产者生产的数据，新建一个cmd窗口，输入下面这条命令：1bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic test --from-beginningfrom-beginning表示从头开始读取数据。Linux下对应的命令为：1bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning启动好生产者和消费者后我们在生产者里生产几条数据:消费者成功接收到数据：Spring Boot整合Kafaka上面简单介绍了Kafka的使用，下面我们开始在Spring Boot里使用Kafka。新建一个Spring Boot项目，版本为2.1.3.RELEASE，并引入如下依赖:12345678 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt; &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;&lt;/dependency&gt;生产者配置新建一个Java配置类KafkaProducerConfig，用于配置生产者：1234567891011121314151617181920212223242526@Configurationpublic class KafkaProducerConfig &#123; @Value("$&#123;spring.kafka.bootstrap-servers&#125;") private String bootstrapServers; @Bean public ProducerFactory&lt;String, String&gt; producerFactory() &#123; Map&lt;String, Object&gt; configProps = new HashMap&lt;&gt;(); configProps.put( ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers); configProps.put( ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class); configProps.put( ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class); return new DefaultKafkaProducerFactory&lt;&gt;(configProps); &#125; @Bean public KafkaTemplate&lt;String, String&gt; kafkaTemplate() &#123; return new KafkaTemplate&lt;&gt;(producerFactory()); &#125;&#125;首先我们配置了一个producerFactory，方法里配置了Kafka Producer实例的策略。bootstrapServers为Kafka生产者的地址，我们在配置文件application.yml里配置它：123spring: kafka: bootstrap-servers: localhost:9092ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG和ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG指定了key，value序列化策略，这里指定为Kafka提供的StringSerializer，因为我们暂时只发送简单的String类型的消息。接着我们使用producerFactory配置了kafkaTemplate，其包含了发送消息的便捷方法，后面我们就用这个对象来发送消息。发布消息配置好生产者，我们就可以开始发布消息了。新建一个SendMessageController：1234567891011@RestControllerpublic class SendMessageController &#123; @Autowired private KafkaTemplate&lt;String, String&gt; kafkaTemplate; @GetMapping("send/&#123;message&#125;") public void send(@PathVariable String message) &#123; this.kafkaTemplate.send("test", message); &#125;&#125;我们注入了kafkaTemplate对象，key-value都为String类型，并通过它的send方法来发送消息。其中test为Topic的名称，上面我们已经使用命令创建过这个Topic了。send方法是一个异步方法，我们可以通过回调的方式来确定消息是否发送成功，我们改造SendMessageController：123456789101112131415161718192021222324@RestControllerpublic class SendMessageController &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); @Autowired private KafkaTemplate&lt;String, String&gt; kafkaTemplate; @GetMapping("send/&#123;message&#125;") public void send(@PathVariable String message) &#123; ListenableFuture&lt;SendResult&lt;String, String&gt;&gt; future = this.kafkaTemplate.send("test", message); future.addCallback(new ListenableFutureCallback&lt;SendResult&lt;String, String&gt;&gt;() &#123; @Override public void onSuccess(SendResult&lt;String, String&gt; result) &#123; logger.info("成功发送消息：&#123;&#125;，offset=[&#123;&#125;]", message, result.getRecordMetadata().offset()); &#125; @Override public void onFailure(Throwable ex) &#123; logger.error("消息：&#123;&#125; 发送失败，原因：&#123;&#125;", message, ex.getMessage()); &#125; &#125;); &#125;&#125;消息发送成功后，会回调onSuccess方法，发送失败后回调onFailure方法。消费者配置接着我们来配置消费者，新建一个Java配置类KafkaConsumerConfig：123456789101112131415161718192021222324252627282930313233343536373839404142@EnableKafka@Configurationpublic class KafkaConsumerConfig &#123; @Value("$&#123;spring.kafka.bootstrap-servers&#125;") private String bootstrapServers; @Value("$&#123;spring.kafka.consumer.group-id&#125;") private String consumerGroupId; @Value("$&#123;spring.kafka.consumer.auto-offset-reset&#125;") private String autoOffsetReset; @Bean public ConsumerFactory&lt;String, String&gt; consumerFactory() &#123; Map&lt;String, Object&gt; props = new HashMap&lt;&gt;(); props.put( ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers); props.put( ConsumerConfig.GROUP_ID_CONFIG, consumerGroupId); props.put( ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, autoOffsetReset); props.put( ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class); props.put( ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class); return new DefaultKafkaConsumerFactory&lt;&gt;(props); &#125; @Bean public ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; kafkaListenerContainerFactory() &#123; ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;&gt;(); factory.setConsumerFactory(consumerFactory()); return factory; &#125;&#125;consumerGroupId和autoOffsetReset需要在application.yml里配置：12345spring: kafka: consumer: group-id: test-consumer auto-offset-reset: latest其中group-id将消费者进行分组（你也可以不进行分组），组名为test-consumer，并指定了消息读取策略，包含四个可选值：earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常exception:直接抛出异常在KafkaConsumerConfig中我们配置了ConsumerFactory和KafkaListenerContainerFactory。当这两个Bean成功注册到Spring IOC容器中后，我们便可以使用@KafkaListener注解来监听消息了。配置类上需要@EnableKafka注释才能在Spring托管Bean上检测@KafkaListener注解。消息消费配置好消费者，我们就可以开始消费消息了，新建KafkaMessageListener：12345678910@Componentpublic class KafkaMessageListener &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); @KafkaListener(topics = "test", groupId = "test-consumer") public void listen(String message) &#123; logger.info("接收消息: &#123;&#125;", message); &#125;&#125;我们通过@KafkaListener注解来监听名称为test的Topic，消费者分组的组名为test-consumer。演示启动Spring Boot项目，启动过程中，控制台会输出Kafka的配置，启动好后，访问http://localhost:8080/send/hello,mrbird，控制台输出如下：@KafkaListener详解@KafkaListener除了可以指定Topic名称和分组id外，我们还可以同时监听来自多个Topic的消息:1@KafkaListener(topics = "topic1, topic2")我们还可以通过@Header注解来获取当前消息来自哪个分区（partitions）:12345@KafkaListener(topics = "test", groupId = "test-consumer")public void listen(@Payload String message, @Header(KafkaHeaders.RECEIVED_PARTITION_ID) int partition) &#123; logger.info("接收消息: &#123;&#125;，partition：&#123;&#125;", message, partition);&#125;重启项目，再次访问http://localhost:8080/send/hello,mrbird，控制台输出如下：因为我们没有进行分区，所以test Topic只有一个区，下标为0。我们可以通过@KafkaListener来指定只接收来自特定分区的消息：123456789@KafkaListener(groupId = "test-consumer", topicPartitions = @TopicPartition(topic = "test", partitionOffsets = &#123; @PartitionOffset(partition = "0", initialOffset = "0") &#125;))public void listen(@Payload String message, @Header(KafkaHeaders.RECEIVED_PARTITION_ID) int partition) &#123; logger.info("接收消息: &#123;&#125;，partition：&#123;&#125;", message, partition);&#125;如果不需要指定initialOffset，上面代码可以简化为：12@KafkaListener(groupId = "test-consumer", topicPartitions = @TopicPartition(topic = "test", partitions = &#123; "0", "1" &#125;))消息过滤器我们可以为消息监听添加过滤器来过滤一些特定的信息。我们在消费者配置类KafkaConsumerConfig的kafkaListenerContainerFactory方法里配置过滤规则：1234567891011@Beanpublic ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; kafkaListenerContainerFactory() &#123; ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;&gt;(); factory.setConsumerFactory(consumerFactory()); // ------- 过滤配置 -------- factory.setRecordFilterStrategy( r -&gt; r.value().contains("fuck") ); return factory;&#125;setRecordFilterStrategy接收RecordFilterStrategy&lt;K, V&gt;，他是一个函数式接口：123public interface RecordFilterStrategy&lt;K, V&gt; &#123; boolean filter(ConsumerRecord&lt;K, V&gt; var1);&#125;所以我们用lambda表达式指定了上面这条规则，即如果消息内容包含fuck这个粗鄙之语的时候，则不接受消息。配置好后我们重启项目，分别发送下面这两条请求：http://localhost:8080/send/fuck,mrbirdhttp://localhost:8080/send/love,mrbird观察控制台：可以看到，fuck,mrbird这条消息没有被接收。发送复杂的消息截至目前位置我们只发送了简单的字符串类型的消息，我们可以自定义消息转换器来发送复杂的消息。定义消息实体创建一个Message类：12345678910111213141516171819202122232425public class Message implements Serializable &#123; private static final long serialVersionUID = 6678420965611108427L; private String from; private String message; public Message() &#123; &#125; public Message(String from, String message) &#123; this.from = from; this.message = message; &#125; @Override public String toString() &#123; return "Message&#123;" + "from='" + from + '\'' + ", message='" + message + '\'' + '&#125;'; &#125; // get set 略&#125;改造消息生产者配置1234567891011121314151617181920212223242526@Configurationpublic class KafkaProducerConfig &#123; @Value("$&#123;spring.kafka.bootstrap-servers&#125;") private String bootstrapServers; @Bean public ProducerFactory&lt;String, Message&gt; producerFactory() &#123; Map&lt;String, Object&gt; configProps = new HashMap&lt;&gt;(); configProps.put( ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers); configProps.put( ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class); configProps.put( ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class); return new DefaultKafkaProducerFactory&lt;&gt;(configProps); &#125; @Bean public KafkaTemplate&lt;String, Message&gt; kafkaTemplate() &#123; return new KafkaTemplate&lt;&gt;(producerFactory()); &#125;&#125;我们将value序列化策略指定为了Kafka提供的JsonSerializer，并且kafkaTemplate返回类型为KafkaTemplate&lt;String, Message&gt;。发送新的消息在SendMessageController里发送复杂的消息:1234567@Autowiredprivate KafkaTemplate&lt;String, Message&gt; kafkaTemplate;@GetMapping("send/&#123;message&#125;")public void sendMessage(@PathVariable String message) &#123; this.kafkaTemplate.send("test", new Message("mrbird", message));&#125;修改消费者配置修改消费者配置KafkaConsumerConfig：123456789101112131415161718192021222324252627282930313233343536373839@EnableKafka@Configurationpublic class KafkaConsumerConfig &#123; @Value("$&#123;spring.kafka.bootstrap-servers&#125;") private String bootstrapServers; @Value("$&#123;spring.kafka.consumer.group-id&#125;") private String consumerGroupId; @Value("$&#123;spring.kafka.consumer.auto-offset-reset&#125;") private String autoOffsetReset; @Bean public ConsumerFactory&lt;String, Message&gt; consumerFactory() &#123; Map&lt;String, Object&gt; props = new HashMap&lt;&gt;(); props.put( ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers); props.put( ConsumerConfig.GROUP_ID_CONFIG, consumerGroupId); props.put( ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, autoOffsetReset); return new DefaultKafkaConsumerFactory&lt;&gt;( props, new StringDeserializer(), new JsonDeserializer&lt;&gt;(Message.class)); &#125; @Bean public ConcurrentKafkaListenerContainerFactory&lt;String, Message&gt; kafkaListenerContainerFactory() &#123; ConcurrentKafkaListenerContainerFactory&lt;String, Message&gt; factory = new ConcurrentKafkaListenerContainerFactory&lt;&gt;(); factory.setConsumerFactory(consumerFactory()); return factory; &#125;&#125;修改消息监听修改KafkaMessageListener：1234@KafkaListener(topics = "test", groupId = "test-consumer")public void listen(Message message) &#123; logger.info("接收消息: &#123;&#125;", message);&#125;重启项目，访问http://localhost:8080/send/hello，控制台输出如下：更多配置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394spring.kafka.admin.client-id= # ID to pass to the server when making requests. Used for server-side logging.spring.kafka.admin.fail-fast=false # Whether to fail fast if the broker is not available on startup.spring.kafka.admin.properties.*= # Additional admin-specific properties used to configure the client.spring.kafka.admin.ssl.key-password= # Password of the private key in the key store file.spring.kafka.admin.ssl.key-store-location= # Location of the key store file.spring.kafka.admin.ssl.key-store-password= # Store password for the key store file.spring.kafka.admin.ssl.key-store-type= # Type of the key store.spring.kafka.admin.ssl.protocol= # SSL protocol to use.spring.kafka.admin.ssl.trust-store-location= # Location of the trust store file.spring.kafka.admin.ssl.trust-store-password= # Store password for the trust store file.spring.kafka.admin.ssl.trust-store-type= # Type of the trust store.spring.kafka.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Applies to all components unless overridden.spring.kafka.client-id= # ID to pass to the server when making requests. Used for server-side logging.spring.kafka.consumer.auto-commit-interval= # Frequency with which the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' is set to true.spring.kafka.consumer.auto-offset-reset= # What to do when there is no initial offset in Kafka or if the current offset no longer exists on the server.spring.kafka.consumer.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for consumers.spring.kafka.consumer.client-id= # ID to pass to the server when making requests. Used for server-side logging.spring.kafka.consumer.enable-auto-commit= # Whether the consumer's offset is periodically committed in the background.spring.kafka.consumer.fetch-max-wait= # Maximum amount of time the server blocks before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by "fetch-min-size".spring.kafka.consumer.fetch-min-size= # Minimum amount of data the server should return for a fetch request.spring.kafka.consumer.group-id= # Unique string that identifies the consumer group to which this consumer belongs.spring.kafka.consumer.heartbeat-interval= # Expected time between heartbeats to the consumer coordinator.spring.kafka.consumer.key-deserializer= # Deserializer class for keys.spring.kafka.consumer.max-poll-records= # Maximum number of records returned in a single call to poll().spring.kafka.consumer.properties.*= # Additional consumer-specific properties used to configure the client.spring.kafka.consumer.ssl.key-password= # Password of the private key in the key store file.spring.kafka.consumer.ssl.key-store-location= # Location of the key store file.spring.kafka.consumer.ssl.key-store-password= # Store password for the key store file.spring.kafka.consumer.ssl.key-store-type= # Type of the key store.spring.kafka.consumer.ssl.protocol= # SSL protocol to use.spring.kafka.consumer.ssl.trust-store-location= # Location of the trust store file.spring.kafka.consumer.ssl.trust-store-password= # Store password for the trust store file.spring.kafka.consumer.ssl.trust-store-type= # Type of the trust store.spring.kafka.consumer.value-deserializer= # Deserializer class for values.spring.kafka.jaas.control-flag=required # Control flag for login configuration.spring.kafka.jaas.enabled=false # Whether to enable JAAS configuration.spring.kafka.jaas.login-module=com.sun.security.auth.module.Krb5LoginModule # Login module.spring.kafka.jaas.options= # Additional JAAS options.spring.kafka.listener.ack-count= # Number of records between offset commits when ackMode is "COUNT" or "COUNT_TIME".spring.kafka.listener.ack-mode= # Listener AckMode. See the spring-kafka documentation.spring.kafka.listener.ack-time= # Time between offset commits when ackMode is "TIME" or "COUNT_TIME".spring.kafka.listener.client-id= # Prefix for the listener's consumer client.id property.spring.kafka.listener.concurrency= # Number of threads to run in the listener containers.spring.kafka.listener.idle-event-interval= # Time between publishing idle consumer events (no data received).spring.kafka.listener.log-container-config= # Whether to log the container configuration during initialization (INFO level).spring.kafka.listener.monitor-interval= # Time between checks for non-responsive consumers. If a duration suffix is not specified, seconds will be used.spring.kafka.listener.no-poll-threshold= # Multiplier applied to "pollTimeout" to determine if a consumer is non-responsive.spring.kafka.listener.poll-timeout= # Timeout to use when polling the consumer.spring.kafka.listener.type=single # Listener type.spring.kafka.producer.acks= # Number of acknowledgments the producer requires the leader to have received before considering a request complete.spring.kafka.producer.batch-size= # Default batch size.spring.kafka.producer.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for producers.spring.kafka.producer.buffer-memory= # Total memory size the producer can use to buffer records waiting to be sent to the server.spring.kafka.producer.client-id= # ID to pass to the server when making requests. Used for server-side logging.spring.kafka.producer.compression-type= # Compression type for all data generated by the producer.spring.kafka.producer.key-serializer= # Serializer class for keys.spring.kafka.producer.properties.*= # Additional producer-specific properties used to configure the client.spring.kafka.producer.retries= # When greater than zero, enables retrying of failed sends.spring.kafka.producer.ssl.key-password= # Password of the private key in the key store file.spring.kafka.producer.ssl.key-store-location= # Location of the key store file.spring.kafka.producer.ssl.key-store-password= # Store password for the key store file.spring.kafka.producer.ssl.key-store-type= # Type of the key store.spring.kafka.producer.ssl.protocol= # SSL protocol to use.spring.kafka.producer.ssl.trust-store-location= # Location of the trust store file.spring.kafka.producer.ssl.trust-store-password= # Store password for the trust store file.spring.kafka.producer.ssl.trust-store-type= # Type of the trust store.spring.kafka.producer.transaction-id-prefix= # When non empty, enables transaction support for producer.spring.kafka.producer.value-serializer= # Serializer class for values.spring.kafka.properties.*= # Additional properties, common to producers and consumers, used to configure the client.spring.kafka.ssl.key-password= # Password of the private key in the key store file.spring.kafka.ssl.key-store-location= # Location of the key store file.spring.kafka.ssl.key-store-password= # Store password for the key store file.spring.kafka.ssl.key-store-type= # Type of the key store.spring.kafka.ssl.protocol= # SSL protocol to use.spring.kafka.ssl.trust-store-location= # Location of the trust store file.spring.kafka.ssl.trust-store-password= # Store password for the trust store file.spring.kafka.ssl.trust-store-type= # Type of the trust store.spring.kafka.streams.application-id= # Kafka streams application.id property; default spring.application.name.spring.kafka.streams.auto-startup=true # Whether or not to auto-start the streams factory bean.spring.kafka.streams.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for streams.spring.kafka.streams.cache-max-size-buffering= # Maximum memory size to be used for buffering across all threads.spring.kafka.streams.client-id= # ID to pass to the server when making requests. Used for server-side logging.spring.kafka.streams.properties.*= # Additional Kafka properties used to configure the streams.spring.kafka.streams.replication-factor= # The replication factor for change log topics and repartition topics created by the stream processing application.spring.kafka.streams.ssl.key-password= # Password of the private key in the key store file.spring.kafka.streams.ssl.key-store-location= # Location of the key store file.spring.kafka.streams.ssl.key-store-password= # Store password for the key store file.spring.kafka.streams.ssl.key-store-type= # Type of the key store.spring.kafka.streams.ssl.protocol= # SSL protocol to use.spring.kafka.streams.ssl.trust-store-location= # Location of the trust store file.spring.kafka.streams.ssl.trust-store-password= # Store password for the trust store file.spring.kafka.streams.ssl.trust-store-type= # Type of the trust store.spring.kafka.streams.state-dir= # Directory location for the state store.spring.kafka.template.default-topic= # Default topic to which messages are sent.源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/54.Spring-Boot-Kafka]]></content>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 9 Flow API 学习]]></title>
    <url>%2Fblog%2FJava-9-Flow-API-Learn.html</url>
    <content type="text"><![CDATA[响应式编程（Reactive Programming）可以理解为一种处理数据项（Data Item）的异步流，即在数据项产生的时候，接收者就对其进行响应。在响应式编程中，会有一个数据发布者（Publisher）和数据订阅者（Subscriber），后者用于异步接收发布者发布的数据。在该模式中，还引入了一个更高级的特性：数据处理器（Processor），它用于将数据发布者发布的数据进行某些转换操作，然后再发布给数据订阅者。总之，响应式编程是异步非阻塞编程，能够提升程序性能，可以解决传统编程模型遇到的困境。基于这个模型实现的有Java 9 Flow API、RxJava和Reactor等，这里主要介绍的是Java 9 Flow API的使用。Flow接口概览Java 9 新增了一个Flow接口，位于java.util.concurrent路径下，构成如下图所示：其中Publisher为数据发布者，Subscriber为数据订阅者，Subscription为发布者和订阅者之间的订阅关系，Processor为数据处理器。PublisherPublisher部分的源码如下所示:它是一个函数式接口，只包含一个subscribe方法，通过这个方法将数据发布出去。SubscriberSubscriber部分的源码如下所示: 该接口包含了四个方法：方法描述onSubscribe订阅成功的回调方法，用于初始化Subscription，并且表明可以开始接收订阅数据了onNext接收下一项订阅数据的回调方法onError在Publisher或Subcriber遇到不可恢复的错误时调用此方法，Subscriber不再接收订阅消息onComplete当接收完所有订阅数据，并且发布者已经关闭后会回调这个方法SubscriptionSubscription部分的源码如下所示：该接口包含了两个方法：方法描述request用于向数据发布者请求n个数据项cancel取消消息订阅，订阅者将不再接收数据ProcessorProcessor部分的代码如下所示：它是一个空接口，但是它继承了Publisher和Subscriber，所以它既能发布数据也能订阅数据。基于这个特性，它可以充当数据转换的角色，先从数据发布者那接收数据项，然后经过处理后再发布给最终的数据订阅者。发布订阅示例接下来我们举个数据发布和数据订阅的简单示例，以此了解Java 9 Flow API的使用。先入为主，直接贴出整个示例代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667public class FlowApiTest &#123; public static void main(String[] args) throws InterruptedException &#123; // 1. 定义 String 类型的数据发布者，JDK 9自带的 // SubmissionPublisher 实现了 Publisher SubmissionPublisher&lt;String&gt; publisher = new SubmissionPublisher&lt;&gt;(); // 2. 创建一个订阅者，用于接收发布者的消息 Subscriber&lt;String&gt; subscriber = new Subscriber&lt;&gt;() &#123; private Subscription subscription; @Override public void onSubscribe(Subscription subscription) &#123; // 通过 Subscription 和发布者保持订阅关系，并用它来给发布者反馈 this.subscription = subscription; // 请求一个数据 this.subscription.request(1); &#125; @Override public void onNext(String item) &#123; // 接收发布者发布的消息 System.out.println("【订阅者】接收消息 &lt;------ " + item); // 接收后再次请求一个数据 this.subscription.request(1); // 如果不想再接收数据，也可以直接调用 cancel，表示不再接收了 // this.subscription.cancel(); &#125; @Override public void onError(Throwable throwable) &#123; // 过程中出现异常会回调这个方法 System.out.println("【订阅者】数据接收出现异常，" + throwable); // 出现异常，取消订阅，告诉发布者我不再接收数据了 // 实际测试发现，只要订阅者接收消息出现异常，进入了这个回调 // 订阅者就不会再继续接收消息了 this.subscription.cancel(); &#125; @Override public void onComplete() &#123; // 当发布者发出的数据都被接收了， // 并且发布者关闭后，会回调这个方法 System.out.println("【订阅者】数据接收完毕"); &#125; &#125;; // 3. 发布者和订阅者需要建立关系 publisher.subscribe(subscriber); // 4. 发布者开始发布数据 for (int i = 0; i &lt; 10; i++) &#123; String message = "hello flow api " + i; System.out.println("【发布者】发布消息 ------&gt; " + message); publisher.submit(message); &#125; // 5. 发布结束后，关闭发布者 publisher.close(); // main线程延迟关闭，不然订阅者还没接收完消息，线程就被关闭了 Thread.currentThread().join(2000); &#125;&#125;上面使用JDK 自带的Publisher实现类SubmissionPublisher来发布 String类型的数据，然后用匿名实现类的方式创建了一个Subscriber实现类。接着使用SubmissionPublisher的subscribe方法来为发布者和订阅者建立关系。建立关系后，发布者就可以发布数据，接收者也开始接收数据。详细的说明注释里都写了，这里就不再赘述代码的逻辑了。程序的输出如下所示：模拟背压所谓的背压（Backpressure）通俗的讲就是数据接收者的压力，传统模式下，发布者只关心数据的创造与发布，而当数据发布速率远高于数据接收速率的时候，数据接收者缓冲区将被填满，无法再接收数据。发布者并不关心这些，依旧不断地发送数据，所以就造成了IO阻塞。基于响应式模型实现的Flow API可以很好地解决这个问题。在Java 9的Flow API定义中，Subscriber会将Publisher发布的数据缓冲在Subscription中，其长度默认为256：假如当这个缓冲区都被填满后，Publisher将会停止发送数据，直到Subscriber接收了数据Subscription有空闲位置的时候，Publisher才会继续发布数据，而非一味地发个不停。下面用代码来演示这个情况：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475public class FlowApiTest &#123; public static void main(String[] args) throws InterruptedException &#123; // 1. 定义String类型的数据发布者，JDK 9自带的 // SubmissionPublisher实现了 Publisher SubmissionPublisher&lt;String&gt; publisher = new SubmissionPublisher&lt;&gt;(); // 2. 创建一个订阅者，用于接收发布者的消息 Subscriber&lt;String&gt; subscriber = new Subscriber&lt;&gt;() &#123; private Subscription subscription; @Override public void onSubscribe(Subscription subscription) &#123; // 通过 Subscription 和发布者保持订阅关系，并用它来给发布者反馈 this.subscription = subscription; // 请求一个数据 this.subscription.request(1); &#125; @Override public void onNext(String item) &#123; // 接收发布者发布的消息 System.out.println("【订阅者】接收消息 &lt;------ " + item); // 模拟接收数据缓慢，让缓冲池填满 try &#123; TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; // 接收后再次请求一个数据，表示我已经处理完了，你可以再发数据过来了 this.subscription.request(1); // 如果不想再接收数据，也可以直接调用cancel，表示不再接收了 // this.subscription.cancel(); &#125; @Override public void onError(Throwable throwable) &#123; // 过程中出现异常会回调这个方法 System.out.println("【订阅者】数据接收出现异常，" + throwable); // 出现异常，取消订阅，告诉发布者我不再接收数据了 // 实际测试发现，只要订阅者接收消息出现异常，进入了这个回调 // 订阅者就不会再继续接收消息了 this.subscription.cancel(); &#125; @Override public void onComplete() &#123; // 当发布者发出的数据都被接收了， // 并且发布者关闭后，会回调这个方法 System.out.println("【订阅者】数据接收完毕"); &#125; &#125;; // 3. 发布者和订阅者需要建立关系 publisher.subscribe(subscriber); // 4. 发布者开始发布数据 for (int i = 0; i &lt; 500; i++) &#123; String message = "hello flow api " + i; System.out.println("【发布者】发布消息 ------&gt; " + message); publisher.submit(message); &#125; // 5. 发布结束后，关闭发布者 publisher.close(); // main线程延迟关闭，不然订阅者还没接收完消息，线程就被关闭了 Thread.currentThread().join(20000); &#125;&#125;上面代码中，我们在Subscriber的onNext方法中用下面的代码模拟延迟，让数据处理过程维持在2秒左右：12345try &#123; TimeUnit.SECONDS.sleep(2);&#125; catch (InterruptedException e) &#123; e.printStackTrace();&#125;然后数据发布量调整到了500，当程序启动的时候，由于数据发布的速度非常快（普通for循环），所以数据订阅者的数据缓冲区瞬间被填满，于是你会看到下面这个情况，只有当数据订阅者处理了一个数据的时候，数据发布者才会相应地再次发布一个新数据：Processor示例Processor的使用也很简单，其实它就是Publisher和Subscriber的结合体，充当数据处理的角色，通常的做法是用它来接收发布者发布的消息，然后进行相应的处理，再将数据发布出去，供消息订阅者接收。下面是一个Processor用法的简单示例：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106public class FlowApiTest2 &#123; static class MyProcessor extends SubmissionPublisher&lt;String&gt; implements Processor&lt;String, String&gt; &#123; private Subscription subscription; @Override public void onSubscribe(Subscription subscription) &#123; // 通过 Subscription 和发布者保持订阅关系，并用它来给发布者反馈 this.subscription = subscription; // 请求一个数据 this.subscription.request(1); &#125; @Override public void onNext(String item) &#123; // 接收发布者发布的消息 System.out.println("【处理器】接收消息 &lt;------ " + item); // 处理器将消息进行转换 String newItem = "【处理器加工后的数据: " + item + "】"; this.submit(newItem); // 接收后再次请求一个数据，表示我已经处理完了，你可以再发数据过来了 this.subscription.request(1); // 如果不想再接收数据，也可以直接调用cancel，表示不再接收了 // this.subscription.cancel(); &#125; @Override public void onError(Throwable throwable) &#123; // 过程中出现异常会回调这个方法 System.out.println("【处理器】数据接收出现异常，" + throwable); // 出现异常，取消订阅，告诉发布者我不再接收数据了 this.subscription.cancel(); &#125; @Override public void onComplete() &#123; System.out.println("【处理器】数据处理完毕"); // 处理器处理完数据后关闭 this.close(); &#125; &#125; public static void main(String[] args) throws InterruptedException &#123; // 1. 定义String类型的数据发布者，JDK 9自带的 // SubmissionPublisher实现了 Publisher SubmissionPublisher&lt;String&gt; publisher = new SubmissionPublisher&lt;&gt;(); // 2. 创建处理器，用于接收发布者发布的消息， // 转换后再发送给订阅者 MyProcessor processor = new MyProcessor(); // 3. 发布者和处理器建立订阅的关系 publisher.subscribe(processor); // 4.创建一个订阅者，用于接收处理器的消息 Subscriber&lt;String&gt; subscriber = new Subscriber&lt;&gt;() &#123; private Subscription subscription; @Override public void onSubscribe(Subscription subscription) &#123; this.subscription = subscription; this.subscription.request(1); &#125; @Override public void onNext(String item) &#123; System.out.println("【订阅者】接收消息 &lt;------ " + item + ""); this.subscription.request(1); &#125; @Override public void onError(Throwable throwable) &#123; System.out.println("【订阅者】数据接收出现异常，" + throwable); this.subscription.cancel(); &#125; @Override public void onComplete() &#123; System.out.println("【订阅者】数据接收完毕"); &#125; &#125;; // 5. 处理器和订阅者建立订阅关系 processor.subscribe(subscriber); // 6. 发布者开始发布数据 for (int i = 0; i &lt; 10; i++) &#123; String message = "hello flow api " + i; System.out.println("【发布者】发布消息 ------&gt; " + message); publisher.submit(message); &#125; // 7. 发布结束后，关闭发布者 publisher.close(); // main线程延迟关闭，不然订阅者还没接收完消息，线程就被关闭了 Thread.currentThread().join(2000); &#125;&#125;程序运行结果如下所示：参考文档：https://community.oracle.com/docs/DOC-1006738]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Java 9</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 10 新特性之var]]></title>
    <url>%2Fblog%2FJava10-new-feature-var.html</url>
    <content type="text"><![CDATA[今年3月，Java 10 如期发布，Java 10 是采用新发布周期的第一个版本，提供了 109 项新特性，其中最备受关注的莫过于局部变量的类型推断。所以这里主要记录一下这个特性的用法。看几个Java 10之前声明变量的例子:12345List&lt;String&gt; list = new ArrayList&lt;&gt;();Stream&lt;String&gt; stream = list.stream();InputStreamReader reader = new InputStreamReader(System.in);HttpClient httpClient = HttpClient.newHttpClient();在Java 10 中，只要是编译器能够通过对象类型来确定变量类型的情况下，变量类型声明可以使用var保留字代替：12345var list = new ArrayList&lt;&gt;();var stream = list.stream();var reader = new InputStreamReader(System.in);var httpClient = HttpClient.newHttpClient();引入这个特性使得我们的Java 代码变得更加的简洁易读。除此之外我们也可以在增强for循环中使用var：12345var list = new ArrayList&lt;&gt;();list.add("hello");list.add("java 10");for (var s : list) System.out.println(s);当然，var并不是在何时何地都能使用，用于变量声明时，仅局限于具有构造器的变量或基本数据类型，比如下面这些例子编译是不通过的：1234var a;a = "hello world";var b = &#123;1, 2, 3&#125;;编译器将会告警：]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Java 10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 9 新特性学习]]></title>
    <url>%2Fblog%2FJava-9-Feature.html</url>
    <content type="text"><![CDATA[在Java 8 发布3年多后，Java 9 终于在2017年9月21日正式发布。Java 9 提供了超过150项新功能特性，包括备受期待的模块化系统、 可交互的REPL工具jShell、JDK编译工具、Java公共API和私有代码，以及安全增强、扩展提升和性能管理改善等。在学习这些新特性之前，我们得先安装好JDK 9，JDK 9 下载地址：https://www.oracle.com/technetwork/cn/java/javase/downloads/jdk9-downloads-3848520-zhs.html。模块化Java 9 中的模块化（Module）类似于ES6中的模块化，都是为了解决项目中减少内存的开销，提供可维护性和系统性能而提出的。通俗地说，Java 9 的模块化本质上就是在包（package）上再包裹一层（Module），默认模块里的内容都是隐藏的，只能通过（exports）关键字来暴露模块里的内容，而别的模块需要用到这些内容则需要使用（requires）关键字来导入。下面我们用代码来演示这一个新特性。新建一个Java 工程，然后在工程下面创建一个名为ModuleOne的模块：同样的，我们再创建一个ModuleTwo模块，创建完后项目目录如下所示：接着我们在ModuleOne的src目录下创建cc.mrbird.domain包，并创建一个名为Person的类：1234567891011121314151617181920212223242526272829303132333435package cc.mrbird.domain;public class Person &#123; private String name; private int age; public Person(String name, int age) &#123; this.name = name; this.age = age; &#125; @Override public String toString() &#123; return "Person&#123;" + "name='" + name + '\'' + ", age=" + age + '&#125;'; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public int getAge() &#123; return age; &#125; public void setAge(int age) &#123; this.age = age; &#125;&#125;然后在ModuleTwo的src目录下创建一个cc.mrbid.test包，并且创建一个Test类，用于待会测试。至此，工程目录结构如下所示:我们在ModuleTwo的Test类下试图引入ModuleOne的Person类，会发现是行不通的：正如上面所说，模块里的东西默认都是隐藏的，要让其可以被别的模块使用，需要通过exports关键字来暴露它们。在ModuleOne模块下的src上右键，新建一个module-info.java：代码如下所示:1234module ModuleOne &#123; // 导出包 exports cc.mrbird.domain;&#125;上面代码中导出了cc.mrbird.domain包下的所有内容，对别的模块来说，它们是可见的了。然后同样地在ModuleTwo模块下的src上右键，也新建一个module-info.java，代码如下所示:1234module ModuleTwo &#123; // 导入模块 requires ModuleOne;&#125;这里我们主要做的是将ModuleOne导入进来，所以其暴露的cc.mrbird.domain包下的内容就可以在ModuleTwo下被使用了。这时候回到ModuleTwo模块下的Test类，IDEA会自动帮我们导入需要的类，代码就不会报错了：我们继续在Test类中加入一些内容：上面我们使用了java.util.logging.Logger来打印日志，但是代码编译是不通过的，使用Alt+Enter快捷键后选择第一项，IDEA会自动帮我们在module-info.java文件中导入需要的包，非常方便。导入后，module-info.java下的代码如下所示：12345module ModuleTwo &#123; // 导入模块 requires ModuleOne; requires java.logging;&#125;总的来说，通过模块化来构建项目可以带来以下好处:减少内存的开销；简化各种类库和大型应用的开发和维护；改进其安全性，可维护性，提高性能。jshell命令在Java 9 之前，我们要想使用Java来输出一句hello world或者计算两个数的和都必须创建一个Java项目，然后创建类在里面写main方法来运行。Java 9 后就不必这样了，其提供了REPL工具：jshell。利用 jshell 在没有创建类的情况下直接声明变量，计算表达式，执行语句。即开发时可以在命令行里直接运行 Java 的代码，而无需创建 Java 文件。在JDK 9 的bin目录下有个jshell.exe文件，我们运行它：下面演示一些jshell的常用操作。基本使用在jshell中，代码末尾的;是可选的。导包操作查看所有已经导入的包使用Tab键补全代码查看当前环境下所有有效代码查看当前环境下所有变量查看当前环境下所有方法使用外部代码编辑器来修改add方法界面弹出：修改完毕点击Accept和Exit按钮即可：加载外部代码在桌面新建一个Hello.java文件：1234public void hello() &#123; System.out.println("hello world");&#125;hello();然后使用/open命令执行这个文件：更多关于jshell的功能介绍，可以使用/help命令来查看。接口中的私有方法我们都知道，在JDK 8之前，接口只能包含public static final的成员变量和public abstract修饰的抽象方法；而在JDK 8中，接口中可以定义静态方法和默认方法了；JDK 9的接口又加了新的特性，其允许接口中包含私有的方法，下面这个接口定义在JDK 9 中是合法的：123456789101112131415161718public interface TestInterface &#123; // before jdk 7 : void method1(); // jdk 8: static void method2() &#123; System.out.println("mehtod2"); &#125; default void method3() &#123; System.out.println("mehtod3"); &#125; // jdk 9: private void method4() &#123; System.out.println("mehtod4"); &#125;&#125;Diamond Operator使用升级在Java 9 之前的版本中，我们不能将钻石操作符（Diamond Operator）和匿名实现类放在一起使用，比如下面这个例子在Java 9 之前的版本中编译是不通过的：而在Java 9中取消了这个限制，我们可以通过这个特性来进行一些初始化操作:try使用升级在Java 9 之前，我们可以使用下面这种优雅的方式来进行流的关闭操作：12345try (InputStreamReader reader = new InputStreamReader(System.in)) &#123; reader.read();&#125; catch (IOException e) &#123; e.printStackTrace();&#125;在try后面的括号中声明初始化的流Java会自动帮我们进行关闭操作。Java 9 对这个特性进行了升级，我们可以在try后面的括号中使用已经初始化过的资源，此时的资源是final的：123456InputStreamReader reader = new InputStreamReader(System.in);try (reader) &#123; reader.read();&#125; catch (IOException e) &#123; e.printStackTrace();&#125;如果对reader再次进行赋值操作，编译将不通过：下划线标识符的限制Java 8 中，我们可以使用下划线_作为标识符使用，比如下面这段代码是合法的：12String _ = "mrbird";System.out.println(_);而在Java 9 中，下划线_已经不能用于标识符了：String存储结构变更Java 9 之前，字符串的底层是用char[]进行存储的，Java 9 中，字符串改用成了byte[]进行存储:之所以做出这个改变是因为：大多数String类型对象存储的都是拉丁字符，这些字符只占一个字节，而char能够存储两个字节，所以大部分情况下都浪费了一半的存储空间。Java 9 将String类的内部表示从UTF-16的char数组更改为byte数组加上encoding-flag字段。新String类将根据字符串的内容存储编码为ISO-8859-1 / Latin-1（每个字符一个字节）或UTF-16（每个字符两个字节）的字符。encoding-flag编码标志将指示使用哪种编码。基于String的类如StringBuffer和StringBuilder等也是做出了相同的改变。具体可参考：http://openjdk.java.net/jeps/254。集合的of方法Java 9 之前我们可以使用下面的方式来创建不可变集合：12345678List&lt;Integer&gt; list = Collections.unmodifiableList(Arrays.asList(1, 2, 3));Set&lt;Integer&gt; set = Collections.unmodifiableSet(new HashSet&lt;&gt;(Arrays.asList(1, 2, 3)));Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();map.put("mrbird", 18);map.put("kangkang", 20);Map&lt;String, Object&gt; map1 = Collections.unmodifiableMap(map);Java 9 中的集合类都添加了一个of方法，可以快速的构造不可变集合：123List&lt;Integer&gt; list = List.of(1, 2, 3);Set&lt;Integer&gt; set = Set.of(1, 2, 3);Map&lt;String, Object&gt; map1 = Map.of("mrbird", 18, "kangkang", 20);对不可变集合进行赋值操作将抛出异常：增强的Steam API在 Java 9 中，Stream API变得更好，Stream接口中添加了 4 个新的方法：dropWhile, takeWhile, ofNullable，还有个 iterate方法的新重载方法，可以让你提供一个Predicate（判断条件）来指定什么时候结束迭代。下面举例来演示这几个的用法：takeWhiletakeWhile用于从Stream中获取一部分数据，接收一个Predicate来进行选择。在有序的Stream中，takeWhile返回从开头开始的尽量多的元素。12List&lt;Integer&gt; list = Arrays.asList(45, 43, 76, 87, 42, 77, 90, 73, 67, 88);list.stream().takeWhile(x -&gt; x &lt; 50).forEach(System.out::println);结果输出:程序从头开始判断当前值是否小于50，当判断到第三个元素76时，发现不满足，于是程序就结束了。所以takeWhile不同于过滤器。dropWhiledropWhile的行为与takeWhile相反，返回剩余的元素：12List&lt;Integer&gt; list = Arrays.asList(45, 43, 76, 87, 42, 77, 90, 73, 67, 88);list.stream().dropWhile(x -&gt; x &lt; 50).forEach(System.out::println);程序输出:ofNullableJava 8 中Stream不能完全为null（只有一个元素，且为null），否则会报空指针异常。而Java 9 中的ofNullable 方法允许我们创建一个单元素 Stream，可以包含一个非空元素，也可以创建一个空 Stream：1234567891011121314151617181920// 报 NullPointerException// Stream&lt;Object&gt; stream1 = Stream.of(null);// System.out.println(stream1.count());// 不报异常，允许通过Stream&lt;String&gt; stringStream = Stream.of("AA", "BB", null);System.out.println(stringStream.count()); // 3// 不报异常，允许通过List&lt;String&gt; list = new ArrayList&lt;&gt;();list.add("AA");list.add(null);System.out.println(list.stream().count()); // 2// ofNullable()：允许值完全为 nullStream&lt;Object&gt; stream1 = Stream.ofNullable(null);System.out.println(stream1.count()); // 0Stream&lt;String&gt; stream = Stream.ofNullable("hello world");System.out.println(stream.count()); // 1Steam iterator的重载方法1234// Java 8 中的Stream.iterate(0, x -&gt; x + 1).limit(10).forEach(System.out::println);// 等价于 Java 9 中的Stream.iterate(0, x -&gt; x &lt; 10, x -&gt; x + 1).forEach(System.out::println);除了上面几个新特性外，Java 9 还支持将optional转换为流的操作：1234567891011121314List&lt;String&gt; list = new ArrayList&lt;&gt;();list.add("mrbird");list.add("kangkang");list.add("maria");Optional&lt;List&lt;String&gt;&gt; optional = Optional.of(list);// 流中的元素为 listStream&lt;List&lt;String&gt;&gt; stream = optional.stream();stream.forEach(System.out::println);// 流中的元素为 list中的每个元素Stream&lt;String&gt; stringStream = optional.stream().flatMap(Collection::stream);stringStream.forEach(System.out::println);程序输出：HTTP ClientJava 9 中新增了全新的HttpClient来替代HttpURLConnection，其可以从jdk.incubator.httpclient模块中获取。因为在默认情况下，这个模块是不能根据classpath获取的，需要使用add modules命令选项配置这个模块，将这个模块添加到 classpath中。我们在src下的module-info.java中引入这个模块：1requires jdk.incubator.httpclient;写个基于HttpClient的例子:12345678HttpClient client = HttpClient.newHttpClient();HttpRequest req = HttpRequest.newBuilder(URI.create("https://mrbird.cc")) .GET() .build();HttpResponse&lt;String&gt; response = client.send(req, HttpResponse.BodyHandler.asString());System.out.println(response.statusCode());System.out.println(response.version().name());System.out.println(response.body());输出结果：参考自：https://www.jianshu.com/u/5f70a16b98e7]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Java 9</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot 中的异步调用]]></title>
    <url>%2Fblog%2FSpring-Boot-Async.html</url>
    <content type="text"><![CDATA[通常我们开发的程序都是同步调用的，即程序按照代码的顺序一行一行的逐步往下执行，每一行代码都必须等待上一行代码执行完毕才能开始执行。而异步编程则没有这个限制，代码的调用不再是阻塞的。所以在一些情景下，通过异步编程可以提高效率，提升接口的吞吐量。这节将介绍如何在Spring Boot中进行异步编程。开启异步新建一个Spring Boot项目，版本为2.1.0.RELEASE，并引入spring-boot-starter-web依赖，项目结构如下所示：要开启异步支持，首先得在Spring Boot入口类上加上@EnableAsync注解：1234567@SpringBootApplication@EnableAsyncpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;接下来开始编写异步方法。在com.example.demo路径下新建service包，并创建TestService：1234567891011121314151617181920212223@Servicepublic class TestService &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); @Async public void asyncMethod() &#123; sleep(); logger.info("异步方法内部线程名称：&#123;&#125;", Thread.currentThread().getName()); &#125; public void syncMethod() &#123; sleep(); &#125; private void sleep() &#123; try &#123; TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125;上面的Service中包含一个异步方法asyncMethod（开启异步支持后，只需要在方法上加上@Async注解便是异步方法了）和同步方法syncMethod。sleep方法用于让当前线程阻塞2秒钟。接着在com.example.demo路径下新建controller包，然后创建TestController：1234567891011121314151617181920212223242526272829303132@RestControllerpublic class TestController &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); @Autowired private TestService testService; @GetMapping("async") public void testAsync() &#123; long start = System.currentTimeMillis(); logger.info("异步方法开始"); testService.asyncMethod(); logger.info("异步方法结束"); long end = System.currentTimeMillis(); logger.info("总耗时：&#123;&#125; ms", end - start); &#125; @GetMapping("sync") public void testSync() &#123; long start = System.currentTimeMillis(); logger.info("同步方法开始"); testService.syncMethod(); logger.info("同步方法结束"); long end = System.currentTimeMillis(); logger.info("总耗时：&#123;&#125; ms", end - start); &#125;&#125;启动项目，访问 http://localhost:8080/sync 请求，控制台输出如下：可看到默认程序是同步的，由于sleep方法阻塞的原因，testSync方法执行了2秒钟以上。访问 http://localhost:8080/async ，控制台输出如下：可看到testAsync方法耗时极少，因为异步的原因，程序并没有被sleep方法阻塞，这就是异步调用的好处。同时异步方法内部会新启一个线程来执行，这里线程名称为task - 1。默认情况下的异步线程池配置使得线程不能被重用，每次调用异步方法都会新建一个线程，我们可以自己定义异步线程池来优化。自定义异步线程池在com.example.demo下新建config包，然后创建AsyncPoolConfig配置类：1234567891011121314151617181920@Configurationpublic class AsyncPoolConfig &#123; @Bean public ThreadPoolTaskExecutor asyncThreadPoolTaskExecutor()&#123; ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor(); executor.setCorePoolSize(20); executor.setMaxPoolSize(200); executor.setQueueCapacity(25); executor.setKeepAliveSeconds(200); executor.setThreadNamePrefix("asyncThread"); executor.setWaitForTasksToCompleteOnShutdown(true); executor.setAwaitTerminationSeconds(60); executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy()); executor.initialize(); return executor; &#125;&#125;上面我们通过ThreadPoolTaskExecutor的一些方法自定义了一个线程池，这些方法的含义如下所示：corePoolSize：线程池核心线程的数量，默认值为1（这就是默认情况下的异步线程池配置使得线程不能被重用的原因）。maxPoolSize：线程池维护的线程的最大数量，只有当核心线程都被用完并且缓冲队列满后，才会开始申超过请核心线程数的线程，默认值为Integer.MAX_VALUE。queueCapacity：缓冲队列。keepAliveSeconds：超出核心线程数外的线程在空闲时候的最大存活时间，默认为60秒。threadNamePrefix：线程名前缀。waitForTasksToCompleteOnShutdown：是否等待所有线程执行完毕才关闭线程池，默认值为false。awaitTerminationSeconds：waitForTasksToCompleteOnShutdown的等待的时长，默认值为0，即不等待。rejectedExecutionHandler：当没有线程可以被使用时的处理策略（拒绝任务），默认策略为abortPolicy，包含下面四种策略：callerRunsPolicy：用于被拒绝任务的处理程序，它直接在 execute 方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务。abortPolicy：直接抛出java.util.concurrent.RejectedExecutionException异常。discardOldestPolicy：当线程池中的数量等于最大线程数时、抛弃线程池中最后一个要执行的任务，并执行新传入的任务。discardPolicy：当线程池中的数量等于最大线程数时，不做任何动作。要使用该线程池，只需要在@Async注解上指定线程池Bean名称即可：12345678910@Servicepublic class TestService &#123; ...... @Async("asyncThreadPoolTaskExecutor") public void asyncMethod() &#123; ...... &#125; ......&#125;重启项目，再次访问 http://localhost:8080/async ，控制台输出入下：处理异步回调如果异步方法具有返回值的话，需要使用Future来接收回调值。我们修改TestService的asyncMethod方法，给其添加返回值：123456@Async("asyncThreadPoolTaskExecutor")public Future&lt;String&gt; asyncMethod() &#123; sleep(); logger.info("异步方法内部线程名称：&#123;&#125;", Thread.currentThread().getName()); return new AsyncResult&lt;&gt;("hello async");&#125;泛型指定返回值的类型，AsyncResult为Spring实现的Future实现类：接着改造TestController的testAsync方法：123456789101112131415@GetMapping("async")public String testAsync() throws Exception &#123; long start = System.currentTimeMillis(); logger.info("异步方法开始"); Future&lt;String&gt; stringFuture = testService.asyncMethod(); String result = stringFuture.get(); logger.info("异步方法返回值：&#123;&#125;", result); logger.info("异步方法结束"); long end = System.currentTimeMillis(); logger.info("总耗时：&#123;&#125; ms", end - start); return stringFuture.get();&#125;Future接口的get方法用于获取异步调用的返回值。重启项目，访问 http://localhost:8080/async 控制台输出如下所示:通过返回结果我们可以看出Future的get方法为阻塞方法，只有当异步方法返回内容了，程序才会继续往下执行。get还有一个get(long timeout, TimeUnit unit)重载方法，我们可以通过这个重载方法设置超时时间，即异步方法在设定时间内没有返回值的话，直接抛出java.util.concurrent.TimeoutException异常。比如设置超时时间为60秒：1String result = stringFuture.get(60, TimeUnit.SECONDS);源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/49.Spring-Boot-Async]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot 中处理跨域]]></title>
    <url>%2Fblog%2FSpring-Boot-Deal-CORS.html</url>
    <content type="text"><![CDATA[HTML 5中新增的跨域资源访问（Cross-Origin Resource Sharing）特性可以让我们在开发后端系统的时候决定资源是否允许被跨域访问。所谓跨域指的是域名不同或者端口不同或者协议不同，比如当从mrbrid.cc网站访问mrbird.cc:8080网站资源就会存在跨域问题。Spring从4.2版本开始就提供了跨域的支持，开箱即用。这里介绍如何在Spring Boot开发中解决跨域的问题，主要分为注解驱动和接口编程的方式。模拟跨域要解决跨域问题，我们就得先模拟一个跨域情景。新建Spring Boot项目，版本为2.1.0.RELEASE，并引如下依赖：12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt;项目结构如下所示：在com.example.demo路径下新建controller包，并创建TestController：1234567891011121314@Controllerpublic class TestController &#123; @RequestMapping("index") public String index () &#123; return "index"; &#125; @RequestMapping("hello") @ResponseBody public String hello()&#123; return "hello"; &#125;&#125;然后在resources/templates下新建index.html：123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;跨域测试&lt;/title&gt; &lt;script src="http://libs.baidu.com/jquery/1.11.3/jquery.min.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="hello"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt; $(function () &#123; $.get("http://test.mrbird.cc:8080/hello", function (data) &#123; $("#hello").text(data); &#125;) &#125;)&lt;/script&gt;&lt;/html&gt;编辑本地hosts文件，将http://test.mrbird.cc网址映射到127.0.0.1上：启动项目访问http://localhost:8080/，会发现页面并没有成功显示hello，并且F12观察浏览器控制台会发现其报错了：这是因为我们在http://localhost:8080/域名下试图访问http://test.mrbird.cc:8080下的hello接口，这就存在跨域问题，接下来我们来解决这个问题。注解驱动Spring 4.2后提供了@CrossOrigin注解，该注解可以标注于方法或者类上，包含了以下属性:属性含义value指定所支持域的集合，*表示所有域都支持，默认值为*。这些值对应HTTP请求头中的Access-Control-Allow-Originorigins同valueallowedHeaders允许请求头中的header，默认都支持exposedHeaders响应头中允许访问的header，默认为空methods支持请求的方法，比如GET，POST，PUT等，默认和Controller中的方法上标注的一致。allowCredentials是否允许cookie随请求发送，使用时必须指定具体的域maxAge预请求的结果的有效期，默认30分钟我们来改造TestController中的hello方法：123456@RequestMapping("hello")@ResponseBody@CrossOrigin(value = "*")public String hello() &#123; return "hello";&#125;表示允许所有域都支持，重启项目，再次访问http://localhost:8080/：接口编程除了使用@CrossOrigin注解外，我们可以使用接口编程的方式进行统一配置。在com.example.demo路径下新建config包，然后创建WebConfigurer，实现WebMvcConfigurer，重写addCorsMappings默认实现：12345678910@Configurationpublic class WebConfigurer implements WebMvcConfigurer &#123; @Override public void addCorsMappings(CorsRegistry registry) &#123; registry.addMapping("/**") .allowedOrigins("*") .allowedMethods("GET"); &#125;&#125;上面配置表示允许所有请求支持跨域访问，并且不限定域，但是支持持GET方法。将hello方法上的@CrossOrigin注解注释掉，重启项目，再次访问http://localhost:8080/，结果也是OK的。过滤器实现查看官方文档，发现其还提供了基于过滤器的实现方式：1234567891011@Beanpublic FilterRegistrationBean corsFilter() &#123; UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); CorsConfiguration config = new CorsConfiguration(); config.setAllowCredentials(true); config.addAllowedOrigin("*"); source.registerCorsConfiguration("/**", config); FilterRegistrationBean bean = new FilterRegistrationBean(new CorsFilter(source)); bean.setOrder(0); return bean;&#125;Actuator跨域如果项目里集成了Actuator相关功能，其暴露的接口也支持跨域，只需要在配置文件中添加如下配置即可：ENDPOINTS CORS CONFIGURATION (CorsEndpointProperties)123456management.endpoints.web.cors.allow-credentials= # Whether credentials are supported. When not set, credentials are not supported.management.endpoints.web.cors.allowed-headers= # Comma-separated list of headers to allow in a request. &apos;*&apos; allows all headers.management.endpoints.web.cors.allowed-methods= # Comma-separated list of methods to allow. &apos;*&apos; allows all methods. When not set, defaults to GET.management.endpoints.web.cors.allowed-origins= # Comma-separated list of origins to allow. &apos;*&apos; allows all origins. When not set, CORS support is disabled.management.endpoints.web.cors.exposed-headers= # Comma-separated list of headers to include in a response.management.endpoints.web.cors.max-age=1800s # How long the response from a pre-flight request can be cached by clients. If a duration suffix is not specified, seconds will be used.源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/48.Spring-Boot-CORS-Support]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义Spring Boot 内容协商]]></title>
    <url>%2Fblog%2FSpring-Boot-Diy-Resolver.html</url>
    <content type="text"><![CDATA[内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。HTTP请求头中Content-Type，Accept等内容就是内容协商判断的标准。在Spring Boot中，一个完整的内容协商过程如下图所示：这个过程的核心组件：组件名称说明ContentNegotiationManager内容协商管理器ContentNegotiationStrategy 控制策略MediaType媒体类型HTTP 消息媒体类型，如 text/html@RequestMapping#consumes消费媒体类型请求头 Content-Type 媒体类型映射@RequestMapping#produces生产媒体类型响应头 Content-Type 媒体类型映射HttpMessageConverterHTTP消息转换器接口HTTP 消息转换器，用于反序列化 HTTP 请求或序列化响应WebMvcConfigurerWeb MVC 配置器配置 REST 相关的组件HandlerMethod处理方法@RequestMapping 标注的方法HandlerMethodArgumentResolver处理方法参数解析器用于 HTTP 请求中解析 HandlerMethod 参数内容HandlerMethodReturnValueHandler处理方法返回值解析器用于 HandlerMethod 返回值解析为 HTTP 响应内容HttpMessageConverter为HTTP消息转换接口，Spring根据不同的媒体类型进行了相应的实现。比如上图中Accept为application/json，所以在第7步中，会选择使用HttpMessageConverter的实现类MappingJackson2HttpMessageConverter来处理返回值。自定义HttpMessageConverter除了Spring给我们提供的HttpMessageConverter实现外，我们也可以自定义HttpMessageConverter的实现，来处理一些实际业务需求。假如现在要实现一个用于处理 Content-Type 为 text/properties 媒体类型的 HttpMessageConverter 实现类 PropertiesHttpMessageConverter，当我们在请求体中传输下面内容时：12name:mrbridage:18能够自动转换为Properties对象。我们可以参照MappingJackson2HttpMessageConverter的实现方式来进行实现，查看MappingJackson2HttpMessageConverter的原型图：所以我们可以通过继承AbstractGenericHttpMessageConverter的方式来实现HttpMessageConverter接口。新建Spring Boot项目，版本为2.1.0.RELEASE，并引入spring-boot-starter-web依赖，项目结构如下所示:我们在com.example.demo路径下新建converter包，然后创建PropertiesHttpMessageConverter，继承AbstractGenericHttpMessageConverter：1234567891011121314public class PropertiesHttpMessageConverter extends AbstractGenericHttpMessageConverter&lt;Properties&gt; &#123; @Override protected void writeInternal(Properties properties, Type type, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException &#123; &#125; @Override protected Properties readInternal(Class&lt;? extends Properties&gt; clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException &#123; return null; &#125; @Override public Properties read(Type type, Class&lt;?&gt; contextClass, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException &#123; return null; &#125;&#125;其中readxxx为反序列化过程，即将HTTP请求反序列化为参数的过程；writeInternal为序列化过程，将响应序列化。反序列化过程我们继续编写PropertiesHttpMessageConverter：1234567891011121314151617181920212223242526272829303132333435public class PropertiesHttpMessageConverter extends AbstractGenericHttpMessageConverter&lt;Properties&gt; &#123; @Override protected void writeInternal(Properties properties, Type type, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException &#123; &#125; @Override protected Properties readInternal(Class&lt;? extends Properties&gt; clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException &#123; Properties properties = new Properties(); // 获取请求头 HttpHeaders headers = inputMessage.getHeaders(); // 获取 content-type MediaType contentType = headers.getContentType(); // 获取编码 Charset charset = null; if (contentType != null) &#123; charset = contentType.getCharset(); &#125; charset = charset == null ? Charset.forName("UTF-8") : charset; // 获取请求体 InputStream body = inputMessage.getBody(); InputStreamReader inputStreamReader = new InputStreamReader(body, charset); properties.load(inputStreamReader); return properties; &#125; @Override public Properties read(Type type, Class&lt;?&gt; contextClass, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException &#123; return readInternal(null, inputMessage); &#125;&#125;在readInternal方法中，我们获取了HTTP请求体中的输入流和编码，然后调用Properties对象的load方法来将流转换为Properties对象。反序列化过程完成了，我们还需将PropertiesHttpMessageConverter添加到HttpMessageConverter集合中。在com.example.demo路径下新建config包，然后创建WebConfigurer配置类：1234567@Configurationpublic class WebConfigurer implements WebMvcConfigurer &#123; public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123; converters.add(new PropertiesHttpMessageConverter()); &#125;&#125;extendMessageConverters方法为WebMvcConfigurer的默认方法，这里我们重写这个方法，用于将PropertiesHttpMessageConverter添加到消息转换器集合中。接着创建一个Controller来测试一波，在com.example.demo路径下新建controller包，然后创建TestController：12345678@RestControllerpublic class TestController &#123; @GetMapping(value = "test", consumes = "text/properties") public Properties test(@RequestBody Properties properties) &#123; return properties; &#125;&#125;我们通过@GetMapping注解的consumes属性指定了方法接收的媒体类型为text/properties，如果方法能够成功被调用，并且可以返回Properties对象，则说明我们自定义的HTTP消息转换器是可行的。启动项目，使用PostMan访问：请求头中指定Content-Type为text/properties，请求体内容如下所示:访问后，控制台输出错误如下：1Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public java.util.Properties com.example.demo.controller.TestController.test(java.util.Properties)]为什么呢？因为我们在自定义PropertiesHttpMessageConverter的时候需要在其构造器中指定它能够处理的媒体类型，我们查看MappingJackson2HttpMessageConverter的构造器，看看它是怎么实现的：所以我们在PropertiesHttpMessageConverter的构造器中添加相应的媒体类型：123public PropertiesHttpMessageConverter() &#123; super(new MediaType("text", "properties"));&#125;这时候，重启项目，再次访问上面的请求，可看到响应如下所示:序列化过程序列化的过程就是处理HTTP响应的过程，对应PropertiesHttpMessageConverter的writeInternal方法。那为什么我们都还实现这个方法，上面的Controller请求却能返回正常的JSON内容呢？两个原因：这里我们定义的是REST接口，所以响应默认会被序列化为JSON格式；由于使用converters.add(new PropertiesHttpMessageConverter());这种方式来添加自定义HTTP消息处理器默认会被添加到集合的末尾，在处理JSON响应的时候被排在前面的MappingJackson2HttpMessageConverter优先处理了。我们可以通过debug来查看PropertiesHttpMessageConverter是否真的被添加到集合末尾了：所以我们要换下面这种方式来添加自定义HTTP处理器：123456789@Configurationpublic class WebConfigurer implements WebMvcConfigurer &#123; public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) &#123; // converters.add(new PropertiesHttpMessageConverter()); // 指定顺序，这里为第一个 converters.add(0, new PropertiesHttpMessageConverter()); &#125;&#125;我们重启项目，再次debug：可看到，PropertiesHttpMessageConverter已经排在第一个了。这时候再次访问上面的请求，响应如下所示:没有任何返回值，这是因为我们还没实现writeInternal呢。继续实现writeInternal方法：123456789101112131415161718192021222324252627public class PropertiesHttpMessageConverter extends AbstractGenericHttpMessageConverter&lt;Properties&gt; &#123; ... @Override protected void writeInternal(Properties properties, Type type, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException &#123; // 获取请求头 HttpHeaders headers = outputMessage.getHeaders(); // 获取 content-type MediaType contentType = headers.getContentType(); // 获取编码 Charset charset = null; if (contentType != null) &#123; charset = contentType.getCharset(); &#125; charset = charset == null ? Charset.forName("UTF-8") : charset; // 获取请求体 OutputStream body = outputMessage.getBody(); OutputStreamWriter outputStreamWriter = new OutputStreamWriter(body, charset); properties.store(outputStreamWriter, "Serialized by PropertiesHttpMessageConverter#writeInternal"); &#125; ...&#125;过程和反序化差不多，这里是通过Properties对象的store方法来进行写操作。重启项目，再次访问上面的请求，响应如下所示：自定义HandlerMethodArgumentResolver上面这种方式必须依赖于@RequestBody和@ResponseBody注解，除此之外我们还可以通过自定义HandlerMethodArgumentResolver和HandlerMethodReturnValueHandler实现类的方式来处理内容协商。HandlerMethodArgumentResolver俗称方法参数解析器，用于解析由@RequestMapping注解（或其派生的注解）所标注的方法的参数。这里我们开始通过实现HandlerMethodArgumentResolver的方式来将HTTP请求体的内容自动解析为Properties对象。在com.example.demo路径下新建resolver包，然后创建PropertiesHandlerMethodReturnValueHandler实现HandlerMethodArgumentResolver接口：12345678910111213141516171819202122232425public class PropertiesHandlerMethodArgumentResolver implements HandlerMethodArgumentResolver &#123; @Override public boolean supportsParameter(MethodParameter parameter) &#123; return Properties.class.equals(parameter.getParameterType()); &#125; @Override public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception &#123; ServletWebRequest servletWebRequest = (ServletWebRequest) webRequest; HttpServletRequest request = servletWebRequest.getRequest(); String contentType = request.getHeader("Content-Type"); MediaType mediaType = MediaType.parseMediaType(contentType); // 获取编码 Charset charset = mediaType.getCharset() == null ? Charset.forName("UTF-8") : mediaType.getCharset(); // 获取输入流 InputStream inputStream = request.getInputStream(); InputStreamReader inputStreamReader = new InputStreamReader(inputStream, charset); // 输入流转换为 Properties Properties properties = new Properties(); properties.load(inputStreamReader); return properties; &#125;&#125;方法supportsParameter用于指定支持解析的参数类型，这里为Properties类型。resolveArgument方法用于实现解析逻辑，解析过程和上面定义的PropertiesHttpMessageConverter的readInternal方法类似。接着，我们还需将PropertiesHandlerMethodArgumentResolver添加到Spring自带的HandlerMethodArgumentResolver实现类集合中。值得注意的是，我们不能在配置类WebMvcConfigurer中通过重写addArgumentResolvers的方式来添加，查看该方法源码上的注释：大致意思是通过这个方法来添加的方法参数解析器不会覆盖Spring内置的方法参数解析器，如果需要这么做的话，可以直接通过修改RequestMappingHandlerAdapter来实现。所以我们可以通过下面这个方式来实现：1234567891011121314151617181920@Configurationpublic class WebConfigurer implements WebMvcConfigurer &#123; @Autowired private RequestMappingHandlerAdapter requestMappingHandlerAdapter; @PostConstruct public void init() &#123; // 获取当前 RequestMappingHandlerAdapter 所有的 ArgumentResolver对象 List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers = requestMappingHandlerAdapter.getArgumentResolvers(); List&lt;HandlerMethodArgumentResolver&gt; newArgumentResolvers = new ArrayList&lt;&gt;(argumentResolvers.size() + 1); // 添加 PropertiesHandlerMethodArgumentResolver 到集合第一个位置 newArgumentResolvers.add(0, new PropertiesHandlerMethodArgumentResolver()); // 将原 ArgumentResolver 添加到集合中 newArgumentResolvers.addAll(argumentResolvers); // 重新设置 ArgumentResolver对象集合 requestMappingHandlerAdapter.setArgumentResolvers(newArgumentResolvers); &#125;&#125;我们在WebConfigurer配置类装配完毕的时候，通过requestMappingHandlerAdapter对象的setArgumentResolvers方法来重新设置方法解析器集合，将PropertiesHandlerMethodArgumentResolver添加到集合的第一个位置。之所以要将PropertiesHandlerMethodArgumentResolver添加到第一个位置是因为Properties本质也是一个Map对象，而Spring内置的MapMethodProcessor就是用于处理Map参数类型的，如果不将PropertiesHandlerMethodArgumentResolver优先级提高，那么Properties类型参数会被MapMethodProcessor解析，从而出错。配置完毕后，我们改造一下TestController：12345678910111213141516// @RestController@Controllerpublic class TestController &#123; @GetMapping(value = "test", consumes = "text/properties") @ResponseBody public Properties test(@RequestBody Properties properties) &#123; return properties; &#125; @GetMapping(value = "test1", consumes = "text/properties") @ResponseBody public Properties test1(Properties properties) &#123; return properties; &#125;&#125;test1方法的参数没有被@RequestBody标注，启动项目，访问下面这个请求：可以看到方法成功执行，并且返回了正确的内容，说明我们自定义的方法参数解析器PropertiesHandlerMethodArgumentResolver是可行的。但是方法的返回值还是由PropertiesHttpMessageConverter的writeInternal方法解析的，并且依赖于@ResponseBody注解，接着我们开始实现自定义方法返回值解析器，并且不依赖于@ResponseBody注解。自定义HandlerMethodReturnValueHandlerHandlerMethodArgumentResolver俗称方法返回值解析器，用于解析由@RequestMapping注解（或其派生的注解）所标注的方法的返回值。这里我们开始通过实现HandlerMethodReturnValueHandler的方式来自定义一个用于处理返回值类型为Properties类型的解析器。在com.example.demo路径下新建handler包，然后创建PropertiesHandlerMethodReturnValueHandler实现HandlerMethodReturnValueHandler：1234567891011121314151617181920212223242526272829303132333435public class PropertiesHandlerMethodReturnValueHandler implements HandlerMethodReturnValueHandler &#123; @Override public boolean supportsReturnType(MethodParameter returnType) &#123; return Properties.class.equals(returnType.getMethod().getReturnType()); &#125; @Override public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception &#123; Properties properties = (Properties) returnValue; ServletWebRequest servletWebRequest = (ServletWebRequest) webRequest; HttpServletResponse response = servletWebRequest.getResponse(); ServletServerHttpResponse servletServerHttpResponse = new ServletServerHttpResponse(response); // 获取请求头 HttpHeaders headers = servletServerHttpResponse.getHeaders(); MediaType contentType = headers.getContentType(); // 获取编码 Charset charset = null; if (contentType != null) &#123; charset = contentType.getCharset(); &#125; charset = charset == null ? Charset.forName("UTF-8") : charset; // 获取请求体 OutputStream body = servletServerHttpResponse.getBody(); OutputStreamWriter outputStreamWriter = new OutputStreamWriter(body, charset); properties.store(outputStreamWriter, "Serialized by PropertiesHandlerMethodReturnValueHandler#handleReturnValue"); &#125;&#125;supportsReturnType方法指定了处理返回值的类型，handleReturnValue方法用于处理返回值，这里的逻辑和PropertiesHttpMessageConverter的writeInternal方法基本一致，不再赘述。接着将PropertiesHandlerMethodReturnValueHandler添加到到Spring自带的HandlerMethodReturnValueHandler实现类集合中，添加方式和自定义HandlerMethodArgumentResolver一致：123456789101112131415161718192021222324252627282930@Configurationpublic class WebConfigurer implements WebMvcConfigurer &#123; @Autowired private RequestMappingHandlerAdapter requestMappingHandlerAdapter; @PostConstruct public void init() &#123; // 获取当前 RequestMappingHandlerAdapter 所有的 ArgumentResolver对象 List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers = requestMappingHandlerAdapter.getArgumentResolvers(); List&lt;HandlerMethodArgumentResolver&gt; newArgumentResolvers = new ArrayList&lt;&gt;(argumentResolvers.size() + 1); // 添加 PropertiesHandlerMethodArgumentResolver 到集合第一个位置 newArgumentResolvers.add(0, new PropertiesHandlerMethodArgumentResolver()); // 将原 ArgumentResolver 添加到集合中 newArgumentResolvers.addAll(argumentResolvers); // 重新设置 ArgumentResolver对象集合 requestMappingHandlerAdapter.setArgumentResolvers(newArgumentResolvers); // 获取当前 RequestMappingHandlerAdapter 所有的 returnValueHandlers对象 List&lt;HandlerMethodReturnValueHandler&gt; returnValueHandlers = requestMappingHandlerAdapter.getReturnValueHandlers(); List&lt;HandlerMethodReturnValueHandler&gt; newReturnValueHandlers = new ArrayList&lt;&gt;(returnValueHandlers.size() + 1); // 添加 PropertiesHandlerMethodReturnValueHandler 到集合第一个位置 newReturnValueHandlers.add(0, new PropertiesHandlerMethodReturnValueHandler()); // 将原 returnValueHandlers 添加到集合中 newReturnValueHandlers.addAll(returnValueHandlers); // 重新设置 ReturnValueHandlers对象集合 requestMappingHandlerAdapter.setReturnValueHandlers(newReturnValueHandlers); &#125;&#125;配置好后，我们将TestController的test1方法的@ResponseBody注解去掉，重启项目，再次访问:可以看到，返回值成功被PropertiesHandlerMethodReturnValueHandler的handleReturnValue方法解析了。但是这里还有一个问题，我们查看控制台，会发现如下异常:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950javax.servlet.ServletException: Circular view path [test1]: would dispatch back to the current handler URL [/test1] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.) at org.springframework.web.servlet.view.InternalResourceView.prepareForRendering(InternalResourceView.java:209) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:147) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:316) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:998) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:890) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:875) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE] at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.12.jar:9.0.12] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE] at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) [tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) [tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770) [tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415) [tomcat-embed-core-9.0.12.jar:9.0.12] at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.12.jar:9.0.12] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_171] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_171] at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.12.jar:9.0.12] at java.lang.Thread.run(Thread.java:748) [na:1.8.0_171]这是因为，在Spring中如果Controller中的方法没有被@ResponseBody标注的话，默认会把返回值当成视图的名称，而这里我们并不希望解析的Properties值被当成视图名称，所以我们需要在PropertiesHandlerMethodReturnValueHandler的handleReturnValue方法最后一行添加如下代码：12// 告诉 Spring MVC 请求已经处理完毕mavContainer.setRequestHandled(true);这行代码告诉Spring，请求已经成功完成了，无需进行后续的处理。重启项目再次访问上面的请求，控制台便不再抛异常了。源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/47.Spring-Boot-Content-Negotiation]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot配合Hibernate Validator参数校验]]></title>
    <url>%2Fblog%2FSpring-Boot-Hibernate-Validator-Params-Check.html</url>
    <content type="text"><![CDATA[Spring Boot中结合Hibernate Validator可以实现优雅的参数校验，而不必在业务代码中写一大堆的参数校验逻辑。Hibernate Validator的基本使用可以参考Spring表单校验，这里介绍一种结合全局异常捕获的方式来实现低耦合简洁的参数校验解决方案。方法参数校验新建一个Spring Boot工程，版本为2.1.0.RELEASE，artifactId为validator，并引入spring-boot-starter-web和commons-lang3依赖：1234567891011 &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;项目结构如下所示：spring-boot-starter-web已经包含了hibernate-validator，所以无需单独引入： 在com.example.demo下新建controller包，然后创建TestController，定义一个test1方法：1234567891011@RestController@Validatedpublic class TestController &#123; @GetMapping("test1") public String test1( @NotBlank(message = "&#123;required&#125;") String name, @Email(message = "&#123;invalid&#125;") String email) &#123; return "success"; &#125;&#125;test1方法的name参数使用@NotBlank标注，表示不能为空，提示信息为{required}占位符里的内容；email参数使用@Email注解标注，表示必须为一个合法的邮箱值（可以为空），提示信息为{invalid}占位符里的内容。要让参数校验生效，我们还需在类上使用@Validated注解标注。接下来定义上面两个占位符的内容。在resources目录下新建ValidationMessages.properties文件，内容如下：12required=\u4e0d\u80fd\u4e3a\u7a7ainvalid=\u683c\u5f0f\u4e0d\u5408\u6cd5内容为中文转Unicode后的值，可以使用http://tool.chinaz.com/tools/unicode.aspx网站转换，\u4e0d\u80fd\u4e3a\u7a7a转为中文为“不能为空”，\u683c\u5f0f\u4e0d\u5408\u6cd5转为中文为“格式不合法”。启动项目，使用Postman进行测试，参数内容如下所示：这里name参数值为空，email参数值为123，访问后，控制台输出异常如下：可见，使用这种方式参数校验不通过时，会抛出javax.validation.ConstraintViolationException，我们使用全局异常捕获来处理这种异常：在com.example.demo下新建handler包，然后创建GlobalExceptionHandler：123456789101112131415161718192021222324@RestControllerAdvice@Order(value = Ordered.HIGHEST_PRECEDENCE)public class GlobalExceptionHandler &#123; /** * 统一处理请求参数校验(普通传参) * * @param e ConstraintViolationException * @return FebsResponse */ @ExceptionHandler(value = ConstraintViolationException.class) @ResponseStatus(HttpStatus.BAD_REQUEST) public String handleConstraintViolationException(ConstraintViolationException e) &#123; StringBuilder message = new StringBuilder(); Set&lt;ConstraintViolation&lt;?&gt;&gt; violations = e.getConstraintViolations(); for (ConstraintViolation&lt;?&gt; violation : violations) &#123; Path path = violation.getPropertyPath(); String[] pathArr = StringUtils.splitByWholeSeparatorPreserveAllTokens(path.toString(), "."); message.append(pathArr[1]).append(violation.getMessage()).append(","); &#125; message = new StringBuilder(message.substring(0, message.length() - 1)); return message.toString(); &#125;&#125;上面主要的逻辑是获取校验不通过的参数名称，然后拼接上提示信息，并且HTTP返回状态码为400。重启项目，再次访问刚刚的链接，响应如下所示：使用实体传参当参数较少的时候可以使用上面这种方式，但如果参数众多上面的方式就略显繁琐了。这时候我们可以使用实体对象来进行传参。为了模拟这种情况，我们在com.example.demo路径下新建domain包，然后新建User类：12345678910111213141516171819202122232425public class User implements Serializable &#123; private static final long serialVersionUID = -2731598327208972274L; @NotBlank(message = "&#123;required&#125;") private String name; @Email(message = "&#123;invalid&#125;") private String email; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getEmail() &#123; return email; &#125; public void setEmail(String email) &#123; this.email = email; &#125;&#125;接着在TestController里创建一个test2方法:1234@GetMapping("test2")public String test2(@Valid User user) &#123; return "success";&#125;使用实体对象传参的方式参数校验需要在相应的参数前加上@Valid注解。重启项目，再次访问下面这个请求： 控制台会输出如下信息:123Resolved [org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errorsField error in object &apos;user&apos; on field &apos;name&apos;: rejected value []; codes [NotBlank.user.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.name,name]; arguments []; default message [name]]; default message [不能为空]Field error in object &apos;user&apos; on field &apos;email&apos;: rejected value [123]; codes [Email.user.email,Email.email,Email.java.lang.String,Email]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@5fb82092,org.springframework.validation.beanvalidation.SpringValidatorAdapter$ResolvableAttribute@cc0c307]; default message [格式不合法]]这时候我们需要在GlobalExceptionHandler捕获org.springframework.validation.BindException异常：123456789101112131415161718/** * 统一处理请求参数校验(实体对象传参) * * @param e BindException * @return FebsResponse */@ExceptionHandler(BindException.class)@ResponseStatus(HttpStatus.BAD_REQUEST)public String validExceptionHandler(BindException e) &#123; StringBuilder message = new StringBuilder(); List&lt;FieldError&gt; fieldErrors = e.getBindingResult().getFieldErrors(); for (FieldError error : fieldErrors) &#123; message.append(error.getField()).append(error.getDefaultMessage()).append(","); &#125; message = new StringBuilder(message.substring(0, message.length() - 1)); return message.toString();&#125;重启项目，再次访问刚刚的请求，响应如下所示:我们将请求参数改为合法的内容：点击访问，响应如下所示:源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/46.Spring-Boot-Hibernate-Validator]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入学习Spring Boot中的SpringApplication]]></title>
    <url>%2Fblog%2Fdeepin-springboot-application.html</url>
    <content type="text"><![CDATA[在Spring Boot的入口类中，我们通常是通过调用SpringApplication的run方法来启动Spring Boot项目。这节我们来深入学习下SpringApplication的一些细节。自定义SpringApplication默认的我们都是直接通过SpringApplication的run方法来直接启动Spring Boot，其实我们可以通过一些API来调整某些行为。通过SpringApplication API调整我们新建一个SpringBoot项目，Spring Boot版本为2.1.0.RELEASE，artifactId为SpringApplication，并引入spring-boot-starter-web依赖。项目结构如下所示:我们将入口类的代码改为：12345SpringApplication application = new SpringApplication(DemoApplication.class);application.setBannerMode(Banner.Mode.OFF);application.setWebApplicationType(WebApplicationType.NONE);application.setAdditionalProfiles("dev");application.run(args);通过调用SpringApplication的方法，我们关闭了Banner的打印，设置应用环境为非WEB应用，profiles指定为dev。除此之外，SpringApplication还包含了许多别的方法，具体可以查看源码或者官方文档：通过SpringApplicationBuilder API调整SpringApplicationBuilder提供了Fluent API，可以实现链式调用，下面的代码和上面的效果一致，但在编写上较为方便：12345new SpringApplicationBuilder(DemoApplication.class) .bannerMode(Banner.Mode.OFF) .web(WebApplicationType.NONE) .profiles("dev") .run(args);SpringApplication准备阶段SpringApplicaiton的生命周期阶段大致可以分为准备阶段和运行阶段。我们通过源码来查看SpringApplication的有参构造器：通过有参构造器里的代码我们可以将SpringApplication的准备阶段分为以下几个步骤：配置源构造器中this.primarySources = new LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));这行代码用于加载我们配置的Spring Boot Bean源。通常我们使用SpringApplication或者SpringApplicationBuilder的构造器来直接指定源。所谓的Spring Boot Bean源指的是某个被@SpringBootApplication注解标注的类，比如入口类：我们也可以将上面的代码改为下面这种方式：123456789101112public class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication application = new SpringApplication(ApplicationResource.class); application.run(args); &#125; @SpringBootApplication public static class ApplicationResource &#123; &#125;&#125;这样也是可行的。查看SpringApplicaiton的单个参数构造器：说明我们除了配置单个源外，还可以配置多个源。推断应用类型构造器中这行this.webApplicationType = WebApplicationType.deduceFromClasspath();代码用于推断当前Spring Boot应用类型。Spring Boot 2.0后，应用可以分为下面三种类型：WebApplicationType.NONE：非WEB类型；WebApplicationType.REACTIVE：Web Reactive类型；WebApplicationType.SERVLET：Web Servlet类型。WebApplicationType.deduceFromClasspath()或根据当前应用ClassPath中是否存在相关的实现类来判断应用类型到底是哪个，deduceFromClasspath方法的源码如下所示:我们也可以直接通过SpringApplication的setWebApplicationType方法或者SpringApplicationBuilder的web方法来指定当前应用的类型。加载应用上下文初始器接着下一行代码setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));用于加载应用上下文初始器ApplicationContextInitializer。getSpringFactoriesInstances方法的源码如下所示：上面代码利用Spring工厂加载机制，实例化ApplicationContextInitializer实现类，并进行排序。所以我们可以通过实现ApplicationContextInitializer接口用于在Spring Boot应用初始化之前执行一些自定义操作。举个例子，在com.example.demo下新建initializer包，然后创建一个HelloApplicationContextInitializer类，实现ApplicationContextInitializer接口：1234567@Order(Ordered.HIGHEST_PRECEDENCE)public class HelloApplicationContextInitializer implements ApplicationContextInitializer &#123; @Override public void initialize(ConfigurableApplicationContext applicationContext) &#123; System.out.println("ConfigurableApplicationContext.id - " + applicationContext.getId()); &#125;&#125;上面代码中实现了initialize方法，并且使用@Order注解指定优先级。其中Ordered.HIGHEST_PRECEDENCE等于Integer.MIN_VALUE，Ordered.LOWEST_PRECEDENCE等于Integer.MAX_VALUE。所以数值越小，优先级越高。除了使用@Order注解来指定优先级外，我们也可以通过实现org.springframework.core.Ordered接口的getOrder方法来指定优先级。接着我们来创建一个优先级比HelloApplicationContextInitializer低的Initializer —— AfterHelloApplicationContextInitializer：1234567891011public class AfterHelloApplicationContextInitializer implements ApplicationContextInitializer, Ordered &#123; @Override public void initialize(ConfigurableApplicationContext applicationContext) &#123; System.out.println("AfterHelloApplicationContextInitializer: " + applicationContext.getId()); &#125; @Override public int getOrder() &#123; return Ordered.LOWEST_PRECEDENCE; &#125;&#125;上面通过getOrder方法来指定了优先级为最低优先级。创建好后，我们还需在工厂配置文件里配置这两个实现类。在resources目录下新建META-INF目录，并创建spring.factories文件：1234# Initializersorg.springframework.context.ApplicationContextInitializer=\com.example.demo.initializer.HelloApplicationContextInitializer,\com.example.demo.initializer.AfterHelloApplicationContextInitializer这时候，启动Spring Boot项目，会发现控制台在打印Banner后就执行了这两个初始化器，并且HelloApplicationContextInitializer的initialize方法执行时机先于AfterHelloApplicationContextInitializer的initialize方法：加载应用事件监听器在加载完应用上下文初始器后，下一行的setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));代码加载了应用事件监听器。与加载事件上下文初始器类似，Spring Boot也是通过Spring的工厂方法来实例化ApplicationListener的实现类，并进行排序。既然是事件监听，那么其可以监听什么事件呢？其监听的是ApplicationEvent接口的实现类，我们查看一下都有哪些事件实现了这个接口：这里我们以ContextClosedEvent为例子来编写自定义的应用事件监听器，监听Spring上下文关闭事件。在com.example.demo下新建listener包，然后创建一个ContextClosedEventListener类，实现ApplicationListener接口：12345678@Order(Ordered.HIGHEST_PRECEDENCE)public class ContextClosedEventListener implements ApplicationListener&lt;ContextClosedEvent&gt; &#123; @Override public void onApplicationEvent(ContextClosedEvent event) &#123; System.out.println("ContextClosedEvent: " + event.getApplicationContext().getId()); &#125;&#125;上面代码实现了对ContextClosedEvent事件的监听，并且分配了最高优先级。接着创建一个优先级比ContextClosedEventListener低的上面代码实现了对ContextClosedEvent事件监听器AfterContextClosedEventListener：1234567891011public class AfterContextClosedEventListener implements ApplicationListener&lt;ContextClosedEvent&gt;, Ordered &#123; @Override public void onApplicationEvent(ContextClosedEvent event) &#123; System.out.println("AfterContextClosedEventr: " + event.getApplicationContext().getId()); &#125; @Override public int getOrder() &#123; return Ordered.HIGHEST_PRECEDENCE + 1; &#125;&#125;最后，别忘了在Spring工厂配置文件里进行配置：1234# Application Listenersorg.springframework.context.ApplicationListener=\com.example.demo.listener.ContextClosedEventListener,\com.example.demo.listener.AfterContextClosedEventListener在Spring Boot入口类中将环境指定为非WEB环境（这样在启动后应用会马上关闭）:123new SpringApplicationBuilder(DemoApplication.class) .web(WebApplicationType.NONE) .run(args);运行Spring Boot入口类，控制台输出如下： 推断入口类接着构造器里的代码下一行this.mainApplicationClass = deduceMainApplicationClass();用于推断运行Spring Boot应用的入口类。查看deduceMainApplicationClass方法源码：代码主要逻辑是根据Main线程执行堆栈判断实际的入口类。准备阶段介绍完毕后，接下来开始介绍运行阶段。SpringApplication运行阶段SpringApplication的运行阶段对应SpringApplication的run方法，我们查看其源码：12345678910111213141516171819202122232425262728293031323334353637383940414243public ConfigurableApplicationContext run(String... args) &#123; StopWatch stopWatch = new StopWatch(); stopWatch.start(); ConfigurableApplicationContext context = null; Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = new ArrayList&lt;&gt;(); configureHeadlessProperty(); SpringApplicationRunListeners listeners = getRunListeners(args); listeners.starting(); try &#123; ApplicationArguments applicationArguments = new DefaultApplicationArguments( args); ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); configureIgnoreBeanInfo(environment); Banner printedBanner = printBanner(environment); context = createApplicationContext(); exceptionReporters = getSpringFactoriesInstances( SpringBootExceptionReporter.class, new Class[]&#123;ConfigurableApplicationContext.class&#125;, context); prepareContext(context, environment, listeners, applicationArguments, printedBanner); refreshContext(context); afterRefresh(context, applicationArguments); stopWatch.stop(); if (this.logStartupInfo) &#123; new StartupInfoLogger(this.mainApplicationClass) .logStarted(getApplicationLog(), stopWatch); &#125; listeners.started(context); callRunners(context, applicationArguments); &#125; catch (Throwable ex) &#123; handleRunFailure(context, ex, exceptionReporters, listeners); throw new IllegalStateException(ex); &#125; try &#123; listeners.running(context); &#125; catch (Throwable ex) &#123; handleRunFailure(context, ex, exceptionReporters, null); throw new IllegalStateException(ex); &#125; return context;&#125;运行阶段大致可以分为下面这几个过程：开启时间监听run方法开头的这两行代码用于开启时间监听：12StopWatch stopWatch = new StopWatch();stopWatch.start();上面代码用于开启Spring Boot应用启动时间监听，配合下面的stopWatch.stop();便可以计算出完整的启动时间。开启运行监听器run方法的这几行代码用于加载Spring应用运行监听器（SpringApplicationRunListener）：12SpringApplicationRunListeners listeners = getRunListeners(args);listeners.started();getRunListeners方法源码：12345private SpringApplicationRunListeners getRunListeners(String[] args) &#123; Class&lt;?&gt;[] types = new Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;; return new SpringApplicationRunListeners(logger, getSpringFactoriesInstances( SpringApplicationRunListener.class, types, this, args));&#125;上面代码通过SpringFactoriesLoader检索META-INF/spring.factories找到声明的所有SpringApplicationRunListener的实现类并将其实例化，然后装配到List&lt;SpringApplicationRunListener&gt;运行监听器集合中。listeners.started();用于遍历运行监听器集合中的所有SpringApplicationRunListener的实现类，并逐一调用它们的starting方法，广播Spring Boot应用要开始启动了。在Spring Boot中SpringApplicationRunListener接口用于监听整个Spring Boot应用生命周期，其代码如下所示：123456789101112131415public interface SpringApplicationRunListener &#123; void starting(); void environmentPrepared(ConfigurableEnvironment environment); void contextPrepared(ConfigurableApplicationContext context); void contextLoaded(ConfigurableApplicationContext context); void started(ConfigurableApplicationContext context); void running(ConfigurableApplicationContext context); void failed(ConfigurableApplicationContext context, Throwable exception);&#125;这些方法对应着Spring Boot应用生命周期的各个阶段：方法名称对应生命周期Spring Boot起始版本starting()Spring 应用刚启动1.0environmentPrepared(ConfigurableEnvironment)ConfigurableEnvironment 准备完毕，允许将其调整1.0contextPrepared(ConfigurableApplicationContext)ConfigurableApplicationContext 准备完毕，允许将其调整1.0contextLoaded(ConfigurableApplicationContext)ConfigurableApplicationContext 已装载，但仍未启动1.0started(ConfigurableApplicationContext)ConfigurableApplicationContext 已启动，此时 Spring Bean 已初始化完成2.0running(ConfigurableApplicationContext)Spring 应用正在运行2.0failed(ConfigurableApplicationContext,Throwable)Spring 应用运行失败2.0我们在com.example.demo.linstener下自定义一个SpringApplicationRunListener接口实现类HelloSpringApplicationRunListener：12345678910111213141516171819202122232425262728293031323334353637383940public class HelloApplicationRunListener implements SpringApplicationRunListener &#123; public HelloApplicationRunListener(SpringApplication application, String[] args) &#123; &#125; @Override public void starting() &#123; System.out.println("HelloApplicationRunListener starting......"); &#125; @Override public void environmentPrepared(ConfigurableEnvironment environment) &#123; &#125; @Override public void contextPrepared(ConfigurableApplicationContext context) &#123; &#125; @Override public void contextLoaded(ConfigurableApplicationContext context) &#123; &#125; @Override public void started(ConfigurableApplicationContext context) &#123; &#125; @Override public void running(ConfigurableApplicationContext context) &#123; &#125; @Override public void failed(ConfigurableApplicationContext context, Throwable exception) &#123; &#125;&#125;通过这个实现类，我们可以在Spring Boot应用刚启动的时候在控制台输出HelloApplicationRunListener starting......。因为其基于Spring的工厂方法来实现，所以我们需要在spring.factories文件里配置这个实现类:123# Run Listenersorg.springframework.boot.SpringApplicationRunListener=\com.example.demo.run.HelloApplicationRunListener启动Spring Boot应用便可以在控制台看到如下输出了：创建 Environmentrun方法中的这行代码用于创建并配置当前SpringBoot应用将要使用的Environment（包括配置要使用的PropertySource以及Profile）：1ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);我们已经在准备阶段里推断出了应用类型，这里只要根据相应的应用类型来创建相应的应用环境即可，类型和环境对应关系如下：Web Reactive： StandardReactiveWebEnvironmentWeb Servlet： StandardServletEnvironment非 Web： StandardEnvironment在prepareEnvironment方法中会执行listeners.environmentPrepared(environment);，用于遍历调用所有SpringApplicationRunListener实现类的environmentPrepared()方法，广播Environment准备完毕。是否打印Bannerrun方法中的这行代码会根据我们的配置来决定是否打印Banner：1Banner printedBanner = printBanner(environment);创建Contextrun方法中的这行代码用于创建ApplicationContext：1context = createApplicationContext();不同的环境对应不同的ApplicationContext：Web Reactive： AnnotationConfigReactiveWebServerApplicationContextWeb Servlet： AnnotationConfigServletWebServerApplicationContext非 Web： AnnotationConfigApplicationContext装配Contextrun方法中的这行代码用于装配Context：1prepareContext(context, environment, listeners, applicationArguments, printedBanner);方法prepareContext的源码如下所示:123456789101112131415161718192021222324252627private void prepareContext(ConfigurableApplicationContext context, ConfigurableEnvironment environment, SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments, Banner printedBanner) &#123; context.setEnvironment(environment); postProcessApplicationContext(context); applyInitializers(context); listeners.contextPrepared(context); if (this.logStartupInfo) &#123; logStartupInfo(context.getParent() == null); logStartupProfileInfo(context); &#125; // Add boot specific singleton beans ConfigurableListableBeanFactory beanFactory = context.getBeanFactory(); beanFactory.registerSingleton("springApplicationArguments", applicationArguments); if (printedBanner != null) &#123; beanFactory.registerSingleton("springBootBanner", printedBanner); &#125; if (beanFactory instanceof DefaultListableBeanFactory) &#123; ((DefaultListableBeanFactory) beanFactory) .setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding); &#125; // Load the sources Set&lt;Object&gt; sources = getAllSources(); Assert.notEmpty(sources, "Sources must not be empty"); load(context, sources.toArray(new Object[0])); listeners.contextLoaded(context);&#125;prepareContext方法开头为ApplicationContext加载了environment，之后通过applyInitializers方法逐个执行ApplicationContextInitializer的initialize方法来进一步封装ApplicationContext，并调用所有的SpringApplicationRunListener实现类的contextPrepared方法，广播ApplicationContext已经准备完毕了。之后初始化IOC容器，并调用SpringApplicationRunListener实现类的contextLoaded方法，广播ApplicationContext加载完成，这里就包括通过@EnableAutoConfiguration导入的各种自动配置类。Refresh Contextrun方法中的这行代码用于初始化所有自动配置类，并调用ApplicationContext的refresh方法：1refreshContext(context);广播应用已启动run方法中的这行代码用于广播Spring Boot应用已启动：1listeners.started(context);started方法会调用所有的SpringApplicationRunListener的finished方法，广播SpringBoot应用已经成功启动。执行Runnerrun方法中的这行代码callRunners(context, applicationArguments);遍历所有ApplicationRunner和CommandLineRunner的实现类，并执行其run方法。我们可以实现自己的ApplicationRunner或者CommandLineRunner，来对Spring Boot的启动过程进行扩展。我们在com.example.demo下新建runner包，然后创建一个ApplicationRunner的实现类HelloApplicationRunner：1234567@Componentpublic class HelloApplicationRunner implements ApplicationRunner &#123; @Override public void run(ApplicationArguments args) &#123; System.out.println("HelloApplicationRunner: hello spring boot"); &#125;&#125;这里我们需要将HelloApplicationRunner使用@Component注解标注，让其注册到IOC容器中。然后再创建一个CommandLineRunner的实现类HelloCommandLineRunner：1234567@Componentpublic class HelloCommandLineRunner implements CommandLineRunner &#123; @Override public void run(String... args) &#123; System.out.println("HelloCommandLineRunner: hello spring boot"); &#125;&#125;启动Spring Boot应用，便可以在应用刚启动好后看到如下输出：广播应用运行中run方法中的这行代码listeners.running(context);用于调用SpringApplicationRunListener的running方法，广播Spring Boot应用正在运行中。当run方法运行出现异常时，便会调用handleRunFailure方法来处理异常，该方法里会通过listeners.failed(context, exception);来调用SpringApplicationRunListener的failed方法，广播应用启动失败，并将异常扩散出去。上面所有的广播事件都是使用Spring的应用事件广播器接口ApplicationEventMulticaster的实现类SimpleApplicationEventMulticaster来进行广播的。源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/45.Spring-Boot-SpringApplication]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入学习Spring Boot自动装配]]></title>
    <url>%2Fblog%2Fdeepin-springboot-autoconfig.html</url>
    <content type="text"><![CDATA[模式注解Stereotype Annotation俗称为模式注解，Spring中常见的模式注解有@Service，@Repository，@Controller等，它们都“派生”自@Component注解。我们都知道，凡是被@Component标注的类都会被Spring扫描并纳入到IOC容器中，那么由@Component派生的注解所标注的类也会被扫描到IOC容器中。下面我们主要来通过自定义模式注解来了解@Component的“派生性”和“层次性”。@Component “派生性”新建一个Spring Boot工程，Spring Boot版本为2.1.0.RELEASE，artifactId为autoconfig，并引入spring-boot-starter-web依赖。项目结构如下所示:在com.example.demo下新建annotation包，然后创建一个FirstLevelService注解：1234567@Target(&#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Documented@Servicepublic @interface FirstLevelService &#123; String value() default "";&#125;这个注解定义由@Service标注，查看@Service的源码会发现其被@Component注解标注，所以它们的层次关系为:123└─@Component └─@Service └─@FirstLevelService即@FirstLevelService为@Component派生出来的模式注解，我们来测试一下被它标注的类是否能够被扫描到IOC容器中：在com.example.demo下新建service包，然后创建一个TestService类：123@SecondLevelServicepublic class TestService &#123;&#125;在com.example.demo下新建bootstrap包，然后创建一个ServiceBootStrap类，用于测试注册TestService并从IOC容器中获取它：123456789101112@ComponentScan("com.example.demo.service")public class ServiceBootstrap &#123; public static void main(String[] args) &#123; ConfigurableApplicationContext context = new SpringApplicationBuilder(ServiceBootstrap.class) .web(WebApplicationType.NONE) .run(args); TestService testService = context.getBean("testService", TestService.class); System.out.println("TestService Bean: " + testService); context.close(); &#125;&#125;运行该类的main方法，控制台输出如下：@Component “层次性”我们在com.example.demo.annotation路径下再创建一个SecondLevelService注解定义，该注解由上面的@FirstLevelService标注：1234567@Target(&#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Documented@FirstLevelServicepublic @interface SecondLevelService &#123; String value() default "";&#125;这时候层次关系为：1234└─@Component └─@Service └─@FirstLevelService └─@SecondLevelService我们将TestService上的注解换成@SecondLevelService，然后再次运行ServiceBootStrap的main方法，输出如下：可见结果也是成功的。这里有一点需要注意的是：@Component注解只包含一个value属性定义，所以其“派生”的注解也只能包含一个vlaue属性定义。@Enable模块驱动@Enable模块驱动在Spring Framework 3.1后开始支持。这里的模块通俗的来说就是一些为了实现某个功能的组件的集合。通过@Enable模块驱动，我们可以开启相应的模块功能。@Enable模块驱动可以分为“注解驱动”和“接口编程”两种实现方式，下面逐一进行演示：注解驱动Spring中，基于注解驱动的示例可以查看@EnableWebMvc源码：123456@Retention(RetentionPolicy.RUNTIME)@Target(&#123;ElementType.TYPE&#125;)@Documented@Import(&#123;DelegatingWebMvcConfiguration.class&#125;)public @interface EnableWebMvc &#123;&#125;该注解通过@Import导入一个配置类DelegatingWebMvcConfiguration：该配置类又继承自WebMvcConfigurationSupport，里面定义了一些Bean的声明。所以，基于注解驱动的@Enable模块驱动其实就是通过@Import来导入一个配置类，以此实现相应模块的组件注册，当这些组件注册到IOC容器中，这个模块对应的功能也就可以使用了。我们来定义一个基于注解驱动的@Enable模块驱动。在com.example.demo下新建configuration包，然后创建一个HelloWorldConfiguration配置类：12345678@Configurationpublic class HelloWorldConfiguration &#123; @Bean public String hello() &#123; return "hello world"; &#125;&#125;这个配置类里定义了一个名为hello的Bean，内容为hello world。在com.example.demo.annotation下创建一个EnableHelloWorld注解定义：123456@Target(&#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Documented@Import(HelloWorldConfiguration.class)public @interface EnableHelloWorld &#123;&#125;我们在该注解类上通过@Import导入了刚刚创建的配置类。接着在com.example.demo.bootstrap下创建一个TestEnableBootstap启动类来测试@EnableHelloWorld注解是否生效：1234567891011@EnableHelloWorldpublic class TestEnableBootstap &#123; public static void main(String[] args) &#123; ConfigurableApplicationContext context = new SpringApplicationBuilder(TestEnableBootstap.class) .web(WebApplicationType.NONE) .run(args); String hello = context.getBean("hello", String.class); System.out.println("hello Bean: " + hello); context.close(); &#125;&#125;运行该类的main方法，控制台输出如下：说明我们自定义的基于注解驱动的@EnableHelloWorld是可行的。接口编程除了使用上面这个方式外，我们还可以通过接口编程的方式来实现@Enable模块驱动。Spring中，基于接口编程方式的有@EnableCaching注解，查看其源码：1234567891011@Target(&#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Documented@Import(&#123;CachingConfigurationSelector.class&#125;)public @interface EnableCaching &#123; boolean proxyTargetClass() default false; AdviceMode mode() default AdviceMode.PROXY; int order() default 2147483647;&#125;EnableCaching注解通过@Import导入了CachingConfigurationSelector类，该类间接实现了ImportSelector接口，在 深入学习Spring组件注册 中，我们曾介绍了可以通过ImportSelector来实现组件注册。所以通过接口编程实现@Enable模块驱动的本质是：通过@Import来导入接口ImportSelector实现类，该实现类里可以定义需要注册到IOC容器中的组件，以此实现相应模块对应组件的注册。接下来我们根据这个思路来自个实现一遍：在com.example.demo下新建selector包，然后在该路径下新建一个HelloWorldImportSelector实现ImportSelector接口：123456public class HelloWorldImportSelector implements ImportSelector &#123; @Override public String[] selectImports(AnnotationMetadata importingClassMetadata) &#123; return new String[]&#123;HelloWorldConfiguration.class.getName()&#125;; &#125;&#125;如果看不懂上面这段代码含义的朋友可以阅读深入学习Spring组件注册一文。接着我们修改EnableHelloWorld：123456@Target(&#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Documented@Import(HelloWorldImportSelector.class)public @interface EnableHelloWorld &#123;&#125;上面导入的是HelloWorldImportSelector，而非HelloWorldConfiguration。再次运行TestEnableBootstap的main方法，你会发现输出是一样的。自动装配Spring Boot中的自动装配技术底层主要用到了下面这些技术:Spring 模式注解装配Spring @Enable 模块装配Spring 条件装配装（深入学习Spring组件注册中有介绍）Spring 工厂加载机制Spring 工厂加载机制的实现类为SpringFactoriesLoader，查看其源码：该类的方法会读取META-INF目录下的spring.factories配置文件，我们查看spring-boot-autoconfigure-2.1.0.RELEASE.jar下的该文件：当启动类被@EnableAutoConfiguration标注后，上面截图中的所有类Spring都会去扫描，看是否可以纳入到IOC容器中进行管理。比如我们查看org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration的源码：可看到该类上标注了一些注解，其中@Configuration为模式注解，@EnableConfigurationProperties为模块装配技术，ConditionalOnClass为条件装配技术。这和我们上面列出的Spring Boot自动装配底层主要技术一致，所以我们可以根据这个思路来自定义一个自动装配实现。新建一个配置类HelloWorldAutoConfiguration：12345@Configuration@EnableHelloWorld@ConditionalOnProperty(name = "helloworld", havingValue = "true")public class HelloWorldAutoConfiguration &#123;&#125;然后在resources目录下新建META-INF目录，并创建spring.factories文件：123# Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\com.example.demo.configuration.HelloWorldAutoConfiguration接着在配置文件application.properties中添加helloworld=true配置1helloworld=true最后创建EnableAutoConfigurationBootstrap，测试下HelloWorldAutoConfiguration是否生效：123456789101112@EnableAutoConfigurationpublic class EnableAutoConfigurationBootstrap &#123; public static void main(String[] args) &#123; ConfigurableApplicationContext context = new SpringApplicationBuilder(EnableAutoConfigurationBootstrap.class) .web(WebApplicationType.NONE) .run(args); String hello = context.getBean("hello", String.class); System.out.println("hello Bean: " + hello); context.close(); &#125;&#125;运行该main方法，控制台输出如下：说明我们自定义的自动装配已经成功了。下面简要分析下代码的运行逻辑：Spring 的工厂加载机制会自动读取META-INF目录下spring.factories文件内容；我们在spring.factories定义了：12org.springframework.boot.autoconfigure.EnableAutoConfiguration=\com.example.demo.configuration.HelloWorldAutoConfiguration我们在测试类上使用了@EnableAutoConfiguration注解标注，那么HelloWorldAutoConfiguration就会被Spring扫描，看是否符合要求，如果符合则纳入到IOC容器中；HelloWorldAutoConfiguration上的@ConditionalOnProperty的注解作用为：当配置文件中配置了helloworld=true（我们确实添加了这个配置，所以符合要求）则这个类符合扫描规则；@EnableHelloWorld注解是我们前面例子中自定义的模块驱动注解，其引入了hello这个Bean，所以IOC容器中便会存在hello这个Bean了；通过上面的步骤，我们就可以通过上下文获取到hello这个Bean了。源码链接： https://github.com/wuyouzhuguli/SpringAll/tree/master/44.Spring-Boot-Autoconfiguration]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入学习Spring Bean生命周期]]></title>
    <url>%2Fblog%2FSpring-Bean-Lifecycle.html</url>
    <content type="text"><![CDATA[所谓Spring Bean的生命周期指的是Bean从创建到初始化再到销毁的过程，这个过程由IOC容器管理。一个完整的Bean生命周期可以参考Spring Bean生命周期。这里我们主要记录一些和Bean生命周期相关的细节。Bean的初始化和销毁在整个生命周期过程中，我们可以自定义Bean的初始化和销毁钩子函数，当Bean的生命周期到达相应的阶段的时候，Spring会调用我们自定义的Bean的初始化和销毁方法。自定义Bean初始化和销毁方法有多种方式，下面逐一介绍。@Bean上一节中介绍了可以在配置类中通过@Bean注解来注册Bean，我们也可以通过它来指定Bean的初始化和方法。为了演示，我们新建一个Spring Boot项目，然后创建一个User类：1234567891011public class User &#123; public User() &#123; System.out.println("调用无参构造器创建User"); &#125; public void init() &#123; System.out.println("初始化User"); &#125; public void destory() &#123; System.out.println("销毁User"); &#125;&#125;然后在配置类里注册该组件，并指定初始化和销毁方法：12345678@Configurationpublic class WebConfig &#123; @Bean(initMethod = "init", destroyMethod = "destory") public User user() &#123; return new User(); &#125;&#125;其中initMethod = &quot;init&quot;和destroyMethod = &quot;destory&quot;与User类里的init，destory方法相对应。在Spring Boot入口类中测试:12345// 返回 IOC 容器，使用注解配置，传入配置类AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class);User user = context.getBean(User.class);// 关闭 IOC 容器context.close();启动项目，观察控制台输出:从上面的输出我们看出在容器启动之前，先调用对象的无参构造器创建对象，然后调用初始化方法，在容器关闭的时候调用销毁方法。上面的情况是对于单例而言的，如果组件是多例模式又是什么情况呢？我们把上面的组件注册配置改为多例，然后再次启动项目，观察控制台输出:控制台的输出和我们上节讨论的一致，即在多例模式下，IOC容器启动的时候并不会去创建对象，而是在每次获取的时候才会去调用方法创建对象，创建完对象后再调用初始化方法。但在容器关闭后，Spring并没有调用相应的销毁方法，这是因为在多例模式下，容器不会管理这个组件（只负责在你需要的时候创建这个组件），所以容器在关闭的时候并不会调用相应的销毁方法。InitializingBean&amp;DisposableBean除了上面这种方式指定初始化和销毁方法外，Spring还为我们提供了和初始化，销毁相对应的接口：InitializingBean接口包含一个afterPropertiesSet方法，我们可以通过实现该接口，然后在这个方法中编写初始化逻辑。DisposableBean接口包含一个destory方法，我们可以通过实现该接口，然后再这个方法中编写销毁逻辑。新建一个类，名称为Bird，然后实现这两个接口：123456789101112131415public class Bird implements InitializingBean, DisposableBean &#123; public Bird() &#123; System.out.println("调用无参构造器创建Bird"); &#125; @Override public void destroy() &#123; System.out.println("销毁Bird"); &#125; @Override public void afterPropertiesSet() &#123; System.out.println("初始化Bird"); &#125;&#125;在配置类中注册这个组件:1234@Beanpublic Bird bird() &#123; return new Bird();&#125;测试一波：123AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class);System.out.println("容器创建完毕");context.close();启动项目，观察控制台输出:@PostConstruct&amp;@PreDestroy除了上面两种指定初始化和销毁方法的方式外，我们还可以使用@PostConstruct和@PreDestroy注解修饰方法来指定相应的初始化和销毁方法。新建一个类，名称为Fish：123456789101112131415public class Fish &#123; public Fish() &#123; System.out.println("调用无参构造器创建Fish"); &#125; @PostConstruct public void init() &#123; System.out.println("初始化Fish"); &#125; @PreDestroy public void destory() &#123; System.out.println("销毁Fish"); &#125;&#125;在配置类中注册这个组件:1234@Beanpublic Fish fish()&#123; return new Fish();&#125;测试一波：123AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class);System.out.println("容器创建完毕");context.close();启动项目，观察控制台输出:效果和上面两种方式一致。这两个注解并非Spring提供，而是JSR250规范提供。BeanPostProcessorSpring提供了一个BeanPostProcessor接口，俗称Bean后置通知处理器，它提供了两个方法postProcessBeforeInitialization和postProcessAfterInitialization。其中postProcessBeforeInitialization在组件的初始化方法调用之前执行，postProcessAfterInitialization在组件的初始化方法调用之后执行。它们都包含两个入参：bean：当前组件对象；beanName：当前组件在容器中的名称。两个方法都返回一个Object类型，我们可以直接返回当前组件对象，或者包装后返回。我们来定义一个BeanPostProcessor接口的实现类MyBeanPostProcessor：123456789101112public class MyBeanPostProcessor implements BeanPostProcessor &#123; @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &#123; System.out.println(beanName + " 初始化之前调用"); return bean; &#125; @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &#123; System.out.println(beanName + " 初始化之后调用"); return bean; &#125;&#125;在配置类中注册该组件:1234@Beanpublic MyBeanPostProcessor myBeanPostProcessor () &#123; return new MyBeanPostProcessor();&#125;再次启动项目，观察控制台输出:可以看到，BeanPostProcessor对IOC容器中所有组件都生效。源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/51.Spring-Bean-Lifecycle]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入学习Spring组件注册]]></title>
    <url>%2Fblog%2FSpring-Bean-Regist.html</url>
    <content type="text"><![CDATA[接触过Spring的同学肯定都听过IOC。在传统的Java编程中，当需要用到某个对象的时候，我们都是主动地显示创建一个对象实例（new）。使用Spring后就不需要这样做了，因为Spring会帮我们在需要用到某些对象的地方自动注入该对象，而无须我们自己去创建。这种模式俗称控制反转，即IOC（Inversion of Control）。那么Spring是从什么地方获取到我们所需要的对象呢？其实Spring给我们提供了一个IOC容器，里面管理着所有我们需要的对象，组件注册就是我们去告诉Spring哪些类需要交给IOC容器管理。这里主要记录组件注册的一些细节。通过@Bean注册组件在较早版本的Spring中，我们都是通过XML的方式来往IOC容器中注册组件的，下面这段代码大家肯定不会陌生：123// 返回 IOC 容器，基于 XML配置，传入配置文件的位置ApplicationContext applicationContext = new ClassPathXmlApplicationContext("xxx.xml");User user = (User) applicationContext.getBean("user");Spring 4后推荐我们使用Java Config的方式来注册组件。为了演示，我们通过http://start.spring.io/搭建一个简单Spring Boot应用，然后引入Lombok依赖（编辑器也需要安装Lombok插件）：12345&lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;然后创建一个User类：1234567@ToString@AllArgsConstructor@Datapublic class User &#123; private String name; private Integer age;&#125;接着创建一个配置类，在里面通过@Bean注解注册User类：1234567@Configurationpublic class WebConfig &#123; @Bean() public User user() &#123; return new User("mrbird", 18); &#125;&#125;通过@Bean注解，我们向IOC容器注册了一个名称为user（Bean名称默认为方法名，我们也可以通过@Bean(&quot;myUser&quot;)方式来将组件名称指定为myUser）。组件注册完毕后，我们测试一下从IOC容器中获取这个组件。在Spring Boot入口类中编写如下代码：1234567891011@SpringBootApplicationpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); // 返回 IOC 容器，使用注解配置，传入配置类 ApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class); User user = context.getBean(User.class); System.out.println(user); &#125;&#125;因为我们是通过注解方式来注册组件的，所以需要使用AnnotationConfigApplicationContext来获取相应的IOC容器，入参为配置类。启动项目，看下控制台输出：说明组件注册成功。我们将组件的名称改为myUser，然后看看IOC容器中，User类型组件是否叫myUser：1234567891011@SpringBootApplicationpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); ApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class); // 查看 User 这个类在 Spring 容器中叫啥玩意 String[] beanNames = context.getBeanNamesForType(User.class); Arrays.stream(beanNames).forEach(System.out::println); &#125;&#125;启动项目，观察控制台输出:使用@ComponentScan扫描在使用XML配置组件扫描的时候，我们都是这样配置的：1&lt;context:component-scan base-package=""&gt;&lt;/context:component-scan&gt;其中base-package指定了扫描的路径。路径下所有被@Controller、@Service、@Repository和@Component注解标注的类都会被纳入IOC容器中。现在我们脱离XML配置后，可以使用@ComponentScan注解来扫描组件并注册。在使用@ComponentScan扫描之前，我们先创建一个Controller，一个Service，一个Dao，并标注上相应的注解。然后修改配置类：123456789@Configuration@ComponentScan("cc.mrbird.demo")public class WebConfig &#123; // @Bean("myUser") // public User user() &#123; // return new User("mrbird", 18); // &#125;&#125;在配置类中，我们通过@ComponentScan(&quot;cc.mrbird.demo&quot;)配置了扫描路径，并且将User组件注册注释掉了，取而代之的是在User类上加上@Component注解：123456789@ToString@AllArgsConstructor@NoArgsConstructor@Data@Componentpublic class User &#123; private String name; private Integer age;&#125;值得注意的是，我们不能将Spring Boot的入口类纳入扫描范围中，否则项目启动将出错。接下来我们看下在基于注解的IOC容器中是否包含了这些组件：1234567891011@SpringBootApplicationpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); ApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class); // 查看基于注解的 IOC容器中所有组件名称 String[] beanNames = context.getBeanDefinitionNames(); Arrays.stream(beanNames).forEach(System.out::println); &#125;&#125;启动项目，观察控制台：可见，组件已经成功被扫描进去了，并且名称默认为类名首字母小写。这里，配置类WebConfig也被扫描并注册了，查看@Configuration源码就会发现原因：1234567@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Componentpublic @interface Configuration &#123; String value() default "";&#125;指定扫描策略@ComponentScan注解允许我们指定扫描策略，即指定哪些被扫描，哪些不被扫描，查看其源码可发现这两个属性：1234567891011121314151617/** * Specifies which types are eligible for component scanning. * &lt;p&gt;Further narrows the set of candidate components from everything in &#123;@link #basePackages&#125; * to everything in the base packages that matches the given filter or filters. * &lt;p&gt;Note that these filters will be applied in addition to the default filters, if specified. * Any type under the specified base packages which matches a given filter will be included, * even if it does not match the default filters (i.e. is not annotated with &#123;@code @Component&#125;). * @see #resourcePattern() * @see #useDefaultFilters() */Filter[] includeFilters() default &#123;&#125;;/** * Specifies which types are not eligible for component scanning. * @see #resourcePattern */Filter[] excludeFilters() default &#123;&#125;;其中Filter也是一个注解:1234567891011121314151617/** * Declares the type filter to be used as an &#123;@linkplain ComponentScan#includeFilters * include filter&#125; or &#123;@linkplain ComponentScan#excludeFilters exclude filter&#125;. */@Retention(RetentionPolicy.RUNTIME)@Target(&#123;&#125;)@interface Filter &#123; FilterType type() default FilterType.ANNOTATION; @AliasFor("classes") Class&lt;?&gt;[] value() default &#123;&#125;; @AliasFor("value") Class&lt;?&gt;[] classes() default &#123;&#125;; String[] pattern() default &#123;&#125;;&#125;接下来我们使用excludeFilters来排除一些组件的扫描：12345678910@Configuration@ComponentScan(value = "cc.mrbird.demo", excludeFilters = &#123; @Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class, Repository.class&#125;), @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = User.class) &#125;)public class WebConfig &#123;&#125;上面我们指定了两种排除扫描的规则：根据注解来排除（type = FilterType.ANNOTATION）,这些注解的类型为classes = {Controller.class, Repository.class}。即Controller和Repository注解标注的类不再被纳入到IOC容器中。根据指定类型类排除（type = FilterType.ASSIGNABLE_TYPE），排除类型为User.class，其子类，实现类都会被排除。启动项目，观察控制台：可见排除成功。除了上面两种常用的规则外，我们还可以使用别的规则，查看FilterType源码：1234567891011121314151617181920212223242526272829303132333435public enum FilterType &#123; /** * Filter candidates marked with a given annotation. * * @see org.springframework.core.type.filter.AnnotationTypeFilter */ ANNOTATION, /** * Filter candidates assignable to a given type. * * @see org.springframework.core.type.filter.AssignableTypeFilter */ ASSIGNABLE_TYPE, /** * Filter candidates matching a given AspectJ type pattern expression. * * @see org.springframework.core.type.filter.AspectJTypeFilter */ ASPECTJ, /** * Filter candidates matching a given regex pattern. * * @see org.springframework.core.type.filter.RegexPatternTypeFilter */ REGEX, /** * Filter candidates using a given custom * &#123;@link org.springframework.core.type.filter.TypeFilter&#125; implementation. */ CUSTOM&#125;可看到，我们还可以通过ASPECTJ表达式，REGEX正则表达式和CUSTOM自定义规则（下面详细介绍）来指定扫描策略。includeFilters的作用和excludeFilters相反，其指定的是哪些组件需要被扫描：12345678@Configuration@ComponentScan(value = "cc.mrbird.demo", includeFilters = &#123; @Filter(type = FilterType.ANNOTATION, classes = Service.class) &#125;, useDefaultFilters = false)public class WebConfig &#123;&#125;上面配置了只将Controller纳入IOC容器，并且需要用useDefaultFilters = false来关闭Spring默认的扫描策略才能让我们的配置生效（Spring Boot入口类的@SpringBootApplication注解包含了一些默认的扫描策略）。启动项目，观察控制台：可看到，IOC容器中将不再包含dao，service。多扫描策略配置在Java 8之前，我们可以使用@ComponentScans来配置多个@ComponentScan以实现多扫描规则配置：而在Java 8中，新增了@Repeatable注解，使用该注解修饰的注解可以重复使用，查看@ComponentScan源码会发现其已经被该注解标注：所以除了使用@ComponentScans来配置多扫描规则外，我们还可以通过多次使用@ComponentScan来指定多个不同的扫描规则。自定义扫描策略自定义扫描策略需要我们实现org.springframework.core.type.filter.TypeFilter接口，创建MyTypeFilter实现该接口：123456public class MyTypeFilter implements TypeFilter &#123; @Override public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException &#123; return false; &#125;&#125;该接口包含match方法，其两个入参MetadataReader和MetadataReaderFactory含义如下：MetadataReader：当前正在扫描的类的信息；MetadataReaderFactory：可以通过它来获取其他类的信息。当match方法返回true时说明匹配成功，false则说明匹配失败。继续完善这个过滤规则：1234567891011121314public class MyTypeFilter implements TypeFilter &#123; @Override public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) &#123; // 获取当前正在扫描的类的注解信息 AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata(); // 获取当前正在扫描的类的类信息 ClassMetadata classMetadata = metadataReader.getClassMetadata(); // 获取当前正在扫描的类的路径等信息 Resource resource = metadataReader.getResource(); String className = classMetadata.getClassName(); return StringUtils.hasText("er"); &#125;&#125;上面指定了当被扫描的类名包含er时候，匹配成功，配合excludeFilters使用意指当被扫描的类名包含er时，该类不被纳入IOC容器中。我们在@ComponentScan中使用这个自定义的过滤策略：1234567@Configuration@ComponentScan(value = "cc.mrbird.demo", excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = MyTypeFilter.class) &#125;)public class WebConfig &#123;&#125;启动项目，观察输出： 因为User，UserMapper，UserService和UserController等类的类名都包含er，所以它们都没有被纳入到IOC容器中。组件作用域@Scope默认情况下，在Spring的IOC容器中每个组件都是单例的，即无论在任何地方注入多少次，这些对象都是同一个，我们来看下例子。首先将User对象中的@Component注解去除，然后在配置类中配置User Bean：1234567@Configurationpublic class WebConfig &#123; @Bean public User user() &#123; return new User("mrbird", 18); &#125;&#125;接着多次从IOC容器中获取这个组件，看看是否为同一个：12345// 返回 IOC 容器，使用注解配置，传入配置类ApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class);Object user1 = context.getBean("user");Object user2 = context.getBean("user");System.out.println(user1 == user2);启动项目，观察控制台输出:结果证实了上面的观点。在Spring中我们可以使用@Scope注解来改变组件的作用域：singleton：单实例（默认）,在Spring IOC容器启动的时候会调用方法创建对象然后纳入到IOC容器中，以后每次获取都是直接从IOC容器中获取（map.get()）；prototype：多实例，IOC容器启动的时候并不会去创建对象，而是在每次获取的时候才会去调用方法创建对象；request：一个请求对应一个实例；session：同一个session对应一个实例。懒加载@Lazy懒加载是针对单例模式而言的，正如前面所说，IOC容器中的组件默认是单例的，容器启动的时候会调用方法创建对象然后纳入到IOC容器中。在User Bean注册的地方加入一句话以观察：12345678@Configurationpublic class WebConfig &#123; @Bean public User user() &#123; System.out.println("往IOC容器中注册user bean"); return new User("mrbird", 18); &#125;&#125;测试：12ApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class);System.out.println("容器创建完毕");启动项目观察控制台输出:可以看到，在IOC容器创建完毕之前，组件已经添加到容器中了。将User Bean改为懒加载的方式：123456789@Configurationpublic class WebConfig &#123; @Bean @Lazy public User user() &#123; System.out.println("往IOC容器中注册user bean"); return new User("mrbird", 18); &#125;&#125;再次启动项目，观察输出：可看到，容器创建完的时候，User Bean这个组件并未添加到容器中。所以懒加载的功能是，在单例模式中，IOC容器创建的时候不会马上去调用方法创建对象并注册，只有当组件第一次被使用的时候才会调用方法创建对象并加入到容器中。测试一下：1234ApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class);System.out.println("容器创建完毕");Object user1 = context.getBean("user");Object user2 = context.getBean("user");启动项目，观察输出:结果证实了我们的观点。条件注册组件@Conditional使用@Conditional注解我们可以指定组件注册的条件，即满足特定条件才将组件纳入到IOC容器中。在使用该注解之前，我们需要创建一个类，实现Condition接口：123456public class MyCondition implements Condition &#123; @Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) &#123; return false; &#125;&#125;该接口包含一个matches方法，包含两个入参:ConditionContext：上下文信息；AnnotatedTypeMetadata：注解信息。简单完善一下这个实现类:1234567public class MyCondition implements Condition &#123; @Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) &#123; String osName = context.getEnvironment().getProperty("os.name"); return osName != null &amp;&amp; osName.contains("Windows"); &#125;&#125;接着将这个条件添加到User Bean注册的地方：12345@Bean@Conditional(MyCondition.class)public User user() &#123; return new User("mrbird", 18);&#125;在Windows环境下，User这个组件将被成功注册，如果是别的操作系统，这个组件将不会被注册到IOC容器中。@Profile@Profile可以根据不同的环境变量来注册不同的组件，下面我们来学一下它的用法。新建一个接口CalculateService：123public interface CalculateService &#123; Integer sum(Integer... value);&#125;接着添加两个实现Java7CalculateServiceImpl和Java8CalculateServiceImpl:12345678910111213@Service@Profile("java7")public class Java7CalculateServiceImpl implements CalculateService &#123; @Override public Integer sum(Integer... value) &#123; System.out.println("Java 7环境下执行"); int result = 0; for (int i = 0; i &lt;= value.length; i++) &#123; result += i; &#125; return result; &#125;&#125;123456789@Service@Profile("java8")public class Java8CalculateServiceImpl implements CalculateService &#123; @Override public Integer sum(Integer... value) &#123; System.out.println("Java 8环境下执行"); return Arrays.stream(value).reduce(0, Integer::sum); &#125;&#125;通过@Profile注解我们实现了：当环境变量包含java7的时候，Java7CalculateServiceImpl将会被注册到IOC容器中；当环境变量包含java8的时候，Java8CalculateServiceImpl将会被注册到IOC容器中。测试一下：1234567ConfigurableApplicationContext context1 = new SpringApplicationBuilder(DemoApplication.class) .web(WebApplicationType.NONE) .profiles("java8") .run(args);CalculateService service = context1.getBean(CalculateService.class);System.out.println("求合结果： " + service.sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));启动项目，控制台输出如下：如果将.profiles(&quot;java8&quot;)改为.profiles(&quot;java7&quot;)的话，控制台输出如下：导入组件@Import到目前为止，我们可以使用包扫描和@Bean来实现组件注册。除此之外，我们还可以使用@Import来快速地往IOC容器中添加组件。创建一个新的类Hello：12public class Hello &#123;&#125;然后在配置类中导入这个组件：12345@Configuration@Import(&#123;Hello.class&#125;)public class WebConfig &#123; ...&#125;查看IOC容器中所有组件的名称：123ApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class);String[] beanNames = context.getBeanDefinitionNames();Arrays.stream(beanNames).forEach(System.out::println);启动项目，控制台输出:可看到，通过@Import我们可以快速地往IOC容器中添加组件，Id默认为全类名。ImportSelector通过@Import我们已经实现了组件的导入，如果需要一次性导入较多组件，我们可以使用ImportSelector来实现。新增三个类Apple，Banana和Watermelon，代码略。查看ImportSelector源码：12345678public interface ImportSelector &#123; /** * Select and return the names of which class(es) should be imported based on * the &#123;@link AnnotationMetadata&#125; of the importing @&#123;@link Configuration&#125; class. */ String[] selectImports(AnnotationMetadata importingClassMetadata);&#125;ImportSelector是一个接口，包含一个selectImports方法，方法返回类的全类名数组（即需要导入到IOC容器中组件的全类名数组），包含一个AnnotationMetadata类型入参，通过这个参数我们可以获取到使用ImportSelector的类的全部注解信息。我们新建一个ImportSelector实现类MyImportSelector：12345678910public class MyImportSelector implements ImportSelector &#123; @Override public String[] selectImports(AnnotationMetadata importingClassMetadata) &#123; return new String[]&#123; "cc.mrbird.demo.domain.Apple", "cc.mrbird.demo.domain.Banana", "cc.mrbird.demo.domain.Watermelon" &#125;; &#125;&#125;上面方法返回了新增的三个类的全类名数组，接着我们在配置类的@Import注解上使用MyImportSelector来把这三个组件快速地导入到IOC容器中：1234@Import(&#123;MyImportSelector.class&#125;)public class WebConfig &#123; ...&#125;查看容器中是否已经有这三个组件:123ApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class);String[] beanNames = context.getBeanDefinitionNames();Arrays.stream(beanNames).forEach(System.out::println);启动项目，观察控制台：组件已经成功导入。ImportBeanDefinitionRegistrar除了上面两种往IOC容器导入组件的方法外，我们还可以使用ImportBeanDefinitionRegistrar来手动往IOC容器导入组件。查看其源码：123public interface ImportBeanDefinitionRegistrar &#123; public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry);&#125;ImportBeanDefinitionRegistrar是一个接口，包含一个registerBeanDefinitions方法，该方法包含两个入参：AnnotationMetadata：可以通过它获取到类的注解信息；BeanDefinitionRegistry：Bean定义注册器，包含了一些和Bean有关的方法：123456789101112131415 public interface BeanDefinitionRegistry extends AliasRegistry &#123; void registerBeanDefinition(String var1, BeanDefinition var2) throws BeanDefinitionStoreException; void removeBeanDefinition(String var1) throws NoSuchBeanDefinitionException; BeanDefinition getBeanDefinition(String var1) throws NoSuchBeanDefinitionException; boolean containsBeanDefinition(String var1); String[] getBeanDefinitionNames(); int getBeanDefinitionCount(); boolean isBeanNameInUse(String var1);&#125;这里我们需要借助BeanDefinitionRegistry的registerBeanDefinition方法来往IOC容器中注册Bean。该方法包含两个入参，第一个为需要注册的Bean名称（Id）,第二个参数为Bean的定义信息，它是一个接口，我们可以使用其实现类RootBeanDefinition来完成：为了演示ImportBeanDefinitionRegistrar的使用，我们先新增一个类，名称为Strawberry，代码略。然后新增一个ImportBeanDefinitionRegistrar实现类MyImportBeanDefinitionRegistrar：1234567891011public class MyImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar &#123; @Override public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) &#123; final String beanName = "strawberry"; boolean contain = registry.containsBeanDefinition(beanName); if (!contain) &#123; RootBeanDefinition rootBeanDefinition = new RootBeanDefinition(Strawberry.class); registry.registerBeanDefinition(beanName, rootBeanDefinition); &#125; &#125;&#125;在上面的实现类中，我们先通过BeanDefinitionRegistry的containsBeanDefinition方法判断IOC容器中是否包含了名称为strawberry的组件，如果没有，则手动通过BeanDefinitionRegistry的registerBeanDefinition方法注册一个。定义好MyImportBeanDefinitionRegistrar后，我们同样地在配置类的@Import中使用它：12345@Configuration@Import(&#123;MyImportBeanDefinitionRegistrar.class&#125;)public class WebConfig &#123; ...&#125;查看容器中是否已经有这个组件:123ApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class);String[] beanNames = context.getBeanDefinitionNames();Arrays.stream(beanNames).forEach(System.out::println);启动项目，观察控制台：组件已经注册成功。使用FactoryBean注册组件Spring还提供了一个FactoryBean接口，我们可以通过实现该接口来注册组件，该接口包含了两个抽象方法和一个默认方法：为了演示FactoryBean的使用，我们新增一个Cherry类，代码略。然后创建FactoryBean的实现类CherryFactoryBean:12345678910111213141516public class CherryFactoryBean implements FactoryBean&lt;Cherry&gt; &#123; @Override public Cherry getObject() &#123; return new Cherry(); &#125; @Override public Class&lt;?&gt; getObjectType() &#123; return Cherry.class; &#125; @Override public boolean isSingleton() &#123; return false; &#125;&#125;getObject返回需要注册的组件对象，getObjectType返回需要注册的组件类型，isSingleton指明该组件是否为单例。如果为多例的话，每次从容器中获取该组件都会调用其getObject方法。定义好CherryFactoryBean后，我们在配置类中注册这个类：1234@Beanpublic CherryFactoryBean cherryFactoryBean() &#123; return new CherryFactoryBean();&#125;测试从容器中获取：123ApplicationContext context = new AnnotationConfigApplicationContext(WebConfig.class);Object cherry = context.getBean("cherryFactoryBean");System.out.println(cherry.getClass());启动项目，观察控制台输出：可看到，虽然我们获取的是Id为cherryFactoryBean的组件，但其获取到的实际是getObject方法里返回的对象。如果我们要获取cherryFactoryBean本身，则可以这样做：12Object cherryFactoryBean = context.getBean("&amp;cherryFactoryBean");System.out.println(cherryFactoryBean.getClass());启动项目，观察控制台：为什么加上&amp;前缀就可以获取到相应的工厂类了呢，查看BeanFactory的源码会发现原因:源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/50.Spring-Regist-Bean]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo的高可用]]></title>
    <url>%2Fblog%2FDubbo-High-Availability.html</url>
    <content type="text"><![CDATA[Dubbo的一些自身特性确保了Dubbo的高可用，比如当注册中心宕机后，服务提供者和服务消费者仍能通过本地缓存通讯；注册中心对等集群，任意一台宕掉后，将自动切换到另一台；当有多台服务提供者提供服务时，Dubbo内置了几种负载均衡算法，并且服务提供者是无状态的，任意一台宕掉后，不影响使用；我们还可以通过整合Hystrix来实现服务降级。注册中心这里模拟一下当所有服务注册中心宕机后，服务提供者和服务消费者是否能够正常通讯。在上一节的例子上，启动Zookeeper，然后分别启动server-proivder和server-consumer，启动好后关闭Zookeeper，这时候注册中心是宕机的状态：访问http://localhost:8081/hello/mrbird看是否可以成功消费服务：可以看到服务提供者和服务消费者通讯是正常的，因为注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表。Dubbo直连使用注册中心来维护服务可以降低后期维护和拓展的复杂度，降低耦合。不过Dubbo也提供了绕过注册中心的方法，即服务消费者不通过注册中心，而是直接取访问服务提供者来获取服务，这种方式也称为Dubbo直连。我们在服务消费者的@Reference注解上直接指定服务提供者的地址，即可实现Dubbo直连：12@Reference(url = "http://127.0.0.1:8080")private HelloService helloService;负载均衡Dubbo提供了四种负载均衡机制：RandomLoadBalance，LeastActiveLoadBalance，ConsistentHashLoadBalance和RoundRobinLoadBalance。RandomLoadBalanceRandomLoadBalance是基于权重的负载均衡机制。假如现在有一个由三个服务提供者构成的集群，Server1的权重为100，Server2的权重为200，Server3的权重为300，那么当一个服务消费请求发送过来时，有1/6的几率命中Server1，1/3的记录命中Server2，1/2的记录命中Server3。LeastActiveLoadBalanceLeastActiveLoadBalance俗称最小活跃数负载均衡，假如现在有一个由Server1、Server2和Server3三个服务提供者构成的集群，在上一次请求中，Server1的耗时为100ms，Server2的耗时为200ms，Server3的耗时为300ms，那么当一个新的请求到来时，会命中耗时最少的那个服务，即Server1。ConsistentHashLoadBalance详见官方文档介绍：http://dubbo.apache.org/zh-cn/docs/source_code_guide/loadbalance.html。RoundRobinLoadBalanceRoundRobinLoadBalance是基于权重的轮询负载均衡机制，即服务请求在轮询的同时还得考虑权重。举个例子：假如现在有一个由三个服务提供者构成的集群，Server1的权重为100，Server2的权重为200，Server3的权重为300，现在有6个服务消费请求依法发送过来，按照轮询机制，第1个请求命中Server1，第2个请求命中Server2，第3个请求命中Server3，到这里三个服务提供者已经轮询完一次，第4个请求本应该从新开始轮询，命中Server1，但是由于Server1的权重为100（占1/6，即6次只会命中一次），所以第4个请求会被分配到Server2。接着轮询，第5个请求将命中Server3，第6个请求命中Server2。所以这6个请求命中的顺序为123232，这个概率和服务提供者的权重比相匹配。机制选择默认情况下，Dubbo采用RandomLoadBalance负载均衡机制。我们可以在服务提供者和服务消费者上指定使用哪种负载均衡：在客户端的@Reference注解上指定：12@Reference(loadbalance = RoundRobinLoadBalance.NAME)private HelloService helloService;在服务端的@Server注解上指定：1@Service(interfaceClass = HelloService.class, loadbalance = RoundRobinLoadBalance.NAME)权重分配我们可以在Dubbo提供的@Server注解上指定暴露服务的权重：1@Service(interfaceClass = HelloService.class, weight = 100)这时候在Dubbo Admin里可以看到这个服务的权重就为100了：我们可以可以通过Dubbo Admin来动态调节服务的权重:集群容错Dubbo支持多种容错模式：http://dubbo.apache.org/zh-cn/docs/user/demos/fault-tolerent-strategy.html服务降级Dubbo默认支持两种降级策略:mock=force:return+null 表示消费方对该服务的方法调用都直接返回 null 值，不发起远程调用。用来屏蔽不重要服务不可用时对调用方的影响。还可以改为 mock=fail:return+null 表示消费方对该服务的方法调用在失败后，再返回 null 值，不抛异常。用来容忍不重要服务不稳定时对调用方的影响。我们可以在Dubbo Admin控制台上来处理降级。为了模拟错误情况，我们改造服务提供者实现的hello方法：12345678910@Overridepublic String hello(String message) &#123; System.out.println("调用 cc.mrbird.provider.service.HelloServiceImpl#hello"); try &#123; TimeUnit.SECONDS.sleep(2); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; return "hello," + message;&#125;方法中让线程阻塞了2秒。接着改造服务消费者，在@Reference注解上配置超时时间：12@Reference(timeout = 1000)private HelloService helloService;在不进行服务降级的情况下，访问http://localhost:8081/hello/mrbird将看抛出异常:在Dubbo Admin消费者列表上的屏蔽按钮对应mock=force:return+null策略，即不调用服务，直接返回null，点击屏蔽后，再次访问http://localhost:8081/hello/mrbird：服务提供者的控制台也没有任何调用日志:而容错按钮则对应mock=fail:return+null机制。点击容错按钮，再次访问http://localhost:8081/hello/mrbird：上述结果证明了在mock=fail:return+null策略下，消费方对该服务的方法调用在失败后，再返回 null 值（之所以会输出多次调用日志，是因为Dubbo的重试机制）。整合Hystrix我们可以通过整合Spring-Cloud-Hystrix和Dubbo来拓展服务降级。在server-provider里引入Hystrix依赖：12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;然后再server-provider的入口类上使用@EnableHystrix注解开启Hystrix功能。接着改造server-provider的HelloServiceImpl：1234567891011121314151617@Service(interfaceClass = HelloService.classE)@Componentpublic class HelloServiceImpl implements HelloService &#123; @Override @HystrixCommand(fallbackMethod = "defaultHello") public String hello(String message) &#123; System.out.println("调用 cc.mrbird.provider.service.HelloServiceImpl#hello"); String a = null; a.toString(); return "hello," + message; &#125; public String defaultHello(String message) &#123; return "hello anonymous"; &#125;&#125;在hello方法中，我们制造一个空指针异常，通过@HystrixCommand(fallbackMethod = &quot;defaultHello&quot;)指定了降级的方法为defaultHello。值得注意的是，降级方法的方法参数和返回类型必须和原方法保持一致，不熟悉的读者可以参考https://mrbird.cc/Spring-Cloud-Hystrix-Circuit-Breaker.html。改造好后，重启服务提供者和服务消费者，访问http://localhost:8081/hello/mrbird：可见服务已经成功降级。源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/53.Dubbo-High-Availability]]></content>
      <tags>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[监控Dubbo服务]]></title>
    <url>%2Fblog%2Fdubbo-mointor.html</url>
    <content type="text"><![CDATA[Dubbo给我们提供了dubbo-admin和dubbo-monitor-simple用于监控Dubbo服务，可以用来监控接口暴露，注册情况，也可以显示接口的调用明细和调用时间。dubbo-admin和dubbo-monitor-simple的下载地址为：https://github.com/apache/incubator-dubbo-admin/tree/master，这里简单介绍它们如何使用。准备要监控Dubbo服务，首先我们必须在Dubbo应用上提供连接监控中心的配置，Dubbo支持两种方式：属性对应URL参数类型是否必填缺省值作用描述兼容性protocolprotocolstring可选dubbo服务治理监控中心协议，如果为protocol=”registry”，表示从注册中心发现监控中心地址，否则直连监控中心。2.0.9以上版本address&lt;url&gt;string可选N/A服务治理直连监控中心服务器地址，address=”10.20.130.230:12080”1.0.16以上版本这里我们采用第一种方式，在上一节中的server-provider和server-consumer的配置文件中添加如下配置:123dubbo: monitor: protocol: registry配置好后，依次启动server-provider和server-consumer，接下来开始搭建监控中心。dubbo-monitor-simple下载https://github.com/apache/incubator-dubbo-admin/tree/master源码后，使用IDEA导入dubbo-monitor-simple应用，修改其配置文件dubbo.properties内容：1234567891011dubbo.container=log4j,spring,registry,jetty-monitordubbo.application.name=simple-monitordubbo.application.owner=dubbodubbo.registry.address=zookeeper://127.0.0.1:2181dubbo.protocol.port=7070dubbo.jetty.port=7000dubbo.jetty.directory=$&#123;user.home&#125;/monitordubbo.charts.directory=$&#123;user.home&#125;/monitor/chartsdubbo.statistics.directory=$&#123;user.home&#125;/monitor/statisticsdubbo.log4j.file=logs/dubbo-monitor-simple.logdubbo.log4j.level=WARN上面主要指定了注册中心地址为zookeeper://127.0.0.1:2181，监控中心协议端口为7070以及监控应用访问端口为7000。配置好后，运行启动类MonitorStarter的main方法来启动应用，启动后，访问http://localhost:7000便可看到如下页面：在线应用信息:多次访问http://localhost:8081/hello/mrbird后，便可以在监控中心查看服务调用情况：dubbo-admin使用IDEA导入dubbo-admin应用，修改其配置文件application.properties：12345678910server.port=7001spring.velocity.cache=falsespring.velocity.charset=UTF-8spring.velocity.layout-url=/templates/default.vmspring.messages.fallback-to-system-locale=falsespring.messages.basename=i18n/messagespring.root.password=rootspring.guest.password=guestdubbo.registry.address=zookeeper://127.0.0.1:2181上面配置主要配置了注册中心地址为zookeeper://127.0.0.1:2181，应用端口号为7001，root和guest账户的密码。配置好后，启动应用（dubbo-admin使用Spring Boot构建，启动入口类即可），访问http://localhost:7001：duubo提供了新版的dubbo-admin，采用前后端分离的方式，前端由Vue.js构建，UI更为nice，不过还不完善，所以这里就不介绍了。源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/52.Dubbo-OPS-Mointor]]></content>
      <tags>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot整合Dubbo&Zookeeper]]></title>
    <url>%2Fblog%2FSpring-Boot-Dubbo-Zookeeper.html</url>
    <content type="text"><![CDATA[Dubbo是一款由阿里巴巴开发的远程服务调用框架（RPC），其可以透明化的调用远程服务，就像调用本地服务一样简单。截至目前，Dubbo发布了基于Spring Boot构建的版本，版本号为0.2.0，这使得其与Spring Boot项目整合变得更为简单方便。而Zookeeper在这里充当的是服务注册中心的角色，我们将各个微服务提供的服务通过Dubbo注册到Zookeeper中，然后服务消费者通过Dubbo从Zookeeper中获取相应服务并消费。本文案例的架构图可以简单用下图表示： 本文案例最终项目结构如下图所示：项目采用Maven构建，各模块的作用：模块描述common-api统一定义接口，供其余子模块引用server-provider服务提供者，实现common-api模块中的接口，然后暴露到Zookeeper中，供服务消费者使用server-consumer服务消费者，通过Dubbo从Zookeeper中获取服务并消费环境准备Zookeeper安装在搭建项目之前需要启动Zookeeper服务，Zookeeper下载地址：http://zookeeper.apache.org/releases.html#download。下载后解压，将config目录下的zoo_sample.cfg重命名为zoo.cfg(Zookeeper配置文件，默认端口为2181，可根据实际进行修改)。然后双击bin目录下的zkServer.cmd启动即可。构建父模块新建一个Maven项目，groupId为cc.mrbird，artifactId为dubbo-boot，packaging指定为pom。然后引入Spring Boot，dubbo-spring-boot-starter和Zookeeper相关依赖：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;cc.mrbird&lt;/groupId&gt; &lt;artifactId&gt;dubbo-boot&lt;/artifactId&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;name&gt;dubbo-boot&lt;/name&gt; &lt;description&gt;Spring Boot-Dubbo-ZooKeeper&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.0.4.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.8&lt;/java.version&gt; &lt;project.version&gt;1.0&lt;/project.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- dubbo --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba.boot&lt;/groupId&gt; &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;0.2.0&lt;/version&gt; &lt;/dependency&gt; &lt;!-- zookeeper --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.8&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.101tec&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;0.10&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;$&#123;java.version&#125;&lt;/source&gt; &lt;target&gt;$&#123;java.version&#125;&lt;/target&gt; &lt;encoding&gt;$&#123;project.build.sourceEncoding&#125;&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt;构建Common-api新建一个Maven模块，artifactId为common-api，目录结构如下所示：pom.xml：12345678910111213&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;parent&gt; &lt;artifactId&gt;dubbo-boot&lt;/artifactId&gt; &lt;groupId&gt;cc.mrbird&lt;/groupId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;common-api&lt;/artifactId&gt;&lt;/project&gt;项目只包含一个HelloService接口：12345package cc.mrbird.common.api;public interface HelloService &#123; String hello(String message);&#125;至此我们可以开始构建服务提供者和服务消费者了。构建Server-Provider新建一个Maven模块，用于暴露Dubbo服务，artifactId为server-provider，目录结构如下所示：pom内容如下：123456789101112131415161718192021&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;parent&gt; &lt;artifactId&gt;dubbo-boot&lt;/artifactId&gt; &lt;groupId&gt;cc.mrbird&lt;/groupId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;server-provider&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;cc.mrbird&lt;/groupId&gt; &lt;artifactId&gt;common-api&lt;/artifactId&gt; &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;这里我们引入了common-api模块，用于后续实现相应的服务。在Spring Boot启动类中我们加入@EnableDubbo注解，表示要开启dubbo功能:123456789101112import com.alibaba.dubbo.config.spring.context.annotation.EnableDubbo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@EnableDubbo@SpringBootApplicationpublic class ProviderApplicaiton &#123; public static void main(String[] args) &#123; SpringApplication.run(ProviderApplicaiton.class, args); System.out.println("complete"); &#125;&#125;接着在applicaiton.yml中配置Dubbo：12345678910111213141516server: port: 8080dubbo: application: # 服务名称，保持唯一 name: server-provider # zookeeper地址，用于向其注册服务 registry: address: zookeeper://127.0.0.1:2181 #暴露服务方式 protocol: # dubbo协议，固定写法 name: dubbo # 暴露服务端口 （默认是20880，不同的服务提供者端口不能重复） port: 20880如果Zookeeper是集群的话，spring.dubbo.registry.address配置为：1234spring: dubbo: registry: address: zookeeper://127.0.0.1:2181?backup=127.0.0.1:2180,127.0.0.1:2182接下来我们在cc.mrbird.provider.service路径下创建一个HelloService接口的实现类：123456789101112import cc.mrbird.common.api.HelloService;import com.alibaba.dubbo.config.annotation.Service;import org.springframework.stereotype.Component;@Service(interfaceClass = HelloService.class)@Componentpublic class HelloServiceImpl implements HelloService &#123; @Override public String hello(String message) &#123; return "hello," + message; &#125;&#125;值得注意的是@Service注解为Dubbo提供的com.alibaba.dubbo.config.annotation.Service，而非Spring的那个。其中interfaceClass是指要发布服务的接口。通过上面的配置，我们已经将HelloService接口的实现暴露到Zookeeper中了，接下来我们继续创建一个服务消费者，来消费这个服务。搭建Server-Consumer新建一个Maven模块，用于消费Dubbo服务，artifactId为server-consumer，目录结构如下所示：pom内容如下：123456789101112131415161718192021&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;parent&gt; &lt;artifactId&gt;dubbo-boot&lt;/artifactId&gt; &lt;groupId&gt;cc.mrbird&lt;/groupId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;server-consumer&lt;/artifactId&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;cc.mrbird&lt;/groupId&gt; &lt;artifactId&gt;common-api&lt;/artifactId&gt; &lt;version&gt;$&#123;project.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;同样的，我们也在Spring Boot启动类中我们加入@EnableDubbo注解，表示要开启dubbo功能。接着在applicaiton.yml中配置Dubbo：12345678910111213server: port: 8081dubbo: application: # 服务名称，保持唯一 name: server-consumer # zookeeper地址，用于从中获取注册的服务 registry: address: zookeeper://127.0.0.1:2181 protocol: # dubbo协议，固定写法 name: dubbo同服务提供者，我们需要指定Zookeeper的地址，协议为dubbo。接着我们定义一个TestController，演示服务消费：1234567891011121314151617import cc.mrbird.common.api.HelloService;import com.alibaba.dubbo.config.annotation.Reference;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class HelloController &#123; @Reference private HelloService helloService; @GetMapping("/hello/&#123;message&#125;") public String hello(@PathVariable String message) &#123; return this.helloService.hello(message); &#125;&#125;通过Dubbo的@Reference注解注入需要使用的interface，类似于Spring的@Autowired。测试分别启动Server-Provider和Server-Consumer，访问http://localhost:8081/hello/mrbird：说明远程服务调用已经成功。这里只是通过Spring Boot和Dubbo的整合来简单了解Dubbo的使用，仅作抛砖引玉，更为详细的Dubbo配置可以查看官方文档：http://dubbo.apache.org/zh-cn/docs/user/quick-start.html源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/40.Spring-Boot-Dubbo-Zookeeper]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
        <tag>Dubbo</tag>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用WireMock快速伪造RESTful服务]]></title>
    <url>%2Fblog%2FWireMock-mock-RESTful.html</url>
    <content type="text"><![CDATA[前后端分离的开发模式已经越来越流行，但是前后端的开发进度并不能完全保持一致，当前端需要调用后端尚未开发的RESTful接口时不得不等待后端开发完毕，这将影响并行开发的效率。http://wiremock.org就是一款用于解决这个问题的开源框架。WireMock可以快速的伪造RESTful接口并返回伪造的JSON数据。这里简单记录下WireMock的使用方法。搭建WireMock服务器我们在本地搭建一个WireMock服务器。通过http://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.18.0/wiremock-standalone-2.18.0.jar下载wiremock-standalone-x.xx.xx.jar，然后使用java -jar命令运行：1java -jar wiremock-standalone-2.18.0.jar --port=8080启动界面： WireMock的简单使用为了方便，我们在Spring Boot环境里进行编写。在项目中引入WireMock依赖：12345&lt;dependency&gt; &lt;groupId&gt;com.github.tomakehurst&lt;/groupId&gt; &lt;artifactId&gt;wiremock&lt;/artifactId&gt; &lt;version&gt;2.18.0&lt;/version&gt;&lt;/dependency&gt;新建一个MockServer类，包含main方法，并引入com.github.tomakehurst.wiremock.client.WireMock的所有静态方法：12345678910111213141516import static com.github.tomakehurst.wiremock.client.WireMock.*;public class MockService &#123; public static void main(String[] args) &#123; // 配置WireMock服务器的地址 http://localhost:8080 configureFor("127.0.0.1", 8080); // 清除WireMock服务器里之前的配置 removeAllMappings(); //伪造一个get请求，请求地址为 /user/1，然后返回体包含JSON数据，状态为200 stubFor(get(urlEqualTo("/user/1")) .willReturn(aResponse() .withBody("&#123;\"name\":\"mrbird\",\"url\":\"https://mrbird.cc\",\"age\":18&#125;") .withStatus(200))); &#125;&#125;上面代码主要分为三个步骤：使用configureFor方法配置WireMock服务器的地址为http://localhost:8080；调用removeAllMappings清除WireMock服务器里所有配置；调用stubFor打桩，并模拟了一个HTTP GET请求，然后返回200状态码，返回报文头部包含JSON信息。这里URL使用方法urlEqualTo全匹配，WireMock也提供了正则表达式匹配URL的方法。在配置完了后运行main方法，就可以将我们的配置写到WireMock服务器里，这时候在浏览器中调用http://localhost:8080/user/1便能看到我们模拟的输出结果：这里推荐个在线JSON编辑器：https://www.bejson.com/jsoneditoronline/。简单封装我们可以对上面的代码进行简单的封装，方便重用：123456789import org.apache.commons.io.FileUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.core.io.ClassPathResource;private static void getMock(String url, String file) throws IOException &#123; ClassPathResource resource = new ClassPathResource("mock/response/" + file); String content = StringUtils.join(FileUtils.readLines(resource.getFile(), "UTF-8").toArray(), "\n"); stubFor(get(urlPathEqualTo(url)).willReturn(aResponse().withBody(content).withStatus(200)));&#125;上面代码封装了一个getMock方法，用于处理get类型的Mock，参数为模拟URL和模拟JSON文件。我们在src/main/resource/mock/response目录下创建一个user.json文件：12345&#123; "name": "mrbird", "url": "https://mrbird.cc", "age": 18&#125;后面我们只需要像下面这样调用就行了：1getMock("/user/1", "user.json");WireMock还提供了许多别的功能，具体可以参考官方文档 http://wiremock.org/docs/。]]></content>
      <tags>
        <tag>WireMock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Spring Cloud Sleuth跟踪微服务]]></title>
    <url>%2Fblog%2FSpring-Cloud-sleuth.html</url>
    <content type="text"><![CDATA[在微服务数量较多的系统架构中，一个完整的HTTP请求可能需要经过好几个微服务。如果想要跟踪一条完整的HTTP请求链路所产生的日志，我们需要到各个微服务上去查看日志并检索出我们需要的信息。随着业务发展，微服务的数量也会越来越多，这个过程也变得愈发困难。不过不用担心，Spring Cloud Sleuth为我们提供了分布式服务跟踪的解决方案。为了演示如何使用Spring Cloud Sleuth，我们需要构建一个小型的微服务系统。准备工作这里我们需要创建两个微服务Server-Provider1和Server-Provider2，它们都具有一个名为hello的REST接口，Server-Provider1的hello接口依赖于Server-Provider2的hello接口。并将这两个服务注册到Eureka-Server服务注册中心集群。Eureka-Server服务注册中心集群直接使用https://mrbird.cc/Spring-Cloud-Eureka.html里构建的即可，这里不再赘述。创建Server-Provider1新建一个Spring Boot工程，artifactId为Server-Provider1，并引入如下依赖：123456789101112131415161718192021222324252627282930&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Edgware.SR3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-sleuth&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;spring-cloud-starter-eureka用于注册微服务，spring-cloud-starter-ribbon用于调用Server-Provider2提供的服务，spring-cloud-starter-sleuth为Spring Cloud Sleuth依赖，用于跟踪微服务请求。接着在配置文件application.yml里添加如下配置:12345678910spring: application: name: server-provider1server: port: 9000eureka: client: serviceUrl: defaultZone: http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/配置中指定了微服务名称为server-provider1，端口号为9000以及服务注册中心地址。然后我们在入口类中添加@EnableDiscoveryClient注解，开启服务的注册与发现。并且注册RestTemplate，用于Ribbon服务远程调用：1234567891011121314@SpringBootApplication@EnableDiscoveryClientpublic class DemoApplication &#123; @Bean @LoadBalanced RestTemplate restTemplate() &#123; return new RestTemplate(); &#125; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;最后编写REST接口：123456789101112131415@RestController@RequestMapping("hello")public class HelloController &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); @Autowired private RestTemplate restTemplate; @GetMapping public String hello() &#123; logger.info("调用server-provider1的hello接口"); return this.restTemplate.getForEntity("http://server-provider2/hello", String.class).getBody(); &#125;&#125;在hello接口中，我们通过RestTemplate远程调用了server-provider2的hello接口。创建Server-Provider2新建一个新建一个Spring Boot工程，artifactId为Server-Provider2，依赖和Server-Provider1相同。在application.yml中添加如下配置：12345678910spring: application: name: server-provider2server: port: 9001eureka: client: serviceUrl: defaultZone: http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/在入口类中添加@EnableDiscoveryClient注解，开启服务注册与发现。最后编写一个REST接口，供Server-Provider1调用：123456789101112@RestController@RequestMapping("hello")public class HelloController &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); @GetMapping public String hello() &#123; logger.info("调用server-provider2的hello接口"); return "hello world"; &#125;&#125;至此，Server-Provider2也搭建完了。测试Spring Cloud Sleuth启动8080和8081Eureka-Server集群，然后分别启动Server-Provider1和Server-Provider2。访问http://localhost:8080/查看服务是否都启动成功：可见服务都启动成功了，我们往Server-provider1发送http://localhost:9000/hello请求，然后观察各自的日志：Server-Provider1：12018-06-25 10:13:40.921 INFO [server-provider1,939ca3c1d060ed40,939ca3c1d060ed40,false] 12516 --- [nio-9000-exec-6] c.e.demo.controller.HelloController : 调用server-provider1的hello接口Server-Provider2：12018-06-25 10:13:40.931 INFO [server-provider2,939ca3c1d060ed40,3f31114e88154074,false] 6500 --- [nio-9001-exec-3] c.e.demo.controller.HelloController : 调用server-provider2的hello接口可以看到，日志里出现了[server-provider2,939ca3c1d060ed40,3f31114e88154074,false]信息，这些信息由Spring Cloud Sleuth生成，用于跟踪微服务请求链路。这些信息包含了4个部分的值，它们的含义如下：server-provider2微服务的名称，与spring.application.name对应；939ca3c1d060ed40称为Trace ID，在一条完整的请求链路中，这个值是固定的。观察上面的日志即可证实这一点；3f31114e88154074称为Span ID，它表示一个基本的工作单元；false表示是否要将该信息输出到Zipkin等服务中来收集和展示，这里我们还没有集成Zipkin，所以为false。集成Zipkin虽然我们已经可以通过Trace ID来跟踪整体请求链路了，但是我们还是得去各个系统中捞取日志。在并发较高得时候，日志是海量的，这个时候我们可以借助Zipkin来代替我们完成日志获取与分析。Zipkin是Twitter的一个开源项目，主要包含了以下四个组件：Collector：收集器，负责收集日志信息，以供后续的存储，分析与展示；Storage：存储模块，我们可以通过它将日志存储到MySQL中；RESTful API：API组件，它主要用来提供外部访问接口。 比如给客户端展示跟踪信息，或是外接系统访问以实现监控等；WEB UI：通过web页面，我们可以轻松的分析与跟踪请求日志。搭建Zipkin-Server在完成Spring Cloud Cleuth与Zipkin的整合之前，我们需要搭建一个Zipkin服务。新建一个Spring Boot应用，artifactId为Zipkin-Server，并引入如下依赖：1234567891011121314151617181920212223242526&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Edgware.SR3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt; &lt;artifactId&gt;zipkin-server&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt; &lt;artifactId&gt;zipkin-autoconfigure-ui&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;在入口类中添加@EnableZipkinServer注解，用于启动Zipkin服务。接着在applicaiton.yml中添加如下配置：12345spring: application: name: zipkin-serverserver: port: 9100启动项目，访问http://localhost:9100：微服务引入Zipkin接着我们需要在Server-Provider1和Server-Provider2里引入Zipkin服务。分别在Server-Provider1和Server-Provider2里添加Zipkin相关依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-sleuth-zipkin&lt;/artifactId&gt;&lt;/dependency&gt;然后分别在Server-Provider1和Server-Provider2的配置文件里添加Zipkin服务地址：123spring: zipkin: base-url: http://localhost:9100至此，微服务改造完毕。测试启动Server-Provider1和Server-Provider2，再次往Server-Provider1发送多个http://localhost:9000/hello请求，当最后一个参数为true的时候，说明该跟踪信息会输出给Zipkin Server：这时候访问http://localhost:9100，观察Zipkin web页面：点击下方的跟踪信息，我们可以看到整个链路经过了哪些服务，总耗时等信息：点击“依赖分析”也可以看到请求里微服务的关系：这里之所以要往Server-Provider1发送多个http://localhost:9000/hello请求是因为spring.sleuth.sampler.percentage默认值为0.1，即采样率才1/10。如果想每次请求都被采样，即每次请求跟踪信息的第四个参数都为true的话，可以将这个值设置为1。数据存储这些跟踪信息在Zipkin-Server服务重启后便会丢失，我们可以将这些信息存储到MySQL数据库中。我们在Zipkin-Server中添加MySQL数据库驱动和JDBC依赖：123456789101112&lt;dependency&gt; &lt;groupId&gt;io.zipkin.java&lt;/groupId&gt; &lt;artifactId&gt;zipkin-autoconfigure-storage-mysql&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;然后在application.yml中添加数据库连接信息：123456789spring: datasource: url: jdbc:mysql://127.0.0.1:3306/zipkin?useUnicode=true&amp;characterEncoding=utf-8 driver-class-name: com.mysql.jdbc.Driver username: root password: 123456zipkin: storage: type: mysql配置文件中同时通过zipkin.storage.type=mysql指定了Zipkin的存储方式为MySQL。接下来创建数据库和数据库表，新建一个名为zipkin的数据库：然后导入库表，库表SQL文件在io.zipkin.java:zipkin-storage-mysql:2.6.1依赖里可以找到：创建完后，我们重启Zipkin-Server，发送http://localhost:9000/hello请求，然后查看数据库会发现跟踪信息已经存储在库表里了：Zipkin API正如上面所说的，Zipkin提供了RESTful API供我们调用，在启动Zipkin-Server的时候，控制台打印日志包含如下信息：这些接口的功能如下表所示：接口请求方式描述/trace/{traceIdHex}GET根据Trace ID获取指定跟踪信息的Span列表/tracesGET根据指定条件查询并返回符合条件的trace清单/dependenciesGET用来获取通过收集到的Span分析出的依赖关系/servicesGET用来获取服务列表/spansGET根据服务名来获取所有的Span名也可以参考https://zipkin.io/zipkin-api/。源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/43.Spring-Cloud-Sleuth。参考文章 Spring Cloud微服务实战]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Spring Cloud Bus刷新配置]]></title>
    <url>%2Fblog%2FSpring-Cloud-Bus.html</url>
    <content type="text"><![CDATA[在上一节Spring Cloud Config统一配置管理中，我们实现了通过往Config-Client发送/refreshPOST请求来刷新配置。不过这种方式只对单个Config-Client有效（往哪个Config-Client发送刷新请求，哪个配置就得到刷新，剩下的Config-Client获取的仍是旧的配置信息）。当Config-Client实例集群数量较多时，如果都要手动一个一个去刷新配置，不仅麻烦还容易遗漏。值得庆幸的是，我们可以借助Spring Cloud Bus来自动刷新集群的配置信息。Spring Cloud Bus使用轻量级的消息代理（如RabbitMQ，Kafka）连接分布式系统的节点，可以以广播的形式将一些变更信息（如配置的变更）扩散到分布式链路中去。所以我们可以在Config-Server和Config-Client集群中加入Spring Cloud Bus，然后往某个Config-Server实例发送/refresh请求来刷新集群中所有实例的配置信息。在引入Spring Cloud Bus之前，我们先来简单验证下开头的结论。我们用上一节的源码为基础，来搭建Eureka-Server、Config-Server和Config-Client的集群。将这三个项目打成jar包后，分别使用以下命令来启动一个双节点的Eureka-Server集群：12java -jar Eureka-Service-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer1java -jar Eureka-Service-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer2然后分别使用以下命令来启动一个双节点的Config-Server集群：12java -jar Config-Server-0.0.1-SNAPSHOT.jar --server.port=12579java -jar Config-Server-0.0.1-SNAPSHOT.jar --server.port=12580最后分别使用以下命令来启动一个双节点的Config-Client集群：12java -jar Config-Client-0.0.1-SNAPSHOT.jar --server.port=12581java -jar Config-Client-0.0.1-SNAPSHOT.jar --server.port=12582访问http://localhost:8080/查看集群节点是否都启动成功：这时候我们访问http://localhost:12581/message查看message的值：接着手动修改Git仓库里的message值为&#39;呵呵呵呵&#39;，并往12581端口的Config-Client发送刷新请求：12&gt; curl -u mrbird:123456 -X POST http://localhost:12581/refresh[&quot;config.client.version&quot;,&quot;message&quot;]再次访问http://localhost:12581/message：可以看到12581端口的Config-Client获取的配置信息已经得到了更新，那12582端口的Config-Client呢？访问http://localhost:12582/message看看结果：可看到，其获取的配置仍然是旧的。这也证实了我们一开始的结论。引入Spring Cloud BusSpring Cloud Bus支持RabbitMQ和Kafka等消息中间件，这里只介绍配合RabbitMQ的使用方式。RabbitMQ的安装与启动可以参考https://mrbird.cc/Spring-Cloud-Hystrix-Dashboard.html中的介绍。在Config-Server和Config-Client的pom中引入spring-cloud-starter-bus-amqp和spring-boot-starter-actuator依赖：12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-bus-amqp&lt;/artifactId&gt;&lt;/dependency&gt;其中spring-cloud-starter-bus-amqp是Spring Cloud Bus的RabbitMQ实现，刷新用的端点由spring-boot-starter-actuator提供。然后在Config-Server和Config-Client的application.yml中引入RabbitMQ的连接信息：12345678910spring: rabbitmq: # RabbitMQ IP host: localhost # RabbitMQ Port port: 5672 # default RabbitMQ username username: guest # default RabbitMQ password password: guest到这里，对Config-Server和Config-Client改造就完成了，没错就是这么简单🙂。我们重新打包Config-Server和Config-Client，然后运行以下命令启动双节点Config-Server集群：12java -jar Config-Server-0.0.1-SNAPSHOT.jar --server.port=12579java -jar Config-Server-0.0.1-SNAPSHOT.jar --server.port=12580接着分别使用以下命令来启动一个双节点的Config-Client集群：12java -jar Config-Client-0.0.1-SNAPSHOT.jar --server.port=12581java -jar Config-Client-0.0.1-SNAPSHOT.jar --server.port=12582启动后我们访问RabbitMQ的控制页面：http://localhost:15672，可看到在Queues中多了四个springCloudBus队列：手动修改Git仓库里message的配置值为&#39;spring cloud bus&#39;，然后往任意一个Config-Server节点发送/bus/refreshPOST请求：1curl -u mrbird:123456 -X POST http://localhost:12580/bus/refresh分别访问http://localhost:12581/message和http://localhost:12582/message：配置都已刷新成功。WebHooks配合WebHooks可以实现自动配置刷新，在配置得到修改的时候它可以代替我们向Config-Server发送刷新请求。以码云为例，添加一个WebHooks：由于这里是在本地运行测试没有公网IP，所以没法测试，这里就不演示了。源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/42.Spring-Cloud-Bus]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Cloud Config统一配置管理]]></title>
    <url>%2Fblog%2FSpring-Cloud-Config.html</url>
    <content type="text"><![CDATA[Spring Cloud Config可以对微服务配置进行统一的外部管理，并且默认采用Git来管理配置信息。相对于传统的每个微服务对应一份自个儿的配置文件来说，通过Spring Cloud Config统一管理所有微服务配置具有如下优点：1.集中管理微服务配置，当微服务数量众多的时候，使用这种方式会更为方便；2.通过Git管理微服务配置，方便追踪配置修改记录；3.可以在应用运行期间修改配置，微服务能够自动更新配置。Spring Cloud Config包含了服务端Server和客户端Client。服务端用于从Git仓库中加载配置，并且缓存到本地；客户端用于从服务端获取配置信息。所以为了演示Spring Cloud Config，我们先来搭建一个服务端。搭建Config-Server在搭建Config-Server之前，我们需要创建好一个存储配置文件的Git仓库。这里以码云为例子，创建一个名称为Spring-Cloud-Config的参考，然后往仓库的master分支push四个配置文件：四个配置文件中分别都包含了一个message属性：febs.yml:1message: 'default properties (master v1.0)'febs-dev.yml:1message: 'dev properties (master v1.0)'febs-test.yml:1message: 'test properties (master v1.0)'febs-pro.yml:1message: 'pro properties (master v1.0)'接着创建一个test分支，同样push这四个配置文件，不过配置文件中message属性的内容末尾都改为了(test v1.0)。创建好配置文件仓库后，我们新建一个Spring Boot项目，artifactId为Config-Server，然后引入如下依赖：12345678910111213141516171819202122&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Edgware.SR3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;在入口类中加入@EnableConfigServer注解，开启Spring Cloud Config服务端功能。接着配置application.yml：123456789101112spring: application: name: config-server cloud: config: server: git: uri: https://gitee.com/mrbird/spring-cloud-config username: xxx password: xxxserver: port: 12580uri的末尾加不加.git都可以。配置具体含义如下：spring.cloud.config.server.git.uri：配置了Git仓库的地址，这里用的是码云，当然你也可以使用别的Git代码托管平台；spring.cloud.config.server.git.username：仓库用户名，即Git托管平台的用户名；spring.cloud.config.server.git.password：仓库密码，即Git托管平台的密码。这里服务端的端口号为12580。启动应用，我们便可以使用下面这些格式来访问配置信息了：/{application}/{profile}[/{label}]/{application}-{profile}.yml/{label}/{application}-{profile}.yml/{application}-{profile}.properties/{label}/{application}-{profile}.properties比如当我们访问http://localhost:12580/master/febs-test时，响应信息如下所示：访问http://localhost:12580/master/febs-test.yml：访问http://localhost:12580/test/febs-test.yml：至此服务端搭建成功。搭建Config-Client新建一个Spring Boot项目，artifactId为Config-Client，然后引入如下依赖：1234567891011121314151617181920212223242526&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Edgware.SR3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;编写一个Controller，用于测试获取Config-Server中配置文件的message属性值：1234567891011@RestControllerpublic class TestController &#123; @Value("$&#123;message&#125;") private String message; @GetMapping("message") public String getMessage() &#123; return this.message; &#125;&#125;要想让上面的代码顺利的获取到message属性值，我们还需要在配置文件中进行一些额外配置：1234567891011spring: application: name: febs cloud: config: profile: dev label: test uri: http://localhost:12580server: port: 12581值得注意的是，这里配置文件并不是叫application.yml，而是必须命名为bootstrap.yml。上面配置含义如下：spring.application.name: 对应配置文件规则中的{application}；spring.cloud.config.profile: 对应配置文件规则中的{profile}部分；spring.cloud.config.label: 对应配置文件规则中的{label}部分；spring.cloud.config.uri: 对应Config-Server的地址。通过上面的配置，message的内容应该是Git仓库中test分支，febs-dev.yml中的message属性值。下面我们来证实一下这个推测。启动Config-Client（Config-Server没启动的话得先启动Config-Server），访问http://localhost:12581/message：结果证实了我们的推测。Config-Server额外配置上面我们简单的地搭建了一个Config-Server，下面我们来进一步了解Config-Server的可用配置。占位符的使用在Config-Server中，除了固定配置一个Git仓库地址外，我们也可以使用占位符来灵活的指定Git仓库地址。将上面Config-Server的Git仓库地址改为：123456spring: cloud: config: server: git: uri: https://gitee.com/mrbird/&#123;application&#125;这里使用占位符{application}来代替上面的spring-cloud-config，通过这种配置，我们可以让不同的Config-Client去不同的Git仓库获取配置。比如，当Config-Client的项目名称为febs的时候，对应Git仓库地址为:https://gitee.com/mrbird/febs，当名称为test时，对应Git仓库地址为:https://gitee.com/mrbird/test。这样我们就可以为不同的项目配置不同的Git仓库。子目录支持除了使用占位符为每个项目创建单独的Git仓库来存储配置信息外，我们也可以只创建一个Git仓库来存储配置，只不过是将不同的项目配置放置到不同的目录下，只需要像下面这样配置即可：123456789spring: cloud: config: server: git: uri: https://gitee.com/mrbird/spring-cloud-config/ username: xxxx password: xxxx search-paths: '&#123;application&#125;'通过上面的配置，我们可以实现在https://gitee.com/mrbird/spring-cloud-config/仓库中，一个Config-Client对应一个配置目录的效果，即当Config-Client的项目名称为febs的时候，其搜索配置的目录为https://gitee.com/mrbird/spring-cloud-config/febs。这里search-paths的占位符必须加上单引号&#39;&#39;，否则没办法正确读取配置，具体可参考：https://blog.csdn.net/weixin_35022258/article/details/79019033clone-on-start默认情况下Config-Server在启动的时候并不会马上就去Git参考clone配置文件，只有当Config-Clinet从Config-Server获取相关配置信息的时候，其才会去进行clone操作。我们可以将clone-on-start属性设置为true，其Config-Server在启动的时候就进行clone操作：123456spring cloud: config: server: git: clone-on-start: true这样做的好处在于，当Git连接信息有误时，可以马上发现。整合Spring SecurityConfig-Server中包含了Git连接信息，为了使其更加安全，我们可以通过Spring Security来做用户名密码认证。在Config-Server中加入Spring Security依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt;然后在Config-Server的配置文件application.yml中加入用户名和密码：1234security: user: name: mrbird password: 123456与此同时，我们也需要在Config-Client中配置Config-Server的用户名和密码，否则在获取配置的时候将报401错误：12345spring: cloud: config: username: mrbird password: 123456加密解密截至目前为止，Config-Server中Git仓库的密码是直接明文配置的，我们可以对这些敏感信息进行加密处理。在此之前，需要先安装JCE（Java Cryptography Extension），本文使用的是JDK 8，与之对应的JCE下载地址为：https://www.oracle.com/technetwork/java/javase/downloads/jce-all-download-5170447.html：解压后，包含三个文件：把它们复制到$JAVA HOME/jre/lib/security目录下即可。对称加密使用对称加密的方式需要在Config-Server中配置加密用的密钥：12encrypt: key: hello配置好后重启Config-Server，访问http://localhost:12580/encrypt/status查看密钥是否配置成功:可见配置并未生效，查看Spring-Cloud-Config的Github issue找到了解决办法：https://github.com/spring-cloud/spring-cloud-config/issues/767。解决办法就是需要将密钥配置在bootstrap.yml中，再次访问http://localhost:12580/encrypt/status：假如我们Git仓库的密码为mrbird123，要对其加密的话我们可以使用curl命令来获取加密后的密码：因为Config-Server设置了用户名和密码，所以在使用curl命令时，需要带上-u mrbird:123456。可看到mrbird123被加密成了f413c4d441a7a00ef82d9aedfab087dae51772276c0201a9d9b13df3e2a9b64c，因为是对称加密，所以我们也可以将f413c4d441a7a00ef82d9aedfab087dae51772276c0201a9d9b13df3e2a9b64c解密：我们用加密后的密码替换掉Git连接的明文密码：123456spring: cloud: config: server: git: password: '&#123;cipher&#125;155315857d26a3235027679a015aa7c71a15ca43ae77e2a11ce9d122d1f4bd043d18'使用{cipher}开头表明这是一个加密的内容，Config-Server会自动为其解密。当然，你还可以为任何你想加密的属性值进行加密，不限于密码。非对称加密 非对称加密相比对称加密来说显得更加安全，要生成非对称加密的密码，需要借助keytool命令来生成密钥。keytool是JDK中的一个密钥和证书 管理工具。 位于%JAVA_HOME%\bin\目录下：我们使用如下命令来生成一个密钥文件：命令执行结束后，会在%JAVA_HOME%\bin\目录下生成一个 config-server.keystore文件。密钥文件的有效期默认为90天，我们可以使用-validity 365来改变其有效天数为365天。接着将密钥文件拷贝到Config-Server的resources目录下，然后在bootstrap.yml中添加如下配置：123456789#encrypt:## key: helloencrypt: key-store: location: classpath:config-server.keystore alias: Config-Server password: 123456 secret: 654321其中encrypt.key-store.password为第一次输入的口令，encrypt.key-store.secret为&lt;Config-Server&gt;的密钥口令的密钥口令。我们将Git连接的密码改回明文，然后重启Config-Server，运行如下命令重新对Git连接密码进行加密：然后将加密后的密码替换明文密码即可：123456spring: cloud: config: server: git: password: '&#123;cipher&#125;AQAjzCKbjLdmgBt+Zm0/jznvbwbCAZ7j1hZKl1NtcmdEj2GFGzF02Bi5jIk9ETz92XOV3z9U5UZTEBMLblKFlZqEzFNooJAZSEmCdwDY9iI5mbhe5oGApxlhbzF4pccF9wtkt4YIW3ElQWCfg01FhDuBiDIZ8NPlMJXRDjIV+/rhla/MkdHVWaphWW3PbHlF95D7bjssCLlyeDB5BjF4orOMpVdVAT/BZA5ANy+xDbEUiOd54E9E9pYAwxG+0qW6a3PvK6OCFozVfPgvT5xorAiJ50AzIH64ZjqILSPonpk3hcIm1PlTguOE5x2BYvgxYmq/CnlkhML07yJVElVAaWh4sTIs8I5hAwQ58SvAcgq/oDE5QluF+dHvoZFn748yCe0='Config-Client额外配置刷新配置在Config-Server和Config-Client都启动后，如果这时候Git仓库存储的配置信息改变了，在不重启Config-Client的情况下，配置信息是不会跟着更新的。那么如何在Git仓库存储的配置得到改变的时候也刷新Config-Client中获取到的配置值呢？很简单，我们只需要对Config-Client进行简单的改造：在Config-Client中添加spring-boot-starter-actuator依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;该依赖包含了/refresh端点，可以用来刷新配置。然后在获取配置的Controller上加入@RefreshScope注解：123456789101112@RestController@RefreshScopepublic class TestController &#123; @Value("$&#123;message&#125;") private String message; @GetMapping("message") public String getMessage() &#123; return this.message; &#125;&#125;值得注意的是，我们需要在Config-Client的配置文件中加入如下配置来关闭认证，否则我们无权访问/refresh端点，具体可见https://github.com/spring-guides/gs-centralized-configuration/issues/5：123management: security: enabled: false重启Config-Client，访问http://localhost:12581/message:这时候我们将Git仓库中对应的配置信息改为测试配置刷新，再次访问http://localhost:12581/message会发现值还是dev properties (master v1.0)。接着我们使用以下命令来刷新配置：这时候再次访问http://localhost:12581/message：可看到在不重启Config-Client的前提下配置值已经得到了更新。集群配置如果Config-Server只是单机部署的话，当其遇到问题宕机后，所有从Config-Server获取配置信息的微服务都无法正常工作了，这是灾难性的。所以我们很有必要对Config-Server进行集群处理。集群的方式有很多，这里介绍通过将Config-Server注册到Eureka的方式来搭建集群。我们使用在Spring Cloud Eureka服务治理一节中的Eureka-Service来构建Eureka-Server服务注册中心，使用以下命令启动Eureka-Server集群：12java -jar Eureka-Service-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer1java -jar Eureka-Service-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer2启动后，访问http://localhost:8080/:说明Eureka集群启动成功。 接下来开始对Config-Server进行改造，将其注册到Eureka服务注册中心。在Config-Server中加入Eureka依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;&lt;/dependency&gt;然后在Config-Server的启动类中加入@EnableDiscoveryClient注解，用于将服务注册到Eureka服务注册中心上：12345678@SpringBootApplication@EnableConfigServer@EnableDiscoveryClientpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;最后在配置类application.yml中指定Eureka服务注册中心的地址：1234eureka: client: serviceUrl: defaultZone: http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/因为之前Eureka服务注册中心添加了认证，所以需要在url中指定用户名和密码。改造好后，启动Config-Server，再次访问Eureka服务注册中心地址：http://localhost:8080/：可看到Config-Server已经成功注册了。接着开始改造Config-Client，在其pom中同样引入Eureka依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;&lt;/dependency&gt;然后在bootstrap.yml中指定获取Config-Server服务的地址：1234567891011121314151617spring: application: name: febs cloud: config: profile: dev label: master username: mrbird password: 123456 discovery: enabled: true service-id: config-servereureka: client: serviceUrl: defaultZone: http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/其中eureka.client.serviceUrl.defaultZone指定了Eureka服务注册中心的地址；spring.cloud.config.discovery.enabled指定为true开启获取服务的功能，spring.cloud.config.discovery.service-id表明需要获取服务的名称为config-server。最后在Config-Client的启动类中引入@EnableDiscoveryClient注解：1234567@SpringBootApplication@EnableDiscoveryClientpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;启动Config-Client，访问：http://localhost:12581/message可看到，配置信息同样获取成功。参考文章：Spring Cloud微服务实战http://cloud.spring.io/spring-cloud-static/spring-cloud-config/1.4.3.RELEASE/single/spring-cloud-config.html源码地址：https://github.com/wuyouzhuguli/SpringAll/tree/master/41.Spring-Cloud-Config]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Cloud Zuul服务网关]]></title>
    <url>%2Fblog%2FSpring-Cloud-Zuul-Router.html</url>
    <content type="text"><![CDATA[在微服务的架构中，服务网关就是一个介于客户端与服务端之间的中间层。在这种情况下，客户端只需要跟服务网关交互，无需调用具体的微服务接口。这样的好处在于，客户端可以降低复杂性；对于需要认证的服务，只需要在服务网关配置即可；同样也方便后期微服务的变更和重构，即微服务接口变更只需在服务网关调整配置即可，无需更改客户端代码。Zuul是一款由Netflix开发的微服务网关开源软件，可以和其自家开发的Eureka，Ribbon和Hystrix配合使用，Spring Cloud对其进行了封装。Spring Cloud Zuul入门在构建微服务网关之前，我们先将相关微服务搭建好。这里我们直接使用前面的例子，分别启动如下服务：启动Eureka-Server集群，端口号为8080和8081；启动一个Eureka-Client，端口号为8082；启动一个Feign-Consumer，端口号为9000；查看http://localhost:8080/：其中Feign-Consumer虽然之前我们将它定义为服务消费者，但其也可以充当服务提供者的角色。启动好这些微服务后，我们开始构建一个微服务网关Zuul-Gateway。新建一个Spring Boot项目，artifactId为Zuul-Gateway，然后引入如下依赖：123456789101112131415161718192021&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Edgware.SR3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;查看依赖关系可看到spring-cloud-starter-zuul包含以下依赖：因为spring-cloud-starter-zuul依赖已经包含了Hystrix和Ribbon，所以zuul支持前面介绍的Hystrix和Ribbon相关配置。接着在Spring Boot的入口类上标注@EnableZuulProxy注解，开启Zuul服务网关的功能：1234567@EnableZuulProxy@SpringBootApplicationpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;最后简单配置下application.yml：12345spring: application: name: Zuul-Gatewayserver: port: 12580至此一个简单的Zuul微服务网关就搭建好了，下面开始对路由规则进行配置。路由配置传统配置传统配置就是手动指定服务的转发地址，如在yml中配置：12345zuul: routes: api-a: path: /api-a/** url: http://localhost:8082通过上面的配置，所有符合/api-a/**规则的访问都将被路由转发到http://localhost:8082/地址上，即当我们向服务网关访问http://localhost:12580/api-a/hello请求的时候，请求将被转发到http://localhost:8082/hello服务上：基于服务名称配置传统的配置方式不便之处在于需要知道服务的具体地址和端口号等信息，我们可以借助Eureka来实现通过服务名称配置路由。在Zuul-Gateway项目中引入Eureka依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;&lt;/dependency&gt;然后在入口类中加入@EnableDiscoveryClient注解，使其具有获取服务的能力。接着在yml中配置基于服务名称的路由：123456789101112eureka: client: serviceUrl: defaultZone: http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/zuul: routes: api-b: path: /api-b/** serviceId: server-provider api-c: path: /api-c/** serviceId: server-consumer上面我们首先指明了Eureka服务注册中心的地址，然后配置了api-b和api-c的路由，它们都是通过serviceId来指定服务名称的。启动Zuul-Gateway，访问：http://localhost:12580/api-b/hello：访问：http://localhost:12580/api-c/user/1：基于服务名称的路由配置还可以进行简化，格式为zuul.routes.&lt;serviceid&gt;=&lt;path&gt;，所以我们可以将api-b和api-c的路由配置修改为：123456zuul: routes: server-provider: path: /api-b/** server-consumer: path: /api-c/**默认路由配置规则我们尝试访问http://localhost:12580/server-consumer/user/1:我们压根没配置这个路由啊，为什么可以正常响应？？其实Zuul配合Eureka后将会成一套默认的配置规则。当我们使用服务名称作为请求的前缀路径时，实际上就会匹配上类似下面的默认路由配置：12345zuul: routes: server-consumer: path: /server-consumer/** serviceId: server-consumer如果不想启动这个默认配置，我们可以使用zuul.ignored-services配置来关闭，如在yml中加入如下配置之后，再次访问http://localhost:12580/server-consumer/user/1将返回404：12zuul: ignored-services: server-consumer设置为zuul.ignored-services=*的时候将关闭所有默认路由配置规则。优先级假如某个请求路径可以和多个路由配置规则相匹配的话，Zuul根据匹配的先后顺序来决定最终使用哪个路由配置。比如：12345678zuul: routes: api-c: path: /api-c/** serviceId: server-consumer api-d: path: /api-c/user/1 serviceId: lol当我们访问http://localhost:12580/api-c/user/1的时候，api-c和api-d的路由配置都可以匹配上，但由于api-c先于api-d配置，所以最终生效的是api-c的配置。假如将api-c和api-d的配置顺序调换，再次访问http://localhost:12580/api-c/user/1时将抛出异常，原因是不存在服务名为lol的服务：Caused by: com.netflix.client.ClientException: Load balancer does not have available server for client: lol前缀配置zuul.prefix可以为网关的请求路径加个前缀，比如：12zuul: prefix: /gateway这样配置后，我们通过Zuul网关获取服务的时候，路径也得加上这个前缀，如http://localhost:12580/gateway/api-c/user/1。本地跳转Zuul网关除了支持将服务转发到各个微服务上之外，还支持将服务跳转到网关本身的服务上，比如现在yml中有如下一段配置:12345zuul: routes: api-e: path: /api-e/** url: forward:/test当访问http://localhost:12580/gateway/api-e/hello时，Zuul会从本地/test/hello获取服务。我们在Zuul-Gateway入口类中加上该REST服务：12345678910111213@EnableZuulProxy@EnableDiscoveryClient@SpringBootApplication@RestControllerpublic class DemoApplication &#123; @GetMapping("/test/hello") public String hello() &#123; return "hello zuul"; &#125; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;效果如下所示：头部过滤 &amp; 重定向在使用Zuul网关的时候你可能会遇到Cookie丢失的情况，这是因为默认情况下Zuul会过滤掉HTTP请求头中的一些敏感信息，这些敏感信息通过下面的配置设定：12zuul: sensitive-headers: Cookie,Set-Cookie,Authorization如果想关闭这个默认配置，通过设置全局参数为空来覆盖默认值：12zuul: sensitive-headers:如果只想关闭某个路由的HTTP请求头过滤，可以这样：1234zuul: routes: api-a: sensitive-headers:使用Zuul另一个常见问题是重定向的问题，可以通过下面的设置解决：12zuul: add-host-header: true过滤器Zuul另一个核心的功能就是请求过滤。Zuul中默认定义了4种不同生命周期的过滤器类型，在如下图所示图片来自于 Zuul GitHub这4种过滤器处于不同的生命周期，所以其职责也各不相同：PRE：PRE过滤器用于将请求路径与配置的路由规则进行匹配，以找到需要转发的目标地址，并做一些前置加工，比如请求的校验等；ROUTING：ROUTING过滤器用于将外部请求转发到具体服务实例上去；POST：POST过滤器用于将微服务的响应信息返回到客户端，这个过程种可以对返回数据进行加工处理；ERROR：上述的过程发生异常后将调用ERROR过滤器。ERROR过滤器捕获到异常后需要将异常信息返回给客户端，所以最终还是会调用POST过滤器。核心过滤器Spring Cloud Zuul为各个生命周期阶段实现了一批过滤器，如下所示：这些过滤器的优先级和作用如下表所示：生命周期优先级过滤器功能描述pre-3ServletDetectionFilter标记处理Servlet的类型pre-2Servlet30WrapperFilter包装HttpServletRequest请求pre-1FormBodyWrapperFilter包装请求体route1DebugFilter标记调试标志route5PreDecorationFilter处理请求上下文供后续使用route10RibbonRoutingFilterserviceId请求转发route100SimpleHostRoutingFilterurl请求转发route500SendForwardFilterforward请求转发post0SendErrorFilter处理有错误的请求响应post1000SendResponseFilter处理正常的请求响应其中优先级数字越小，优先级越高。要关闭这些过滤器可以在applicaiton.yml中按照格式zuul.&lt;SimpleClassName&gt;.&lt;filterType&gt;.disable=true配置即可。比如关闭SendResponseFilter过滤器：12345zuul: SendResponseFilter: post: disable: true自定义Zuul过滤器我们自定义一个PreSendForwardFilter用于获取请求转发前的一些信息：1234567891011121314151617181920212223import com.netflix.zuul.ZuulFilter;public class PreSendForwardFilter extends ZuulFilter &#123; @Override public String filterType() &#123; return null; &#125; @Override public int filterOrder() &#123; return 0; &#125; @Override public boolean shouldFilter() &#123; return false; &#125; @Override public Object run() &#123; return null; &#125;&#125;可以看到自定义Zuul过滤器只需要继承ZuulFilter，然后实现以下四个抽象方法即可：filterType：对应Zuul生命周期的四个阶段：pre、post、route和error；filterOrder：过滤器的优先级，数字越小，优先级越高；shouldFilter：方法返回boolean类型，true时表示是否执行该过滤器的run方法，false则表示不执行；run：过滤器的过滤逻辑。继续完善PreSendForwardFilter：123456789101112131415161718192021222324252627282930@Componentpublic class PreSendForwardFilter extends ZuulFilter &#123; private Logger log = LoggerFactory.getLogger(this.getClass()); @Override public String filterType() &#123; return "pre"; &#125; @Override public int filterOrder() &#123; return 1; &#125; @Override public boolean shouldFilter() &#123; return true; &#125; @Override public Object run() &#123; RequestContext requestContext = RequestContext.getCurrentContext(); HttpServletRequest request = requestContext.getRequest(); String host = request.getRemoteHost(); String method = request.getMethod(); String uri = request.getRequestURI(); log.info("请求URI：&#123;&#125;，HTTP Method：&#123;&#125;，请求IP：&#123;&#125;", uri, method, host); return null; &#125;&#125;这时候访问http://localhost:12580/api-a/hello，控制台将打印出：1c.e.demo.filter.PreSendForwardFilter : 请求URI：/api-a/hello，HTTP Method：GET，请求IP：0:0:0:0:0:0:0:1源码链接 https://github.com/wuyouzhuguli/SpringAll/tree/master/39.Spring-Cloud-Zuul-Router参考资料： Spring Cloud微服务实战]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Cloud</tag>
        <tag>Zuul</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Cloud Feign 声明式服务调用]]></title>
    <url>%2Fblog%2FSpring-Cloud-Feign.html</url>
    <content type="text"><![CDATA[前面我们分别通过Spring Cloud Ribbon和Spring Cloud Hystrix实现了客户端负载均衡和服务容错，而Spring Cloud Feign不但整合了这两者的功能，而且还提供了一种比Ribbon更简单的服务调用方式 ——— 声明式服务调用。在Spring Cloud Feign中编写服务调用代码非常简单，几乎可以直接将服务提供者的代码复制过来，改为接口即可，下面通过例子来演示这个特性。搭建Feign Consumer创建一个新的Spring Boot应用，版本为1.5.13.RELEASE，artifactId改为Feign-Consumer，并引入下面这些依赖：12345678910111213141516171819202122232425&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Edgware.SR3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-feign&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;除了spring-cloud-starter-feign依赖外，我们还引入了spring-cloud-starter-eureka，目的是为了从Eureka服务注册中心获取服务。在Spring Boot的入口类中加入@EnableFeignClients和@EnableDiscoveryClient注解，用于开启Spring Cloud Feign和服务注册与发现：12345678@EnableDiscoveryClient@EnableFeignClients@SpringBootApplicationpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;在前面几节中，我们曾在服务提供者Eureka-Client中定义了一个UserController，代码如下所示：1234567891011121314151617181920212223242526272829303132333435@RestController@RequestMapping("user")public class UserController &#123; private Logger log = LoggerFactory.getLogger(this.getClass()); @GetMapping("/&#123;id:\\d+&#125;") public User get(@PathVariable Long id) &#123; log.info("获取用户id为 " + id + "的信息"); return new User(id, "mrbird", "123456"); &#125; @GetMapping public List&lt;User&gt; get() &#123; List&lt;User&gt; list = new ArrayList&lt;&gt;(); list.add(new User(1L, "mrbird", "123456")); list.add(new User(2L, "scott", "123456")); log.info("获取用户信息 " + list); return list; &#125; @PostMapping public void add(@RequestBody User user) &#123; log.info("新增用户成功 " + user); &#125; @PutMapping public void update(@RequestBody User user) &#123; log.info("更新用户成功 " + user); &#125; @DeleteMapping("/&#123;id:\\d+&#125;") public void delete(@PathVariable Long id) &#123; log.info("删除用户成功 " + id); &#125;&#125;在Spring Cloud Ribbon中访问这些服务需要通过RestTemplate对象来实现，并且参数绑定的过程也比较繁琐。Spring Cloud Feign对这个步骤进行了进一步的封装，在Feign Consumer中调用这些服务只需要定义一个UserService接口，然后将UserController中的代码复制过并将方法体去掉即可，如：123456789101112131415161718@FeignClient("Server-Provider")public interface UserService &#123; @GetMapping("user/&#123;id&#125;") public User get(@PathVariable("id") Long id); @GetMapping("user") public List&lt;User&gt; get(); @PostMapping("user") public void add(@RequestBody User user); @PutMapping("user") public void update(@RequestBody User user); @DeleteMapping("user/&#123;id&#125;") public void delete(@PathVariable("id") Long id);&#125;对比Feign Consumer中的UserService和Eureka-Client中UserController代码，两者是不是很相似？在UserService中，我们通过@FeignClient(&quot;Server-Provider&quot;)注解来获取我们需要的服务，其中Server-Provider不区分大小写。需要注意的是，在定义各参数绑定时，@RequestParam、@RequestHeader等可 以指定参数名称的注解，它们的value千万不能少。在SpringMVC 程序中，这些注解会根据参数名来作为默认值，但是在Feign中绑定参数必须通过value属性来指明具体的参数名，不然会抛出illegalStateException异常，value 属性不能为空。接下来我们在Feign Consumer中定义一个TestController，来调用UserService中定义的服务：123456789101112131415161718192021222324252627282930313233@RestControllerpublic class TestController &#123; @Autowired private UserService userService; @GetMapping("user/&#123;id&#125;") public User getUser(@PathVariable Long id) &#123; return userService.get(id); &#125; @GetMapping("user") public List&lt;User&gt; getUsers() &#123; return userService.get(); &#125; @PostMapping("user") public void addUser() &#123; User user = new User(1L, "mrbird", "123456"); userService.add(user); &#125; @PutMapping("user") public void updateUser() &#123; User user = new User(1L, "mrbird", "123456"); userService.update(user); &#125; @DeleteMapping("user/&#123;id&#125;") public void deleteUser(@PathVariable Long id) &#123; userService.delete(id); &#125;&#125;最后配置一下application.yml：1234567891011server: port: 9000 spring: application: name: Server-Consumer eureka: client: serviceUrl: defaultZone: http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/上面配置指定了Eureka服务注册中心的地址，用于获取服务。最后我们分别启动以下服务：启动Eureka-Server集群，端口号为8080和8081；启动两个Eureka-Client，端口号为8082和8083；启动Feign-Consumer，端口号为9000。多次访问http://localhost:9000/user/1服务，观察8082和8083服务的控制台：12345678910111213142018-06-10 14:27:38.105 INFO 10120 --- [nio-8082-exec-8] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-10 14:27:39.989 INFO 10120 --- [nio-8082-exec-7] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-10 14:27:41.197 INFO 10120 --- [nio-8082-exec-6] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-10 14:27:41.802 INFO 10120 --- [nio-8082-exec-5] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-10 14:27:42.224 INFO 10120 --- [nio-8082-exec-4] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-10 14:27:42.865 INFO 10120 --- [nio-8082-exec-3] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-10 14:27:43.296 INFO 10120 --- [nio-8082-exec-2] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-10 14:27:38.358 INFO 9104 --- [nio-8083-exec-8] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-10 14:27:40.754 INFO 9104 --- [nio-8083-exec-7] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-10 14:27:41.397 INFO 9104 --- [nio-8083-exec-6] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-10 14:27:42.006 INFO 9104 --- [nio-8083-exec-5] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-10 14:27:42.445 INFO 9104 --- [nio-8083-exec-4] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-10 14:27:43.073 INFO 9104 --- [nio-8083-exec-3] c.e.demo.controller.UserController : 获取用户id为 1的信息使用Feign实现的消费者，依然是利用Ribbon维护了针对Seriver-Provider的服务列表信息，并且通过轮询实现了客户端负载均衡。而与Ribbon不同的是，通过Feign我们只需定义服务绑定接口，以声明式的方法，优雅而简单地实现了服务调用。Ribbon相关配置Spring Cloud Feign内部的客户端负载均衡是通过Ribbon来实现的，所以在Spring Cloud Feign中配置Ribbon，和之前在Spring Cloud Ribbon客户端负载均衡中介绍的Spring Cloud Ribbon配置一样，这里不再赘述。Hystrix相关配置要在Spring Cloud Feign中开启Hystrix，可以在yml中添加如下配置：123feign: hystrix: enabled: true剩下的Hystrix配置和之前在Spring Cloud Hystrix服务容错中介绍的Hystrix属性配置一样。在Spring Cloud Feign中配置服务降级和在Spring Cloud Hystrix中配置服务降级区别很大，下面具体来看下怎么在Feign-Consumer中配置服务降级。定义一个用于处理服务降级方法的类UserServiceFallback，并且实现上面定义的UserService接口：1234567891011121314151617181920212223242526272829@Componentpublic class UserServiceFallback implements UserService &#123; private Logger log = LoggerFactory.getLogger(this.getClass()); @Override public User get(Long id) &#123; return new User(-1L, "default", "123456"); &#125; @Override public List&lt;User&gt; get() &#123; return null; &#125; @Override public void add(User user) &#123; log.info("test fallback"); &#125; @Override public void update(User user) &#123; log.info("test fallback"); &#125; @Override public void delete(Long id) &#123; log.info("test fallback"); &#125;&#125;在UserService的中通过@FeignClient注解的fallback属性来指定对应的服务降级实现类:1234@FeignClient(value = "Server-Provider", fallback = UserServiceFallback.class)public interface UserService &#123; ...&#125;重启Feign-Consumer，并关闭Eureka Client服务，访问http://localhost:9000/user/1，由于Eureka-Client服务提供者都关闭了，所以这里会直接触发服务降级，响应结果如下：可看到响应信息为服务降级方法中的返回结果。其余Feign配置除了Ribbon和Hystrix配置之外，Feign也有一些自个儿的配置。请求压缩Spring Cloud Feign支持对请求与响应进行GZIP压缩，以减少通信过程中的性能损耗：123456feign: compression: request: enabled: true response: enabled: true同时，我们还能对请求压缩做一些更细致的设置，比如下面的配置内容指定了压缩的请求数据类型，并设置了请求压缩的大小下限，只有超过这个大小的请求才会对其进行压缩:123456feign: compression: request: enabled: true mime-types: text/xml,application/xml,application/json min-request-size: 2048日志配置Feign提供了日志打印的功能，Feign的日志级别分为四种：NONE: 不记录任何信息。BASIC: 仅记录请求方法、URL以及响应状态码和执行时间。HEADERS: 除了记录BASIC级别的信息之外，还会记录请求和响应的头信息。FULL: 记录所有请求与响应的明细，包括头信息、请求体、元数据等。日志级别默认为NONE，要改变级别可以在入口类中定义一个日志配置Bean：123456789101112@EnableDiscoveryClient@EnableFeignClients@SpringBootApplicationpublic class DemoApplication &#123; @Bean Logger.Level feignLoggerLevel() &#123; return Logger.Level.FULL; &#125; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;然后在yml中配置Feign客户端的日志级别为debug，Feign日志记录仅响应debug级别：1234567logging: level: com: example: demo: service: UserService: debug重启项目访问，可以看到控制台打印日志如下：12345678[UserService#get] &lt;--- HTTP/1.1 200 (506ms)[UserService#get] content-type: application/json;charset=UTF-8[UserService#get] date: Stu, 10 Jun 2018 01:44:45 GMT[UserService#get] transfer-encoding: chunked[UserService#get] [UserService#get] &#123;&quot;id&quot;:1,&quot;username&quot;:&quot;mrbird&quot;,&quot;password&quot;:&quot;123456&quot;&#125;[UserService#get] &lt;--- END HTTP (48-byte body)Flipping property: Server-Provider.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647源码链接 https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/33.Spring-Cloud-Feign-Declarative-REST-Client]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Cloud</tag>
        <tag>Feign</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Cloud Hystrix Dashboard仪表盘]]></title>
    <url>%2Fblog%2FSpring-Cloud-Hystrix-Dashboard.html</url>
    <content type="text"><![CDATA[Hystrix提供了Hystrix Dashboard来实时监控Hystrix的运行情况，通过Hystrix Dashboard反馈的实时信息，可以帮助我们快速发现系统中存在的问题，从而及时地采取应对措施。Spring Cloud对Hystrix Dashboard进行了整合，这里将介绍如何使用Hystrix Dashboard监控单个和多个Hystrix实例。监控单个Hystrix实例创建一个Spring Boot项目，Spring Boot版本为1.5.13.RELEASE，artifactId填Hystrix-Dashboard，然后引入如下依赖：12345678910111213141516171819202122232425&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Edgware.SR3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;稍微配置下yml：12345spring: application: name: Hystrix-Dashboardserver: port: 9002然后在入口类上加入注解@EnableHystrixDashboard来启用Hystrix Dashboard的功能。启动项目访问http://localhost:9002/hystrix就可以看到如下页面了：可以看到页面上提供了三种监控的模式：Cluster via Turbine(default cluster)、Cluster via Turbine(custom cluster)和Single Hystrix App：前两种都是集群监控的，下面再介绍，这里先介绍第三种单机监控。在上一节Spring Cloud Hystrix服务容错的基础上，要对Ribbon-Consumer进行监控还必须加入spring-boot-starter-actuator依赖，然后分别启动Eureka-Serve集群，Eureka-Client，Ribbon-Consumer，启动后在刚刚的监控页面上输入：http://localhost:9000/hystrix.stream ，然后往Ribbon-Consumer发几条请求，便可以看到如下监控页面：至于这张图上面的指标代表什么含义，我们可以参考官方给的图例：到这里我们已经实现了使用Hystrix Dashboard对单个Hystrix实例进行监控了，然而实际中一般会有多个Hystrix实例需要同时进行监控，下面我们使用Turbine来实现集群监控。Turbine集群监控使用Turbine实现对Hystrix的集群监控的思路是：Turbine从Eureka服务注册中心通过服务名Ribbon-Consumer获取服务实例，然后Hystrix Dashboard对Turbine进行监控，这样就实现了Hystrix Dashboard同时对多个Hystrix（Ribbon-consumer）实例同时进行监控的功能。创建一个Spring Boot项目，Spring Boot版本为1.5.13.RELEASE，artifactId填Turbine，然后引入如下依赖：1234567891011121314151617181920212223242526&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Edgware.SR3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-turbine&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;然后在入口类中加入@EnableTurbine来开启Turbine的功能，并且加入@EnableDiscoveryClient注解，开启服务获取功能。最后在yml中加入一些配置：1234567891011121314spring: application: name: Turbineserver: port: 9003eureka: client: serviceUrl: defaultZone: http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/turbine: app-config: Ribbon-Consumer cluster-name-expression: new String('default') combine-host-port: true上面配置了Eureka-Server的集群地址，并且指定了端口号为9003，应用名称为Turbine。剩下的配置为Turbine的配置，含义如下：turbine.app-config指定了需要收集监控信息的服务名，这里为Ribbon-Consumer；turbine.cluster-name-expression参数指定了集群名称为default, 当服务数量非常多的时候，可以启动多个Turbine 服务来构建不同的聚合集群， 而该参数可以用来区分这些不同的聚合集群，同时该参数值可以在Hystrix仪表盘中用来定位不同的聚合集群，只需在Hystrix Stream的URL中通过cluster参数来指定(即Cluster via Turbine(custom cluster))；turbine.combine-host-port参数设置为七rue, 可以让同一主机上的服务通过主机名与端口号的组合来进行区分， 默认情况下会以host来区分不同的服务，这会使得在本地调试的时候，本机上的不同服务聚合成一个服务来统计。配置完毕后，我们分别启动下面这些服务：启动Eureka-Server集群，端口号为8080和8081；启动一个Eureka-Client，端口号为8082；启动两个Ribbon-Consumer，端口号为9000和9001；启动Turbine服务，端口号为9003；最后启动Hystrix-Dashboard服务，端口号为9002。启动好这些服务后，访问Eureka-server的http://localhost:8080可看到这些实例：说明服务都已启动成功，我们观察Turbine的控制台，可以看到如下日志信息：即Turbine已经从服务注册中心找到了9000和9001端口的Ribbon-Consumer实例。这时候我们访问Hystrix-dashboard的地址http://localhost:9002/hystrix，在页面的地址栏输入http://localhost:9003/turbine.stream，然后分别往9000和9001端口的Ribbon-Consumer实例发送一些请求，这时候可以看到Dashboard的画面如下：可以看到Hosts的值已经是2了，并且由于两个Hystrix实例的名称都是Ribbon-Consumer，所以Turbine 会将相同名称的服务作为整体来看待，汇总成一个监控图。源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/31.Spring-Cloud-Hystrix-Dashboard-Turbine使用消息中间件除了直接用Turbine从服务注册中心获取Ribbon-Consumer实例监控数据外，还可以将Ribbon-Consumer的监控数据发送到消息中间件，然后Turbine从消息中间件中获取。这里我们选择RabbitMQ作为消息中间件。在安装RabbitMQ之前，需要先安装Erlang/OTP，下载地址为：http://www.erlang.org/downloads/，下载exe文件安装即可。安装完毕后，下载RabbitMQ，下载地址为http://www.rabbitmq.com/install-windows.html，下载exe文件安装即可。安装完RabbitMQ之后，我们到RabbitMQ安装目录的sbin下执行如下命令：1rabbitmq-plugins enable rabbitmq_management然后在浏览器中输入http://localhost:15672，用户名和密码都是guest，登录后可看到：说明启动成功。接下来我们对Ribbon-Consumer进行改造，实现其将监控信息输出到RabbitMQ，在pom中添加如下依赖：12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-netflix-hystrix-stream&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt;&lt;/dependency&gt;修改Ribbon-Consumer的yml配置文件，加入RabbitMQ的连接配置：123456spring: rabbitmq: host: localhost port: 5672 username: guest password: guest最后我们来修改Turbine，让其从RabbitMQ中读取监控信息。在Turbine项目中引入如下依赖：12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-turbine-stream&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt;&lt;/dependency&gt;同时删除spring-cloud-starter-eureka和spring-cloud-starter-turbine依赖，因为我们不再从服务注册中心去获取监控的服务信息了，并且spring-cloud-starter-turbine-stream已经包含了spring-cloud-starter-turbine依赖。修改Turbine的入口类，删除@EnableTurbine和@EnableDiscoveryClient注解，添加@EnableTurbineStream注解。将Turbine的yml配置修改为：12345678910spring: application: name: Turbine rabbitmq: host: localhost port: 5672 username: guest password: guestserver: port: 9003修改完毕后，我们分别启动下面这些服务：启动Eureka-Server集群，端口号为8080和8081；启动一个Eureka-Client，端口号为8082；启动两个Ribbon-Consumer，端口号为9000和9001；启动Turbine服务，端口号为9003；最后启动Hystrix-Dashboard服务，端口号为9002。同样的我们访问Hystrix-dashboard的地址http://localhost:9002/hystrix，在页面的地址栏输入http://localhost:9003/turbine.stream，然后分别往9000和9001端口的Ribbon-Consumer实例发送一些请求，这时候可以看到Dashboard的画面如下：效果和从服务注册中心获取服务的监控信息一致。并且这时候观察RabbitMQ的页面：可看到Queued messages已经有数据了。至此我们完成了Turbine从消息中间件RabbitMQ来收集监控信息的过程。源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/32.Spring-Cloud-Hystrix-Dashboard-Turbine-RabbitMQ]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Cloud</tag>
        <tag>Hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Cloud Hystrix服务容错]]></title>
    <url>%2Fblog%2FSpring-Cloud-Hystrix-Circuit-Breaker.html</url>
    <content type="text"><![CDATA[在微服务的架构中，服务间通常会形成相互依赖的关系，比如现在有三个微服务节点：A，B和C，B为A的消费者，C为B的消费者。假如由于网络波动或者A服务自身故障，导致B调用A服务的线程被挂起进入长时间的等待。在高并发的情况下可能导致B的资源被耗竭随之崩溃，从而导致C服务也不可用。这种连环式的雪崩效应在微服务中较为常见，为了解决这个问题，服务熔断技术应运而出。熔断一词来自电路学，指的是电路在出现短路状况时，“断路器”能够及时地切断故障电路，避免电路过载发热引发火灾。类似的，微服务架构中的断路器能够及时地发现故障服务，并向服务调用方返回错误响应，而不是长时间的等待。Spring Cloud Hystrix在Hystrix（又是一款由Netflix开发的开源软件，Github地址https://github.com/Netflix/Hystrix）的基础上进行了封装，提供了服务熔断，服务降级，线程隔离等功能，通过这些功能可以提供服务的容错率。使用Hystrix这里将在上一节Spring Cloud Ribbon客户端负载均衡源码的基础上配置Hystrix。我们先看下在没有配置Hystrix之前，关闭Eureka-Client是什么效果。分别使用peer1和peer2配置启动Eureka-Server集群，然后启动两个Eureka-Client实例，端口分别为8082和8083，最后启动Ribbon-Consumer。准备完毕后，我们关闭端口为8082的Eureka-Client，然后发送GET请求http://localhost:9000/user/1，返回结果如下：下面开始使用使用Spring Cloud Hystrix，在项目Ribbon-Consumer中引入Spring Cloud Hystrix依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;&lt;/dependency&gt;在入口类上加入@EnableHystrix或者@EnableCircuitBreaker注解。这两个注解是等价的，查看@EnableHystrix注解源码就可以证实这一点：1234567@Target(&#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@EnableCircuitBreakerpublic @interface EnableHystrix &#123;&#125;在引入@EnableHystrix或者@EnableCircuitBreaker注解后，我们的入口类代码如下：12345678910111213@EnableCircuitBreaker@EnableDiscoveryClient@SpringBootApplicationpublic class DemoApplication &#123; @Bean @LoadBalanced RestTemplate restTemplate() &#123; return new RestTemplate(); &#125; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;入口类上总共包含了三个注解@EnableCircuitBreaker、@EnableDiscoveryClient和@SpringBootApplication，这三个注解的组合可以使用@SpringCloudApplication来代替，@SpringCloudApplication源码如下：123456789@Target(&#123;ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootApplication@EnableDiscoveryClient@EnableCircuitBreakerpublic @interface SpringCloudApplication &#123;&#125;接着将UserController中的方法提取出来，创建一个UserService（为了简单起见，不再创建Service接口）：12345678910111213141516171819202122232425262728293031323334@Service("userService")public class UserService &#123; private Logger log = LoggerFactory.getLogger(this.getClass()); @Autowired private RestTemplate restTemplate; public User getUser(@PathVariable Long id) &#123; return restTemplate.getForObject("http://Server-Provider/user/&#123;id&#125;", User.class, id); &#125; public List&lt;User&gt; getUsers() &#123; return this.restTemplate.getForObject("http://Server-Provider/user", List.class); &#125; public String addUser() &#123; User user = new User(1L, "mrbird", "123456"); HttpStatus status = this.restTemplate.postForEntity("http://Server-Provider/user", user, null).getStatusCode(); if (status.is2xxSuccessful()) &#123; return "新增用户成功"; &#125; else &#123; return "新增用户失败"; &#125; &#125; public void updateUser() &#123; User user = new User(1L, "mrbird", "123456"); this.restTemplate.put("http://Server-Provider/user", user); &#125; public void deleteUser(@PathVariable Long id) &#123; this.restTemplate.delete("http://Server-Provider/user/&#123;1&#125;", id); &#125;&#125;接着改造UserService的getUser方法：1234567891011@HystrixCommand(fallbackMethod = "getUserDefault")public User getUser(@PathVariable Long id) &#123; return restTemplate.getForObject("http://Server-Provider/user/&#123;id&#125;", User.class, id);&#125;public User getUserDefault(Long id) &#123; User user = new User(); user.setId(-1L); user.setUsername("defaultUser"); user.setPassword("123456"); return user;&#125;我们在getUser方法上加入了@HystrixCommand注解，注解的fallbackMethod属性指定了被调用的方法不可用时的回调方法（服务熔断时的回调处理逻辑，即服务降级），这里为getUserDefault方法（必须与getUser方法的参数及返回值类型一致）。在UserController中调用UserService的getUser方法：123456789101112@RestControllerpublic class TestController &#123; private Logger log = LoggerFactory.getLogger(this.getClass()); @Autowired private UserService userService; @GetMapping("user/&#123;id&#125;") public User getUser(@PathVariable Long id) &#123; return userService.getUser(id); &#125;&#125;修改完后启动Ribbon-Consumer并重重新启动8082端口的Eureka-Client，发送数次GET请求http://localhost:9000/user/1后，再次关闭8082端口的Eureka-Client。断开后，继续发送GET请求http://localhost:9000/user/1，当轮询到8082端口时返回数据如下图所示：可以看到，当轮询到服务不可用时，触发了熔断机制，接口回调了fallbackMethod指定的方法。我们也可以模拟服务超时的情况，可以在Eureka-Client提供的接口方法中设置线程等待，等待时间大于2000（Hystrix默认超时时间为2000 毫秒）即可触发调用方Ribbon-Consumer的服务熔断。@HystrixCommand详解@HystrixCommand注解还包含许多别的属性功能，下面介绍一些常用的属性配置。服务降级上面TestController中的getUser中我们用@HystrixCommand注解指定了服务降级方法getUserDefault。如果getUserDefault方法也抛出异常，那么我们可以再次使用@HystrixCommand注解指定getUserDefault方法降级的方法，比如定义一个getUserDefault2方法：12345678910111213141516171819@HystrixCommand(fallbackMethod = "getUserDefault2")public User getUserDefault(Long id) &#123; String a = null; // 测试服务降级 a.toString(); User user = new User(); user.setId(-1L); user.setUsername("defaultUser"); user.setPassword("123456"); return user;&#125;public User getUserDefault2(Long id) &#123; User user = new User(); user.setId(-2L); user.setUsername("defaultUser2"); user.setPassword("123456"); return user;&#125;重启Ribbon-Consumer，并关闭8082端口的Eureka Client服务，访问http://localhost:9000/user/1：异常处理在使用@HystrixCommand注解标注的方法中，除了HystrixBadRequestException异常外，别的异常都会触发服务降级。假如我们想指定某个异常不触发服务降级，可以使用@HystrixCommand注解的ignoreExceptions属性进行忽略。如：123456789101112@HystrixCommand(fallbackMethod = "getUserDefault2", ignoreExceptions = &#123;NullPointerException.class&#125;)public User getUserDefault(Long id) &#123; String a = null; // 测试服务降级 a.toString(); User user = new User(); user.setId(-1L); user.setUsername("defaultUser"); user.setPassword("123456"); throw new HystrixBadRequestException() return user;&#125;此外，对于方法抛出的异常信息，我们可以在服务降级的方法中使用Throwable对象获取，如：123456789@HystrixCommand(fallbackMethod = "getUserDefault2")public User getUserDefault(Long id, Throwable e) &#123; System.out.println(e.getMessage()); User user = new User(); user.setId(-2L); user.setUsername("defaultUser2"); user.setPassword("123456"); return user;&#125;命名与分组通过指定@HystrixCommand注解的commandKey、groupKey以及threadPoolKey属性可以设置命令名称、分组以及线程池划分，如：123456@HystrixCommand(fallbackMethod = "getUserDefault", commandKey = "getUserById", groupKey = "userGroup", threadPoolKey = "getUserThread")public User getUser(@PathVariable Long id) &#123; log.info("获取用户信息"); return restTemplate.getForObject("http://Server-Provider/user/&#123;id&#125;", User.class, id);&#125;上面的配置指定了命令的名称为getUserById，组名为userGroup，线程池名称为getUserThread。通过设置命令组，Hystrix会根据组来组织和统计命令的告警、仪表盘等信息。默认情况下，Hystrix命令通过组名来划分线程池，即组名相同的命令放到同一个线程池里，如果通过threadPoolKey设置了线程池名称，则按照线程池名称划分。当getUser方法被调用时，日志打印如下：12018-06-06 15:32:55.945 INFO 16192 --- [getUserThread-1] com.example.demo.Service.UserService : 获取用户信息可看到线程名称为getUserThread-1。Hystrix缓存我们在Controller中调用三次getUser方法，参数都为1L：12345678910111213@RestControllerpublic class TestController &#123; @Autowired private UserService userService; @GetMapping("testCache") public void testCache()&#123; userService.getUser(1L); userService.getUser(1L); userService.getUser(1L); &#125;&#125;当访问http://localhost:9000/testCache时，控制台输出如下： 开启缓存可以让getUser方法只被调用一次，剩下两次直接从缓存里获取。开启缓存要在Hystrix中开启缓存很简单，只需使用@CacheResult注解即可，修改UserService的getUser方法：1234@CacheResultpublic User getUser(@PathVariable Long id) &#123; return restTemplate.getForObject("http://Server-Provider/user/&#123;id&#125;", User.class, id);&#125;通过上面的设定，Hystrix会将返回的User对象进行缓存，缓存的key默认为方法的所有参数，这里只有一个id参数，所以缓存的key为用户id。这里在测试的时候遇到一个异常：java.lang.IllegalStateException: Request caching is not available. Maybe you need to initialize the HystrixRequestContext? at com.netflix.hystrix.HystrixRequestCache.get(HystrixRequestCache.java:104) ~[hystrix-core-1.5.12.jar:1.5.12] at com.netflix.hystrix.AbstractCommand$7.call(AbstractCommand.java:478) ~[hystrix-core-1.5.12.jar:1.5.12] at com.netflix.hystrix.AbstractCommand$7.call(AbstractCommand.java:454) ~[hystrix-core-1.5.12.jar:1.5.12] …在Hystrix的issue中找到了类似的提问：https://github.com/Netflix/Hystrix/issues/1314。大致意思是在使用Hytrix缓存之前，需要通过HystrixRequestContext.initializeContext初始化Hystrix请求上下文，请求结束之后需要调用shutdown方法关闭请求。所以我们可以定义一个过滤器来实现这个过程：123456789101112131415161718@Component@WebFilter(filterName = "hystrixRequestContextServletFilter", urlPatterns = "/*", asyncSupported = true)public class HystrixRequestContextServletFilter implements Filter &#123; @Override public void init(FilterConfig filterConfig) &#123; &#125; @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123; HystrixRequestContext context = HystrixRequestContext.initializeContext(); filterChain.doFilter(servletRequest, servletResponse); context.close(); &#125; @Override public void destroy() &#123; &#125;&#125;到这里，我才意识到，其实Hystrix的缓存还是蛮鸡肋的，请求缓存不是只写入一次结果就不再变化的，而是每次请求到达Controller的时候，我们都需要为HystrixRequestContext进行初始化，之前的缓存也就是不存在了，我们是在同一个请求中保证结果相同，同一次请求中的第一次访问后对结果进行缓存，缓存的生命周期只有一次请求！改造完毕后，重启项目再次访问http://localhost:9000/testCache，控制台输出如下：设定key值我们也可以明确的指定缓存的key值是什么。指定key的值有两种方式：通过@CacheKey注解指定，如：1234567@CacheResult@HystrixCommand(fallbackMethod = "getUserDefault", commandKey = "getUserById", groupKey = "userGroup", threadPoolKey = "getUserThread")public User getUser(@CacheKey("id") @PathVariable Long id) &#123; log.info("获取用户信息"); return restTemplate.getForObject("http://Server-Provider/user/&#123;id&#125;", User.class, id);&#125;也可以指定参数对象内部属性为key值：1234567@CacheResult@HystrixCommand(fallbackMethod = "getUserDefault", commandKey = "getUserById", groupKey = "userGroup", threadPoolKey = "getUserThread")public User getUser(@CacheKey("id") User user) &#123; log.info("获取用户信息"); return restTemplate.getForObject("http://Server-Provider/user/&#123;id&#125;", User.class, user.getId());&#125;通过方法来指定，方法的返回值必须是String类型：1234567891011public String getCacheKey(Long id) &#123; return String.valueOf(id);&#125;@CacheResult(cacheKeyMethod = "getCacheKey")@HystrixCommand(fallbackMethod = "getUserDefault", commandKey = "getUserById", groupKey = "userGroup", threadPoolKey = "getUserThread")public User getUser(Long id) &#123; log.info("获取用户信息"); return restTemplate.getForObject("http://Server-Provider/user/&#123;id&#125;", User.class, id);&#125;值得注意的是，方法2的优先级比方法1高。缓存清除在涉及到更新User信息的方法上，我们要及时的清除相应的缓存，否则将会导致缓存数据和实际数据不一致的问题。我们在UserService的updateUser方法上做缓存清除操作：12345@CacheRemove(commandKey = "getUserById")@HystrixCommandpublic void updateUser(@CacheKey("id") User user) &#123; this.restTemplate.put("http://Server-Provider/user", user);&#125;@CacheRemove的commandKey属性和getUser里定义的一致。请求合并请求合并就是将多个单个请求合并成一个请求，去调用服务提供者，从而降低服务提供者负载的，一种应对高并发的解决办法。Hystrix中提供了一个@HystrixCollapser注解，该注解可以将处于一个很短的时间段（默认10 毫秒）内对同一依赖服务的多个请求进行整合并以批量方式发起请求。为了演示@HystrixCollapser注解的使用方法，我们改造下Eureka-Client（服务提供者）的UserController接口，提供一个批量处理的方法：12345678910111213141516@RestController@RequestMapping("user")public class UserController &#123; private Logger log = LoggerFactory.getLogger(this.getClass()); @GetMapping("users") public List&lt;User&gt; get(String ids) &#123; log.info("批量获取用户信息"); List&lt;User&gt; list = new ArrayList&lt;&gt;(); for (String id : ids.split(",")) &#123; list.add(new User(Long.valueOf(id), "user" + id, "123456")); &#125; return list; &#125; ...&#125;然后在Ribbon-Consumer的UserService里添加两个方法：12345678910111213141516171819@HystrixCollapser(batchMethod = "findUserBatch", collapserProperties = &#123; @HystrixProperty(name = "timerDelayInMilliseconds", value = "100")&#125;)public Future&lt;User&gt; findUser(Long id) &#123; log.info("获取单个用户信息"); return new AsyncResult&lt;User&gt;() &#123; @Override public User invoke() &#123; return restTemplate.getForObject("http://Server-Provider/user/&#123;id&#125;", User.class, id); &#125; &#125;;&#125;@HystrixCommandpublic List&lt;User&gt; findUserBatch(List&lt;Long&gt; ids) &#123; log.info("批量获取用户信息,ids: " + ids); User[] users = restTemplate.getForObject("http://Server-Provider/user/users?ids=&#123;1&#125;", User[].class, StringUtils.join(ids, ",")); return Arrays.asList(users);&#125;@HystrixCollapser注解的batchMethod属性指定了批量处理的方法为下面定义的findUserBatch方法，timerDelayInMilliseconds的值为100（毫秒），意思是在100毫秒这个时间范围内的所有对findUser的调用，都将被合并为一个批量处理操作，进行批量处理操作的方法就是findUserBatch。我们在TestController中添加一个测试方法：123456789101112@GetMapping("testRequestMerge")public void testRequerstMerge() throws InterruptedException, ExecutionException &#123; Future&lt;User&gt; f1 = userService.findUser(1L); Future&lt;User&gt; f2 = userService.findUser(2L); Future&lt;User&gt; f3 = userService.findUser(3L); f1.get(); f2.get(); f3.get(); Thread.sleep(200); Future&lt;User&gt; f4 = userService.findUser(4L); f4.get();&#125;上面的测试方法中对findUser方法进行了4次的调用，最后一次调用（f4）之前先让线程等待200毫秒（大于timerDelayInMilliseconds中定义的100毫秒），所以我们的预期是前三次调用会被合并，而最后一次调用不会被合并进去。启动Ribbon-Consumer，访问http://localhost:9000/testRequestMerge,控制台输出如下：可以看到，控制台的输出符合我们的预期，f1、f2和f3被合并成了一个请求。而且可以看到，控制台并没有打印出findUser方法中的获取单个用户信息的日志，实际上findUser方法并不会被调用，所以上面的代码可以简化为：1234567891011121314 @HystrixCollapser(batchMethod = "findUserBatch", collapserProperties = &#123; @HystrixProperty(name = "timerDelayInMilliseconds", value = "100")&#125;)public Future&lt;User&gt; findUser(Long id) &#123; log.info("获取单个用户信息"); return null;&#125;@HystrixCommandpublic List&lt;User&gt; findUserBatch(List&lt;Long&gt; ids) &#123; log.info("批量获取用户信息,ids: " + ids); User[] users = restTemplate.getForObject("http://Server-Provider/user/users?ids=&#123;1&#125;", User[].class, StringUtils.join(ids, ",")); return Arrays.asList(users);&#125;虽然通过请求的合并可以减轻带宽和服务的压力，但合并请求的过程也会带来额外的开销。就拿上面的testCache来说，比如我们对单个findUser的方法调用耗时5ms，那么调用4次耗时可以粗略的估算为20ms。当我们使用Hystrix的请求合并功能后，前3次请求（f1、f2和f3）进行了合并，第4次请求（f4）没有进行合并，那么耗时可以粗略的估算为3*5+100+5=120ms（100为上面timerDelayInMilliseconds中指定的时间范围，在该时间段过后，才会调用第4次请求），结果明显比单独调用4次来得高。所以实际中是否该使用Hystrix的请求合并功能，需结合实际需求进行抉择。Hystrix属性除了上面涉及到的Hystrix属性配置外，其还包含了大量的别的可用配置。配置可以分为四个级别，优先级从低到高分别为：全局默认配置、全局配置、实例默认值、实例配置。Commondexecutionexecution.isolation.strategy： 该属性用来设置执行的隔离策略，它有如下两个选项。THREAD: 通过线程池隔离的策略。它在独立的线程上执行， 并且它的并发限制受线程池中线程数量的限制。SEMAPHORE: 通过信号量隔离的策略。它在调用线程上执行， 并且它的并发限制受信号量计数的限制。属性级别默认值、配置方式、配置属性全局默认配置THREAD全局配置hystrix.command.default.execution.isolation.strategy实例默认值@HystrixProperty(name=”execution.isolation.strategy”, value=”THREAD”)实例配置hystrix.command.HystrixCommandKey.execution.isolation.strategy实例配置中的HystrixCommandKey对应@HystrixCommand注解中commandKey 属性指定的值。execution.isolation.thread.timeoutinMilliseconds： 该属性用来配置HystrixCommand执行的超时时间，单位为毫秒。当HystrixCommand执行时间超过该配置值之后， Hystrix会将该执行命令标记为TIMEOUT并进入服务降级处理逻辑。属性级别默认值、配置方式、配置属性全局默认配置1000亳秒全局配置hystrix.command.default.execution.isolation.thread. timeoutinMilliseconds实例默认值@HystrixProperty(name=”execution.isolation.thread.timeoutinMilliseconds”,value=”2000”)实例配置hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutinMillisecondsexecution.timeout.enabled: 该属性用来配置HystrixCommand的执行是否启用超时时间。默认为true, 如果设置为false, 那么execution.isolation.thread.timeoutinMilliseconds属性的配置将不再起作用。属性级别默认值、配置方式、配置属性全局默认配置true全局配置hystrix.command.default.execution.timeout.enabled实例默认值@HystrixProperty(name=”execution.timeout.enabled”, value=”false”)实例配置hystrix.command.HystrixCommandKey.execution.timeout.enabledexecution.isolation.thread.interruptOnTimeout: 该属性用来配置当HystrixCommand执行超时的时候是否要将它中断。属性级别默认值、配置方式、配置属性全局默认配置true全局配置hystrix.command.default.execution.isolation.thread.interruptOnTimeout实例默认值@HystrixProperty(name=”execution.isolation.thread.interruptOnTimeout”,value=”false”)实例配置hystrix.command.HystrixCommandKey.execution.isolation.thread.interruptOnTimeoutexecution.isolation.thread.interruptOnCancel: 该属性用来配置当HystrixCommand执行被取消的时候是否要将它中断。属性级别默认值、配置方式、配置属性全局默认配置true全局配置hystrix.command.default.execution.isolation.thread.interruptOnCancel实例默认值@HystrixProperty(name=”execution.isolation.thread.interruptOnCancel”,value= “false”)实例配置hystrix.command.HystrixCommandKey.execution.isolation.thread.interruptOnCancelexecution.isolation.semaphore.maxConcurrentRequests: 当HystrixCommand的隔离策略使用信号量的时候，该属性用来配置信号量的大小（并发请求数）。当最大并发请求数达到该设置值时，后续的请求将会被拒绝。属性级别默认值、配置方式、配置属性全局默认配置10全局配置hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests实例默认值@HystrixProperty(name=”execution.isolation.semaphore.maxConcurrentRequests”, value=”2”)实例配置hystrix.command.HystrixCommandKey.execution.isolation.semaphore.maxConcurrentRequestsfallbackfallback.enabled: 该属性用来设置服务降级策略是否启用，如果设置为false,那么当请求失败或者拒绝发生时，将不会调用降级服务。属性级别默认值、配置方式、配置属性全局默认配置true全局配置hystrix.command.default.fallback.enabled实例默认值@HystrixProperty(name= “fallback.enabled”, value=”false”)实例配置hystrix.command.HystrixCommandKey.fallback.enabledcircuitBreaker断路器circuitBreaker.enabled: 该属性用来确定当服务请求命令失败时， 是否使用断路器来跟踪其健康指标和熔断请求。属性级别默认值、配置方式、配置属性全局默认配置true全局配置hystrix.command.default.circuitBreaker.enabled实例默认值@HystrixProperty(name=”circutBreaker.enabled”,value=”false”)实例配置hystrix.command.HystrixCommandKey.circuitBreaker.enabledcircuitBreaker.requestVolumeThreshold: 该属性用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为20 的时候，如果滚动时间窗（默认10秒）内仅收到了19个请求， 即使这19个请求都失败了，断路器也不会打开。属性级别默认值、配置方式、配置属性全局默认配置20全局配置hystrix.command.default.circuitBreaker.requestVolumeThreshold实例默认值@HystrixProperty(name=”circuitBreaker.requestVolumeThreshold”, value=”30”)实例配置hystrix.comrnand.HystrixComrnandKey.circuitBreaker.requestVolumeThresholdcircuitBreaker.sleepWindowinMilliseconds: 该属性用来设置当断路器打开之后的休眠时间窗。休眠时间窗结束之后，会将断路器置为“半开” 状态， 尝试熔断的请求命令，如果依然失败就将断路器继续设置为“打开” 状态，如果成功就设置为“关闭” 状态。属性级别默认值、配置方式、配置属性全局默认配置5000全局配置hystrix.command.default.circuitBreaker.sleepWindowinMilliseconds实例默认值@HystrixProperty(name=”circuitBreaker.sleepWindowinMilliseconds”,value=”3000”)实例配置hystrix.command.HystrixCommandKey.circuitBreaker.sleepWindowinMillisecondscircuitBreaker.errorThresholdPercentage: 该属性用来设置断路器打开的错误百分比条件。例如，默认值为5000 的情况下，表示在滚动时间窗中，在请求数量超过circuitBreaker.requestVolumeThreshold阅值的前提下，如果错误请求数的百分比超过50, 就把断路器设置为“打开” 状态， 否则就设置为“关闭” 状态。属性级别默认值、配置方式、配置属性全局默认配置50全局配置hystrix.command.default.circuitBreaker.errorThresholdPercentage实例默认值@HystrixProperty(name=”circuitBreaker.errorThresholdPercentage”, value=”40”)实例配置hystrix.command.HystrixCommandKey.circuitBreaker.errorThresholdPercentagecircuitBreaker.forceOpen: 如果将该属性设置为true, 断路器将强制进入“打开” 状态，它会拒绝所有请求。该属性优先于circuitBreaker.forceClosed属性。属性级别默认值、配置方式、配置属性全局默认配置false全局配置hystrix.command.default.circuitBreaker.forceOpen实例默认值@HystrixProperty (name=”circuitBreaker.forceOpen”, value=”true”)实例配置hystrix.command.HystrixCommandKey.circuitBreaker.forceOpencircuitBreaker.forceClosed: 如果将该属性设置为true, 断路器将强制进入“关闭” 状态， 它会接收所有请求。如果circuitBreaker.forceOpen属性为true, 该属性不会生效。属性级别默认值、配置方式、配置属性全局默认配置false全局配置hystrix.command.default.circuitBreaker.forceClosed实例默认值@HystrixProperty(name=”circui七Breaker.forceClosed”, value=”true”)实例配置hystrix.comrnand.HystrixComrnandKey.circuitBreaker.forceClosedmetrics配置该配置与HystrixCommand执行中捕获的指标信息有关。metrics.rollingStats.timeinMilliseconds: 该属性用来设置滚动时间窗的长度， 单位为毫秒。该时间用于断路器判断健康度时需要收集信息的持续时间。断路器在收集指标信息的时候会根据设置的时间窗长度拆分成多个“桶” 来累计各度量值，每个“桶” 记录了一段时间内的采集指标。例如，当采用默认值10000毫秒时， 断路器默认将其拆分成10个桶（桶的数量也可通过metrics.rollingStats.numBuckets参数设置），每个桶记录1000毫秒内的指标信息。属性级别默认值、配置方式、配置属性全局默认配置10000全局配置hystrix.command.default.metrics.rollingStats.timeinMilliseconds实例默认值@HystrixProperty(name=”metrics.rollingStats.timeinMilliseconds”,value=”20000”)实例配置hystrix.command.HystrixCommandKey.metrics.rollingStats.timeinMillisecondsmetrics.rollingstats.numBuckets: 该属性用来设置滚动时间窗统计指标信息时划分“桶” 的数量。属性级别默认值、配置方式、配置属性全局默认配置10全局配置hystrix.command.default.metrics.rollingStats.numBuckets实例默认值@HystrixProperty(name=”metrics.rollingStats.numBuckets”,value=”20”)实例配置hystrix.comrnand.HystrixComrnandKey.metrics.rollingStats.numBucketsmetrics.rollingPercentile.enabled: 该属性用来设置对命令执行的延迟是否使用百分位数来跟踪和计算。如果设置为false，那么所有的概要统计都将返回-1。属性级别默认值、配置方式、配置属性全局默认配置true全局配置hystrix.command.default.metrics.rollingPercentile.enabled实例默认值@HystrixProperty(name=”metrics.rollingPercentile.enabled”, value=”false”)实例配置hystrix.command.HystrixCommandKey.metrics.rollingPercentile.enabledmetrics.rollingPercentile.timeinMilliseconds: 该属性用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。属性级别默认值、配置方式、配置属性全局默认配置60000全局配置hystrix.command.default.metrics.rollingPercentile.timeinMilliseconds实例默认值@HystrixProperty(name=”metrics.rollingPercentile.timeinMilliseconds”, value=”50000”)实例配置hystrix.command.HystrixCommandKey.metrics.rollingPercentile.timeinMillisecondsmetrics.rollingPercentile.numBuckets: 该属性用来设置百分位统计滚动窗口中使用“桶”的数量。属性级别默认值、配置方式、配置属性全局默认配置6全局配置hystrix.command.default.metrics.rollingPercentile.numBuckets实例默认值@HystrixProperty(name=”metrics.rollingPercentilee.numBuckets”,value=”5”)实例配置hystrix.command.HystrixCommandKey.metrics.rollingPercentile.numBucketsmetrics.rollingPercentile.bucketSize: 该属性用来设置在执行过程中每个“桶” 中保留的最大执行次数。如果在滚动时间窗内发生超过该设定值的执行次数，就从最初的位置开始重写。例如，将该值设置为100, 滚动窗口为10秒，若在10秒内一个“桶”中发生了500次执行，那么该“桶”中只保留最后的100次执行的统计。另外，增加该值的大小将会增加内存量的消耗，并增加排序百分位数所需的计算时间。属性级别默认值、配置方式、配置属性全局默认配置100全局配置hystrix.command.default.metrics.rollingPercentile.bucketSize实例默认值@HystrixProperty(name=”metrics.rollingPercentile.bucketSize”,value= “120”)实例配置hystrix.command.HystrixCommandKey.metrics.rollingPercentile.bucketSizemetrics.healthSnapshot.intervalinMilliseconds: 该属性用来设置采集影响断路器状态的健康快照（请求的成功、错误百分比）的间隔等待时间。属性级别默认值、配置方式、配置属性全局默认配置500全局配置hystrix.comrnand.default.metrics.healthSnapshot.intervalinMilliseconds实例默认值@HystrixProperty(name=”metrics.healthSnapshot.intervalinMilliseconds”,value=”600”)实例配置hystrix.command.HystrixCommandKey.metrics.healthSnapshot.intervalinMillisecondsrequestContextrequestCache.enabled: 此属性用来配置是否开启请求缓存。属性级别默认值、配置方式、配置属性全局默认配置true全局配置hystrix.command.default.requestCache.enabled实例默认值@HystrixProperty(name=”requestCache.enabled”, value=”false”)实例配置hystrix.command.HystrixCommandKey.requestCache.enabledcollapsermaxRequestsinBatch: 该参数用来设置一次请求合并批处理中允许的最大请求数。属性级别默认值、配置方式、配置属性全局默认配置Integer.MAX_VALUE全局配置hystrix.collapser.default.maxRequestsinBatch实例默认值@HystrixProperty(name=”maxRequestsinBatch”,value=”false”)实例配置hystrix.collapser.HystrixCollapserKey.maxRequestsinBatchtimerDelayinMilliseconds: 该参数用来设置批处理过程中每个命令延迟的时间，单位为毫秒。属性级别默认值、配置方式、配置属性全局默认配置10全局配置hystrix.collapser.default.timerDelayinMilliseconds实例默认值@HystrixProperty(name=”timerDelayinMilliseconds”,value=”20”)实例配置hystrix.collapser.HystrixCollapserKey.timerDelayinMillisecondsrequest Cache.enabled: 该参数用来设置批处理过程中是否开启请求缓存。属性级别默认值、配置方式、配置属性全局默认配置true全局配置hystrix.collapser.default.requestCache.enabled实例默认值@HystrixProperty(name=”requestCache.enabled”, value=”false”)实例配置hystrix.collapser.HystrixCollapserKey.requestCache.enabledthreadPoolcoreSize: 该参数用来设置执行命令线程池的核心线程数，该值也就是命令执行的最大并发量。属性级别默认值、配置方式、配置属性全局默认配置10全局配置hystrix.threadpool.default.coreSize实例默认值@HystrixProperty(name=”coreSize”, value=”false”)实例配置hystrix.threadpool.HystrixThreadPoolKey.coreSizemaxQueueSize: 该参数用来设置线程池的最大队列大小。当设置为-1时，线程池将使用SynchronousQueue实现的队列，否则将使用LinkedBlockingQueue实现的队列。属性级别默认值、配置方式、配置属性全局默认配置-1全局配置hystrix.threadpool.default.maxQueueSize实例默认值@HystrixProperty(name=”maxQueueSize”,value=”lO”)实例配置hystrix.threadpool.HystrixThreadPoolKey.maxQueueSizequeueSizeRejectionThreshold: 该参数用来为队列设置拒绝阈值。通过该参数，即使队列没有达到最大值也能拒绝请求。该参数主要是对LinkedBlockingQueue队列的补充， 因为LinkedBlockingQueue队列不能动态修改它的对象大小，而通过该属性就可以调整拒绝请求的队列大小了。属性级别默认值、配置方式、配置属性全局默认配置5全局配置hystrix.threadpool.default.queueSizeRejectionThreshold实例默认值@HystrixProperty(name=”queueSizeRejectionThreshold”, value=”lO”实例配置hystrix.threadpool.HystrixThreadPoolKey.queueSizeRejectionThreshold不得不说，配置是真的多……源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/30.Spring-Cloud-Hystrix-Circuit-Breaker参考文章 《Spring Cloud微服务实战》]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Cloud</tag>
        <tag>Hystrix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Cloud Ribbon客户端负载均衡]]></title>
    <url>%2Fblog%2FSpring-Cloud-Ribbon-LoadBalance.html</url>
    <content type="text"><![CDATA[为了提高服务的可用性，我们一般会将相同的服务部署多个实例，负载均衡的作用就是使获取服务的请求被均衡的分配到各个实例中。负载均衡一般分为服务端负载均衡和客户端负载均衡，服务端的负载均衡通过硬件（如F5）或者软件（如Nginx）来实现，而Ribbon实现的是客户端负载均衡。服务端负载均衡是在硬件设备或者软件模块中维护一份可用服务清单，然后客户端发送服务请求到这些负载均衡的设备上，这些设备根据一些算法均衡的将请求转发出去。而客户端负载均衡则是客户端自己从服务注册中心（如之前提到的Eureka Server）中获取服务清单缓存到本地，然后通过Ribbon内部算法均衡的去访问这些服务。Ribbon简介Ribbon是由Netflix开发的一款基于HTTP和TCP的负载均衡的开源软件。我们可以直接给Ribbon配置好服务列表清单，也可以配合Eureka主动的去获取服务清单，需要使用到这些服务的时候Ribbon通过轮询或者随机等均衡算法去获取服务。在Spring Cloud Eureka服务治理一节中，我们已经在Server-Consumer中配置了Ribbon，并通过加了@LoadBalanced注解的RestTemplate对象去均衡的消费服务，所以这节主要记录的是RestTemplate的详细使用方法和一些额外的Ribbon配置。RestTemplate详解从名称上来看就可以知道它是一个用来发送REST请求的摸板，所以包含了GET,POST,PUT,DELETE等HTTP Method对应的方法。发送Get请求RestTemplate中与GET请求对应的方法有getForEntity和getForObject。getForEntitygetForEntity方法返回ResponseEntity对象，该对象包含了返回报文头，报文体和状态码等信息。getForEntity有三个重载方法：getForEntity(String url, Class&lt;T&gt; responseType, Object... uriVariables)；getForEntity(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)；getForEntity(URI url, Class&lt;T&gt; responseType)；第一个参数为Url，第二个参数为返回值的类型，第三个参数为请求的参数（可以是数组，也可以是Map）。举个getForEntity(String url, Class&lt;T&gt; responseType, Object... uriVariables)的使用例子：1234@GetMapping("user/&#123;id:\\d+&#125;")public User getUser(@PathVariable Long id) &#123; return this.restTemplate.getForEntity("http://Server-Provider/user/&#123;name&#125;", User.class, id).getBody();&#125;{1}为参数的占位符，匹配参数数组的第一个元素。因为第二个参数指定了类型为User，所以调用getBody方法返回类型也为User。方法参数除了可以放在数组里外，也可以放在Map里，举个getForEntity(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)使用例子：123456@GetMapping("user/&#123;id:\\d+&#125;")public User getUser(@PathVariable Long id) &#123; Map&lt;String, Object&gt; params = new HashMap&lt;&gt;(); params.put("id", id); return this.restTemplate.getForEntity("http://Server-Provider/user/&#123;id&#125;", User.class, params).getBody();&#125;只有两个参数的重载方法getForEntity(URI url, Class&lt;T&gt; responseType)第一个参数接收java.net.URI类型，可以通过org.springframework.web.util.UriComponentsBuilder来创建，举个该方法的使用例子：12345678@GetMapping("user/&#123;id:\\d+&#125;")public User getUser(@PathVariable Long id) &#123; Map&lt;String, Object&gt; params = new HashMap&lt;&gt;(); params.put("id", id); URI uri = UriComponentsBuilder.fromUriString("http://Server-Provider/user/&#123;id&#125;") .build().expand(params).encode().toUri(); return this.restTemplate.getForEntity(uri, User.class).getBody();&#125;其中expand方法也可以接收数组和Map两种类型的参数。getForObjectgetForObject方法和getForEntity方法类似，getForObject方法相当于getForEntity方法调用了getBody方法，直接返回结果对象，为不是ResponseEntity对象。getForObject方法和getForEntity方法一样，也有三个重载方法，参数类型和getForEntity方法一致，所以不再列出。发送POST请求使用RestTemplate发送POST请求主要有postForEntity，postForObject和postForLocation（这个目前较少使用，所以不做介绍）三个方法。postForEntity和postForObject也分别有三个重载方法，方法参数和使用方式和上面介绍的getForEntity和getForObject一样，所以不再详细介绍。简单举个getForObject的使用例子：1234 @GetMapping("user")public List&lt;User&gt; getUsers() &#123; return this.restTemplate.getForObject("http://Server-Provider/user", List.class);&#125;发送PUT请求使用RestTemplate发送PUT请求，使用的是它的put方法，put方法返回值是void类型，该方法也有三个重载方法：put(String url, Object request, Object... uriVariables)；put(String url, Object request, Map&lt;String, ?&gt; uriVariables)；put(URI url, Object request)。举个例子：12345@GetMapping("user/update")public void updateUser() throws JsonProcessingException &#123; User user = new User(1L, "mrbird", "123456"); this.restTemplate.put("http://Server-Provider/user", user);&#125;在RESTful风格的接口中，判断成功失败不再是通过返回值的某个标识来判断的，而是通过返回报文的状态码是否为200来判断。当这个方法成功执行并返回时，返回报文状态为200，即可判断方法执行成功。发送DELETE请求使用RestTemplate发送DELETE请求，使用的是它的delete方法，delete方法返回值是void类型，该方法也有三个重载方法：delete(String url, Object... uriVariables)；delete(String url, Map&lt;String, ?&gt; uriVariables);delete(URI url)。举个例子：1234@GetMapping("user/delete/&#123;id:\\d+&#125;")public void deleteUser(@PathVariable Long id) &#123; this.restTemplate.delete("http://Server-Provider/user/&#123;1&#125;", id);&#125;RestTemplates实战我们在Spring Cloud Eureka服务治理中的Eureka客户端（Server-Provider）中编写一套RESTful风格的测试接口：1234567891011121314151617181920212223242526272829303132333435@RestController@RequestMapping("user")public class UserController &#123; private Logger log = LoggerFactory.getLogger(this.getClass()); @GetMapping("/&#123;id:\\d+&#125;") public User get(@PathVariable Long id) &#123; log.info("获取用户id为 " + id + "的信息"); return new User(id, "mrbird", "123456"); &#125; @GetMapping public List&lt;User&gt; get() &#123; List&lt;User&gt; list = new ArrayList&lt;&gt;(); list.add(new User(1L, "mrbird", "123456")); list.add(new User(2L, "scott", "123456")); log.info("获取用户信息 " + list); return list; &#125; @PostMapping public void add(@RequestBody User user) &#123; log.info("新增用户成功 " + user); &#125; @PutMapping public void update(@RequestBody User user) &#123; log.info("更新用户成功 " + user); &#125; @DeleteMapping("/&#123;id:\\d+&#125;") public void delete(@PathVariable Long id) &#123; log.info("删除用户成功 " + id); &#125;&#125;User对象代码：12345678910111213141516171819202122232425public class User implements Serializable &#123; private static final long serialVersionUID = 1339434510787399891L; private Long id; private String username; private String password; public User() &#123; &#125; public User(Long id, String username, String password) &#123; this.id = id; this.username = username; this.password = password; &#125; @Override public String toString() &#123; return "User&#123;" + "id=" + id + ", username='" + username + '\'' + ", password='" + password + '\'' + '&#125;'; &#125; // get,set略&#125;需要注意的是，User对象必须有默认的构造方法，否则在JSON与实体对象转换的时候会抛出如下异常：JSON parse error: Can not construct instance of model.Class: no suitable constructor found然后在Server-Consumer中使用RestTemplates分别去获取这些服务：123456789101112131415161718192021222324252627282930313233343536373839404142@RestControllerpublic class TestController &#123; @Autowired private RestTemplate restTemplate; @GetMapping("user/&#123;id:\\d+&#125;") public User getUser(@PathVariable Long id) &#123; Map&lt;String, Object&gt; params = new HashMap&lt;&gt;(); params.put("id", id); URI uri = UriComponentsBuilder.fromUriString("http://Server-Provider/user/&#123;id&#125;") .build().expand(params).encode().toUri(); return this.restTemplate.getForEntity(uri, User.class).getBody(); &#125; @GetMapping("user") public List&lt;User&gt; getUsers() &#123; return this.restTemplate.getForObject("http://Server-Provider/user", List.class); &#125; @GetMapping("user/add") public String addUser() &#123; User user = new User(1L, "mrbird", "123456"); HttpStatus status = this.restTemplate.postForEntity("http://Server-Provider/user", user, null).getStatusCode(); if (status.is2xxSuccessful()) &#123; return "新增用户成功"; &#125; else &#123; return "新增用户失败"; &#125; &#125; @GetMapping("user/update") public void updateUser() &#123; User user = new User(1L, "mrbird", "123456"); this.restTemplate.put("http://Server-Provider/user", user); &#125; @GetMapping("user/delete/&#123;id:\\d+&#125;") public void deleteUser(@PathVariable Long id) &#123; this.restTemplate.delete("http://Server-Provider/user/&#123;1&#125;", id); &#125;&#125;我们分别启动两个Eureka Server用于集群，两个Eureka Client（Server-Provider）实例，然后启动Server-Consumer。使用Restlet Client访问http://localhost:9000/user/1（后面每个方法我们都访问两次，用于观察负载均衡），返回结果如下：剩下的方法测试结果这里不贴出来了，当我们分别访问下面的连接后：http://localhost:9000/user/http://localhost:9000/user/addhttp://localhost:9000/user/updatehttp://localhost:9000/user/delete/1查看Eureka客户端8082和8083的后台日志：123456789101112131415161718192021222324252018-06-03 18:17:26.231 INFO 11188 --- [ main] .s.c.n.e.s.EurekaAutoServiceRegistration : Updating port to 80832018-06-03 18:17:26.236 INFO 11188 --- [ main] com.example.demo.DemoApplication : Started DemoApplication in 52.252 seconds (JVM running for 54.321)2018-06-03 18:21:29.097 INFO 11188 --- [io-8083-exec-10] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring FrameworkServlet &apos;dispatcherServlet&apos;2018-06-03 18:21:29.098 INFO 11188 --- [io-8083-exec-10] o.s.web.servlet.DispatcherServlet : FrameworkServlet &apos;dispatcherServlet&apos;: initialization started2018-06-03 18:21:29.177 INFO 11188 --- [io-8083-exec-10] o.s.web.servlet.DispatcherServlet : FrameworkServlet &apos;dispatcherServlet&apos;: initialization completed in 79 ms2018-06-03 18:21:29.312 INFO 11188 --- [io-8083-exec-10] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-03 18:21:50.798 INFO 11188 --- [nio-8083-exec-9] c.e.demo.controller.UserController : 获取用户信息 [User&#123;id=1, username=&apos;mrbird&apos;, password=&apos;123456&apos;&#125;, User&#123;id=2, username=&apos;scott&apos;, password=&apos;123456&apos;&#125;]2018-06-03 18:22:25.351 INFO 11188 --- [trap-executor-0] c.n.d.s.r.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration2018-06-03 18:22:44.718 INFO 11188 --- [nio-8083-exec-8] c.e.demo.controller.UserController : 新增用户成功 User&#123;id=1, username=&apos;mrbird&apos;, password=&apos;123456&apos;&#125;2018-06-03 18:24:34.313 INFO 11188 --- [nio-8083-exec-6] c.e.demo.controller.UserController : 删除用户成功 12018-06-03 18:17:21.296 INFO 16188 --- [ main] .s.c.n.e.s.EurekaAutoServiceRegistration : Updating port to 80822018-06-03 18:17:21.303 INFO 16188 --- [ main] com.example.demo.DemoApplication : Started DemoApplication in 57.152 seconds (JVM running for 58.239)2018-06-03 18:21:27.517 INFO 16188 --- [io-8082-exec-10] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring FrameworkServlet &apos;dispatcherServlet&apos;2018-06-03 18:21:27.517 INFO 16188 --- [io-8082-exec-10] o.s.web.servlet.DispatcherServlet : FrameworkServlet &apos;dispatcherServlet&apos;: initialization started2018-06-03 18:21:27.567 INFO 16188 --- [io-8082-exec-10] o.s.web.servlet.DispatcherServlet : FrameworkServlet &apos;dispatcherServlet&apos;: initialization completed in 50 ms2018-06-03 18:21:27.732 INFO 16188 --- [io-8082-exec-10] c.e.demo.controller.UserController : 获取用户id为 1的信息2018-06-03 18:21:49.639 INFO 16188 --- [nio-8082-exec-9] c.e.demo.controller.UserController : 获取用户信息 [User&#123;id=1, username=&apos;mrbird&apos;, password=&apos;123456&apos;&#125;, User&#123;id=2, username=&apos;scott&apos;, password=&apos;123456&apos;&#125;]2018-06-03 18:22:12.313 INFO 16188 --- [trap-executor-0] c.n.d.s.r.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration2018-06-03 18:22:46.111 INFO 16188 --- [nio-8082-exec-8] c.e.demo.controller.UserController : 新增用户成功 User&#123;id=1, username=&apos;mrbird&apos;, password=&apos;123456&apos;&#125;2018-06-03 18:23:55.732 INFO 16188 --- [nio-8082-exec-6] c.e.demo.controller.UserController : 更新用户成功 User&#123;id=1, username=&apos;mrbird&apos;, password=&apos;123456&apos;&#125;2018-06-03 18:23:58.297 INFO 16188 --- [nio-8082-exec-5] c.e.demo.controller.UserController : 更新用户成功 User&#123;id=1, username=&apos;mrbird&apos;, password=&apos;123456&apos;&#125;2018-06-03 18:24:37.266 INFO 16188 --- [nio-8082-exec-3] c.e.demo.controller.UserController : 删除用户成功 12018-06-03 18:27:12.314 INFO 16188 --- [trap-executor-0] c.n.d.s.r.aws.ConfigClusterResolver : Resolving eureka endpoints via configuration发现方法都成功调用，并且是均衡的。Spring Cloud Ribbon配置Spring Cloud Ribbon的配置分为全局和指定服务名称。比如我要指定全局的服务请求连接超时时间为200毫秒：12ribbon: ConnectTimeout: 200如果只是设置获取Server Provider服务的请求连接超时时间，我们只需要在配置最前面加上服务名称就行了，如：123Server-Provider: ribbon: ConnectTimeout: 200设置获取Server-Provider服务的负载均衡算法从轮询改为随机：123Server-Provider: ribbon: NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule设置处理Server-Provider服务的超时时间：123Server-Provider: ribbon: ReadTimeout: 1000开启重试机制，即获取服务失败是否从另外一个节点重试，默认值为false：12345spring: cloud: loadbalancer: retry: enabled: true对Server-Provider的所有请求在失败的时候都进行重试：123Server-Provider: ribbon: OkToRetryOnAllOperations: true切换Server-Provider实例的重试次数：123Server-Provider: ribbon: MaxAutoRetriesNextServer: 1对Server-Provider当前实例的重试次数：123Server-Provider: ribbon: MaxAutoRetries: 1根据如上配置当访问Server-Provider服务实例（比如是8082）遇到故障的时候，Ribbon会再尝试访问一次当前实例（次数由MaxAutoRetries配置），如果不行，就换到8083实例进行访问（更换次数由 MaxAutoRetriesNextServer决定），如果还是不行，那就GG思密达，返回失败。如果不和Eureka搭配使用的话，我们就需要手动指定服务清单给Ribbon：123Server-Provider: ribbon: listOfServers: localhost:8082,localhost:8083上面配置了名称为Server-Provider的服务，有两个节点可供使用（8082和8083）。源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/29.Spring-Cloud-Ribbon-LoadBalance参考文章 《Spring Cloud微服务实战》]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Cloud</tag>
        <tag>Ribbon</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Cloud Eureka服务治理]]></title>
    <url>%2Fblog%2FSpring-Cloud-Eureka.html</url>
    <content type="text"><![CDATA[考虑当前有两个微服务实例A和B，A服务需要调用B服务的某个REST接口。假如某一天B服务迁移到了另外一台服务器，IP和端口也发生了变化，这时候我们不得不去修改A服务中调用B服务REST接口的静态配置。随着公司业务的发展，微服务的数量也越来越多，服务间的关系可能变得非常复杂，传统的微服务维护变得愈加困难，也很容易出错。所谓服务治理就是用来实现各个微服务实例的自动化注册与发现，在这种模式下，服务间的调用不再通过指定具体的实例地址来实现，而是通过向服务注册中心获取服务名并发起请求调用实现。Eureka是由Netflix开发的一款服务治理开源框架，Spring-cloud对其进行了集成。Eureka既包含了服务端也包含了客户端，Eureka服务端是一个服务注册中心(Eureka Server)，提供服务的注册和发现，即当前有哪些服务注册进来可供使用；Eureka客户端为服务提供者(Server Provider)，它将自己提供的服务注册到Eureka服务端，并周期性地发送心跳来更新它的服务租约，同时也能从服务端查询当前注册的服务信息并把它们缓存到本地并周期性地刷新服务状态。这样服务消费者(Server Consumer)便可以从服务注册中心获取服务名称，并消费服务。三者关系如下图所示:搭建Eureka-Server服务注册中心说了那么多，我们先来搭建一个Eureka服务端来充当服务注册中心。新建一个Spring Boot项目，artifactId填Eureka-Service，然后引入Spring Cloud Edgware.SR3和spring-cloud-starter-eureka-server:123456789101112131415161718&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Edgware.SR3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;在启动类上添加@EnableEurekaServer注解，表明这是一个Eureka服务端：1234567@EnableEurekaServer@SpringBootApplicationpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;接着在application.yml中添加一些配置：1234567891011server: port: 8080 eureka: instance: hostname: localhost client: register-with-eureka: false fetch-registry: false serviceUrl: defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/上面配置了服务的端口为8080，剩下几个为Eureka配置：eureka.instance.hostname指定了Eureka服务端的IP；eureka.client.register-with-eureka表示是否将服务注册到Eureka服务端，由于自身就是Eureka服务端，所以设置为false；eureka.client.fetch-registry表示是否从Eureka服务端获取服务信息，因为这里只搭建了一个Eureka服务端，并不需要从别的Eureka服务端同步服务信息，所以这里设置为false；eureka.client.serviceUrl.defaultZone指定Eureka服务端的地址，默认值为http://localhost:8761/eureka。配置完毕后启动服务，访问http://localhost:8080/，可看到：由于还没有Eureka客户端将服务注册进来，所以Instances currently registered with Eureka列表是空的。下面我们接着搭建一个Eureka客户端来提供服务。搭建Eureka-Client服务提供者新建一个Spring Boot项目，artifactId填Eureka-Client，然后引入以下依赖：123456789101112131415161718192021&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Edgware.SR3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;接着编写一个TestController，对外提供一些REST服务：1234567891011121314151617181920@RestControllerpublic class TestController &#123; private Logger log = LoggerFactory.getLogger(this.getClass()); @Autowired private DiscoveryClient client; @GetMapping("/info") public String info() &#123; @SuppressWarnings("deprecation") ServiceInstance instance = client.getLocalServiceInstance(); String info = "host：" + instance.getHost() + "，service_id：" + instance.getServiceId(); log.info(info); return info; &#125; @GetMapping("/hello") public String hello() &#123; return "hello world"; &#125;&#125;上面代码注入了org.springframework.cloud.client.discovery.DiscoveryClient对象，可以获取当前服务的一些信息。编写启动类，在启动类上加@EnableDiscoveryClient注解，表明这是一个Eureka客户端：1234567@EnableDiscoveryClient@SpringBootApplicationpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;最后配置application.yml：12345678910111213server: port: 8082 spring: application: name: Server-Provider eureka: client: register-with-eureka: true fetch-registry: true serviceUrl: defaultZone: http://localhost:8080/eureka/稍微说明下这些配置的意思：server.port指定了服务的端口为8082；spring.application.name指定服务名称为Server-Provider，后续服务消费者要获取上面TestController中接口的时候会用到这个服务名；eureka.client.serviceUrl.defaultZone指定Eureka服务端的地址，这里为上面定义的Eureka服务端地址；eureka.client.register-with-eureka和eureka.client.fetch-registry上面已经解释了其意思，虽然这两个配置的默认值就是true，但这里还是显式配置下，使Eureka客户端的功能更为直观（即向服务端注册服务并定时从服务端获取服务缓存到本地）。配置好后，启动Eureka-Client，可以从控制台中看到注册成功的消息：1234567891011121314Registered Applications size is zero : trueApplication version is -1: trueGetting all instance registry info from the eureka serverThe response status is 200Starting heartbeat executor: renew interval is: 30InstanceInfoReplicator onDemand update allowed rate per min is 4Discovery Client initialized at timestamp 1530667498944 with initial instances Registering application Server-Provider with eureka with status UPSaw local status change event StatusChangeEvent [timestamp=1530667498949, current=UP, previous=STARTING] DiscoveryClient_SERVER-PROVIDER/192.168.73.109:Server-Provider:8082: registering service... DiscoveryClient_SERVER-PROVIDER/192.168.73.109:Server-Provider:8082 - registration status: 204Tomcat started on port(s): 8082 (http)Updating port to 8082Started DemoApplication in 7.007 seconds (JVM running for 8.355)第3，4行输出表示已经成功从Eureka服务端获取到了服务；第5行表示发送心跳给Eureka服务端，续约（renew）服务；第8到11行表示已经成功将服务注册到了Eureka服务端。再次访问http://localhost:8080/，可看到服务列表里已经出现了名字为Server-providerde服务了：UP表示在线的意思（如果Eureka客户端正常关闭，那么这里的状态将变为DOWN），点击后面的链接192.168.73.109:Server-Provider:8082将访问该服务的/info接口：这时候关闭Eureka客户端，再次刷新http://localhost:8080/：可看到虽然Eureka客户端已经关闭了，但是Eureka服务端页面的服务服务列表中依然还有该服务，并且页面红色文字提示：EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.大致意思是Eureka已经进入了保护模式。微服务在部署之后可能由于网络问题造成Eureka客户端无法成功的发送心跳给Eureka服务端，这时候Eureka服务端认定Eureka客户端已经挂掉了，虽然实际上Eureka客户端还在正常的运行着。而保护模式就是为了解决这个问题，即当Eureka服务端在短时间内同时丢失了过多的Eureka客户端时，Eureka服务端会进入保护模式，不去剔除这些客户端。因为我们这里只部署了一个Eureka客户端服务，所以关闭客户端后满足“短时间内丢失过多Eureka客户端”的条件。在开发中可以先将保护模式给关了，我们在Eureka服务端加上一条配置:123eureka: server: enable-self-preservation: falseEureka-Server集群Eureka服务端充当了重要的角色，所有Eureka客户端都将自己提供的服务注册到Eureka服务端，然后供所有服务消费者使用。如果单节点的Eureka服务端宕机了，那么所有服务都无法正常的访问，这必将是灾难性的。为了提高Eureka服务端的可用性，我们一般会对其集群部署，即同时部署多个Eureka服务端，并且可以相互间同步服务。在搭建Eureka服务端的时候我们曾把下面两个配置给关闭了：1234eureka: client: register-with-eureka: false fetch-registry: false实际上在Eureka集群模式中，开启这两个参数可以让当前Eureka服务端将自己也作为服务注册到别的Eureka服务端，并且从别的Eureka服务端获取服务进行同步。所以这里我们将这两个参数置为true（默认就是true），下面开始搭建Eureka服务端集群，为了简单起见这里只搭建两个节点的Eureka服务端集群。在Eureka-Server项目的src/main/resource目录下新建application-peer1.yml，配置如下：123456789101112131415server: port: 8080spring: application: name: Eureka-Servereureka: instance: hostname: peer1 client: serviceUrl: defaultZone: http://peer2:8081/eureka/ server: enable-self-preservation: falseserver.port=8080指定端口为8080；spring.application.name=Eureka-Server指定了服务名称为Eureka-Server；eureka.instance.hostname=peer1指定地址为peer1；eureka.client.serviceUrl.defaultZone=http://peer2:8081/eureka/指定Eureka服务端的地址为另外一个Eureka服务端的地址peer2。下面我们创建另外一个Eureka服务端peer2的yml配置application-peer2.yml：123456789101112131415server: port: 8081spring: application: name: Eureka-Servereureka: instance: hostname: peer2 client: serviceUrl: defaultZone: http://peer1:8080/eureka/ server: enable-self-preservation: falsepeer2中的serviceUrl我们指向Eureka服务端peer1。为了让这种在一台机器上配置两个hostname的方式生效，我们需要修改下hosts文件（位置C:\Windows\System32\drivers\etc）：12127.0.0.1 peer1127.0.0.1 peer2我们将Eureka-Server项目打包成jar，然后分别运行以下两条命令来部署peer1和peer2：12java -jar Eureka-Service-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer1java -jar Eureka-Service-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer2启动后，我们来访问peer1http://localhost:8080/：可看到DS Replicas(副本)指向了peer2，registered-replicas和available-replicas都指向了http://peer2:8081/eureka/。访问http://localhost:8081/我们也可以看到类似的信息。因为Eureka服务端做了集群处理，所以Eureka客户端指定的服务端地址也要进行修改：1234eureka: client: serviceUrl: defaultZone: http://peer1:8080/eureka/,http://peer2:8081/eureka/我们将Eureka客户端（Server-Provider）打成jar包，然后分别用端口8082和8083启动两个服务：12java -jar Eureka-Client-0.0.1-SNAPSHOT.jar --server.port=8082java -jar Eureka-Client-0.0.1-SNAPSHOT.jar --server.port=8083然后访问http://peer2:8080/eureka/或者http://peer2:8081/eureka/： 搭建Server-Consumer服务消费者在实际项目中，Eureka客户端即是服务提供者，也是服务消费者，即自身的接口可能被别的服务访问，同时也可能调用别的服务接口。这里为了更好的演示，我们把服务消费者单独的分开来演示。新建一个Spring Boot项目，artifactId填Server-Consumer，其主要的任务就是将自身的服务注册到Eureka服务端，并且获取Eureka服务端提供的服务并进行消费。这里服务的消费我们用Ribbon来完成，Ribbon是一款实现服务负载均衡的开源软件，这里不做详细介绍。引入Eureka客户端和Ribbon依赖：12345678910111213141516171819202122232425&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Edgware.SR3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;同样的，在入口类中加入@EnableDiscoveryClient注解用于发现服务和注册服务，并配置一个RestTemplate Bean，然后加上@LoadBalanced注解来开启负载均衡：1234567891011121314151617181920import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;import org.springframework.cloud.client.loadbalancer.LoadBalanced;import org.springframework.context.annotation.Bean;import org.springframework.web.client.RestTemplate;@EnableDiscoveryClient@SpringBootApplicationpublic class DemoApplication &#123; @Bean @LoadBalanced RestTemplate restTemplate() &#123; return new RestTemplate(); &#125; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;接着编写一个TestController，用于消费服务：12345678910@RestControllerpublic class TestController &#123; @Autowired private RestTemplate restTemplate; @GetMapping("/info") public String getInfo() &#123; return this.restTemplate.getForEntity("http://Server-Provider/info", String.class).getBody(); &#125;&#125;上面代码注入了RestTemplate，getInfo中使用RestTemplate对象均衡的去获取服务并消费。可以看到我们使用服务名称（Server-Provider）去获取服务的，而不是使用传统的IP加端口的形式。这就体现了使用Eureka去获取服务的好处，我们只要保证这个服务名称不变即可，IP和端口不再是我们关心的点。最后编写下配置文件application.yml：1234567891011server: port: 9000 spring: application: name: Server-Consumer eureka: client: serviceUrl: defaultZone: http://peer1:8080/eureka/,http://peer2:8081/eureka/端口为9000，服务名称为Server-Consumer并指定了Eureka服务端的地址。启动该项目，访问http://localhost:9000/info：成功获取到了信息，我们多次访问这个接口，然后观察8082和8083Eureka客户端的后台：可以看到它们的后台都打印出了信息，说明我们从9000去获取服务是均衡的。这时候我们关闭一个Eureka服务端，再次访问http://localhost:9000/info，还是可以成功获取到信息，这就是Eureka服务端集群的好处。Eureka-Server添加认证出于安全的考虑，我们可能会对Eureka服务端添加用户认证的功能。我们在Eureka-Server引入Spring-Security依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt;然后在application.yml中配置用户名和密码：123456security: basic: enabled: true user: name: mrbird password: 123456Eureka服务端配置了密码之后，所有eureka.client.serviceUrl.defaultZone的配置也必须配置上用户名和密码，格式为：eureka.client.serviceUrl.defaultZone=http://${userName}:${password}@${hosetname}:${port}/eureka/，如：1234eureka: client: serviceUrl: defaultZone: http://mrbird:123456@peer2:8081/eureka/重新打包并部署后，访问http://localhost:8080/，页面将弹出验证窗口，输入用户名和密码后即可访问。Eureka配置下面我们总结一下在Eureka中常用的配置选项及代表的含义：配置含义默认值eureka.client.enabled是否启用Eureka Clienttrueeureka.client.register-with-eureka表示是否将自己注册到Eureka Servertrueeureka.client.fetch-registry表示是否从Eureka Server获取注册的服务信息trueeureka.client.serviceUrl.defaultZone配置Eureka Server地址，用于注册服务和获取服务http://localhost:8761/eurekaeureka.client.registry-fetch-interval-seconds默认值为30秒，即每30秒去Eureka Server上获取服务并缓存30eureka.instance.lease-renewal-interval-in-seconds向Eureka Server发送心跳的间隔时间，单位为秒，用于服务续约30eureka.instance.lease-expiration-duration-in-seconds定义服务失效时间，即Eureka Server检测到Eureka Client木有心跳后（客户端意外下线）多少秒将其剔除90eureka.server.enable-self-preservation用于开启Eureka Server自我保护功能trueeureka.client.instance-info-replication-interval-seconds更新实例信息的变化到Eureka服务端的间隔时间，单位为秒30eureka.client.eureka-service-url-poll-interval-seconds轮询Eureka服务端地址更改的间隔时间，单位为秒。300eureka.instance.prefer-ip-address表示使用IP进行配置为不是域名falseeureka.client.healthcheck.enabled默认Erueka Server是通过心跳来检测Eureka Client的健康状况的，通过置为true改变Eeureka Server对客户端健康检测的方式，改用Actuator的/health端点来检测。falseEureka还有许多别的配置，具体可以参考EurekaClientConfigBean，EurekaServerConfigBean和EurekaInstanceConfigBean配置类的源码。参考链接：http://cloud.spring.io/spring-cloud-netflix/1.4.x/multi/multi__service_discovery_eureka_clients.html源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/28.Spring-Cloud-Eureka-Server-Discovery]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Cloud</tag>
        <tag>Eureka</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ECMAScript 6学习笔记]]></title>
    <url>%2Fblog%2FES2015-Learn-Note.html</url>
    <content type="text"><![CDATA[ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。这里主要记录下学习ES6中值得记录的地方，以备忘。const恒量cont限制的给恒量分配值得动作，而不是限制恒量里的值，比如下面这个例子失败的：12345const fruit = '🍎'console.log(fruit)const fruit = '🍋'console.log(fruit)而下面这个例子是可行的：123const fruit = []fruit.push('🍋')console.log(fruit)解构解构就是将一个数据结构进行分解，通常分为数组解构，对象解构和参数解构。数组解构在ES6之前，要将数组里的每个值分配给一个变量，需要这样做:123456789function food() &#123; return ['🍰', '☕', '🍓']&#125;var temp = food()var dessert = temp[0]var drink = temp[1]var fruit = temp[2]console.log(dessert, drink, fruit)ES6后可以这样做：123456function food() &#123; return ['🍰', '☕', '🍓']&#125;let [dessert, drink, fruit] = food()console.log(dessert, drink, fruit)输出结果是一样的，是不是很方便？对象解构将food返回改为一个对象，然后解构：123456function food() &#123; return &#123;dessert: '🍰', drink: '☕', fruit: '🍓'&#125;&#125;let &#123;dessert: dessert1, drink: drink1, fruit: fruit1&#125; = food()console.log(dessert1, drink1, fruit1)这里做的是将对象里的dessert属性值赋予给dessert1，依此类推，有点颠倒的感觉，结果如下：参数解构使用对象解构的方式，我们可以很容易的给函数传递一个对象参数：12345function food(dessert, drink, &#123;location, restaurant&#125; = &#123;&#125;) &#123; console.log(dessert, drink, location, restaurant)&#125;food('🎂', '☕', &#123;location: 'fuzhou', restaurant: 'MrBird\'s Restaurant'&#125;)模板字符串ES6之前的字符串拼接：123456let weather = '🌞', mood = '😄', drink = '🍸'let message = "今天天气：" + weather + "，喝了一杯：" + drink + "，心情：" + moodconsole.log(message)ES6后我们可以这样做：123456let weather = '🌞', mood = '😄', drink = '🍸'let message = `今天天气：$&#123;weather&#125; ，喝了一杯：$&#123;drink&#125; ，心情：$&#123;mood&#125;`console.log(message)带标签的模板字符串可以在模板字符串前加个标签，这个标签是个函数，我们可以在这个函数里输出一些值：12345678910let weather = '🌞', mood = '😄', drink = '🍸'let message = note`今天天气：$&#123;weather&#125; ，喝了一杯：$&#123;drink&#125; ，心情：$&#123;mood&#125;`function note(strings, ...params) &#123; console.log(strings) console.log(params)&#125;可以看到，strings里的内容是模板字符串的每一个部分，...params包含的是模板字符串里的所有变量值。字符串几个新方法以什么开头startsWith，以什么结尾endsWith，是否包含includes：1234567891011let weather = '🌞', mood = '😄', drink = '🍸'let message = `今天天气：$&#123;weather&#125; ，喝了一杯：$&#123;drink&#125; ，心情：$&#123;mood&#125;`console.log( message.startsWith('今天'), message.endsWith('😄'), message.includes('🍉'))参数默认值ES6后我们可以给函数参数指定默认值：123456789function food(dessert = '🎂', drink = '🍵') &#123; return `$&#123;dessert&#125; and $&#123;drink&#125;`&#125;console.log( food(), '\n', food('🌭', '🍺'))操作符...展开操作符在数组前加...，称为展开操作符，可以用于展开数组：123456789101112let fruits = ['🍍', '🍎'], foods = ['🍟', ...fruits]console.log( fruits, '\n', ...fruits, '\n', foods, '\n', ...foods)剩余操作符在函数参数前加...，称为剩余操作符，用于接收函数剩下的参数：12345function food(dessert,drink,...foods) &#123; console.log(dessert,drink,foods)&#125;food('🎂','🍺','🍟','🍤','🍖')剩余的参数被放到了一个数组里。函数的名字ES6函数新增了name属性，用于输出函数的名字:123456789function food() &#123; &#125;var food_1 = function () &#123; &#125;var food_2 = function deliciousFood() &#123; &#125;console.log( food.name, food_1.name, food_2.name)Object新增方法Object.is()判断两个东西是不是同一个：12345678console.log(+0 == -0)console.log(+0 === -0)console.log(NaN == NaN)console.log(NaN === NaN)console.log(Object.is(+0, -0))console.log(Object.is(NaN, NaN))Object.assign()作用就是将一个对象的内容赋予给另外一个对象：1234let food = &#123;dessert:'🍦'&#125;Object.assign(food, &#123;drink: '🥣', fruit: '🥝'&#125;)console.log(food)第一个参数为接收者，第二个参数为赋予者。Object.setPrototypeOf()设置对象的prototype，给个例子体会：12345678910111213141516171819let breakfast = &#123; getFood() &#123; return '🧀' &#125;&#125;let lunch = &#123; getFood() &#123; return '🍜' &#125;&#125;let dinner = Object.create(lunch)console.log(dinner.getFood())console.log(Object.getPrototypeOf(dinner) === lunch)Object.setPrototypeOf(dinner, breakfast)console.log(dinner.getFood())console.log(Object.getPrototypeOf(dinner) === breakfast)__proto__我们还可以用__proto__（前后各两个下划线）设置对象的prototype：123456789101112131415161718192021let breakfast = &#123; getFood() &#123; return '🧀' &#125;&#125;let lunch = &#123; getFood() &#123; return '🍜' &#125;&#125;let dinner = &#123; __proto__: lunch&#125;console.log(dinner.getFood())console.log(Object.getPrototypeOf(dinner) === lunch)dinner.__proto__ = breakfastconsole.log(dinner.getFood())console.log(Object.getPrototypeOf(dinner) === breakfast)super看下super的用法：12345678910111213let lunch = &#123; getFood() &#123; return '🍜' &#125;&#125;let dinner = &#123; __proto__: lunch, getFood() &#123; return super.getFood() + ' and 🥗' &#125;&#125;console.log(dinner.getFood())生成迭代器ES6中我们可以使用function*和yield生成一个迭代器：1234567891011function* cook(foods) &#123; for (value of foods) &#123; yield value &#125;&#125;let result = cook(['🌮', '🍿', '🥧'])console.log(result.next())console.log(result.next())console.log(result.next())console.log(result.next())class类ES6允许我们在JavaScript中定义一个类：1234567891011class Cook &#123; constructor(food) &#123; this.food = food &#125; make() &#123; console.log(this.food) &#125;&#125;let mrbird = new Cook(['🥞'])mrbird.make()类里包含了一个有参构造器和方法。get &amp;&amp; set我们可以在类里定义get和set：12345678910111213141516171819class Cook &#123; constructor(food) &#123; this.food = food &#125; get foods() &#123; return this.food &#125; set foods(value) &#123; this.food.push(value) &#125;&#125;let mrbird = new Cook(['🥞'])mrbird.foods ='🍣'mrbird.foods ='🥣'console.log(mrbird.foods)静态方法我们可以在类里定义静态方法，静态方法就是不需要实例化类就能调用的方法：12345678910class Cook &#123; constructor(food) &#123; this.food = food &#125; static make(food) &#123; console.log(food) &#125;&#125;Cook.make('🍪')继承ES6允许我们继承类：1234567891011121314151617class Person &#123; constructor(name, age) &#123; this.name = name this.age = age &#125; introduce() &#123; console.log(`$&#123;this.name&#125; is $&#123;this.age&#125; years old`) &#125;&#125;class HandsomeBoy extends Person &#123; constructor(name, age) &#123; super(name, age); &#125;&#125;new HandsomeBoy(&apos;MrBird&apos;, &apos;18&apos;).introduce()Set一些Set的常用操作：12345678910111213141516let foods = new Set('🧀🍧🍨')console.log(foods)foods.add('🍭')foods.add('🍭')console.log(foods)console.log(foods.size)console.log(foods.has('🍨'))foods.delete('🧀')console.log(foods)foods.forEach(food =&gt; console.log(food))foods.clear()console.log(foods)Map一些Map的常用操作：1234567891011121314151617181920212223let food = new Map()let fruit = &#123;&#125;, cook = () =&gt; &#123;&#125;, dessert = '甜点'food.set(fruit, '🍈')food.set(cook, '🥄')food.set(dessert, '🍦')console.log(food)console.log(food.size)console.log(food.get(fruit))console.log(food.get(cook))food.forEach((value, key) =&gt; &#123; console.log(`$&#123;key&#125; = $&#123;value&#125;`)&#125;)food.delete(dessert)console.log(food.has(dessert))food.clear()console.log(food)先到这里吧，详细的还是得参考http://es6.ruanyifeng.com/或者https://babeljs.io/docs/en/learn]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue生态学习之Vuex,Vue-Router]]></title>
    <url>%2Fblog%2Fvuex-vuerouter.html</url>
    <content type="text"><![CDATA[文章已加密，请输入密码 😛： 密码错误 😭 No content to display! U2FsdGVkX1/FJf/LU08jHvrAJtCi2cyNWnWygYy0FUYfxp5cTnGYNkLbLdEhKSSEQuVwaw3tyn3H7uAbLdDwI8VjHyyHGkBH5bOvyzWdattTlu8bXRf3xGfN0skSPDunE3dQNb6kPC34p7b/FFojAMlIYhFMh3gL4j//wlq0qzwa5AUid9v3wjwtEFPNVhXMJfG+ziOy/pxf0bsFqS2aaYj0ZkxHZRDS+w3g1xpbrjCuuuoDvOyM7nvYKWBbAseID0ZWOYE8RpWSPX4B0bGefCpIKvTnnOcAd1EId8Jgy3rPmkCq0vJNl3Sigx/XX+CJsgxkP0Vo3oL+RmbZyoYXkzTxbIKy1byO7hZraUWsetLkCCx4ujvG+XKx2WRfCHc2C+kG2hZyJpHAUrpUp7bcK6JUKjKyWq65pkC58gqNryKNQY0VPVGk5CyFdR6XaGPHDIGeoa7uCeNn9rxIJHXDEcivHPK5uVcuvhu0fEltu2B2gl0zPGLsSZORX4ZPzc4p41vfXjb/9+WQZwLwVZY2iEfTGiP18kH6bbtxhYlMHMnl9RlABgE2b7VaMaFoZ1eP4xFGaDCGdEDx3AIa5p8xBZTT58xonUUfhB4cQNtxvn6hG4rXuH1c9NPz4S1nr2rmeY1OlvX4Q2cV8T7bYzGGaUI2kBrhqAUgjrEXpeebRSw=]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue入门学习]]></title>
    <url>%2Fblog%2FVue-Learn-Note.html</url>
    <content type="text"><![CDATA[文章已加密，请输入密码 😛： 密码错误 😭 No content to display! ]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Security短信验证码登录]]></title>
    <url>%2Fblog%2FSpring-Security-SmsCode.html</url>
    <content type="text"><![CDATA[在Spring Security添加图形验证码一节中，我们已经实现了基于Spring Boot + Spring Security的账号密码登录，并集成了图形验证码功能。时下另一种非常常见的网站登录方式为手机短信验证码登录，但Spring Security默认只提供了账号密码的登录认证逻辑，所以要实现手机短信验证码登录认证功能，我们需要模仿Spring Security账号密码登录逻辑代码来实现一套自己的认证逻辑。短信验证码生成我们在上一节Spring Security添加图形验证码的基础上来集成短信验证码登录的功能。和图形验证码类似，我们先定义一个短信验证码对象SmsCode：12345678910111213141516171819public class SmsCode &#123; private String code; private LocalDateTime expireTime; public SmsCode(String code, int expireIn) &#123; this.code = code; this.expireTime = LocalDateTime.now().plusSeconds(expireIn); &#125; public SmsCode(String code, LocalDateTime expireTime) &#123; this.code = code; this.expireTime = expireTime; &#125; boolean isExpire() &#123; return LocalDateTime.now().isAfter(expireTime); &#125; // get,set略&#125;SmsCode对象包含了两个属性：code验证码和expireTime过期时间。isExpire方法用于判断短信验证码是否已过期。接着在ValidateCodeController中加入生成短信验证码相关请求对应的方法：1234567891011121314151617181920@RestControllerpublic class ValidateController &#123; public final static String SESSION_KEY_SMS_CODE = "SESSION_KEY_SMS_CODE"; private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy(); @GetMapping("/code/sms") public void createSmsCode(HttpServletRequest request, HttpServletResponse response, String mobile) throws IOException &#123; SmsCode smsCode = createSMSCode(); sessionStrategy.setAttribute(new ServletWebRequest(request), SESSION_KEY_SMS_CODE + mobile, smsCode); // 输出验证码到控制台代替短信发送服务 System.out.println("您的登录验证码为：" + smsCode.getCode() + "，有效时间为60秒"); &#125; private SmsCode createSMSCode() &#123; String code = RandomStringUtils.randomNumeric(6); return new SmsCode(code, 60); &#125;&#125;这里我们使用createSMSCode方法生成了一个6位的纯数字随机数，有效时间为60秒。然后通过SessionStrategy对象的setAttribute方法将短信验证码保存到了Session中，对应的key为SESSION_KEY_SMS_CODE。至此，短信验证码生成模块编写完毕，下面开始改造登录页面。改造登录页我们在登录页面中加入一个与手机短信验证码认证相关的Form表单：1234567891011&lt;form class="login-page" action="/login/mobile" method="post"&gt; &lt;div class="form"&gt; &lt;h3&gt;短信验证码登录&lt;/h3&gt; &lt;input type="text" placeholder="手机号" name="mobile" value="17777777777" required="required"/&gt; &lt;span style="display: inline"&gt; &lt;input type="text" name="smsCode" placeholder="短信验证码" style="width: 50%;"/&gt; &lt;a href="/code/sms?mobile=17777777777"&gt;发送验证码&lt;/a&gt; &lt;/span&gt; &lt;button type="submit"&gt;登录&lt;/button&gt; &lt;/div&gt;&lt;/form&gt;其中a标签的href属性值对应我们的短信验证码生成方法的请求URL。Form的action对应处理短信验证码登录方法的请求URL，这个方法下面在进行具体实现。同时，我们需要在Spring Security中配置/code/sms路径免验证：12345678910111213141516171819@Overrideprotected void configure(HttpSecurity http) throws Exception &#123; http.addFilterBefore(validateCodeFilter, UsernamePasswordAuthenticationFilter.class) // 添加验证码校验过滤器 .formLogin() // 表单登录 // http.httpBasic() // HTTP Basic .loginPage("/authentication/require") // 登录跳转 URL .loginProcessingUrl("/login") // 处理表单登录 URL .successHandler(authenticationSucessHandler) // 处理登录成功 .failureHandler(authenticationFailureHandler) // 处理登录失败 .and() .authorizeRequests() // 授权配置 .antMatchers("/authentication/require", "/login.html", "/code/image","/code/sms").permitAll() // 无需认证的请求路径 .anyRequest() // 所有请求 .authenticated() // 都需要认证 .and() .csrf().disable();&#125;重启项目，访问http://localhost:8080/login.html：点击发送验证码，控制台输出如下：1您的登录验证码为：693583，有效时间为60秒接下来开始实现使用短信验证码登录认证逻辑。添加短信验证码认证在Spring Security中，使用用户名密码认证的过程大致如下图所示：Spring Security使用UsernamePasswordAuthenticationFilter过滤器来拦截用户名密码认证请求，将用户名和密码封装成一个UsernamePasswordToken对象交给AuthenticationManager处理。AuthenticationManager将挑出一个支持处理该类型Token的AuthenticationProvider（这里为DaoAuthenticationProvider，AuthenticationProvider的其中一个实现类）来进行认证，认证过程中DaoAuthenticationProvider将调用UserDetailService的loadUserByUsername方法来处理认证，如果认证通过（即UsernamePasswordToken中的用户名和密码相符）则返回一个UserDetails类型对象，并将认证信息保存到Session中，认证后我们便可以通过Authentication对象获取到认证的信息了。由于Spring Security并没用提供短信验证码认证的流程，所以我们需要仿照上面这个流程来实现：在这个流程中，我们自定义了一个名为SmsAuthenticationFitler的过滤器来拦截短信验证码登录请求，并将手机号码封装到一个叫SmsAuthenticationToken的对象中。在Spring Security中，认证处理都需要通过AuthenticationManager来代理，所以这里我们依旧将SmsAuthenticationToken交由AuthenticationManager处理。接着我们需要定义一个支持处理SmsAuthenticationToken对象的SmsAuthenticationProvider，SmsAuthenticationProvider调用UserDetailService的loadUserByUsername方法来处理认证。与用户名密码认证不一样的是，这里是通过SmsAuthenticationToken中的手机号去数据库中查询是否有与之对应的用户，如果有，则将该用户信息封装到UserDetails对象中返回并将认证后的信息保存到Authentication对象中。为了实现这个流程，我们需要定义SmsAuthenticationFitler、SmsAuthenticationToken和SmsAuthenticationProvider，并将这些组建组合起来添加到Spring Security中。下面我们来逐步实现这个过程。定义SmsAuthenticationToken查看UsernamePasswordAuthenticationToken的源码，将其复制出来重命名为SmsAuthenticationToken，并稍作修改，修改后的代码如下所示：12345678910111213141516171819202122232425262728293031323334353637383940public class SmsAuthenticationToken extends AbstractAuthenticationToken &#123; private static final long serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID; private final Object principal; public SmsAuthenticationToken(String mobile) &#123; super(null); this.principal = mobile; setAuthenticated(false); &#125; public SmsAuthenticationToken(Object principal, Collection&lt;? extends GrantedAuthority&gt; authorities) &#123; super(authorities); this.principal = principal; super.setAuthenticated(true); // must use super, as we override &#125; @Override public Object getCredentials() &#123; return null; &#125; public Object getPrincipal() &#123; return this.principal; &#125; public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException &#123; if (isAuthenticated) &#123; throw new IllegalArgumentException( "Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead"); &#125; super.setAuthenticated(false); &#125; @Override public void eraseCredentials() &#123; super.eraseCredentials(); &#125;&#125;SmsAuthenticationToken包含一个principal属性，从它的两个构造函数可以看出，在认证之前principal存的是手机号，认证之后存的是用户信息。UsernamePasswordAuthenticationToken原来还包含一个credentials属性用于存放密码，这里不需要就去掉了。定义SmsAuthenticationFilter定义完SmsAuthenticationToken后，我们接着定义用于处理短信验证码登录请求的过滤器SmsAuthenticationFilter，同样的复制UsernamePasswordAuthenticationFilter源码并稍作修改：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556public class SmsAuthenticationFilter extends AbstractAuthenticationProcessingFilter &#123; public static final String MOBILE_KEY = "mobile"; private String mobileParameter = MOBILE_KEY; private boolean postOnly = true; public SmsAuthenticationFilter() &#123; super(new AntPathRequestMatcher("/login/mobile", "POST")); &#125; public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException &#123; if (postOnly &amp;&amp; !request.getMethod().equals("POST")) &#123; throw new AuthenticationServiceException( "Authentication method not supported: " + request.getMethod()); &#125; String mobile = obtainMobile(request); if (mobile == null) &#123; mobile = ""; &#125; mobile = mobile.trim(); SmsAuthenticationToken authRequest = new SmsAuthenticationToken(mobile); setDetails(request, authRequest); return this.getAuthenticationManager().authenticate(authRequest); &#125; protected String obtainMobile(HttpServletRequest request) &#123; return request.getParameter(mobileParameter); &#125; protected void setDetails(HttpServletRequest request, SmsAuthenticationToken authRequest) &#123; authRequest.setDetails(authenticationDetailsSource.buildDetails(request)); &#125; public void setMobileParameter(String mobileParameter) &#123; Assert.hasText(mobileParameter, "mobile parameter must not be empty or null"); this.mobileParameter = mobileParameter; &#125; public void setPostOnly(boolean postOnly) &#123; this.postOnly = postOnly; &#125; public final String getMobileParameter() &#123; return mobileParameter; &#125;&#125;构造函数中指定了当请求为/login/mobile，请求方法为POST的时候该过滤器生效。mobileParameter属性值为mobile，对应登录页面手机号输入框的name属性。attemptAuthentication方法从请求中获取到mobile参数值，并调用SmsAuthenticationToken的SmsAuthenticationToken(String mobile)构造方法创建了一个SmsAuthenticationToken。下一步就如流程图中所示的那样，SmsAuthenticationFilter将SmsAuthenticationToken交给AuthenticationManager处理。定义SmsAuthenticationProvider在创建完SmsAuthenticationFilter后，我们需要创建一个支持处理该类型Token的类，即SmsAuthenticationProvider，该类需要实现AuthenticationProvider的两个抽象方法：1234567891011121314151617181920212223242526272829303132public class SmsAuthenticationProvider implements AuthenticationProvider &#123; private UserDetailService userDetailService; @Override public Authentication authenticate(Authentication authentication) throws AuthenticationException &#123; SmsAuthenticationToken authenticationToken = (SmsAuthenticationToken) authentication; UserDetails userDetails = userDetailService.loadUserByUsername((String) authenticationToken.getPrincipal()); if (userDetails == null) throw new InternalAuthenticationServiceException("未找到与该手机号对应的用户"); SmsAuthenticationToken authenticationResult = new SmsAuthenticationToken(userDetails, userDetails.getAuthorities()); authenticationResult.setDetails(authenticationToken.getDetails()); return authenticationResult; &#125; @Override public boolean supports(Class&lt;?&gt; aClass) &#123; return SmsAuthenticationToken.class.isAssignableFrom(aClass); &#125; public UserDetailService getUserDetailService() &#123; return userDetailService; &#125; public void setUserDetailService(UserDetailService userDetailService) &#123; this.userDetailService = userDetailService; &#125;&#125;其中supports方法指定了支持处理的Token类型为SmsAuthenticationToken，authenticate方法用于编写具体的身份认证逻辑。在authenticate方法中，我们从SmsAuthenticationToken中取出了手机号信息，并调用了UserDetailService的loadUserByUsername方法。该方法在用户名密码类型的认证中，主要逻辑是通过用户名查询用户信息，如果存在该用户并且密码一致则认证成功；而在短信验证码认证的过程中，该方法需要通过手机号去查询用户，如果存在该用户则认证通过。认证通过后接着调用SmsAuthenticationToken的SmsAuthenticationToken(Object principal, Collection&lt;? extends GrantedAuthority&gt; authorities)构造函数构造一个认证通过的Token，包含了用户信息和用户权限。你可能会问，为什么这一步没有进行短信验证码的校验呢？实际上短信验证码的校验是在SmsAuthenticationFilter之前完成的，即只有当短信验证码正确以后才开始走认证的流程。所以接下来我们需要定一个过滤器来校验短信验证码的正确性。定义SmsCodeFilter短信验证码的校验逻辑其实和图形验证码的校验逻辑基本一致，所以我们在图形验证码过滤器的基础上稍作修改，代码如下所示：123456789101112131415161718192021222324252627282930313233343536373839404142434445@Componentpublic class SmsCodeFilter extends OncePerRequestFilter &#123; @Autowired private AuthenticationFailureHandler authenticationFailureHandler; private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy(); @Override protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException &#123; if (StringUtils.equalsIgnoreCase("/login/mobile", httpServletRequest.getRequestURI()) &amp;&amp; StringUtils.equalsIgnoreCase(httpServletRequest.getMethod(), "post")) &#123; try &#123; validateCode(new ServletWebRequest(httpServletRequest)); &#125; catch (ValidateCodeException e) &#123; authenticationFailureHandler.onAuthenticationFailure(httpServletRequest, httpServletResponse, e); return; &#125; &#125; filterChain.doFilter(httpServletRequest, httpServletResponse); &#125; private void validateSmsCode(ServletWebRequest servletWebRequest) throws ServletRequestBindingException &#123; String smsCodeInRequest = ServletRequestUtils.getStringParameter(servletWebRequest.getRequest(), "smsCode"); String mobile = ServletRequestUtils.getStringParameter(servletWebRequest.getRequest(), "mobile"); ValidateCode codeInSession = (ValidateCode) sessionStrategy.getAttribute(servletWebRequest, FebsConstant.SESSION_KEY_SMS_CODE + mobile); if (StringUtils.isBlank(smsCodeInRequest)) &#123; throw new ValidateCodeException("验证码不能为空！"); &#125; if (codeInSession == null) &#123; throw new ValidateCodeException("验证码不存在，请重新发送！"); &#125; if (codeInSession.isExpire()) &#123; sessionStrategy.removeAttribute(servletWebRequest, FebsConstant.SESSION_KEY_SMS_CODE + mobile); throw new ValidateCodeException("验证码已过期，请重新发送！"); &#125; if (!StringUtils.equalsIgnoreCase(codeInSession.getCode(), smsCodeInRequest)) &#123; throw new ValidateCodeException("验证码不正确！"); &#125; sessionStrategy.removeAttribute(servletWebRequest, FebsConstant.SESSION_KEY_SMS_CODE + mobile); &#125;&#125;方法的基本逻辑和之前定义的ValidateCodeFilter一致，这里不再赘述。配置生效在定义完所需的组件后，我们需要进行一些配置，将这些组件组合起来形成一个和上面流程图对应的流程。创建一个配置类SmsAuthenticationConfig：123456789101112131415161718192021222324252627@Componentpublic class SmsAuthenticationConfig extends SecurityConfigurerAdapter&lt;DefaultSecurityFilterChain, HttpSecurity&gt; &#123; @Autowired private AuthenticationSuccessHandler authenticationSuccessHandler; @Autowired private AuthenticationFailureHandler authenticationFailureHandler; @Autowired private UserDetailService userDetailService; @Override public void configure(HttpSecurity http) throws Exception &#123; SmsAuthenticationFilter smsAuthenticationFilter = new SmsAuthenticationFilter(); smsAuthenticationFilter.setAuthenticationManager(http.getSharedObject(AuthenticationManager.class)); smsAuthenticationFilter.setAuthenticationSuccessHandler(authenticationSuccessHandler); smsAuthenticationFilter.setAuthenticationFailureHandler(authenticationFailureHandler); SmsAuthenticationProvider smsAuthenticationProvider = new SmsAuthenticationProvider(); smsAuthenticationProvider.setUserDetailService(userDetailService); http.authenticationProvider(smsAuthenticationProvider) .addFilterAfter(smsAuthenticationFilter, UsernamePasswordAuthenticationFilter.class); &#125;&#125;在流程中第一步需要配置SmsAuthenticationFilter，分别设置了AuthenticationManager、AuthenticationSuccessHandler和AuthenticationFailureHandler属性。这些属性都是来自SmsAuthenticationFilter继承的AbstractAuthenticationProcessingFilter类中。第二步配置SmsAuthenticationProvider，这一步只需要将我们自个的UserDetailService注入进来即可。最后调用HttpSecurity的authenticationProvider方法指定了AuthenticationProvider为SmsAuthenticationProvider，并将SmsAuthenticationFilter过滤器添加到了UsernamePasswordAuthenticationFilter后面。到这里我们已经将短信验证码认证的各个组件组合起来了，最后一步需要做的是配置短信验证码校验过滤器，并且将短信验证码认证流程加入到Spring Security中。在BrowserSecurityConfig的configure方法中添加如下配置：12345678910111213141516171819202122232425262728293031323334353637383940414243444546@Configurationpublic class BrowserSecurityConfig extends WebSecurityConfigurerAdapter &#123; @Autowired private MyAuthenticationSucessHandler authenticationSucessHandler; @Autowired private MyAuthenticationFailureHandler authenticationFailureHandler; @Autowired private ValidateCodeFilter validateCodeFilter; @Autowired private SmsCodeFilter smsCodeFilter; @Autowired private SmsAuthenticationConfig smsAuthenticationConfig; @Bean public PasswordEncoder passwordEncoder() &#123; return new BCryptPasswordEncoder(); &#125; @Override protected void configure(HttpSecurity http) throws Exception &#123; http.addFilterBefore(validateCodeFilter, UsernamePasswordAuthenticationFilter.class) // 添加验证码校验过滤器 .addFilterBefore(smsCodeFilter, UsernamePasswordAuthenticationFilter.class) // 添加短信验证码校验过滤器 .formLogin() // 表单登录 // http.httpBasic() // HTTP Basic .loginPage("/authentication/require") // 登录跳转 URL .loginProcessingUrl("/login") // 处理表单登录 URL .successHandler(authenticationSucessHandler) // 处理登录成功 .failureHandler(authenticationFailureHandler) // 处理登录失败 .and() .authorizeRequests() // 授权配置 .antMatchers("/authentication/require", "/login.html", "/code/image","/code/sms").permitAll() // 无需认证的请求路径 .anyRequest() // 所有请求 .authenticated() // 都需要认证 .and() .csrf().disable() .apply(smsAuthenticationConfig); // 将短信验证码认证配置加到 Spring Security 中 &#125;&#125;具体含义见注释，这里不再赘述。测试重启项目，访问http://localhost:8080/login.html，点击发送验证码，控制台输出如下：1您的登录验证码为：169638，有效时间为60秒输入该验证码，点击登录后页面如下所示：认证成功。源码链接 https://github.com/wuyouzhuguli/SpringAll/tree/master/38.Spring-Security-SmsCode]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Security</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Security添加记住我功能]]></title>
    <url>%2Fblog%2FSpring-Security-RememberMe.html</url>
    <content type="text"><![CDATA[在网站的登录页面中，记住我选项是一个很常见的功能，勾选记住我后在一段时间内，用户无需进行登录操作就可以访问系统资源。在Spring Security中添加记住我功能很简单，大致过程是：当用户勾选了记住我选项并登录成功后，Spring Security会生成一个token标识，然后将该token标识持久化到数据库，并且生成一个与该token相对应的cookie返回给浏览器。当用户过段时间再次访问系统时，如果该cookie没有过期，Spring Security便会根据cookie包含的信息从数据库中获取相应的token信息，然后帮用户自动完成登录操作。token持久化Spring Security的记住我功能的实现需要使用数据库来持久化token。我们在上一节Spring Security添加图形验证码的基础上来添加记住我的功能。在application.yml中添加数据源配置：123456spring: datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://127.0.0.1:3306/security?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false username: root password: 123456添加数据库依赖：12345678&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;然后我们在BrowserSecurityConfig中配置个token持久化对象：12345678910111213141516@Configurationpublic class BrowserSecurityConfig extends WebSecurityConfigurerAdapter &#123; @Autowired private UserDetailService userDetailService; @Autowired private DataSource dataSource; @Bean public PersistentTokenRepository persistentTokenRepository() &#123; JdbcTokenRepositoryImpl jdbcTokenRepository = new JdbcTokenRepositoryImpl(); jdbcTokenRepository.setDataSource(dataSource); jdbcTokenRepository.setCreateTableOnStartup(false); return jdbcTokenRepository; &#125; ...&#125;PersistentTokenRepository为一个接口类，这里我们用的是数据库持久化，所以实例用的是PersistentTokenRepository的实现类JdbcTokenRepositoryImpl。JdbcTokenRepositoryImpl需要指定数据源，所以我们将配置好的数据源对象DataSource注入进来并配置到JdbcTokenRepositoryImpl的dataSource属性中。createTableOnStartup属性用于是否启动项目时创建保存token信息的数据表，这里设置为false，我们自己手动创建。查看JdbcTokenRepositoryImpl的源码，可以看到其包含了一个CREATE_TABLE_SQL属性：这个其实就是用于保存token对象数据表的SQL语句，我们复制出来手动执行创建表：123456CREATE TABLE persistent_logins ( username VARCHAR (64) NOT NULL, series VARCHAR (64) PRIMARY KEY, token VARCHAR (64) NOT NULL, last_used TIMESTAMP NOT NULL)修改登录页完成上述配置后，我们稍微改造下登录页，加入记住我的勾选选项：1&lt;input type="checkbox" name="remember-me"/&gt; 记住我其中name属性必须为remember-me。配置生效最后我们需要在Spring Security的认证流程中启用记住我的功能，在BrowserSecurityConfig的configure方法中开启记住我功能：123456789101112131415161718192021222324@Overrideprotected void configure(HttpSecurity http) throws Exception &#123; http.addFilterBefore(validateCodeFilter, UsernamePasswordAuthenticationFilter.class) // 添加验证码校验过滤器 .formLogin() // 表单登录 // http.httpBasic() // HTTP Basic .loginPage("/authentication/require") // 登录跳转 URL .loginProcessingUrl("/login") // 处理表单登录 URL .successHandler(authenticationSucessHandler) // 处理登录成功 .failureHandler(authenticationFailureHandler) // 处理登录失败 .and() .rememberMe() .tokenRepository(persistentTokenRepository()) // 配置 token 持久化仓库 .tokenValiditySeconds(3600) // remember 过期时间，单为秒 .userDetailsService(userDetailService) // 处理自动登录逻辑 .and() .authorizeRequests() // 授权配置 .antMatchers("/authentication/require", "/login.html", "/image/code").permitAll() // 无需认证的请求路径 .anyRequest() // 所有请求 .authenticated() // 都需要认证 .and() .csrf().disable();&#125;rememberMe()用于开启记住我功能；tokenRepository(persistentTokenRepository())用于指定token持久化方法；tokenValiditySeconds配置了token的有效时长，单为为秒；userDetailsService(userDetailService)用于处理通过token对象自动登录，这里为我们自定义的UserDetailsService接口实现。配置好后，重启项目，登录页面如下所示：比较难看，无伤大雅。勾选并成功登录后，可以看到网页多了个remember-me的cookie对象：查看数据库表persistent_logins：可以看到token信息已经成功持久化了，并且浏览器也成功生成了相应的cookie。在cookie未失效之前，无论是重开浏览器或者重启项目，用户都无需再次登录就可以访问系统资源了。源码链接 https://github.com/wuyouzhuguli/SpringAll/tree/master/37.Spring-Security-RememberMe]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Security</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Security添加图形验证码]]></title>
    <url>%2Fblog%2FSpring-Security-ValidateCode.html</url>
    <content type="text"><![CDATA[添加验证码大致可以分为三个步骤：根据随机数生成验证码图片；将验证码图片显示到登录页面；认证流程中加入验证码校验。Spring Security的认证校验是由UsernamePasswordAuthenticationFilter过滤器完成的，所以我们的验证码校验逻辑应该在这个过滤器之前。下面一起学习下如何在上一节Spring Security自定义用户认证的基础上加入验证码校验功能。生成图形验证码验证码功能需要用到spring-social-config依赖：1234 &lt;dependency&gt; &lt;groupId&gt;org.springframework.social&lt;/groupId&gt; &lt;artifactId&gt;spring-social-config&lt;/artifactId&gt;&lt;/dependency&gt;首先定义一个验证码对象ImageCode：12345678910111213141516171819202122232425public class ImageCode &#123; private BufferedImage image; private String code; private LocalDateTime expireTime; public ImageCode(BufferedImage image, String code, int expireIn) &#123; this.image = image; this.code = code; this.expireTime = LocalDateTime.now().plusSeconds(expireIn); &#125; public ImageCode(BufferedImage image, String code, LocalDateTime expireTime) &#123; this.image = image; this.code = code; this.expireTime = expireTime; &#125; boolean isExpire() &#123; return LocalDateTime.now().isAfter(expireTime); &#125; // get,set 略&#125;ImageCode对象包含了三个属性：image图片，code验证码和expireTime过期时间。isExpire方法用于判断验证码是否已过期。接着定义一个ValidateCodeController，用于处理生成验证码请求：1234567891011121314@RestControllerpublic class ValidateController &#123; public final static String SESSION_KEY_IMAGE_CODE = "SESSION_KEY_IMAGE_CODE"; private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy(); @GetMapping("/code/image") public void createCode(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; ImageCode imageCode = createImageCode(); sessionStrategy.setAttribute(new ServletWebRequest(request), SESSION_KEY, imageCode); ImageIO.write(imageCode.getImage(), "jpeg", response.getOutputStream()); &#125;&#125;createImageCode方法用于生成验证码对象，org.springframework.social.connect.web.HttpSessionSessionStrategy对象封装了一些处理Session的方法，包含了setAttribute、getAttribute和removeAttribute方法，具体可以查看该类的源码。使用sessionStrategy将生成的验证码对象存储到Session中，并通过IO流将生成的图片输出到登录页面上。其中createImageCode方法代码如下所示：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748private ImageCode createImageCode() &#123; int width = 100; // 验证码图片宽度 int height = 36; // 验证码图片长度 int length = 4; // 验证码位数 int expireIn = 60; // 验证码有效时间 60s BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB); Graphics g = image.getGraphics(); Random random = new Random(); g.setColor(getRandColor(200, 250)); g.fillRect(0, 0, width, height); g.setFont(new Font("Times New Roman", Font.ITALIC, 20)); g.setColor(getRandColor(160, 200)); for (int i = 0; i &lt; 155; i++) &#123; int x = random.nextInt(width); int y = random.nextInt(height); int xl = random.nextInt(12); int yl = random.nextInt(12); g.drawLine(x, y, x + xl, y + yl); &#125; StringBuilder sRand = new StringBuilder(); for (int i = 0; i &lt; length; i++) &#123; String rand = String.valueOf(random.nextInt(10)); sRand.append(rand); g.setColor(new Color(20 + random.nextInt(110), 20 + random.nextInt(110), 20 + random.nextInt(110))); g.drawString(rand, 13 * i + 6, 16); &#125; g.dispose(); return new ImageCode(image, sRand.toString(), expireIn);&#125;private Color getRandColor(int fc, int bc) &#123; Random random = new Random(); if (fc &gt; 255) &#123; fc = 255; &#125; if (bc &gt; 255) &#123; bc = 255; &#125; int r = fc + random.nextInt(bc - fc); int g = fc + random.nextInt(bc - fc); int b = fc + random.nextInt(bc - fc); return new Color(r, g, b);&#125;生成验证码的方法写好后，接下来开始改造登录页面。改造登录页在登录页面加上如下代码：1234&lt;span style="display: inline"&gt; &lt;input type="text" name="imageCode" placeholder="验证码" style="width: 50%;"/&gt; &lt;img src="/code/image"/&gt;&lt;/span&gt;&lt;img&gt;标签的src属性对应ValidateController的createImageCode方法。要使生成验证码的请求不被拦截，需要在BrowserSecurityConfig的configure方法中配置免拦截：1234567891011121314151617@Overrideprotected void configure(HttpSecurity http) throws Exception &#123; http.formLogin() // 表单登录 // http.httpBasic() // HTTP Basic .loginPage("/authentication/require") // 登录跳转 URL .loginProcessingUrl("/login") // 处理表单登录 URL .successHandler(authenticationSucessHandler) // 处理登录成功 .failureHandler(authenticationFailureHandler) // 处理登录失败 .and() .authorizeRequests() // 授权配置 .antMatchers("/authentication/require", "/login.html", "/image/code").permitAll() // 无需认证的请求路径 .anyRequest() // 所有请求 .authenticated() // 都需要认证 .and().csrf().disable();&#125;重启项目，访问http://localhost:8080/login.html，效果如下：认证流程添加验证码校验在校验验证码的过程中，可能会抛出各种验证码类型的异常，比如“验证码错误”、“验证码已过期”等，所以我们定义一个验证码类型的异常类：1234567public class ValidateCodeException extends AuthenticationException &#123; private static final long serialVersionUID = 5022575393500654458L; ValidateCodeException(String message) &#123; super(message); &#125;&#125;注意，这里继承的是AuthenticationException而不是Exception。我们都知道，Spring Security实际上是由许多过滤器组成的过滤器链，处理用户登录逻辑的过滤器为UsernamePasswordAuthenticationFilter，而验证码校验过程应该是在这个过滤器之前的，即只有验证码校验通过后采去校验用户名和密码。由于Spring Security并没有直接提供验证码校验相关的过滤器接口，所以我们需要自己定义一个验证码校验的过滤器ValidateCodeFilter：12345678910111213141516171819202122232425262728@Componentpublic class ValidateCodeFilter extends OncePerRequestFilter &#123; @Autowired private AuthenticationFailureHandler authenticationFailureHandler; private SessionStrategy sessionStrategy = new HttpSessionSessionStrategy(); @Override protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException &#123; if (StringUtils.equalsIgnoreCase("/login", httpServletRequest.getRequestURI()) &amp;&amp; StringUtils.equalsIgnoreCase(httpServletRequest.getMethod(), "post")) &#123; try &#123; validateCode(new ServletWebRequest(httpServletRequest)); &#125; catch (ValidateCodeException e) &#123; authenticationFailureHandler.onAuthenticationFailure(httpServletRequest, httpServletResponse, e); return; &#125; &#125; filterChain.doFilter(httpServletRequest, httpServletResponse); &#125; private void validateCode(ServletWebRequest servletWebRequest) throws ServletRequestBindingException &#123; ... &#125; &#125;ValidateCodeFilter继承了org.springframework.web.filter.OncePerRequestFilter，该过滤器只会执行一次。在doFilterInternal方法中我们判断了请求URL是否为/login，该路径对应登录form表单的action路径，请求的方法是否为POST，是的话进行验证码校验逻辑，否则直接执行filterChain.doFilter让代码往下走。当在验证码校验的过程中捕获到异常时，调用Spring Security的校验失败处理器AuthenticationFailureHandler进行处理。validateCode的校验逻辑如下所示：1234567891011121314151617181920private void validateCode(ServletWebRequest servletWebRequest) throws ServletRequestBindingException &#123; ImageCode codeInSession = (ImageCode) sessionStrategy.getAttribute(servletWebRequest, ValidateController.SESSION_KEY); String codeInRequest = ServletRequestUtils.getStringParameter(servletWebRequest.getRequest(), "imageCode"); if (StringUtils.isBlank(codeInRequest)) &#123; throw new ValidateCodeException("验证码不能为空！"); &#125; if (codeInSession == null) &#123; throw new ValidateCodeException("验证码不存在！"); &#125; if (codeInSession.isExpire()) &#123; sessionStrategy.removeAttribute(servletWebRequest, ValidateController.SESSION_KEY); throw new ValidateCodeException("验证码已过期！"); &#125; if (!StringUtils.equalsIgnoreCase(codeInSession.getCode(), codeInRequest)) &#123; throw new ValidateCodeException("验证码不正确！"); &#125; sessionStrategy.removeAttribute(servletWebRequest, ValidateController.SESSION_KEY);&#125;我们分别从Session中获取了ImageCode对象和请求参数imageCode（对应登录页面的验证码&lt;input&gt;框name属性）,然后进行了各种判断并抛出相应的异常。当验证码过期或者验证码校验通过时，我们便可以删除Session中的ImageCode属性了。验证码校验过滤器定义好了，怎么才能将其添加到UsernamePasswordAuthenticationFilter前面呢？很简单，只需要在BrowserSecurityConfig的configure方法中添加些许配置即可：123456789101112131415161718192021@Autowiredprivate ValidateCodeFilter validateCodeFilter;@Overrideprotected void configure(HttpSecurity http) throws Exception &#123; http.addFilterBefore(validateCodeFilter, UsernamePasswordAuthenticationFilter.class) // 添加验证码校验过滤器 .formLogin() // 表单登录 // http.httpBasic() // HTTP Basic .loginPage("/authentication/require") // 登录跳转 URL .loginProcessingUrl("/login") // 处理表单登录 URL .successHandler(authenticationSucessHandler) // 处理登录成功 .failureHandler(authenticationFailureHandler) // 处理登录失败 .and() .authorizeRequests() // 授权配置 .antMatchers("/authentication/require", "/login.html", "/image/code").permitAll() // 无需认证的请求路径 .anyRequest() // 所有请求 .authenticated() // 都需要认证 .and().csrf().disable();&#125;上面代码中，我们注入了ValidateCodeFilter，然后通过addFilterBefore方法将ValidateCodeFilter验证码校验过滤器添加到了UsernamePasswordAuthenticationFilter前面。大功告成，重启项目，访问http://localhost:8080/login.html，当不输入验证码时点击登录，页面显示如下：当输入错误的验证码时点击登录，页面显示如下：当页面加载60秒后再输入验证码点击登录，页面显示如下：当验证码通过，并且用户名密码正确时，页面显示如下：源码链接 https://github.com/wuyouzhuguli/SpringAll/tree/master/36.Spring-Security-ValidateCode]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Security</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Security自定义用户认证]]></title>
    <url>%2Fblog%2FSpring-Security-Authentication.html</url>
    <content type="text"><![CDATA[在Spring Boot中开启Spring Security一节中我们简单搭建了个Spring Boot + Spring Security的项目，认证的用户名和密码都是由Spring Security生成。Spring Security支持我们自定义认证的过程，如处理用户信息获取逻辑，使用我们自定义的登录页面替换Spring Security默认的登录页及自定义登录成功或失败后的处理逻辑等。这里将在上一节的源码基础上进行改造。自定义认证过程自定义认证的过程需要实现Spring Security提供的UserDetailService接口，该接口只有一个抽象方法loadUserByUsername，源码如下：123public interface UserDetailsService &#123; UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;&#125;loadUserByUsername方法返回一个UserDetail对象，该对象也是一个接口，包含一些用于描述用户信息的方法，源码如下：12345678910111213141516public interface UserDetails extends Serializable &#123; Collection&lt;? extends GrantedAuthority&gt; getAuthorities(); String getPassword(); String getUsername(); boolean isAccountNonExpired(); boolean isAccountNonLocked(); boolean isCredentialsNonExpired(); boolean isEnabled();&#125;这些方法的含义如下：getAuthorities获取用户包含的权限，返回权限集合，权限是一个继承了GrantedAuthority的对象；getPassword和getUsername用于获取密码和用户名；isAccountNonExpired方法返回boolean类型，用于判断账户是否未过期，未过期返回true反之返回false；isAccountNonLocked方法用于判断账户是否未锁定；isCredentialsNonExpired用于判断用户凭证是否没过期，即密码是否未过期；isEnabled方法用于判断用户是否可用。实际中我们可以自定义UserDetails接口的实现类，也可以直接使用Spring Security提供的UserDetails接口实现类org.springframework.security.core.userdetails.User。说了那么多，下面我们来开始实现UserDetailService接口的loadUserByUsername方法。首先创建一个MyUser对象，用于存放模拟的用户数据（实际中一般从数据库获取，这里为了方便直接模拟）：1234567891011121314151617public class MyUser implements Serializable &#123; private static final long serialVersionUID = 3497935890426858541L; private String userName; private String password; private boolean accountNonExpired = true; private boolean accountNonLocked= true; private boolean credentialsNonExpired= true; private boolean enabled= true; // get,set略&#125;接着创建MyUserDetailService实现UserDetailService：1234567891011121314151617181920@Configurationpublic class UserDetailService implements UserDetailsService &#123; @Autowired private PasswordEncoder passwordEncoder; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123; // 模拟一个用户，替代数据库获取逻辑 MyUser user = new MyUser(); user.setUserName(username); user.setPassword(this.passwordEncoder.encode("123456")); // 输出加密后的密码 System.out.println(user.getPassword()); return new User(username, user.getPassword(), user.isEnabled(), user.isAccountNonExpired(), user.isCredentialsNonExpired(), user.isAccountNonLocked(), AuthorityUtils.commaSeparatedStringToAuthorityList("admin")); &#125;&#125;这里我们使用了org.springframework.security.core.userdetails.User类包含7个参数的构造器，其还包含一个三个参数的构造器User(String username, String password,Collection&lt;? extends GrantedAuthority&gt; authorities)，由于权限参数不能为空，所以这里先使用AuthorityUtils.commaSeparatedStringToAuthorityList方法模拟一个admin的权限，该方法可以将逗号分隔的字符串转换为权限集合。此外我们还注入了PasswordEncoder对象，该对象用于密码加密，注入前需要手动配置。我们在BrowserSecurityConfig中配置它：123456789@Configurationpublic class BrowserSecurityConfig extends WebSecurityConfigurerAdapter &#123; @Bean public PasswordEncoder passwordEncoder() &#123; return new BCryptPasswordEncoder(); &#125; ...&#125;PasswordEncoder是一个密码加密接口，而BCryptPasswordEncoder是Spring Security提供的一个实现方法，我们也可以自己实现PasswordEncoder。不过Spring Security实现的BCryptPasswordEncoder已经足够强大，它对相同的密码进行加密后可以生成不同的结果。这时候重启项目，访问http://localhost:8080/login，便可以使用任意用户名以及123456作为密码登录系统。我们多次进行登录操作，可以看到控制台输出的加密后的密码如下：可以看到，BCryptPasswordEncoder对相同的密码生成的结果每次都是不一样的。替换默认登录页默认的登录页面过于简陋，我们可以自己定义一个登录页面。为了方便起见，我们直接在src/main/resources/resources目录下定义一个login.html（不需要Controller跳转）：123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;登录&lt;/title&gt; &lt;link rel="stylesheet" href="css/login.css" type="text/css"&gt;&lt;/head&gt;&lt;body&gt; &lt;form class="login-page" action="/login" method="post"&gt; &lt;div class="form"&gt; &lt;h3&gt;账户登录&lt;/h3&gt; &lt;input type="text" placeholder="用户名" name="username" required="required" /&gt; &lt;input type="password" placeholder="密码" name="password" required="required" /&gt; &lt;button type="submit"&gt;登录&lt;/button&gt; &lt;/div&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;要怎么做才能让Spring Security跳转到我们自己定义的登录页面呢？很简单，只需要在BrowserSecurityConfig的configure中添加一些配置：123456789101112@Overrideprotected void configure(HttpSecurity http) throws Exception &#123; http.formLogin() // 表单登录 // http.httpBasic() // HTTP Basic .loginPage("/login.html") .loginProcessingUrl("/login") .and() .authorizeRequests() // 授权配置 .antMatchers("/login.html").permitAll() .anyRequest() // 所有请求 .authenticated(); // 都需要认证&#125;上面代码中.loginPage(&quot;/login.html&quot;)指定了跳转到登录页面的请求URL，.loginProcessingUrl(&quot;/login&quot;)对应登录页面form表单的action=&quot;/login&quot;，.antMatchers(&quot;/login.html&quot;).permitAll()表示跳转到登录页面的请求不被拦截，否则会进入无限循环。这时候启动系统，访问http://localhost:8080/hello，会看到页面已经被重定向到了http://localhost:8080/login.html：输入用户名和密码发现页面报错：我们先把CSRF攻击防御关了，修改BrowserSecurityConfig的configure：12345678910111213Overrideprotected void configure(HttpSecurity http) throws Exception &#123; http.formLogin() // 表单登录 // http.httpBasic() // HTTP Basic .loginPage("/login.html") // 登录跳转 URL .loginProcessingUrl("/login") // 处理表单登录 URL .and() .authorizeRequests() // 授权配置 .antMatchers("/login.html").permitAll() // 登录跳转 URL 无需认证 .anyRequest() // 所有请求 .authenticated() // 都需要认证 .and().csrf().disable();&#125;重启项目便可正常登录。假如现在有这样一个需求：在未登录的情况下，当用户访问html资源的时候跳转到登录页，否则返回JSON格式数据，状态码为401。要实现这个功能我们将loginPage的URL改为/authentication/require，并且在antMatchers方法中加入该URL，让其免拦截:12345678910111213@Overrideprotected void configure(HttpSecurity http) throws Exception &#123; http.formLogin() // 表单登录 // http.httpBasic() // HTTP Basic .loginPage("/authentication/require") // 登录跳转 URL .loginProcessingUrl("/login") // 处理表单登录 URL .and() .authorizeRequests() // 授权配置 .antMatchers("/authentication/require", "/login.html").permitAll() // 登录跳转 URL 无需认证 .anyRequest() // 所有请求 .authenticated() // 都需要认证 .and().csrf().disable();&#125;然后定义一个控制器BrowserSecurityController，处理这个请求：1234567891011121314151617@RestControllerpublic class BrowserSecurityController &#123; private RequestCache requestCache = new HttpSessionRequestCache(); private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); @GetMapping("/authentication/require") @ResponseStatus(HttpStatus.UNAUTHORIZED) public String requireAuthentication(HttpServletRequest request, HttpServletResponse response) throws IOException &#123; SavedRequest savedRequest = requestCache.getRequest(request, response); if (savedRequest != null) &#123; String targetUrl = savedRequest.getRedirectUrl(); if (StringUtils.endsWithIgnoreCase(targetUrl, ".html")) redirectStrategy.sendRedirect(request, response, "/login.html"); &#125; return "访问的资源需要身份认证！"; &#125;&#125;其中HttpSessionRequestCache为Spring Security提供的用于缓存请求的对象，通过调用它的getRequest方法可以获取到本次请求的HTTP信息。DefaultRedirectStrategy的sendRedirect为Spring Security提供的用于处理重定向的方法。上面代码获取了引发跳转的请求，根据请求是否以.html为结尾来对应不同的处理方法。如果是以.html结尾，那么重定向到登录页面，否则返回”访问的资源需要身份认证！”信息，并且HTTP状态码为401（HttpStatus.UNAUTHORIZED）。这样当我们访问http://localhost:8080/hello的时候页面便会跳转到http://localhost:8080/authentication/require，并且输出”访问的资源需要身份认证！”，当我们访问http://localhost:8080/hello.html的时候，页面将会跳转到登录页面。处理成功和失败Spring Security有一套默认的处理登录成功和失败的方法：当用户登录成功时，页面会跳转会引发登录的请求，比如在未登录的情况下访问http://localhost:8080/hello，页面会跳转到登录页，登录成功后再跳转回来；登录失败时则是跳转到Spring Security默认的错误提示页面。下面我们通过一些自定义配置来替换这套默认的处理机制。自定义登录成功逻辑要改变默认的处理成功逻辑很简单，只需要实现org.springframework.security.web.authentication.AuthenticationSuccessHandler接口的onAuthenticationSuccess方法即可：123456789@Componentpublic class MyAuthenticationSucessHandler implements AuthenticationSuccessHandler &#123; @Override public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException &#123; response.setContentType("application/json;charset=utf-8"); response.getWriter().write(mapper.writeValueAsString(authentication)); &#125;&#125;其中Authentication参数既包含了认证请求的一些信息，比如IP，请求的SessionId等，也包含了用户信息，即前面提到的User对象。通过上面这个配置，用户登录成功后页面将打印出Authentication对象的信息。要使这个配置生效，我们还的在BrowserSecurityConfig的configure中配置它：12345678910111213141516171819202122232425@Configurationpublic class BrowserSecurityConfig extends WebSecurityConfigurerAdapter &#123; @Autowired private MyAuthenticationSucessHandler authenticationSucessHandler; @Bean public PasswordEncoder passwordEncoder() &#123; return new BCryptPasswordEncoder(); &#125; @Override protected void configure(HttpSecurity http) throws Exception &#123; http.formLogin() // 表单登录 // http.httpBasic() // HTTP Basic .loginPage("/authentication/require") // 登录跳转 URL .loginProcessingUrl("/login") // 处理表单登录 URL .successHandler(authenticationSucessHandler) // 处理登录成功 .and() .authorizeRequests() // 授权配置 .antMatchers("/authentication/require", "/login.html").permitAll() // 登录跳转 URL 无需认证 .anyRequest() // 所有请求 .authenticated() // 都需要认证 .and().csrf().disable(); &#125;&#125;我们将MyAuthenticationSucessHandler注入进来，并通过successHandler方法进行配置。这时候重启项目登录后页面将会输出如下JSON信息：123456789101112131415161718192021222324252627&#123; "authorities": [ &#123; "authority": "admin" &#125; ], "details": &#123; "remoteAddress": "0:0:0:0:0:0:0:1", "sessionId": "8D50BAF811891F4397E21B4B537F0544" &#125;, "authenticated": true, "principal": &#123; "password": null, "username": "mrbird", "authorities": [ &#123; "authority": "admin" &#125; ], "accountNonExpired": true, "accountNonLocked": true, "credentialsNonExpired": true, "enabled": true &#125;, "credentials": null, "name": "mrbird"&#125;像password，credentials这些敏感信息，Spring Security已经将其屏蔽。除此之外，我们也可以在登录成功后做页面的跳转，修改MyAuthenticationSucessHandler：123456789101112131415@Componentpublic class MyAuthenticationSucessHandler implements AuthenticationSuccessHandler &#123; private RequestCache requestCache = new HttpSessionRequestCache(); private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); @Autowired private ObjectMapper mapper; @Override public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException &#123; SavedRequest savedRequest = requestCache.getRequest(request, response); redirectStrategy.sendRedirect(request, response, savedRequest.getRedirectUrl()); &#125;&#125;通过上面配置，登录成功后页面将跳转回引发跳转的页面。如果想指定跳转的页面，比如跳转到/index，可以将savedRequest.getRedirectUrl()修改为/index：12345678910@Componentpublic class MyAuthenticationSucessHandler implements AuthenticationSuccessHandler &#123; private RedirectStrategy redirectStrategy = new DefaultRedirectStrategy(); @Override public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException &#123; redirectStrategy.sendRedirect(request, response, "/index"); &#125;&#125;然后在TestController中定义一个处理该请求的方法：1234567@RestControllerpublic class TestController &#123; @GetMapping("index") public Object index()&#123; return SecurityContextHolder.getContext().getAuthentication(); &#125;&#125;登录成功后，便可以使用SecurityContextHolder.getContext().getAuthentication()获取到Authentication对象信息。除了通过这种方式获取Authentication对象信息外，也可以使用下面这种方式:1234567@RestControllerpublic class TestController &#123; @GetMapping("index") public Object index(Authentication authentication) &#123; return authentication; &#125;&#125;重启项目，登录成功后，页面将跳转到http://localhost:8080/index：自定义登录失败逻辑和自定义登录成功处理逻辑类似，自定义登录失败处理逻辑需要实现org.springframework.security.web.authentication.AuthenticationFailureHandler的onAuthenticationFailure方法：1234567@Componentpublic class MyAuthenticationFailureHandler implements AuthenticationFailureHandler &#123; @Override public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException &#123; &#125;&#125;onAuthenticationFailure方法的AuthenticationException参数是一个抽象类，Spring Security根据登录失败的原因封装了许多对应的实现类，查看AuthenticationException的Hierarchy：不同的失败原因对应不同的异常，比如用户名或密码错误对应的是BadCredentialsException，用户不存在对应的是UsernameNotFoundException，用户被锁定对应的是LockedException等。假如我们需要在登录失败的时候返回失败信息，可以这样处理：1234567891011121314@Componentpublic class MyAuthenticationFailureHandler implements AuthenticationFailureHandler &#123; @Autowired private ObjectMapper mapper; @Override public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException &#123; response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value()); response.setContentType("application/json;charset=utf-8"); response.getWriter().write(mapper.writeValueAsString(exception.getMessage())); &#125;&#125;状态码定义为500（HttpStatus.INTERNAL_SERVER_ERROR.value()），即系统内部异常。同样的，我们需要在BrowserSecurityConfig的configure中配置它：123456789101112131415161718192021222324@Configurationpublic class BrowserSecurityConfig extends WebSecurityConfigurerAdapter &#123; @Autowired private MyAuthenticationSucessHandler authenticationSucessHandler; @Autowired private MyAuthenticationFailureHandler authenticationFailureHandler; @Override protected void configure(HttpSecurity http) throws Exception &#123; http.formLogin() // 表单登录 // http.httpBasic() // HTTP Basic .loginPage("/authentication/require") // 登录跳转 URL .loginProcessingUrl("/login") // 处理表单登录 URL .successHandler(authenticationSucessHandler) // 处理登录成功 .failureHandler(authenticationFailureHandler) // 处理登录失败 .and() .authorizeRequests() // 授权配置 .antMatchers("/authentication/require", "/login.html").permitAll() // 登录跳转 URL 无需认证 .anyRequest() // 所有请求 .authenticated() // 都需要认证 .and().csrf().disable(); &#125;&#125;重启项目，当输入错误的密码时，页面输出如下：源码链接：https://github.com/wuyouzhuguli/SpringAll/tree/master/35.Spring-Security-Authentication]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Security</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot中开启Spring Security]]></title>
    <url>%2Fblog%2FSpring-Boot%26Spring-Security.html</url>
    <content type="text"><![CDATA[Spring Security是一款基于Spring的安全框架，主要包含认证和授权两大安全模块，和另外一款流行的安全框架Apache Shiro相比，它拥有更为强大的功能。Spring Security也可以轻松的自定义扩展以满足各种需求，并且对常见的Web安全攻击提供了防护支持。如果你的Web框架选择的是Spring，那么在安全方面Spring Security会是一个不错的选择。这里我们使用Spring Boot来集成Spring Security，Spring Boot版本为1.5.14.RELEASE，Spring Security版本为4.2.7RELEASE。开启Spring Security创建一个Spring Boot项目，然后引入spring-boot-starter-security：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt;接下来我们创建一个TestController，对外提供一个/hello服务：1234567@RestControllerpublic class TestController &#123; @GetMapping("hello") public String hello() &#123; return "hello spring security"; &#125;&#125;这时候我们直接启动项目，访问http://localhost:8080/hello，可看到页面弹出了个HTTP Basic认证框：当Spring项目中引入了Spring Security依赖的时候，项目会默认开启如下配置：123security: basic: enabled: true这个配置开启了一个HTTP basic类型的认证，所有服务的访问都必须先过这个认证，默认的用户名为user，密码由Sping Security自动生成，回到IDE的控制台，可以找到密码信息：1Using default security password: e9ed391c-93de-4611-ac87-d871d9e749ac输入用户名user，密码e9ed391c-93de-4611-ac87-d871d9e749ac后，我们便可以成功访问/hello接口。基于表单认证我们可以通过一些配置将HTTP Basic认证修改为基于表单的认证方式。创建一个配置类BrowserSecurityConfig继承org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter这个抽象类并重写configure(HttpSecurity http)方法。WebSecurityConfigurerAdapter是由Spring Security提供的Web应用安全配置的适配器：1234567891011@Configurationpublic class BrowserSecurityConfig extends WebSecurityConfigurerAdapter &#123; @Override protected void configure(HttpSecurity http) throws Exception &#123; http.formLogin() // 表单方式 .and() .authorizeRequests() // 授权配置 .anyRequest() // 所有请求 .authenticated(); // 都需要认证 &#125;&#125;Spring Security提供了这种链式的方法调用。上面配置指定了认证方式为表单登录，并且所有请求都需要进行认证。这时候我们重启项目，再次访问http://localhost:8080/hello，可以看到认证方式已经是form表单的方式了：用户名依旧是user，密码由Spring Security自动生成。当输入凭证错误时，页面上将显示错误信息：如果需要换回HTTP Basic的认证方式，我们只需要简单修改configure方法中的配置：123456789@Overrideprotected void configure(HttpSecurity http) throws Exception &#123; // http.formLogin() // 表单方式 http.httpBasic() // HTTP Basic方式 .and() .authorizeRequests() // 授权配置 .anyRequest() // 所有请求 .authenticated(); // 都需要认证&#125;基本原理上面我们开启了一个最简单的Spring Security安全配置，下面我们来了解下Spring Security的基本原理。通过上面的的配置，代码的执行过程可以简化为下图表示：如上图所示，Spring Security包含了众多的过滤器，这些过滤器形成了一条链，所有请求都必须通过这些过滤器后才能成功访问到资源。其中UsernamePasswordAuthenticationFilter过滤器用于处理基于表单方式的登录认证，而BasicAuthenticationFilter用于处理基于HTTP Basic方式的登录验证，后面还可能包含一系列别的过滤器（可以通过相应配置开启）。在过滤器链的末尾是一个名为FilterSecurityInterceptor的拦截器，用于判断当前请求身份认证是否成功，是否有相应的权限，当身份认证失败或者权限不足的时候便会抛出相应的异常。ExceptionTranslateFilter捕获并处理，所以我们在ExceptionTranslateFilter过滤器用于处理了FilterSecurityInterceptor抛出的异常并进行处理，比如需要身份认证时将请求重定向到相应的认证页面，当认证失败或者权限不足时返回相应的提示信息。下面我们通过debug来验证这个过程（登录方式改回表单的方式）。我们在/hello服务上打个断点：在FilterSecurityInterceptor的invoke方法的super.beforeInvocation上打个断点：当这行代码执行通过后，便可以调用下一行的doFilter方法来真正调用/hello服务，否则将抛出相应的异常。当FilterSecurityInterceptor抛出异常时，异常将由ExceptionTranslateFilter捕获并处理，所以我们在ExceptionTranslateFilter的doFilter方法catch代码块第一行打个断点：我们待会模拟的是用户未登录直接访问/hello，所以应该是抛出用户未认证的异常，所以接下来应该跳转到UsernamePasswordAuthenticationFilter处理表单方式的用户认证。在UsernamePasswordAuthenticationFilter的attemptAuthentication方法上打个断点：准备完毕后，我们启动项目，然后访问http://localhost:8080/hello，代码直接跳转到FilterSecurityInteceptor的断点上：往下执行，因为当前请求没有经过身份认证，所以将抛出异常并被ExceptionTranslateFilter捕获：捕获异常后重定向到登录表单登录页面，当我们在表单登录页面输入信息点login后，代码跳转到UsernamePasswordAuthenticationFilter过滤器的attemptAuthentication方法上：判断用户名和密码是否正确之后，代码又跳回FilterSecurityInterceptor的beforeInvocation方法执行上：当认证通过时，FilterSecurityInterceptor代码往下执行doFilter，然后代码最终跳转到/hello上：浏览器页面将显示hello spring security信息。源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/34.Start-Spring-Security]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Security</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot中使用过滤器和拦截器]]></title>
    <url>%2Fblog%2FSpring-Boot-Filter-Interceptor.html</url>
    <content type="text"><![CDATA[过滤器（Filter）和拦截器（Interceptor）是Web项目中常用的两个功能，本文将简单介绍在Spring Boot中使用过滤器和拦截器来计算Controller中方法的执行时长，并且简单对比两者的区别。现有如下Controller：123456789@RestController@RequestMapping("user")public class UserController &#123; @GetMapping("/&#123;id:\\d+&#125;") public void get(@PathVariable String id) &#123; System.out.println(id); &#125;&#125;下面通过配置过滤器和拦截器来实现对get方法执行时间计算的功能。过滤器定义一个TimeFilter类，实现javax.servlet.Filter：1234567891011121314151617181920public class TimeFilter implements Filter&#123; @Override public void init(FilterConfig filterConfig) throws ServletException &#123; System.out.println("过滤器初始化"); &#125; @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123; System.out.println("开始执行过滤器"); Long start = new Date().getTime(); filterChain.doFilter(servletRequest, servletResponse); System.out.println("【过滤器】耗时 " + (new Date().getTime() - start)); System.out.println("结束执行过滤器"); &#125; @Override public void destroy() &#123; System.out.println("过滤器销毁"); &#125;&#125;TimeFilter重写了Filter的三个方法，方法名称已经很直白的描述了其作用，这里不再赘述。要使该过滤器在Spring Boot中生效，还需要一些配置。这里主要有两种配置方式。配置方式一可通过在TimeFilter上加上如下注解：12345@Component@WebFilter(urlPatterns = &#123;"/*"&#125;)public class TimeFilter implements Filter &#123; ...&#125;@Component注解让TimeFilter成为Spring上下文中的一个Bean，@WebFilter注解的urlPatterns属性配置了哪些请求可以进入该过滤器，/*表示所有请求。启动项目时可以看到控制台输出了过滤器初始化，启动后访问http://localhost:8080/user/1，控制台输出如下：1234开始执行过滤器1【过滤器】耗时 31结束执行过滤器配置方式二除了在过滤器类上加注解外，我们也可以通过FilterRegistrationBean来注册过滤器。定义一个WebConfig类，加上@Configuration注解表明其为配置类，然后通过FilterRegistrationBean来注册过滤器:123456789101112131415@Configurationpublic class WebConfig &#123; @Bean public FilterRegistrationBean timeFilter() &#123; FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(); TimeFilter timeFilter = new TimeFilter(); filterRegistrationBean.setFilter(timeFilter); List&lt;String&gt; urlList = new ArrayList&lt;&gt;(); urlList.add("/*"); filterRegistrationBean.setUrlPatterns(urlList); return filterRegistrationBean; &#125;&#125;FilterRegistrationBean除了注册过滤器TimeFilter外还通过setUrlPatterns方法配置了URL匹配规则。重启项目访问http://localhost:8080/user/1，我们可以看到和上面一样的效果。通过过滤器我们只可以获取到servletRequest对象，所以并不能获取到方法的名称，所属类，参数等额外的信息。拦截器定义一个TimeInterceptor类，实现org.springframework.web.servlet.HandlerInterceptor接口:12345678910111213141516171819202122232425public class TimeInterceptor implements HandlerInterceptor &#123; @Override public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception &#123; System.out.println("处理拦截之前"); httpServletRequest.setAttribute("startTime", new Date().getTime()); System.out.println(((HandlerMethod) o).getBean().getClass().getName()); System.out.println(((HandlerMethod) o).getMethod().getName()); return true; &#125; @Override public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception &#123; System.out.println("开始处理拦截"); Long start = (Long) httpServletRequest.getAttribute("startTime"); System.out.println("【拦截器】耗时 " + (new Date().getTime() - start)); &#125; @Override public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception &#123; System.out.println("处理拦截之后"); Long start = (Long) httpServletRequest.getAttribute("startTime"); System.out.println("【拦截器】耗时 " + (new Date().getTime() - start)); System.out.println("异常信息 " + e); &#125;&#125;TimeInterceptor实现了HandlerInterceptor接口的三个方法。preHandle方法在处理拦截之前执行，postHandle只有当被拦截的方法没有抛出异常成功时才会处理，afterCompletion方法无论被拦截的方法抛出异常与否都会执行。通过这三个方法的参数可以看到，相较于过滤器，拦截器多了Object和Exception对象，所以可以获取的信息比过滤器要多的多。但过滤器仍无法获取到方法的参数等信息，我们可以通过切面编程来实现这个目的，具体可参考https://mrbird.cc/Spring-Boot-AOP%20log.html。要使拦截器在Spring Boot中生效，还需要如下两步配置：1.在拦截器类上加入@Component注解；2.在WebConfig中通过InterceptorRegistry注册过滤器:12345678910@Configurationpublic class WebConfig extends WebMvcConfigurerAdapter &#123; @Autowired private TimeInterceptor timeInterceptor; @Override public void addInterceptors(InterceptorRegistry registry) &#123; registry.addInterceptor(timeInterceptor); &#125;&#125;启动项目，访问http://localhost:8080/user/1，控制台输出如下：123456789处理拦截之前cc.mrbird.controller.UserControllerget1开始处理拦截【拦截器】耗时 24处理拦截之后【拦截器】耗时 24异常信息 null从输出中我们可以了解到三个方法的执行顺序，并且三个方法都被执行了。我们在UserController的get方法中手动抛出一个异常：12345 @GetMapping("/&#123;id:\\d+&#125;")public void get(@PathVariable String id) &#123; System.out.println(id); throw new RuntimeException("user not exist");&#125;重启项目后，访问http://localhost:8080/user/1，控制台输出如下：1234567处理拦截之前cc.mrbird.controller.UserControllerget1处理拦截之后【拦截器】耗时 0异常信息 java.lang.RuntimeException: user not exist可看到，postHandle方法并没有被执行。执行时机对比我们将过滤器和拦截器都配置上，然后启动项目访问http://localhost:8080/user/1：123456789101112开始执行过滤器处理拦截之前cc.mrbird.controller.UserControllerget1开始处理拦截【拦截器】耗时 25处理拦截之后【拦截器】耗时 25异常信息 null【过滤器】耗时 34结束执行过滤器可看到过滤器要先于拦截器执行，晚于拦截器结束。下图很好的描述了它们的执行时间区别：源码链接https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/26.Spring-Boot-Filter-Interceptor]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot异常处理]]></title>
    <url>%2Fblog%2FSpring-Boot-Exception.html</url>
    <content type="text"><![CDATA[Spring Boot对异常的处理有一套默认的机制：当应用中产生异常时，Spring Boot根据发送请求头中的accept是否包含text/html来分别返回不同的响应信息。当从浏览器地址栏中访问应用接口时，请求头中的accept便会包含text/html信息，产生异常时，Spring Boot通过org.springframework.web.servlet.ModelAndView对象来装载异常信息，并以HTML的格式返回；而当从客户端访问应用接口产生异常时（客户端访问时，请求头中的accept不包含text/html），Spring Boot则以JSON的格式返回异常信息。下面来验证一下。默认异常处理机制假设应用中有如下一个Controller：123456789@RestController@RequestMapping("user")public class UserController &#123; @GetMapping("/&#123;id:\\d+&#125;") public void get(@PathVariable String id) &#123; throw new RuntimeException("user not exist"); &#125;&#125;在代码中我们主动的抛出了一个RuntimeException，使用浏览器访问http://localhost:8080/user/1： 可看到页面返回了一些异常描述，并且请求头的accpet包含了text/html片段。接着使用模拟发送REST请求的Chrome插件Restlet Client发送http://localhost:8080/user/1：可以看到请求头的accept值为*/*，并且返回一段JSON格式的信息。查看Spring Boot的BasicErrorController类便可看到这一默认机制的具体实现：可看到errorHtml和error方法的请求地址和方法是一样的，唯一的区别就是errorHtml通过produces = {&quot;text/html&quot;}判断请求头的accpet属性中是否包含text/html，如果包含，便走该方法。自定义html异常页面我们可以通过在src/main/resources/resources/error路径下定义友好的异常页面，比如定义一个500.html页面：12345678910&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;500&lt;/title&gt;&lt;/head&gt;&lt;body&gt; 系统内部异常&lt;/body&gt;&lt;/html&gt;然后再次通过浏览器访问:http://localhost:8080/user/1：同样的，我们也可以定义404.html等常见的HTTP状态码对应的异常页面。通过自定义html异常页面并不会影响客户端发送请求异常返回的结果。自定义异常处理除了可以通过自定义html异常页面来改变浏览器访问接口时产生的异常信息，我们也可以自定义异常处理来改表默认的客户端访问接口产生的异常信息。我们手动定义一个UserNotExistException，继承RuntimeException。12345678910111213141516171819public class UserNotExistException extends RuntimeException&#123; private static final long serialVersionUID = -1574716826948451793L; private String id; public UserNotExistException(String id)&#123; super("user not exist"); this.id = id; &#125; public String getId() &#123; return id; &#125; public void setId(String id) &#123; this.id = id; &#125;&#125;然后定义一个Controller异常处理类ControllerExceptionHandler：12345678910111213@ControllerAdvicepublic class ControllerExceptionHandler &#123; @ExceptionHandler(UserNotExistException.class) @ResponseBody @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR) public Map&lt;String, Object&gt; handleUserNotExistsException(UserNotExistException e) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put("id", e.getId()); map.put("message", e.getMessage()); return map; &#125;&#125;其中注解@ExceptionHandler指定了要处理的异常类型，注解@ResponseStatus指定异常处理方法返回的HTTP状态码为HttpStatus.INTERNAL_SERVER_ERROR，即500。HttpStatus是一个spring自带的枚举类型，封装了常见的HTTP状态码及描述：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485public enum HttpStatus &#123; CONTINUE(100, "Continue"), SWITCHING_PROTOCOLS(101, "Switching Protocols"), PROCESSING(102, "Processing"), CHECKPOINT(103, "Checkpoint"), OK(200, "OK"), CREATED(201, "Created"), ACCEPTED(202, "Accepted"), NON_AUTHORITATIVE_INFORMATION(203, "Non-Authoritative Information"), NO_CONTENT(204, "No Content"), RESET_CONTENT(205, "Reset Content"), PARTIAL_CONTENT(206, "Partial Content"), MULTI_STATUS(207, "Multi-Status"), ALREADY_REPORTED(208, "Already Reported"), IM_USED(226, "IM Used"), MULTIPLE_CHOICES(300, "Multiple Choices"), MOVED_PERMANENTLY(301, "Moved Permanently"), FOUND(302, "Found"), /** @deprecated */ @Deprecated MOVED_TEMPORARILY(302, "Moved Temporarily"), SEE_OTHER(303, "See Other"), NOT_MODIFIED(304, "Not Modified"), /** @deprecated */ @Deprecated USE_PROXY(305, "Use Proxy"), TEMPORARY_REDIRECT(307, "Temporary Redirect"), PERMANENT_REDIRECT(308, "Permanent Redirect"), BAD_REQUEST(400, "Bad Request"), UNAUTHORIZED(401, "Unauthorized"), PAYMENT_REQUIRED(402, "Payment Required"), FORBIDDEN(403, "Forbidden"), NOT_FOUND(404, "Not Found"), METHOD_NOT_ALLOWED(405, "Method Not Allowed"), NOT_ACCEPTABLE(406, "Not Acceptable"), PROXY_AUTHENTICATION_REQUIRED(407, "Proxy Authentication Required"), REQUEST_TIMEOUT(408, "Request Timeout"), CONFLICT(409, "Conflict"), GONE(410, "Gone"), LENGTH_REQUIRED(411, "Length Required"), PRECONDITION_FAILED(412, "Precondition Failed"), PAYLOAD_TOO_LARGE(413, "Payload Too Large"), /** @deprecated */ @Deprecated REQUEST_ENTITY_TOO_LARGE(413, "Request Entity Too Large"), URI_TOO_LONG(414, "URI Too Long"), /** @deprecated */ @Deprecated REQUEST_URI_TOO_LONG(414, "Request-URI Too Long"), UNSUPPORTED_MEDIA_TYPE(415, "Unsupported Media Type"), REQUESTED_RANGE_NOT_SATISFIABLE(416, "Requested range not satisfiable"), EXPECTATION_FAILED(417, "Expectation Failed"), I_AM_A_TEAPOT(418, "I'm a teapot"), /** @deprecated */ @Deprecated INSUFFICIENT_SPACE_ON_RESOURCE(419, "Insufficient Space On Resource"), /** @deprecated */ @Deprecated METHOD_FAILURE(420, "Method Failure"), /** @deprecated */ @Deprecated DESTINATION_LOCKED(421, "Destination Locked"), UNPROCESSABLE_ENTITY(422, "Unprocessable Entity"), LOCKED(423, "Locked"), FAILED_DEPENDENCY(424, "Failed Dependency"), UPGRADE_REQUIRED(426, "Upgrade Required"), PRECONDITION_REQUIRED(428, "Precondition Required"), TOO_MANY_REQUESTS(429, "Too Many Requests"), REQUEST_HEADER_FIELDS_TOO_LARGE(431, "Request Header Fields Too Large"), UNAVAILABLE_FOR_LEGAL_REASONS(451, "Unavailable For Legal Reasons"), INTERNAL_SERVER_ERROR(500, "Internal Server Error"), NOT_IMPLEMENTED(501, "Not Implemented"), BAD_GATEWAY(502, "Bad Gateway"), SERVICE_UNAVAILABLE(503, "Service Unavailable"), GATEWAY_TIMEOUT(504, "Gateway Timeout"), HTTP_VERSION_NOT_SUPPORTED(505, "HTTP Version not supported"), VARIANT_ALSO_NEGOTIATES(506, "Variant Also Negotiates"), INSUFFICIENT_STORAGE(507, "Insufficient Storage"), LOOP_DETECTED(508, "Loop Detected"), BANDWIDTH_LIMIT_EXCEEDED(509, "Bandwidth Limit Exceeded"), NOT_EXTENDED(510, "Not Extended"), NETWORK_AUTHENTICATION_REQUIRED(511, "Network Authentication Required"); ...&#125;编写完自定义异常处理逻辑后，我们将UserController中的方法抛出的异常改为UserNotExistException：1234 @GetMapping("/&#123;id:\\d+&#125;")public void get(@PathVariable String id) &#123; throw new UserNotExistException(id);&#125;重启项目，使用Restlet Client再次访问http://localhost:8080/user/1，响应如下： 源码链接 https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/25.Spring-Boot-Exception]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Java8实战】新的日期和时间API]]></title>
    <url>%2Fblog%2Fjava8-new-time-date-api.html</url>
    <content type="text"><![CDATA[Java 8之前的库对日期和时间的支持并不理想，为了解决这个问题，Java 8引入了一套全新的时间日期API，位于java.time路径下。LocalDateLocalDate类型包含了年月日信息，下面举些LocalDate的使用示例：12345678LocalDate date = LocalDate.of(2018, 4, 20); // 2018-04-20int year = date.getYear(); // 2018int month = date.getMonth().getValue(); // 4int day = date.getDayOfMonth(); // 20// 查看该月有多少天int days = date.lengthOfMonth(); // 30// 是否是闰年boolean isLeap = date.isLeapYear(); // false可以使用LocalDate.now()获取当天的日期信息：12// 查看当天 年月日LocalDate today = LocalDate.now(); // 2018-04-20除了调用LocalDate的getYear方法外，我们也可以使用ChronoField枚举类型来实现相同的功能：12345int year1 = date.get(ChronoField.YEAR); // 2018int month1 = date.get(ChronoField.MONTH_OF_YEAR); // 4int day1 = date.get(ChronoField.DAY_OF_MONTH); // 20// 当前日期属于该月第几周int weekOfMonth = date.get(ChronoField.ALIGNED_WEEK_OF_MONTH); // 3ChronoField枚举类型包含了诸多的属性可供选择： 我们也可以修改LocalDate对象：1234567LocalDate date3 = LocalDate.of(2018, 4, 20); // 2018-04-20LocalDate date4 = date3.withDayOfMonth(22); // 2018-04-22LocalDate date5 = date3.with(ChronoField.DAY_OF_MONTH, 22); // 2018-04-22LocalDate date6 = date3.withYear(2019); // 2019-04-20LocalDate date7 = date3.plusDays(5); // 2018-04-25LocalDate date8 = date3.plus(5, ChronoUnit.DAYS); // 2018-04-25LocalDate date9 = date3.minusYears(10); // 2008-04-20TemporalAdjusters类提供了许多静态方法来修改LocalDate对象。当我们需要获取下一个周天，下一个工作日，本月的最后一天等信息时，TemporalAdjusters类便可派上用场：12345import static java.time.temporal.TemporalAdjusters.*;LocalDate date10 = date3.with(nextOrSame(DayOfWeek.MONDAY)); // 2018-04-23LocalDate date11 = date3.with(lastDayOfMonth()); // 2018-04-30LocalDate date12 = date3.with(previous(DayOfWeek.SATURDAY)); // 2018-04-14可参考4月的日历来理解上面的结果： 我们还可以对LocalDate进行格式化操作：123456String str1 = date.format(DateTimeFormatter.BASIC_ISO_DATE); // 20180420String str2 = date.format(DateTimeFormatter.ISO_LOCAL_DATE); // 2018-04-20DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");String str5 = date.format(dtf); // 2018-04-20LocalDate date13 = LocalDate.parse(str5, dtf); // 2018-04-20LocalDate和下面要介绍的LocalTime，LocalDateTime之间共享了许多类似的方法，上面介绍的LocalDate修改、格式化等方法通用适用于LocalTime和LocalDateTime。LocalTimeLocalTime和LocalDate类似，区别在于LocalTime包含的是时分秒（毫秒）信息。举些LocalTime的例子：1234LocalTime time = LocalTime.of(20, 13, 54); // 20:13:54int hour = time.getHour(); // 20int minute = time.getMinute(); // 13int second = time.getSecond(); // 54LocalDate和LocalTime都可以通过字符串来创建：12LocalDate date = LocalDate.parse("2018-04-20");LocalTime time = LocalTime.parse("20:13:54");LocalDateTimeLocalDateTime是LocalDate和LocalTime的组合形式，包含了年月日时分秒信息。举些LocalDateTime的使用示例：12LocalDateTime ldt1 = LocalDateTime.of(2018, 4, 20, 20, 13, 54); // 2018-04-20T20:13:54LocalDateTime ldt2 = LocalDateTime.of(date, time); // 2018-04-20T20:13:54LocalDateTime可以转换为LocalDate和LocalTime，转换后包含的信息减少了：12LocalDate date1 = ldt1.toLocalDate(); // 2018-04-20LocalTime time1 = ldt1.toLocalTime(); // 20:13:54同样的，LocalDate和LocalTime也可以转换为LocalDateTime，只需要补上日期或者时间：123LocalDateTime ldt3 = date.atTime(time); // 2018-04-20T20:13:54LocalDateTime ldt4 = date.atTime(20, 13, 54); // 2018-04-20T20:13:54LocalDateTime ldt5 = time.atDate(date); // 2018-04-20T20:13:54DurationDuration用于计算两个LocalTime或者LocalDateTime的时间差，例如：123LocalTime time2 = LocalTime.of(23, 59, 59);Duration duration = Duration.between(time1, time2);long seconds = duration.getSeconds(); // 13565time1和time2之间相差了13565秒。手动创建Duration对象：12Duration threeMinutes = Duration.ofMinutes(3);threeMinutes = Duration.of(3, ChronoUnit.MINUTES); // 创建了一个3分钟的Duration，两种创建方式等价PeriodPeriod用于计算两个LocalDate之间的时长。举些例子：1234LocalDate date2 = LocalDate.of(2018, 5, 21);Period period = Period.between(date1, date2);int monthsBetween = period.getMonths(); // 1int daysBetween = period.getDays(); // 12018-04-21和2018-04-20之间月份相差1，天数相差1。同样的，我们也可以手动创建Period对象：123Period tenDays = Period.ofDays(10);Period threeWeeks = Period.ofWeeks(3);Period twoYearsSixMonthsOneDay = Period.of(2, 6, 1);其他一些常用的方法比较两个时间的先后1234LocalDate date15 = LocalDate.of(2018,4,21);date.isEqual(date15); // falsedate.isAfter(date15); // falsedate.isBefore(date15); // trueMonthDay类的使用MonthDay只包含月日信息，可以用于存放类似于生日，结婚纪念日等信息。举个使用MonthDay的例子：123456LocalDate birthday = LocalDate.of(1999, 9, 9);MonthDay monthDay = MonthDay.of(birthday.getMonth(), birthday.getDayOfMonth());MonthDay currentMonthDay = MonthDay.from(LocalDate.now());if (currentMonthDay.equals(monthDay)) &#123; System.out.println("happy birthday!");&#125;假如用户的生日是1999年9月9号，那么可以通过这种方法来判断今天是否是用户的生日，如果是的话便发送生日祝福。同样的也有YearMonth类。Java 8 新的日期时间API还提供了不同时区和历法的获取方法，由于较少使用而且不易于理解，这里不再列出。😕]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Java 8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Java8实战】使用Optional取代null]]></title>
    <url>%2Fblog%2Fjava8-optional-null.html</url>
    <content type="text"><![CDATA[在Java中对一个空对象进行操作时，便会抛出最常见的异常NullPointerException。为了改善这个问题，Java 8中提供了一个java.util.Optional&lt;T&gt;类型。Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。下面介绍Optional类的使用方法。 假如有一个像下面这样的类层次结构：1234567891011121314151617181920212223242526272829class Department &#123; private Employee employee; public Department(Employee employee) &#123; this.employee = employee; &#125; Employee getEmployee() &#123; return employee; &#125;&#125;class Employee &#123; private Girl girlFriend; public Employee(Girl girlFriend) &#123; this.girlFriend = girlFriend; &#125; Girl getGirlFriend() &#123; return girlFriend; &#125;&#125;class Girl &#123; private String name; public Girl(String name) &#123; this.name = name; &#125; String getName() &#123; return name; &#125;&#125;部门Department类包含一个员工employee属性，类型为Employee，员工Employee类包含girlFriend属性，类型为Girl。假如现在要获取部门某个员工的女朋友，我们通常是这样获取的：1234567891011121314static String getGirlFriendName(Department department) &#123; if (department != null) &#123; Employee employee = department.getEmployee(); if (employee != null) &#123; Girl girl = employee.getGirlFriend(); if (girl != null) &#123; return girl.getName(); &#125; return "单身汪"; &#125; return "没有员工"; &#125; return "部门为空";&#125;可以看到，在每次引用变量的属性时，都要先判断变量是否为空，如果不做该检查将可能导致NullPointerException。下面我们将使用Optional来改善这种层层嵌套，啰嗦的代码。创建Optional创建一个Optional对象有好几种方式：创建一个空的Optional我们可以使用静态工厂方法Optional.empty，创建一个空的Optional对象：1Optional&lt;Department&gt; department = Optional.empty();根据非空值创建Optional我们也可以使用静态工厂方法Optional.of来创建一个非空对象的Optional对象：1Optional&lt;Employee&gt; optEmployee = Optional.of(employee);如果employee为空，这段代码会立即抛出一个NullPointerException。创建可以为null的Optional使用静态工厂方法Optional.ofNullable，我们可以创建一个允许null值的Optional对象：1Optional&lt;Employee&gt; optEmployee = Optional.ofNullable(employee);如果employee为空，对其调用get方法将抛出NoSuchElementException。Optional方法Optional类包含了许多方法，下面介绍这些方法的使用。isPresent顾名思义，如果值存在返回true，否则返回false。如：1234 Optional&lt;Department&gt; opt = Optional.ofNullable(department);if(opt.isPresent())&#123; System.out.println(opt.get().getEmployee());&#125;get如果Optional有值则将其返回，否则抛出NoSuchElementException。下面举个抛出NoSuchElementException的例子：12345try &#123; Optional.empty().get();&#125; catch (Exception e) &#123; e.printStackTrace();&#125;代码将捕获到 java.util.NoSuchElementException: No value present 异常。ifPresent如果Optional实例有值则为其调用Consumer（函数描述符为T -&gt; void），否则不做处理。如：1girl.ifPresent(g -&gt; System.out.println("我有女朋友，名字是：" + g.getName()));orElse如果Optional实例有值则将其返回，否则返回orElse方法传入的参数。如：1System.out.println(Optional.empty().orElse("There is no value present!"));程序将输出There is no value present!。orElseGetorElseGet与orElse方法类似，orElse方法将传入的字符串作为默认值，而orElseGet方法可以接受Supplier（函数描述符为() -&gt; T）来生成默认值。如：1System.out.println(Optional.empty().orElseGet(() -&gt; "There is no value present!"));程序同样输出There is no value present!。orElseThrow如果有值则将其返回，否则抛出Supplier接口创建的异常。如：12345try &#123; Optional.empty().orElseThrow(NoSuchElementException::new);&#125; catch (Exception e) &#123; e.printStackTrace();&#125;代码将捕获到 java.util.NoSuchElementException: No value present 异常。map如果Optional有值，则对其执行调用Function函数描述符为（T -&gt; R）得到返回值。如果返回值不为null，则创建包含Function回值的Optional作为map方法返回值，否则返回空Optional。12Optional&lt;String&gt; upperName = name.map(String::toUpperCase);System.out.println(upperName.orElse("No value found"));flatMap如果有值，为其执行Function函数返回Optional类型返回值，否则返回空Optional。flatMap与map方法类似，区别在于flatMap中的Function函数返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。如：12upperName = name.flatMap((value) -&gt; Optional.of(value.toUpperCase()));System.out.println(upperName.orElse("No value found"));filterfilter个方法通过传入Predicate（函数描述符为T -&gt; Boolean）对Optional实例的值进行过滤。如：123Optional&lt;String&gt; name = Optional.of("Jane");Optional&lt;String&gt; LongName = name.filter((value) -&gt; value.length() &gt;= 3);System.out.println(LongName.orElse("名字长度小于3个字符"));方法输出Jane。实战介绍完Optional类的方法后，我们使用Optional改善一开始的代码：1234567static String getGirlFriendName(Department department) &#123; Optional&lt;Department&gt; opt = Optional.ofNullable(department); return opt.map(Department::getEmployee) .map(Employee::getGirlFriend) .map(Girl::getName) .orElseThrow(NoSuchElementException::new);&#125;整洁而又不失逼格。《Java 8实战》读书笔记]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Java 8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Java8实战】使用并行流]]></title>
    <url>%2Fblog%2FJava8-parallelStream.html</url>
    <content type="text"><![CDATA[除了顺序流外，Java 8中也可以对集合对象调用parallelStream方法或者对顺序流调用parallel方法来生成并行流。并行流就是一个把内容分成多个数据块，并用不同的线程分别处理每个数据块的流。这样在使用流处理数据规模较大的集合对象时可以充分的利用多核CPU来提高处理效率。不过在一些情况下，并行流未必会比顺序流快，甚至会慢很多，所以了解如何高效的使用并行流也至关重要。此外，我们也可以调用流的sequential方法，将并行流转换为顺序流。测试并行流的性能举个例子，对1到1000的整数求和，观察顺序流和并行流的处理时间：1234567891011121314public class StreamExample &#123; public static void main(String[] args) &#123; StreamExample.test((n) -&gt; LongStream.rangeClosed(1L, n).reduce(0L, Long::sum), 1000L); StreamExample.test((n) -&gt; LongStream.rangeClosed(1L, n).parallel().reduce(0L, Long::sum), 1000L); &#125; static void test(LongConsumer c, Long n) &#123; long start = System.currentTimeMillis(); c.accept(n); long end = System.currentTimeMillis(); System.out.println("处理时间：" + (end - start) + "msc"); &#125;&#125;运行结果：12处理时间：9msc处理时间：484msc结果和我们预期的不一致，这是因为在处理数据集规模不大的情况下，将流并行化所带来的额外开销比逻辑代码开销还大。我们将数据集扩大：12StreamExample.test((n) -&gt; LongStream.rangeClosed(1L, n).reduce(0L, Long::sum), 1000000000L);StreamExample.test((n) -&gt; LongStream.rangeClosed(1L, n).parallel().reduce(0L, Long::sum), 1000000000L);运行结果：12处理时间：2775msc处理时间：725msc对于较小的数据量，选择并行流不是一个好的决定。并行处理少数几个元素的好处还抵不上并行化造成的额外开销。设N是要处理的元素的总数，Q是一个元素通过流水线的大致处理成本，则N*Q就是这个对成本的一个粗略的定性估计。Q值较高就意味着使用并行流时性能好的可能性比较大。接着对比下使用并行流处理包装类型的求和与原始类型的求和运行时间对比：12StreamExample.test((n) -&gt; Stream.iterate(1L, a -&gt; a + 1L).limit(n).reduce(0L, Long::sum), 1000000000L);StreamExample.test((n) -&gt; LongStream.rangeClosed(1L, n).parallel().reduce(0L, Long::sum), 1000000000L);运行结果：12处理时间：21915msc处理时间：920msc因为iterate生成的是包装类型的对象，必须拆箱成原始类型才能求和，而且我们很难把iterate分成多个独立块来并行执行。所以可以看到来两者间的运行效率差了将近24倍！在实际中应避免频繁拆装箱；有些操作本身在并行流上的性能就比顺序流差。特别是limit和findFirst等依赖于元 素顺序的操作，它们在并行流上执行的代价非常大。例如，findAny会比findFirst性 能好，因为它不一定要按顺序来执行。再看一个例子：12345678910111213141516171819202122public class StreamExample &#123; public static void main(String[] args) &#123; ArrayList&lt;Long&gt; arrayList = Stream.iterate(1L, a -&gt; a + 1L).limit(10000000L).collect(toCollection(ArrayList::new)); LinkedList&lt;Long&gt; linkedList = Stream.iterate(1L, a -&gt; a + 1L).limit(10000000L).collect(toCollection(LinkedList::new)); StreamExample.test(() -&gt; arrayList.parallelStream().reduce(0L, Long::sum)); StreamExample.test(() -&gt; linkedList.parallelStream().reduce(0L, Long::sum)); &#125; static void test(Runner r) &#123; long start = System.currentTimeMillis(); r.run(); long end = System.currentTimeMillis(); System.out.println("处理时间：" + (end - start) + "msc"); &#125;&#125;@FunctionalInterfaceinterface Runner &#123; void run();&#125;上面代码对比了使用并行流处理ArrayList和使用并行流处理LinkedList的性能对比，运行结果如下：12处理时间：1258msc处理时间：7933msc之所以出现这个结果，是因为ArrayList的拆分效率比LinkedList高得多，前者用不着遍历就可以平均拆分，而后者则必须遍历。使用并行流要考虑流背后的数据结构是否易于分解。用range方法创建的原始类型流也可以快速分解。下表列出了流的数据源和可分解性：数据源可分解性ArrayList很好LinkedList很差IntStream.range很好Stream.iterate很差HashSet好TreeSet好总结总而言之，使用并行流应该考虑以下几点：留意拆装箱成本；流中依赖于元素顺序的操作，在并行流上执行的代价非常大；考虑流的流水线操作总成本，对于较小的数据量，并不适合使用并行流；考虑流背后的数据结构是否易于分解，不易分解的数据结构不适合使用并行流。《Java 8实战》读书笔记]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Java 8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Java8实战】使用流收集数据]]></title>
    <url>%2Fblog%2Fjava8stream2.html</url>
    <content type="text"><![CDATA[在上一节中，我们了解到终端操作collect方法用于收集流中的元素，并放到不同类型的结果中，比如List、Set或者Map。其实collect方法可以接受各种Collectors接口的静态方法作为参数来实现更为强大的规约操作，比如查找最大值最小值，汇总，分区和分组等等。准备工作为了演示Collectors接口中的静态方法使用，这里创建一个Dish类（菜谱类）：12345678910111213141516171819202122232425public class Dish &#123; public enum Type &#123;MEAT, FISH, OTHER&#125; /** 食物名称 */ private final String name; /** 是否是素食 */ private final boolean vegetarian; /** 卡路里 */ private final int calories; /** 类型：肉，海鲜，其他 */ private final Type type; public Dish(String name, boolean vegetarian, int calories, Type type) &#123; this.name = name; this.vegetarian = vegetarian; this.calories = calories; this.type = type; &#125; @Override public String toString() &#123; return this.getName(); &#125; // get,set略&#125;然后创建一个List，包含各种食材：12345678910List&lt;Dish&gt; list = Arrays.asList( new Dish("pork", false, 800, Dish.Type.MEAT), new Dish("beef", false, 700, Dish.Type.MEAT), new Dish("chicken", false, 400, Dish.Type.MEAT), new Dish("french fries", true, 530, Dish.Type.OTHER), new Dish("rice", true, 350, Dish.Type.OTHER), new Dish("season fruit", true, 120, Dish.Type.OTHER), new Dish("pizza", true, 550, Dish.Type.OTHER), new Dish("prawns", false, 300, Dish.Type.FISH), new Dish("salmon", false, 450, Dish.Type.FISH) );在测试类中导入所有Collectors接口的静态方法：1import static java.util.stream.Collectors.*;规约与汇总最大最小值Collectors.maxBy和Collectors.minBy用来计算流中的最大或最小值，比如按卡路里的大小来筛选出卡路里最高的食材：123list.stream() .collect(maxBy(Comparator.comparingInt(Dish::getCalories))) .ifPresent(System.out::println);输出pork。汇总Collectors.summingInt可以用于求和，参数类型为int类型。相应的基本类型对应的方法还有Collectors.summingLong和Collectors.summingDouble。比如求所有食材的卡路里：1list.stream().collect(summingInt(Dish::getCalories)); // 4200Collectors.averagingInt方法用于求平均值，参数类型为int类型。相应的基本类型对应的方法还有Collectors.averagingLong和Collectors.averagingDouble。比如求所有食材的平均卡路里:1list.stream().collect(averagingInt(Dish::getCalories)); // 466.6666666666667Collectors.summarizingInt方法可以一次性返回元素个数，最大值，最小值，平均值和总和：12IntSummaryStatistics iss = list.stream().collect(summarizingInt(Dish::getCalories));System.out.println(iss); // IntSummaryStatistics&#123;count=9, sum=4200, min=120, average=466.666667, max=800&#125;同样，相应的summarizingLong和summarizingDouble方法有相关的LongSummaryStatistics和DoubleSummaryStatistics类型，适用于收集的属性是原始类型long或double的情况。拼接Collectors.joining方法会把流中每一个对象应用toString方法得到的所有字符串连接成一个字符串。如：12list.stream().map(Dish::getName).collect(joining()); // porkbeefchickenfrench friesriceseason fruitpizzaprawnssalmon内部拼接采用了StringBuilder。除此之外，也可以指定拼接符：12list.stream().map(Dish::getName).collect(joining("，"));// pork，beef，chicken，french fries，rice，season fruit，pizza，prawns，salmonreducingCollectors.reducing方法可以实现求和，最大值最小值筛选，拼接等操作。上面介绍的方法在编程上更方便快捷，但reducing的可读性更高，实际使用哪种我觉得还是看个人喜好。举个使用reducing求最大值的例子：1list.stream().collect(reducing(0, Dish::getCalories, Integer::max)); // 800或者：1list.stream().map(Dish::getCalories).collect(reducing(0, Integer::max)); // 800分组分组功能类似于SQL里的group by，可以对流中的元素按照指定分组规则进行分组。普通分组Collectors.groupingBy方法可以轻松的完成分组操作。比如现在对List中的食材按照类型进行分组：12Map&lt;Dish.Type, List&lt;Dish&gt;&gt; dishesByType = list.stream().collect(groupingBy(Dish::getType));System.out.println(dishesByType);输出结果{OTHER=[french fries, rice, season fruit, pizza], FISH=[prawns, salmon], MEAT=[pork, beef, chicken]}。我们也可以自定义分组规则，比如按照卡路里的高低分为高热量，正常和低热量：首先定义一个卡路里高低的枚举类型1public enum CaloricLevel &#123; DIET, NORMAL, FAT &#125;;然后编写分组规则：12345678Map&lt;CaloricLevel, List&lt;Dish&gt;&gt; dishesByCalories = list.stream().collect( groupingBy(d -&gt; &#123; if (d.getCalories() &lt;= 400) return CaloricLevel.DIET; else if (d.getCalories() &lt;= 700) return CaloricLevel.NORMAL; else return CaloricLevel.FAT; &#125;));System.out.println(dishesByCalories);输出结果：{DIET=[chicken, rice, season fruit, prawns], NORMAL=[beef, french fries, pizza, salmon], FAT=[pork]}。多级分组Collectors.groupingBy支持嵌套实现多级分组，比如将食材按照类型分类，然后再按照卡路里的高低分类：12345678 Map&lt;Dish.Type, Map&lt;CaloricLevel, List&lt;Dish&gt;&gt;&gt; dishesGroup = list.stream().collect( groupingBy(Dish::getType, groupingBy(d -&gt; &#123; if (d.getCalories() &lt;= 400) return CaloricLevel.DIET; else if (d.getCalories() &lt;= 700) return CaloricLevel.NORMAL; else return CaloricLevel.FAT; &#125;) ));System.out.println(dishesGroup);返回结果是一个二级Map，输出结果{FISH={DIET=[prawns], NORMAL=[salmon]}, OTHER={DIET=[rice, season fruit], NORMAL=[french fries, pizza]}, MEAT={DIET=[chicken], FAT=[pork], NORMAL=[beef]}}。实际上，第二个参数除了Collectors.groupingBy外，也可以传递其他规约操作，规约的结果类型对应Map里的第二个泛型。举些例子，将食材按照类型分，然后统计各个类型对应的数量：12Map&lt;Dish.Type, Long&gt; dishesCountByType = list.stream().collect(groupingBy(Dish::getType,counting()));System.out.println(dishesCountByType);因为Collectors.counting方法返回Long类型，所以Map第二个泛型也必须指定为Long。输出结果：{OTHER=4, FISH=2, MEAT=3}。或者对食材按照类型分，然后选出卡路里最高的食物：1234Map&lt;Dish.Type, Optional&lt;Dish&gt;&gt; map = list.stream().collect(groupingBy( Dish::getType, maxBy(Comparator.comparing(Dish::getCalories))));System.out.println(map);输出结果：{OTHER=Optional[pizza], MEAT=Optional[pork], FISH=Optional[salmon]}。如果不希望输出结果包含Optional，可以使用Collectors.collectingAndThen方法：1234Map&lt;Dish.Type, Dish&gt; map = list.stream().collect(groupingBy( Dish::getType, collectingAndThen(maxBy(Comparator.comparing(Dish::getCalories)), Optional::get)));System.out.println(map);输出结果：{OTHER=pizza, FISH=salmon, MEAT=pork}。常与Collectors.groupingBy组合使用的方法还有Collectors.mapping。Collectors.mapping方法接受两个参数：一个函数对流中的元素做变换，另一个则将变换的结果对象收集起来，比如对食材按照类型分类，然后输出各种类型食材下卡路里等级情况：12345678910Map&lt;Dish.Type, HashSet&lt;CaloricLevel&gt;&gt; map = list.stream().collect(groupingBy( Dish::getType, mapping( d -&gt; &#123; if (d.getCalories() &lt;= 400) return CaloricLevel.DIET; else if (d.getCalories() &lt;= 700) return CaloricLevel.NORMAL; else return CaloricLevel.FAT; &#125;, toCollection(HashSet::new) )));System.out.println(map);Collectors.toCollection方法可以方便的构造各种类型的集合。输出结果：{FISH=[DIET, NORMAL], MEAT=[DIET, NORMAL, FAT], OTHER=[DIET, NORMAL]}。分区分区类似于分组，只不过分区最多两种结果。Collectors.partitioningBy方法用于分区操作，接收一个Predicate&lt;T&gt;类型的Lambda表达式作为参数。比如将食材按照素食与否分类：12Map&lt;Boolean, List&lt;Dish&gt;&gt; map = list.stream().collect(partitioningBy(Dish::isVegetarian));System.out.println(map);输出结果：{false=[pork, beef, chicken, prawns, salmon], true=[french fries, rice, season fruit, pizza]}。Collectors.partitioningBy方法还支持传入分组函数或者其他规约操作，比如将食材按照素食与否分类，然后按照食材类型进行分类：123Map&lt;Boolean, Map&lt;Dish.Type, List&lt;Dish&gt;&gt;&gt; map = list.stream().collect( partitioningBy(Dish::isVegetarian, groupingBy(Dish::getType)));System.out.println(map);输出结果：{false={MEAT=[pork, beef, chicken], FISH=[prawns, salmon]}, true={OTHER=[french fries, rice, season fruit, pizza]}}。再如将食材按照素食与否分类，然后筛选出各自类型中卡路里含量最低的食材：12345Map&lt;Boolean, Dish&gt; map = list.stream().collect( partitioningBy(Dish::isVegetarian, collectingAndThen( minBy(Comparator.comparing(Dish::getCalories)), Optional::get )));System.out.println(map);输出结果：{false=prawns, true=season fruit}。《Java 8实战》读书笔记]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Java 8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Java8实战】开始使用流]]></title>
    <url>%2Fblog%2Fjava8stream1.html</url>
    <content type="text"><![CDATA[Java 8 中的 Stream 俗称为流，它与 java.io 包里的 InputStream 和 OutputStream 是完全不同的概念。Stream 用于对集合对象进行各种非常便利、高效的聚合操作，或者大批量数据操作。Stream API 借助于Lambda 表达式，极大的提高编程效率和程序可读性。同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势。通过下面的例子我们可以初步体会到使用 Stream 处理集合的便利性。初探Stream有如下一个List，现要从中筛选出以J开头的元素，然后转换为大写，最后输出结果。Java 8之前我们是这样做的：12345678910List&lt;String&gt; list = Arrays.asList("Java", "JavaScript", "python", "PHP", "C#", "Golang", "Swift");List&lt;String&gt; filterList = new ArrayList&lt;&gt;();for (String str : list) &#123; if (str.startsWith("J")) &#123; filterList.add(str.toUpperCase()); &#125;&#125;for (String str : filterList) &#123; System.out.println(str);&#125;为了筛选集合我们进行了两次外部迭代，并且还创建了一个用来临时存放筛选元素的集合对象。借助Java 8中的Stream我们可以极大的简化这个处理过程：12345List&lt;String&gt; list = Arrays.asList("Java", "JavaScript", "python", "PHP", "C#", "Golang", "Swift");list.stream() .filter(s -&gt; s.startsWith("J")) .map(String::toUpperCase) .forEach(System.out::println);是不是很方便？上面的例子中，集合使用stream方法创建了一个流，然后使用filter和map方法来处理这个集合，它们统称为中间操作。中间操作都会返回另一个流，以便于将各种对集合的操作连接起来形成一条流水线。最后我们使用了forEach方法迭代筛选结果，这种位于流的末端，对流进行处理并且生成结果的方法称为终端操作。总而言之，流的使用一般包括三件事情：一个数据源（如集合）来执行一个查询；一个中间操作链，形成一条流的流水线；一个终端操作，执行流水线，并能生成结果。下表列出了流中常见的中间操作和终端操作：操作类型返回类型使用的类型/函数式接口函数描述符filter中间Stream&lt;T&gt;Predicate&lt;T&gt;T -&gt; booleandistinct中间Stream&lt;T&gt;skip中间Stream&lt;T&gt;longlimit中间Stream&lt;T&gt;longmap中间Stream&lt;R&gt;Function&lt;T, R&gt;T -&gt; RflatMap中间Stream&lt;R&gt;Function&lt;T, Stream&lt;R&gt;&gt;T -&gt; Stream&lt;R&gt;sorted中间Stream&lt;T&gt;Comparator&lt;T&gt;(T, T) -&gt; intanyMatch终端booleanPredicate&lt;T&gt;T -&gt; booleannoneMatch终端booleanPredicate&lt;T&gt;T -&gt; booleanallMatch终端booleanPredicate&lt;T&gt;T -&gt; booleanfindAny终端Optional&lt;T&gt;findFirst终端Optional&lt;T&gt;forEach终端voidConsumer&lt;T&gt;T -&gt; voidcollect终端RCollector&lt;T, A, R&gt;reduce终端Optional&lt;T&gt;BinaryOperator&lt;T&gt;(T, T) -&gt; Tcount终端long下面详细介绍这些操作的使用。除了特殊说明，默认使用下面这个集合作为演示：1List&lt;String&gt; list = Arrays.asList("Java", "JavaScript", "python", "PHP", "C#", "Golang", "Swift", "C++", "Ruby");中间操作filterStreams接口支持·filter方法，该方法接收一个Predicate&lt;T&gt;，函数描述符为T -&gt; boolean，用于对集合进行筛选，返回所有满足的元素：123list.stream() .filter(s -&gt; s.contains("#")) .forEach(System.out::println);结果输出C#。distinctdistinct方法用于排除流中重复的元素，类似于SQL中的distinct操作。比如筛选中集合中所有的偶数，并排除重复的结果：12345List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);numbers.stream() .filter(i -&gt; i % 2 == 0) .distinct() .forEach(System.out::println);结果输出2 4。skipskip(n)方法用于跳过流中的前n个元素，如果集合元素小于n，则返回空流。比如筛选出以J开头的元素，并排除第一个：1234list.stream() .filter(s -&gt; s.startsWith("J")) .skip(1) .forEach(System.out::println);结果输出JavaScript。limitlimit(n)方法返回一个长度不超过n的流，比如下面的例子将输出Java JavaScript python：123list.stream() .limit(3) .forEach(System.out::println);mapmap方法接收一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素。如：123list.stream() .map(String::length) .forEach(System.out::println);结果输出4 10 6 3 2 6 5 3 4。map还支持将流特化为指定原始类型的流，如通过mapToInt，mapToDouble和mapToLong方法，可以将流转换为IntStream，DoubleStream和LongStream。特化后的流支持sum，min和max方法来对流中的元素进行计算。比如：123List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);IntStream intStream = numbers.stream().mapToInt(a -&gt; a);System.out.println(intStream.sum()); // 16也可以通过下面的方法，将IntStream转换为Stream：1Stream&lt;Integer&gt; s = intStream.boxed();flatMapflatMap用于将多个流合并成一个流，俗称流的扁平化。这么说有点抽象，举个例子，比如现在需要将list中的各个元素拆分为一个个字母，并过滤掉重复的结果，你可能会这样做：1234list.stream() .map(s -&gt; s.split("")) .distinct() .forEach(System.out::println);输出如下：123456789[Ljava.lang.String;@e9e54c2[Ljava.lang.String;@65ab7765[Ljava.lang.String;@1b28cdfa[Ljava.lang.String;@eed1f14[Ljava.lang.String;@7229724f[Ljava.lang.String;@4c873330[Ljava.lang.String;@119d7047[Ljava.lang.String;@776ec8df[Ljava.lang.String;@4eec7777这明显不符合我们的预期。实际上在map(s -&gt; s.split(&quot;&quot;))操作后，返回了一个Stream&lt;String[]&gt;类型的流，所以输出结果为每个数组对象的句柄，而我们真正想要的结果是Stream&lt;String&gt;！在Stream中，可以使用Arrays.stream()方法来将数组转换为流，改造上面的方法：12345list.stream() .map(s -&gt; s.split("")) .map(Arrays::stream) .distinct() .forEach(System.out::println);输出如下：123456789java.util.stream.ReferencePipeline$Head@eed1f14java.util.stream.ReferencePipeline$Head@7229724fjava.util.stream.ReferencePipeline$Head@4c873330java.util.stream.ReferencePipeline$Head@119d7047java.util.stream.ReferencePipeline$Head@776ec8dfjava.util.stream.ReferencePipeline$Head@4eec7777java.util.stream.ReferencePipeline$Head@3b07d329java.util.stream.ReferencePipeline$Head@41629346java.util.stream.ReferencePipeline$Head@404b9385因为上面的流经过map(Arrays::stream)处理后，将每个数组变成了一个新的流，返回结果为流的数组Stream&lt;String&gt;[]，所以输出是各个流的句柄。我们还需将这些新的流连接成一个流，使用flatMap来改写上面的例子：12345list.stream() .map(s -&gt; s.split("")) .flatMap(Arrays::stream) .distinct() .forEach(s -&gt; System.out.print(s + " "));输出如下：1J a v S c r i p t y h o n P H C # G l g w f + R u b和map类似，flatMap方法也有相应的原始类型特化方法，如flatMapToInt等。终端操作anyMatchanyMatch方法用于判断流中是否有符合判断条件的元素，返回值为boolean类型。比如判断list中是否含有SQL元素：12list.stream() .anyMatch(s -&gt; "SQL".equals(s)); // falseallMatchallMatch方法用于判断流中是否所有元素都满足给定的判断条件，返回值为boolean类型。比如判断list中是否所有元素长度都不大于10：12list.stream() .allMatch(s -&gt; s.length() &lt;= 10); // truenoneMatchnoneMatch方法用于判断流中是否所有元素都不满足给定的判断条件，返回值为boolean类型。比如判断list中不存在长度大于10的元素：12list.stream() .noneMatch(s -&gt; s.length() &gt; 10); // truefindAnyfindAny方法用于返回流中的任意元素的Optional类型，例如筛选出list中任意一个以J开头的元素，如果存在，则输出它：1234list.stream() .filter(s -&gt; s.startsWith("J")) .findAny() .ifPresent(System.out::println); // JavafindFirstfindFirst方法用于返回流中的第一个元素的Optional类型，例如筛选出list中长度大于5的元素，如果存在，则输出第一个：1234list.stream() .filter(s -&gt; s.length() &gt; 5) .findFirst() .ifPresent(System.out::println); // JavaScriptreducereduce函数从字面上来看就是压缩，缩减的意思，它可以用于数字类型的流的求和，求最大值和最小值。如对numbers中的元素求和：123List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);numbers.stream() .reduce(0, Integer::sum); // 16reduce函数也可以不指定初始值，但这时候将返回一个Optional对象，比如求最大值和最小值：1234567numbers.stream() .reduce(Integer::max) .ifPresent(System.out::println); // 4numbers.stream() .reduce(Integer::min) .ifPresent(System.out::println); // 1forEachforEach用于迭代流中的每个元素，最为常见的就是迭代输出，如：1list.stream().forEach(System.out::println);countcount方法用于统计流中元素的个数，比如：1list.stream().count(); // 9collectcollect方法用于收集流中的元素，并放到不同类型的结果中，比如List、Set或者Map。举个例子：12List&lt;String&gt; filterList = list.stream() .filter(s -&gt; s.startsWith("J")).collect(Collectors.toList());如果需要以Set来替代List，只需要使用Collectors.toSet()就好了。流的构建除了使用集合对象的stream方法构建流之外，我们可以手动构建一些流。数值范围构建IntStream和LongStream对象支持range和rangeClosed方法来构建数值流。这两个方法都是第一个参数接受起始值，第二个参数接受结束值。但range是不包含结束值的，而rangeClosed则包含结束值。比如对1到100的整数求和：1IntStream.rangeClosed(1, 100).sum(); // 5050由值构建静态方法Stream.of可以显式值创建一个流。它可以接受任意数量的参数。例如，以下代码直接使用Stream.of创建了一个字符串流:1Stream&lt;String&gt; s = Stream.of("Java", "JavaScript", "C++", "Ruby");也可以使用Stream.empty()构建一个空流：1Stream&lt;Object&gt; emptyStream = Stream.empty();由数组构建静态方法Arrays.stream可以通过数组创建一个流。它接受一个数组作为参数。例如：12int[] arr = &#123;1, 2, 3, 4, 5&#125;;IntStream intStream = Arrays.stream(arr);由文件生成流java.nio.file.Files中的很多静态方法都会返回一个流。例如Files.lines方法会返回一个由指定文件中的各行构成的字符串流。比如统计一个文件中共有多少个字：123456long wordCout = 0L;try (Stream&lt;String&gt; lines = Files.lines(Paths.get("file.txt"), Charset.defaultCharset())) &#123; wordCout = lines.map(l -&gt; l.split("")) .flatMap(Arrays::stream) .count();&#125; catch (Exception ignore) &#123;&#125;由函数构造Stream API提供了两个静态方法来从函数生成流：Stream.iterate和Stream.generate。这两个操作可以创建所谓的无限流。比如下面的例子构建了10个偶数：12Stream.iterate(0, n -&gt; n + 2) .limit(10).forEach(System.out::println);iterate方法接受一个初始值（在这里是0），还有一个依次应用在每个产生的新值上的Lambda（UnaryOperator类型）。这里，我们使用Lambda n -&gt; n + 2，返回的是前一个元 素加上2。因此，iterate方法生成了一个所有正偶数的流：流的第一个元素是初始值0。然后加上2来生成新的值2，再加上2来得到新的值4，以此类推。与iterate方法类似，generate方法也可让你按需生成一个无限流。但generate不是依次对每个新生成的值应用函数，比如下面的例子生成了5个0到1之间的随机双精度数：123Stream.generate(Math::random) .limit(5) .forEach(System.out::println);输出结果如下：123450.63346468505878630.41901476418340090.43619683945154750.69117964568386550.08156838267267075《Java 8实战》读书笔记]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Java 8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RHEL离线安装Ruby和RubyGems]]></title>
    <url>%2Fblog%2FRHELinstallRuby%26RubyGems.html</url>
    <content type="text"><![CDATA[搭建Redis集群过程中需要安装Ruby环境，这里记录下在RHEL下离线安装Ruby和RubyGems的方法。Ruby的在线下载地址为https://www.ruby-lang.org/en/downloads/，下载好后上传到/usr/loacl目录下。如果之前已经安装过低版本的Ruby的话可以先使用下面的命令卸载:1sudo yum remove ruby ruby-devel这里我们下载的Ruby版本为2.5.1，解压ruby-2.5.1.tar.gz：1tar -zxvf ruby-2.5.1.tar.gz接着使用以下命令安装：1234cd /usr/local/ruby-2.5.1./configuremakesudo make install安装好后查看Ruby的版本：1ruby -v如果提示-bash: /usr/local/bin/ruby: 没有那个文件或目录的话，可以将Ruby目录下的ruby文件拷贝到/usr/local/bin目录下：123cp /usr/local/ruby-2.5.1/ruby /usr/local/bin/ruby -vruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux]安装好Ruby后，我们接着安装RubyGems。RubyGems是Ruby的一个包管理器，它提供一个分发Ruby程序和库的标准格式，还提供一个管理程序包安装的工具。RubyGems旨在方便地管理gem安装的工具，以及用于分发gem的服务器。这类似于Ubuntu下的apt-get，Centos 的yum，Python的pip。RubyGems的下载地址为：https://rubygems.org/pages/download，这里我们下载的版本为2.7.7。下载好后，上传到/usr/local目录下，然后解压：1tar -zxvf rubygems-2.7.7.tgz接着切换到解压后的目录，执行以下命令安装：1ruby setup.rb安装好后，查看RubyGems版本：12gem -v2.7.7安装结束。]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下搭建Redis集群]]></title>
    <url>%2Fblog%2Flinux-redis-cluster.html</url>
    <content type="text"><![CDATA[通过Redis的集群，我们可以实现多个Redis节点之间的数据共享，并且支持自动分割数据到不同的节点上。在集群过程中通过主从的分配可以提高Redis的可用性，不会因为某个节点宕掉或者不可达而导致整个集群网络的不可用。Redis 3.0版本后支持使用Redis-Cluster来搭建集群，本文将介绍在Ubuntu 16.04下从零开始搭建Redis集群。因为Redis集群中至少应该有奇数个主节点，所以本文将创建6个Redis节点，其中3个为主节点，3个为从属节点，用于从主节点拉取数据进行备份。安装Redis从https://redis.io/download上获取最新的Stable版本Redis，下载到/usr/local/目录下并解压：12wget http://download.redis.io/releases/redis-4.0.9.tar.gztar -zxvf redis-4.0.9.tar.gz进行编译和安装：12cd redis-4.0.9/make &amp;&amp; make install安装成功后开始进行集群搭建。搭建集群编译安装后，在Reids的src目录下有个redis-trib.rb文件，将其复制到/usr/local/bin/目录下，方便后期搭建集群使用： 接下来开始创建节点。在redis目录下创建一个cluster目录：1mkdir cluster然后在该目录下创建六个目录，分别命名为7000、7001、7002、7003、7004和7005：12cd cluster/mkdir 7000 7001 7002 7003 7004 7005在7000目录下创建一个Redis配置文件redis.conf，内容如下：12345678port 7000bind 172.16.0.4daemonize yespidfile /var/run/redis_7000.pidcluster-enabled yescluster-config-file nodes_7000.confcluster-node-timeout 15000appendonly yes上述配置是开启Redis集群的最简配置，各项配置的含义如下：port 7000：Redis节点的端口号为7000；bind 172.16.0.4：绑定本机的IP地址；daemonize yes：以后台服务的形式开启Redis；pidfile /var/run/redis_7000.pid：以该配置启动Redis后将在/var/run/目录下创建一个redis_port.pid文件；cluster-enabled yes：是否开启集群，yes；cluster-config-file nodes_7000.conf：集群配置文件，启动后自动生成，文件名称为nodes_7000.conf。该文件将保持集群配置信息，以保证重启该Redis节点后能够保持集群状态；cluster-node-timeout 15000：请求超时时间，默认为15秒；appendonly yes：是否开启aof日志，开启后每次写操作都记录一条日志。剩下的7001~7005的配置文件除了端口号改为相应的外，其他配置保持一致。配置好7000~7005端口的Redis配置文件后，启动这些节点：123456redis-server cluster/7000/redis.confredis-server cluster/7001/redis.confredis-server cluster/7002/redis.confredis-server cluster/7003/redis.confredis-server cluster/7004/redis.confredis-server cluster/7005/redis.conf查看是否启动成功：现在我们已经有了6个正在运行中的Redis实例，接下来我们需要使用这些实例来创建集群。接着使用redis-trib.rb创建集群，该文件使用ruby编写，所以使用redis-trib.rb之前得先安装ruby：12apt-get install rubygem install redis安装好ruby后，输入以下命令开启集群：1redis-trib.rb create --replicas 1 172.16.0.4:7000 172.16.0.4:7001 172.16.0.4:7002 172.16.0.4:7003 172.16.0.4:7004 172.16.0.4:7005选项--replicas 1表示我们希望为集群中的每个主节点创建一个从节点，之后跟着的其他参数则是这个集群实例的地址列表：3个主节点（Master，即7000~7002）3个从节点（Slave，即7003~7005）。输入该命令后，终端打印出如下配置：其中M开头的节点为主节点，S开头的为从节点。从从节点的replicates（复制的意思）信息可以看出7000的从节点为7004，7001的从节点为7005，7002的从节点为7003。确认无误后输入yes点击回车继续：可看到7000节点的拥有5461个哈希槽（0 - 6460 slots），7001节点拥有5462个哈希槽（5461 - 10922 slots），7002节点拥有5461个哈希槽（10923 - 16383 slots），而从属节点并没有分配哈希槽。从最后一行的输出信息可以看出，Redis集群总共有16384个哈希槽（slots）。此外，那些一大串的字符称为节点ID。集群测试通过上面的集群配置，这6个Redis节点之间的关系可以用下图表示：颜色深的节点为颜色浅的节点的主节点，所有节点彼此之间互联（ping-pong）。下面对这些集群节点进行一些测试。测试存取使用客户端连接集群后的Redis节点需要带上-c标识，比如现在我们连接端口为7003的从节点：1redis-cli -h 172.16.0.4 -c -p 7003使用set命令往Redis存入一些key-vaue，结果如下图所示：可发现，存值的操作并不是在7003节点完成的，存值的过程只在主节点下完成，并且每次set操作Redis都会输出Redirected to slot [xxxx] located at的提示。Redis集群有16384个哈希槽，每次set key时，Redis内部通过CRC16校验后对16384取模来决定放置哪个哈希槽。正如上面所说的，集群的每个主节点负责一部分哈希槽。比如第一条命令set a 1计算出来的哈希码为15495，介于11001到16384之间，所以便存储在了7002节点中。上面我们提到7000节点的从节点为7004，下面来验证一下：可看到它们存储的key是相同的。尝试从7004节点删除key：发现7000节点的b也被删除。接下来从7000节点获取a的值（a存储在7002节点中）：可看到Redis自己redirected到了7002节点获取a的值，这就是集群的特点，每个节点都是平等的，可以相互间取值。测试主从开头说过，在集群过程中可以通过主从的分配来提高Redis的可用性。比如这个例子，集群有7000、7001和7002 3个主节点，如果这3个节点都没有从节点，假设7001宕机了，那么整个集群就会因为缺少5501-11000这个范围的哈希槽而变得不可用。所以我们在集群建立的时候，一定要为每个主节点都添加了从节点, 比如像上面的例子那样，集群包含主节点7000、7001和7002以及从节点7003、7004和7005, 那么即使7001宕系统也可以继续正常工作。当7001这个主节点宕机后，Redis集群将会选择7001的从节点7005作为新的主节点以确保集群正常的工作。当重新启动7001后，其自动变为了7005的从节点，角色完成了转换。为了验证这个理论，下面将7001节点杀死，然后观察：可看到7005已经晋升为了主节点。接着测试从7000节点获取c的值（c存储在7001节点中，7005之前为7001的从节点，所以也存有这个值）：Redis自动redirected到了7005，并成功获取到了c的值。现在重新启动7001节点，然后观察：7001已经成为了7005的从节点了。值得注意的是，假如7005和7001同时宕机，那么集群将不可用。]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Redis</tag>
        <tag>集群</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Java8实战】Lambda表达式（二）]]></title>
    <url>%2Fblog%2Fjava8lambda2.html</url>
    <content type="text"><![CDATA[在上一节中，我们为了使用Lambda表达式不得不创建了各种函数描述符的函数式接口，其实Java 8已经给我们提供了一套能够描述常见函数描述符的函数式接口。比如Predicate&lt;T&gt;、Consumer&lt;T&gt;、Function&lt;T,R&gt;、Supplier&lt;T&gt;等，这些函数式接口位于java.util.function包。这一节主要记录这些函数式接口的应用。Java8中的函数式接口下表列出了Java8中常见的函数式接口：函数式接口函数描述符原始类型特化PredicateT-&gt;booleanIntPredicate,LongPredicate, DoublePredicateConsumerT-&gt;voidIntConsumer,LongConsumer, DoubleConsumerFunction&lt;T,R&gt;T-&gt;RIntFunction, IntToDoubleFunction, IntToLongFunction,LongFunction, LongToDoubleFunction, LongToIntFunction,DoubleFunction, ToIntFunction, ToDoubleFunction, ToLongFunctionSupplier()-&gt;TBooleanSupplier,IntSupplier, LongSupplier,DoubleSupplierUnaryOperatorT-&gt;TIntUnaryOperator, LongUnaryOperator, DoubleUnaryOperatorBinaryOperator(T,T)-&gt;TIntBinaryOperator, LongBinaryOperator, DoubleBinaryOperatorBiPredicate&lt;L,R&gt;(L,R)-&gt;booleanBiConsumer&lt;T,U&gt;(T,U)-&gt;voidObjIntConsumer, ObjLongConsumer, ObjDoubleConsumerBiFunction&lt;T,U,R&gt;(T,U)-&gt;RToIntBiFunction&lt;T,U&gt;, ToLongBiFunction&lt;T,U&gt;, ToDoubleBiFunction&lt;T,U&gt;Predicatepredicate: 英 [ˈpredɪkət] 美 [ˈpredɪkət] 断言，断定的意思。从接口的名称就可以推断出这个函数式接口的主要作用就是用于判断作用，Predicate源码如下所示：123456789101112131415161718192021@FunctionalInterfacepublic interface Predicate&lt;T&gt; &#123; boolean test(T t); default Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; other) &#123; Objects.requireNonNull(other); return (t) -&gt; test(t) &amp;&amp; other.test(t); &#125; default Predicate&lt;T&gt; negate() &#123; return (t) -&gt; !test(t); &#125; default Predicate&lt;T&gt; or(Predicate&lt;? super T&gt; other) &#123; Objects.requireNonNull(other); return (t) -&gt; test(t) || other.test(t); &#125; static &lt;T&gt; Predicate&lt;T&gt; isEqual(Object targetRef) &#123; return (null == targetRef) ? Objects::isNull : object -&gt; targetRef.equals(object); &#125;&#125;可看到java.util.function.Predicate&lt;T&gt;接口定义了一个名叫test的抽象方法，它接受泛型T对象，并返回一个boolean，函数描述符为(T) -&gt; boolean举几个例子：1234567// 偶数判断Predicate&lt;Integer&gt; isEven = (in) -&gt; in % 2 == 0;isEven.test(17); // false// 判断字符串的长度是否为0Predicate&lt;String&gt; isEmptyString = String::isEmpty;isEmptyString.test(""); // true除了抽象方法外，java.util.function.Predicate&lt;T&gt;接口还定义了三个默认方法：and，negate和or，对应“与”，“非”和“或”操作，这样我们便可以复合Lambda表达式了，比如：12345678// 判断是偶数，并且大于30Predicate&lt;Integer&gt; isEven = (in) -&gt; in % 2 == 0;isEven.and((in) -&gt; in &gt; 30).test(40); // true// 奇数判断Predicate&lt;Integer&gt; isEven = (in) -&gt; in % 2 == 0;Predicate&lt;Integer&gt; isOdd = isEven.negate();isOdd.test(17); // trueConsumer英 [kənˈsju:mə(r)] 美 [kənˈsu:mə(r)] n.消费者。该函数式接口用于消费一个对象，即接收一个对象，对其执行某些操作，然后没有返回值。Consumer源码如下所示：12345678@FunctionalInterfacepublic interface Consumer&lt;T&gt; &#123; void accept(T t); default Consumer&lt;T&gt; andThen(Consumer&lt;? super T&gt; after) &#123; Objects.requireNonNull(after); return (T t) -&gt; &#123; accept(t); after.accept(t); &#125;; &#125;&#125;可看到java.util.function.Consumer&lt;T&gt;定义了一个名叫accept的抽象方法，它接受泛型T的对象，没有返回(void)，函数描述符为(T) -&gt; void。其还提供了一个默认方法andThen。举个例子：1234Consumer&lt;Apple&gt; printAppleColor = (a)-&gt; System.out.println(a.getColor());printAppleColor.accept(new Apple("red",17)); // redprintAppleColor.andThen((a) -&gt; System.out.println(a.getWeight())).accept(new Apple("red", 17)); // red 17.0Suppliersupplier 英 [səˈplaɪə(r)] 美 [səˈplaɪər] n.供应商;供应者;供给者。其源码如下：1234@FunctionalInterfacepublic interface Supplier&lt;T&gt; &#123; T get();&#125;可看到java.util.function.Supplier&lt;T&gt;定义了一个名叫get的抽象方法，它不接收参数，返回泛型T的对象，函数描述符为() -&gt; T。举个例子：12Supplier&lt;Person&gt; personSupplier = Person::new;personSupplier.get(); // new PersonFunctionsFunctions源码如下：123456789101112131415161718@FunctionalInterfacepublic interface Function&lt;T, R&gt; &#123; R apply(T t); default &lt;V&gt; Function&lt;V, R&gt; compose(Function&lt;? super V, ? extends T&gt; before) &#123; Objects.requireNonNull(before); return (V v) -&gt; apply(before.apply(v)); &#125; default &lt;V&gt; Function&lt;T, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) &#123; Objects.requireNonNull(after); return (T t) -&gt; after.apply(apply(t)); &#125; static &lt;T&gt; Function&lt;T, T&gt; identity() &#123; return t -&gt; t; &#125;&#125;java.util.function.Function&lt;T, R&gt;接口定义了一个叫作apply的方法，它接受一个泛型T的对象，并返回一个泛型R的对象，函数描述符为(T) -&gt; R。举个例子：1234Function&lt;Apple, Double&gt; getAppleWeight = (a) -&gt; &#123; return a.getWeight();&#125;;getAppleWeight.apply(new Apple(17)); // 17.0Functions接口还提供了两个抽象方法compose和andThen，从源码可以看出两者的根本区别。举个compose例子：123Function&lt;Integer, Integer&gt; f = (x) -&gt; x + 1;Function&lt;Integer, Integer&gt; g = (x) -&gt; x * 2;f.compose(g).apply(2); // 5过程为：f(g(2))，也就是1+(2*2)。举个andThen的例子：123Function&lt;Integer, Integer&gt; f = (x) -&gt; x + 1;Function&lt;Integer, Integer&gt; g = (x) -&gt; x * 2;f.andThen(g).apply(2); // 6过程为：g(f(2))，也就是(2+1)*2。原始类型特化在学习Function接口的时候，我们定义了f函数：1Function&lt;Integer, Integer&gt; f = (x) -&gt; x + 1;x的类型为Integer类型，1为int类型，返回值为Integer类型，整个过程实际上为Integer.valueOf(x.intValue() + 1)。虽然编译器可以自动帮我们完成拆装箱，但这会造成不必要的性能消耗。考虑到了这一点，Java8为我们提供了int类型的Function接口：IntFunction:1234@FunctionalInterfacepublic interface IntFunction&lt;R&gt; &#123; R apply(int value);&#125;所以f最好重构为：1IntFunction&lt;Integer&gt; f = (x) -&gt; x + 1;剩余的原始类型特化函数式接口可参考上面的表格。Java8中增强的Comparator在Java8之前，Comparator接口用于实现简单的比较排序算法。比如有如下List：123456List&lt;Double&gt; list = new ArrayList&lt;&gt;();list.add(12.3);list.add(100.2);list.add(3.14);list.add(27.7);list.add(-9.8);使用Comparator接口对其从小到大排序：123456Collections.sort(list, new Comparator&lt;Double&gt;() &#123; @Override public int compare(Double o1, Double o2) &#123; return o1.compareTo(o2); &#125;&#125;);Comparator接口也是一个函数式接口，函数描述符为(T,T) -&gt; int，Java8中可以使用Lambda改造上面的排序方法：1Collections.sort(list, (o1, o2) -&gt; o1.compareTo(o2));Java8对List提供了sort方法，可以替代Collections.sort，所以上面的代码可以简化为：1list.sort((o1, o2) -&gt; o1.compareTo(o2));使用方法的引用来进一步简化：1list.sort(Double::compareTo);Java8对Comparator进行了增强，加入了一些实用的默认方法，比如对排序结果反转：12Comparator&lt;Double&gt; comparator = Double::compareTo;list.sort(comparator.reversed());更多方法可以参考Comparator接口的JavaDoc。查看Comparator的时候发现其虽然是函数式接口，但是却包含了compare和equals这两个抽象方法，顿时有点懵逼，函数式接口不是只能有一个抽象方法么？查找资料后发现：函数式接口中可以额外定义多个抽象方法，但这些抽象方法签名必须和Object的public方法一样，接口最终有确定的类实现，而类的最终父类是Object。因此函数式接口可以定义Object的public方法。《Java 8实战》读书笔记]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Java 8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【Java8实战】Lambda表达式（一）]]></title>
    <url>%2Fblog%2Fjava8lambda1.html</url>
    <content type="text"><![CDATA[Java 8的Lambda表达式借鉴了C#和Scala等语言中的类似特性，简化了匿名函数的表达方式。Lambda表达式可以直接以内联的形式为函数式接口的抽象方法提供实现，并把整个表达式作为函数式接口的实例。什么是函数式接口？简单来说就是只包含一个抽象方法的接口，允许有默认的实现（使用default关键字描述方法）。函数式接口建议使用@FunctionalInterface注解标注，虽然这不是必须的，但是这样做更符合规范。在Java 8之前，实现Runnable常用方式是编写一个匿名类：1234567Thread thread = new Thread(new Runnable() &#123; @Override public void run() &#123; System.out.println("hello"); &#125;&#125;);thread.start();使用Lambda表达式后，上面的代码可以改造为：12Thread thread = new Thread(() -&gt; System.out.println("hello"));thread.start();是不是很神奇？！很简洁？！Lambda表达式解析Lambda表达式的基本语法如下：123(parameters) -&gt; expression or(parameters) -&gt; &#123; statements; &#125;由语法可以看到，Lambda表达式包含了三个部分：参数列表；箭头-&gt;把参数列表与Lambda主体分隔开；Lambda主体，只有一行代码的时候可以省略大括号和return关键字。比如下面这些Lambda表达式都是合法的：123456789101112(String str) -&gt; str.length()(String str) -&gt; &#123; return str.length(); &#125;() -&gt; System.out.println("hello")() -&gt; &#123;&#125;() -&gt; 17(int x, int y) -&gt; &#123; System.out.println(x); System.out.println(y);&#125;Lambda的使用场合什么时候可以使用Lambda表达式？使用Lambda必须满足以下两个条件：实现的对象是函数式接口的抽象方法；函数式接口的抽象方法的函数描述符和Lambda表达式的函数描述符一致。函数式接口函数式接口的定义开头已经说了，这里就不再赘述。在Java 8之前，常见的函数式接口有java.util.Comparator，java.lang.Runnable等。拿java.util.Runnable来说，查看其源码如下：1234@FunctionalInterfacepublic interface Runnable &#123; public abstract void run();&#125;这个接口只有一个抽象方法，并且使用@FunctionalInterface注解标注。接口现在还可以拥有默认方法（即在类没有对方法进行实现时，其主体为方法提供默认实现的方法）。哪怕有很多默认方法，只要接口只定义了一个抽象方法，它就仍然是一个函数式接口。函数描述符函数描述符其实也可以理解为方法的签名。比如上述的Runnable抽象方法不接受参数，并且返回void，所以其函数描述符为() -&gt; void。而() -&gt; System.out.println(&quot;hello&quot;)Lambda表达式也是不接受参数，并且返回void，即其函数描述符也是() -&gt; void。所以代码Runnable r = () -&gt; System.out.println(&quot;hello&quot;);是合法的。特殊的void兼容规则如果一个Lambda的主体是一个语句表达式， 它就和一个返回void的函数描述符兼容（当然需要参数列表也兼容）。例如，以下Lambda是合法的，尽管List的add方法返回了一个 boolean，而不是Runnable抽象方法函数描述符() -&gt; void所要求的void：12List&lt;String&gt; list = new ArrayList&lt;&gt;();Runnable r = () -&gt; list.add(&quot;hello&quot;);更简洁的Lambda编写一个类型转换的函数式接口：1234@FunctionalInterfacepublic interface TransForm&lt;T, R&gt; &#123; R transForm(T t);&#125;编写一个Lambda表达式实现该函数式接口，用于实现String转换为Integer，代码如下：12TransForm&lt;String, Integer&gt; t = (String str) -&gt; Integer.valueOf(str);System.out.println(t.transForm("123"));上面的Lambda表达式可以进一步简化为如下方式：12TransForm&lt;String, Integer&gt; t = (str) -&gt; Integer.valueOf(str);System.out.println(t.transForm("123"));因为Java编译器会从上下文（目标类型）推断出用什么函数式接口来配合Lambda表达式，这意味着它也可以推断出适合Lambda的签名。就拿这个例子来说，TransForm的抽象方法transForm在本例中的函数描述符为(String) -&gt; Integer，所以对应的Lambda的签名也是如此，即Lambda的参数即使不声名类型，Java编译器可以知道其参数实际上为String类型。其实，上面的Labmda表达式还不是最简洁的，其还可以更进一步地简化为如下写法：12TransForm&lt;String, Integer&gt; t = Integer::valueOf;System.out.println(t.transForm("123"));你肯定很困惑，这还是Lambda表达式吗，箭头去哪里了？双冒号又是什么鬼？其实这种写法有一个新的名称，叫做方法的引用。方法引用可以被看作仅仅调用特定方法的Lambda的一种快捷写法。它的基本思想是，如果一个Lambda代表的只是“直接调用这个方法”，那最好还是用名称来调用它，而不是去描述如何调用它，这样代码可读性更好。基本写法就是目标引用放在分隔符::前，方法的名称放在后面。举几个Lambda及其等效方法引用的例子：Lambda表达式等效方法引用(String s) -&gt; System.out.println(s)System.out::println(str, i) -&gt; str.substring(i)String::substring() -&gt; Thread.currentThread().dumpStack()Thread.currentThread()::dumpStack符号::除了出现在方法的引用外，它还常见于构造函数的引用中。为了演示什么是构造函数的引用，我们创建一个新的函数式接口：1234@FunctionalInterfacepublic interface Generator&lt;T, R&gt; &#123; R create(T t);&#125;创建一个Apple类：12345678910111213public class Apple &#123; public Apple(String color) &#123; this.color = color; &#125; private String color; public String getColor() &#123; return color; &#125; public void setColor(String color) &#123; this.color = color; &#125;&#125;现在我们可以使用如下方式来创造一个Apple实例：12Generator&lt;String, Apple&gt; g = Apple::new;Apple apple = g.create("red");这种通过ClassName::new的写法就是构造函数的引用。在这里Generator的抽象方法接收一个String类型参数，返回值类型为Apple，这和Apple类的构造函数相符合，所以这里编译可以通过。它等价于下面的写法：12Generator&lt;String, Apple&gt; g = (color) -&gt; new Apple(color);Apple apple = g.create("red");Lambda表达式访问变量Lambda表达式可以访问局部final变量，成员变量和静态变量。这里主要说下局部final变量。有无final关键字不重要，重要的是确保该变量的值不会被改变就行了。比如下面的例子可以编译通过：12String hello = "hello lambda";Runnable r = () -&gt; System.out.println(hello);而下面的这个就会编译出错，因为变量hello的值被改变了：Lambda表达式实战假如现在有如下需求：现有一个包含了各种颜色不同重量的苹果的List，编写一个方法，从中筛选出满足要求的苹果。比如筛选出红色的苹果、红色并且重量大于1kg的苹果、绿色重量小于0.5kg的苹果或者红色大于0.5kg的苹果等等。不使用Lambda在没有接触Lambda之前，我们一般会这样做：定义一个筛选的接口12345import cc.mrbird.java8.domain.Apple;public interface AppleFilter &#123; boolean test(Apple apple);&#125;然后根据筛选的条件来编写各个不同的实现类：筛选出红色苹果的实现方法：12345678import cc.mrbird.java8.domain.Apple;public class RedApple implements AppleFilter &#123; @Override public boolean test(Apple apple) &#123; return "red".equalsIgnoreCase(apple.getColor()); &#125;&#125;筛选出红色并且重量大于1kg的苹果的实现方法：12345678import cc.mrbird.java8.domain.Apple;public class RedAndMoreThan1kgApple implements AppleFilter &#123; @Override public boolean test(Apple apple) &#123; return "red".equalsIgnoreCase(apple.getColor()) &amp;&amp; apple.getWeight() &gt; 1.0; &#125;&#125;筛选出绿色重量小于0.5kg的苹果或者红色大于0.5kg的苹果的实现方法：123456789import cc.mrbird.java8.domain.Apple;public class GreenAndLessThan05OrRedAndMoreThan05Apple implements AppleFilter &#123; @Override public boolean test(Apple apple) &#123; return ("green".equalsIgnoreCase(apple.getColor()) &amp;&amp; apple.getWeight() &lt; 0.5) || ("red".equalsIgnoreCase(apple.getColor()) &amp;&amp; apple.getWeight() &gt; 0.5); &#125;&#125;筛选苹果的方法：123456789101112131415import cc.mrbird.java8.domain.Apple;import java.util.ArrayList;import java.util.List;public class AppleFilterMethod &#123; public static List&lt;Apple&gt; filterApple(List&lt;Apple&gt; list, AppleFilter filter) &#123; List&lt;Apple&gt; filterList = new ArrayList&lt;&gt;(); for (Apple apple : list) &#123; if (filter.test(apple)) &#123; filterList.add(apple); &#125; &#125; return filterList; &#125;&#125;开始筛选苹果：123456789101112List&lt;Apple&gt; appleList = new ArrayList&lt;&gt;();appleList.add(new Apple("red", 0.4));appleList.add(new Apple("red", 0.6));appleList.add(new Apple("red", 1.3));appleList.add(new Apple("green", 0.2));appleList.add(new Apple("green", 0.35));appleList.add(new Apple("green", 1.1));List&lt;Apple&gt; appleFilterList = AppleFilterMethod.filterApple(appleList, new RedApple());for (Apple apple : appleFilterList) &#123; System.out.println(apple.getColor() + " apple,weight:" + apple.getWeight());&#125;输出：123red apple,weight:0.4red apple,weight:0.6red apple,weight:1.3剩下的略。可以看到，我们为了满足各种筛选条件创造了各种筛选接口的实现类，真正起作用的只有筛选方法中return那一行代码，剩下的都是一些重复的模板代码。使用Java 8中的Lambda可以很好的消除这些模板代码。使用LambdaAppleFilter接口实际上就是一个函数式接口，所以它的各种实现可以用Lambda表达式来替代，而无需真正的去写实现方法。定义筛选接口：12345import cc.mrbird.java8.domain.Apple;public interface AppleFilter &#123; boolean test(Apple apple);&#125;筛选苹果的方法：123456789101112131415import cc.mrbird.java8.domain.Apple;import java.util.ArrayList;import java.util.List;public class AppleFilterMethod &#123; public static List&lt;Apple&gt; filterApple(List&lt;Apple&gt; list, AppleFilter filter) &#123; List&lt;Apple&gt; filterList = new ArrayList&lt;&gt;(); for (Apple apple : list) &#123; if (filter.test(apple)) &#123; filterList.add(apple); &#125; &#125; return filterList; &#125;&#125;接下来便可以开始筛选了：筛选红色的苹果：12345List&lt;Apple&gt; appleFilterList = AppleFilterMethod.filterApple(appleList, (apple) -&gt; "red".equalsIgnoreCase(apple.getColor()));for (Apple apple : appleFilterList) &#123; System.out.println(apple.getColor() + " apple,weight:" + apple.getWeight());&#125;输出：123red apple,weight:0.4red apple,weight:0.6red apple,weight:1.3筛选出红色并且重量大于1kg的苹果:12345 List&lt;Apple&gt; appleFilterList = AppleFilterMethod.filterApple(appleList, (apple) -&gt; "red".equalsIgnoreCase(apple.getColor()) &amp;&amp; apple.getWeight() &gt; 1.0);for (Apple apple : appleFilterList) &#123; System.out.println(apple.getColor() + " apple,weight:" + apple.getWeight());&#125;输出：1red apple,weight:1.3筛选出绿色重量小于0.5kg的苹果或者红色大于0.5kg的苹果:123456List&lt;Apple&gt; appleFilterList = AppleFilterMethod.filterApple(appleList, (apple) -&gt; ("green".equalsIgnoreCase(apple.getColor()) &amp;&amp; apple.getWeight() &lt; 0.5) || ("red".equalsIgnoreCase(apple.getColor()) &amp;&amp; apple.getWeight() &gt; 0.5));for (Apple apple : appleFilterList) &#123; System.out.println(apple.getColor() + " apple,weight:" + apple.getWeight());&#125;输出：1234red apple,weight:0.6red apple,weight:1.3green apple,weight:0.2green apple,weight:0.35使用Lambda表达式消除了大量的样板代码，并且可以灵活的构造筛选条件！《Java 8实战》读书笔记]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Java 8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Spring Cloud与微服务]]></title>
    <url>%2Fblog%2FSpring-Cloud%20and%20MicroService.html</url>
    <content type="text"><![CDATA[在传统的软件架构中，我们通常采用的是单体应用来构建一个系统，一个单体应用糅合了各种业务模块。起初在业务规模不是很大的情况下，对于单体应用的开发维护也相对容易。但随着企业的发展，业务规模与日递增，单体应用变得愈发臃肿。由于单体应用将各种业务模块聚合在一起，并且部署在一个进程内，所以通常我们对其中一个业务模块的修改也必须将整个应用重新打包上线。为了解决单体应用变得庞大脯肿之后产生的难以维护的问题，微服务架构便出现在了大家的视线里。什么是微服务微服务 (Microservices) 是一种软件架构风格，起源于Peter Rodgers博士于 2005 年度云端运算博览会提出的微 Web 服务 (Micro-Web-Service) 。微服务主旨是将一个原本独立的系统 拆分成多个小型服务，这些小型服务都在各自独立的进程中运行，服务之间通过基于HTTP的RESTful API进行通信协作。下图展示了单体应用和微服务之间的区别：在微服务的架构下，单体应用的各个业务模块被拆分为一个个单独的服务并部署在单独的进程里，每个服务都可以单独的部署和升级。这种去中心化的模式使得后期维护和开发变得更加灵活和方便。由于各个服务单独部署，所以可以使用不同的语句来开发各个业务服务模块。什么是Spring CloudSpring Cloud是一个基千Spring Boot实现的微服务架构开发工具。它为微服务架构中涉及的配置管理、服务治理、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。Spring Cloud的诞生并不是为了解决微服务中的某一个问题，而是提供了一套解决微服务架构实施的综合性解决方案。Spring Cloud是一个由各个独立项目组成的综合项目，每个独立项目有着不同的发布节奏，为了管理每个版本的子项目清单，避免Spring Cloud的版本号与其子项目的版本号相混淆，没有采用版本号的方式，而是通过命名的方式。这些版本的名字采用了伦敦地铁站的名字，根据字母表的顺序来对应版本时间顺序。比如”Angel”是Spring Cloud的第一个发行版名称, “Brixton”是Spring Cloud的第二个发行版名称。当一个版本的Spring Cloud项目的发布内容积累到临界点或者一个严重bug解决可用后，就会发布一个”service releases”版本，简称SRX版本，其中X是一个递增的数字，所以Brixton.SR5就是Brixton的第5个Release版本。截至2018年4月02日，Spring Cloud已经发布了代号为Finchley的快照版本，采用的Spring Boot版本为2.0.1.RELEASE。Spring Cloud的版本和Spring Boot的版本关系可以查看官网给的例子。以下是Spring Cloud版本与各个独立项目版本对应关系表：ComponentEdgware.SR3Finchley.RC1Finchley.BUILD-SNAPSHOTspring-cloud-aws1.2.2.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-bus1.3.2.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-cli1.4.1.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-commons1.3.3.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-contract1.2.4.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-config1.4.3.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-netflix1.4.4.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-security1.2.2.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-cloudfoundry1.1.1.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-consul1.3.3.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-sleuth1.3.3.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-streamDitmars.SR3Elmhurst.RELEASEElmhurst.BUILD-SNAPSHOTspring-cloud-zookeeper1.2.1.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-boot1.5.10.RELEASE2.0.1.RELEASE2.0.0.BUILD-SNAPSHOTspring-cloud-task1.2.2.RELEASE2.0.0.RC12.0.0.RELEASEspring-cloud-vault1.1.0.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-gateway1.0.1.RELEASE2.0.0.RC12.0.0.BUILD-SNAPSHOTspring-cloud-openfeign&nbsp;2.0.0.RC12.0.0.BUILD-SNAPSHOTFinchley使用Spring Boot 2.0.x构建，不建议与Spring Boot 1.5.x一起使用。Dalston和Edgware发行版建立在Spring Boot 1.5.x之上，不建议与Spring Boot 2.0.x一起使用。之后博文的例子将采用Spring Cloud Edgware SR3版本，对应的Spring Boot版本为1.5.13.RELEASE。参考文章http://blog.cuicc.com/blog/2015/07/22/microservices/https://www.ibm.com/developerworks/community/blogs/https://projects.spring.io/spring-cloud/《Spring Cloud微服务实战》]]></content>
      <tags>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot Devtools热部署]]></title>
    <url>%2Fblog%2FSpring-Boot-Devtools.html</url>
    <content type="text"><![CDATA[平日里开发项目中，修改了Java代码或者配置文件的时候，必须手动重启项目才能生效。所谓的热部署就是在你修改了后端代码后不需要手动重启，工具会帮你快速的自动重启是修改生效。其深层原理是使用了两个ClassLoader，一个Classloader加载那些不会改变的类（第三方Jar包），另一个ClassLoader加载会更改的类，称为restart ClassLoader，这样在有代码更改的时候，原来的restart ClassLoader 被丢弃，重新创建一个restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间。本文将介绍如何通过使用Spring-Boot-devtools来实现Spring Boot项目的热部署。IDE使用的是Eclipse Oxygen，并且使用Maven构建。引入Devtools搭建一个简单的Spring Boot项目，然后引入Spring-Boot-devtools：12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机），因为其采用的虚拟机机制，该项重启是很快的。在Eclipse中生效还需要修改spring-boot-maven-plugin插件：1234567891011&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;fork&gt;true&lt;/fork&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt;并且开启Build Automatically：测试热部署在入口类中添加一个方法，用于热部署测试：12345678910111213141516import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@SpringBootApplicationpublic class DemoApplication &#123; @RequestMapping("/") String index() &#123; return "hello spring boot"; &#125; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;启动项目访问http://localhost:8080/，页面输出hello spring boot。将方法的返回值修改为hello world并在保存的瞬间，应用便重启好了，刷新页面，内容也将得到更改。所有配置下面是所有Devtools在Spring Boot中的可选配置:1234567891011121314151617181920212223242526272829# Whether to enable a livereload.com-compatible server.spring.devtools.livereload.enabled=true # Server port.spring.devtools.livereload.port=35729 # Additional patterns that should be excluded from triggering a full restart.spring.devtools.restart.additional-exclude= # Additional paths to watch for changes.spring.devtools.restart.additional-paths= # Whether to enable automatic restart.spring.devtools.restart.enabled=true# Patterns that should be excluded from triggering a full restart.spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties,META-INF/build-info.properties# Whether to log the condition evaluation delta upon restart.spring.devtools.restart.log-condition-evaluation-delta=true # Amount of time to wait between polling for classpath changes.spring.devtools.restart.poll-interval=1s # Amount of quiet time required without any classpath changes before a restart is triggered.spring.devtools.restart.quiet-period=400ms # Name of a specific file that, when changed, triggers the restart check. If not specified, any classpath file change triggers the restart.spring.devtools.restart.trigger-file=源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/24.Spring-Boot-Devtools参考自： http://412887952-qq-com.iteye.com/blog/2300313]]></content>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Spring Boot Admin监控服务]]></title>
    <url>%2Fblog%2FSpring-Boot-Admin.html</url>
    <content type="text"><![CDATA[在使用Actuator监控Spring Boot应用一节中我们介绍了使用Actuator来监控Spring Boot应用，其提供了许多REST接口来查看应用的信息。但其返回的是大量的JSON格式数据，信息看上去不直观也不易于理解。而Spring Boot Admin（SBA）是一款基于Actuator开发的开源软件：https://github.com/codecentric/spring-boot-admin，以图形化界面的方式展示Spring Boot应用的配置信息、Beans信息、环境属性、线程信息、JVM状况等。本文使用的Spring Boot Admin版本为1.5.7，有能力的朋友可以直接阅读官方文档：http://codecentric.github.io/spring-boot-admin/1.5.7。搭建SBA服务端搭建一个SBA服务端（Server），其他被监控的Spring Boot应用作为客户端（Client），客户端通过HTTP的方式将自己注册到服务端，以供服务端进行监控服务。大致关系如下图所示：引入SBA Server依赖使用http://start.spring.io/开启一个简单的Spring Boot项目，然后引入spring-boot-admin-server相关依赖：12345678910&lt;dependency&gt; &lt;groupId&gt;de.codecentric&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-admin-server&lt;/artifactId&gt; &lt;version&gt;1.5.7&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;de.codecentric&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-admin-server-ui&lt;/artifactId&gt; &lt;version&gt;1.5.7&lt;/version&gt;·&lt;/dependency&gt;开启Admin监控在Spring Boot入口类中加入@EnableAutoConfiguration，@EnableAdminServer注解开启监控功能：1234567891011121314import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.boot.autoconfigure.SpringBootApplication;import de.codecentric.boot.admin.config.EnableAdminServer;@SpringBootApplication@EnableAutoConfiguration@EnableAdminServerpublic class DemoApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;然后在yml中对项目进行简单的配置：123server: port: 8080 context-path: /admin-server启动项目，访问http://localhost:8080/admin-server：因为还没添加客户端，所以监控列表里是空的，接下来创建一个Spring Boot应用作为客户端。SBA客户端引入SBA Client依赖同样的，使用http://start.spring.io/搭建一个简单的Spring Boot项目作为SBA客户端，然后引入Client依赖：12345&lt;dependency&gt; &lt;groupId&gt;de.codecentric&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-admin-starter-client&lt;/artifactId&gt; &lt;version&gt;1.5.7&lt;/version&gt;&lt;/dependency&gt;yml配置：1234567891011management: security: enabled: false server: port: 8081 spring: boot: admin: url: http://localhost:8080/admin-serverspring.boot.admin.url配置的是SBA服务端的地址，management.security.enabled: false这里先关闭安全验证。启动客户端后查看http://localhost:8080/admin-server地址：可看到SBA客户端已经被注册到SBA服务端了，接下来便可以在SBA服务端页面上查看各种SBA客户端信息：客户端额外信息默认客户端在服务端监控列表呈现的信息并不多：我们可以在SBA客户端yml里配置更为详细的信息：123456info: app: name: "@project.name@" description: "@project.description@" version: "@project.version@" spring-boot-version: "@project.parent.version@"然后便可以在SBA服务端看到较为详细的客户端信息： 添加邮件预警SBA服务端也可以配置邮件预警服务，默认情况下对于被检测的应用启动或者停止的时候会触发预警。首先添加邮件依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt;然后在SBA服务端的yml中配置邮件预警：12345678910111213141516171819spring: mail: host: smtp.163.com username: xxx@163.com password: xxx properties: mail: smtp: auth: true starttls: enable: true required: true boot: admin: notify: mail: from: xxx@163.com to: xxx@qq.com邮件的具体使用方法可参考https://mrbird.cc/Spring-Boot-Email.html。当被检测的应用关停的时候，收到如下邮件：附录SBA Server配置说明Property nameDescriptionDefault value中文说明spring.boot.admin.context-pathThe context-path prefixes the path where the Admin Server’s statics assets and API should be served. Relative to the Dispatcher-Servlet.Admin Server 保留的静态访问和API的前缀（当你在业务应用中使用而不是单独使用时就很有必要了）spring.boot.admin.monitor.periodTime interval in ms to update the status of applications with expired status-informations.10.000更新应用信息的频率，单位毫秒spring.boot.admin.monitor.status-lifetimeLifetime of application statuses in ms. The applications /health-endpoint will not be queried until the lifetime has expired.10.000被监控的应用信息的过期时间，单位毫秒SBA Client配置说明Property nameDescriptionDefault value中文说明spring.boot.admin.client.enabledEnables the Spring Boot Admin Client.true默认开启spring.boot.admin.urlList of URLs of the Spring Boot Admin server to register at. This triggers the AutoConfiguration. Mandatory.admin server 的地址列表，此设置会触发自动配置，必须spring.boot.admin.api-pathHttp-path of registration endpoint at your admin server.“api/applications”注册到 admin server 端点的 Http-pathspring.boot.admin.username spring.boot.admin.passwordUsername and password for http-basic authentication. If set the registration uses http-basic-authentication when registering at the admin server.注册到 admin server 的账号密码spring.boot.admin.periodInterval for repeating the registration (in ms).10.000重试注册的间隔时间spring.boot.admin.auto-registrationIf set to true the periodic task to register the application is automatically scheduled after the application is ready.true应用启动后自动执行周期性的注册任务spring.boot.admin.auto-deregistrationSwitch to enable auto-deregistration at Spring Boot Admin server when context is closed.false当应用关闭时，自动取消注册spring.boot.admin.client.health-urlClient-health-url to register with. Can be overridden in case the reachable URL is different (e.g. Docker). Must be unique in registry.Guessed based on management-url and endpoints.health.id.spring.boot.admin.client.management-urlClient-management-url to register with. Can be overridden in case the reachable url is different (e.g. Docker).Guessed based on service-url, server.servlet-path, management.port and management.context-path.spring.boot.admin.client.service-urlClient-service-url to register with. Can be overridden in case the reachable url is different (e.g. Docker).Guessed based on hostname, server.port and server.context-path.spring.boot.admin.client.nameName to register with.${spring.application.name} if set, “spring-boot-application” otherwise.注册时的名字spring.boot.admin.client.prefer-ipUse the ip-address rather then the hostname in the guessed urls. If server.address / management.address is set, it get used. Otherwise the IP address returned from InetAddress.getLocalHost() gets used.false邮件配置选项Property nameDescriptionDefault value中文说明spring.boot.admin.notify.mail.enabledEnable mail notificationstrue默认启用spring.boot.admin.notify.mail.ignore-changesComma-delimited list of status changes to be ignored. Format: “:”. Wildcards allowed.“UNKNOWN:UP”需要忽略的状态改变通知，逗号分隔spring.boot.admin.notify.mail.toComma-delimited list of mail recipients“root@localhost”接收通知的邮箱地址，逗号分隔spring.boot.admin.notify.mail.ccComma-delimited list of carbon-copy recipients抄送spring.boot.admin.notify.mail.fromMail sender发送人spring.boot.admin.notify.mail.subjectMail subject. SpEL-expressions are supported“#{application.name} (#{application.id}) is #{to.status}”主题spring.boot.admin.notify.mail.textMail body. SpEL-expressions are supported“#{application.name} (#{application.id})\nstatus changed from #{from.status} to #{to.status}\n\n#{application.healthUrl}”内容参考博文：https://blog.csdn.net/kinginblue/article/details/52132113#t26源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/23.Spring-Boot-Admin。]]></content>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Spring Boot发送邮件]]></title>
    <url>%2Fblog%2FSpring-Boot-Email.html</url>
    <content type="text"><![CDATA[在项目的维护过程中，我们通常会在应用中加入短信或者邮件预警功能，比如当应用出现异常宕机时应该及时地将预警信息发送给运维或者开发人员，本文将介绍如何在Spring Boot中发送邮件。在Spring Boot中发送邮件使用的是Spring提供的org.springframework.mail.javamail.JavaMailSender，其提供了许多简单易用的方法，可发送简单的邮件、HTML格式的邮件、带附件的邮件，并且可以创建邮件模板。引入依赖在Spring Boot中发送邮件，需要用到spring-boot-starter-mail，引入spring-boot-starter-mail：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;&lt;/dependency&gt;邮件配置在application.yml中进行简单的配置（以163邮件为例）：123456789101112131415server: port: 80spring: mail: host: smtp.163.com username: 你的账号 password: 你的密码 properties: mail: smtp: auth: true starttls: enable: true required: truespring.mail.username，spring.mail.password填写自己的邮箱账号密码即可。发送简单的邮件编写EmailController，注入JavaMailSender:123456789101112131415161718192021222324252627282930313233import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.mail.SimpleMailMessage;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("/email")public class EmailController &#123; @Autowired private JavaMailSender jms; @Value("$&#123;spring.mail.username&#125;") private String from; @RequestMapping("sendSimpleEmail") public String sendSimpleEmail() &#123; try &#123; SimpleMailMessage message = new SimpleMailMessage(); message.setFrom(from); message.setTo("888888@qq.com"); // 接收地址 message.setSubject("一封简单的邮件"); // 标题 message.setText("使用Spring Boot发送简单邮件。"); // 内容 jms.send(message); return "发送成功"; &#125; catch (Exception e) &#123; e.printStackTrace(); return e.getMessage(); &#125; &#125;&#125;启动项目访问http://localhost/email/sendSimpleEmail，提示发送成功：发送HTML格式的邮件改造EmailController，SimpleMailMessage替换为MimeMessage：12345678910111213141516171819202122232425262728293031323334353637383940import javax.mail.internet.MimeMessage;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.mail.SimpleMailMessage;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("/email")public class EmailController &#123; @Autowired private JavaMailSender jms; @Value("$&#123;spring.mail.username&#125;") private String from; @RequestMapping("sendHtmlEmail") public String sendHtmlEmail() &#123; MimeMessage message = null; try &#123; message = jms.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(message, true); helper.setFrom(from); helper.setTo("888888@qq.com"); // 接收地址 helper.setSubject("一封HTML格式的邮件"); // 标题 // 带HTML格式的内容 StringBuffer sb = new StringBuffer("&lt;p style='color:#42b983'&gt;使用Spring Boot发送HTML格式邮件。&lt;/p&gt;"); helper.setText(sb.toString(), true); jms.send(message); return "发送成功"; &#125; catch (Exception e) &#123; e.printStackTrace(); return e.getMessage(); &#125; &#125;&#125;helper.setText(sb.toString(), true);中的true表示发送HTML格式邮件。启动项目，访问http://localhost/email/sendHtmlEmail，提示发送成功，可看到文本已经加上了颜色#42b983：发送带附件的邮件发送带附件的邮件和普通邮件相比，其实就只是多了个传入附件的过程。不过使用的仍是MimeMessage：12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.springboot.demo.controller;import java.io.File;import javax.mail.internet.MimeMessage;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.core.io.FileSystemResource;import org.springframework.mail.SimpleMailMessage;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("/email")public class EmailController &#123; @Autowired private JavaMailSender jms; @Value("$&#123;spring.mail.username&#125;") private String from; @RequestMapping("sendAttachmentsMail") public String sendAttachmentsMail() &#123; MimeMessage message = null; try &#123; message = jms.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(message, true); helper.setFrom(from); helper.setTo("888888@qq.com"); // 接收地址 helper.setSubject("一封带附件的邮件"); // 标题 helper.setText("详情参见附件内容！"); // 内容 // 传入附件 FileSystemResource file = new FileSystemResource(new File("src/main/resources/static/file/项目文档.docx")); helper.addAttachment("项目文档.docx", file); jms.send(message); return "发送成功"; &#125; catch (Exception e) &#123; e.printStackTrace(); return e.getMessage(); &#125; &#125;&#125;启动项目访问http://localhost/email/sendAttachmentsMail，提示发送成功：发送带静态资源的邮件发送带静态资源的邮件其实就是在发送HTML邮件的基础上嵌入静态资源（比如图片），嵌入静态资源的过程和传入附件类似，唯一的区别在于需要标识资源的cid：12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.springboot.demo.controller;import java.io.File;import javax.mail.internet.MimeMessage;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.core.io.FileSystemResource;import org.springframework.mail.SimpleMailMessage;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("/email")public class EmailController &#123; @Autowired private JavaMailSender jms; @Value("$&#123;spring.mail.username&#125;") private String from; @RequestMapping("sendInlineMail") public String sendInlineMail() &#123; MimeMessage message = null; try &#123; message = jms.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(message, true); helper.setFrom(from); helper.setTo("888888@qq.com"); // 接收地址 helper.setSubject("一封带静态资源的邮件"); // 标题 helper.setText("&lt;html&gt;&lt;body&gt;博客图：&lt;img src='cid:img'/&gt;&lt;/body&gt;&lt;/html&gt;", true); // 内容 // 传入附件 FileSystemResource file = new FileSystemResource(new File("src/main/resources/static/img/sunshine.png")); helper.addInline("img", file); jms.send(message); return "发送成功"; &#125; catch (Exception e) &#123; e.printStackTrace(); return e.getMessage(); &#125; &#125;&#125;helper.addInline(&quot;img&quot;, file);中的img和图片标签里cid后的名称相对应。启动项目访问http://localhost/email/sendInlineMail，提示发送成功：使用模板发送邮件在发送验证码等情况下可以创建一个邮件的模板，唯一的变量为验证码。这个例子中使用的模板解析引擎为Thymeleaf，所以首先引入Thymeleaf依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt;在template目录下创建一个emailTemplate.html模板：1234567891011&lt;!DOCTYPE html&gt;&lt;html lang="zh" xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;title&gt;模板&lt;/title&gt;&lt;/head&gt;&lt;body&gt; 您好，您的验证码为&#123;code&#125;，请在两分钟内使用完成操作。&lt;/body&gt;&lt;/html&gt;发送模板邮件，本质上还是发送HTML邮件，只不过多了绑定变量的过程，详细如下所示：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.springboot.demo.controller;import java.io.File;import javax.mail.internet.MimeMessage;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.core.io.FileSystemResource;import org.springframework.mail.SimpleMailMessage;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.MimeMessageHelper;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import org.thymeleaf.TemplateEngine;import org.thymeleaf.context.Context;@RestController@RequestMapping("/email")public class EmailController &#123; @Autowired private JavaMailSender jms; @Value("$&#123;spring.mail.username&#125;") private String from; @Autowired private TemplateEngine templateEngine; @RequestMapping("sendTemplateEmail") public String sendTemplateEmail(String code) &#123; MimeMessage message = null; try &#123; message = jms.createMimeMessage(); MimeMessageHelper helper = new MimeMessageHelper(message, true); helper.setFrom(from); helper.setTo("888888@qq.com"); // 接收地址 helper.setSubject("邮件摸板测试"); // 标题 // 处理邮件模板 Context context = new Context(); context.setVariable("code", code); String template = templateEngine.process("emailTemplate", context); helper.setText(template, true); jms.send(message); return "发送成功"; &#125; catch (Exception e) &#123; e.printStackTrace(); return e.getMessage(); &#125; &#125;&#125;其中code对应模板里的${code}变量。启动项目，访问http://localhost/email/sendTemplateEmail?code=EOS9，页面提示发送成功：源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/22.Spring-Boot-Email]]></content>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Actuator监控Spring Boot应用]]></title>
    <url>%2Fblog%2FAcutator-Spring-Boot.html</url>
    <content type="text"><![CDATA[我们都知道Spring Boot是一个用于快速开发Java Web的框架，不需要太多的配置即可使用Spring的大量功能。Spring Boot遵循着“约定大于配置”的原则，许多功能使用默认的配置即可。这样的做法好处在于我们不需要像使用Spring那样编写一大堆的XML配置代码，但过于简单的配置过程会让我们在了解各种依赖，配置之间的关系过程上带来一些困难。不过没关系，在Spring Boot中，我们可以使用Actuator来监控应用，Actuator提供了一系列的RESTful API让我们可以更为细致的了解各种信息。引入Actuator1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;配置Actuator1234567891011server: port: 80management: security: enabled: false #关掉安全认证 port: 80 context-path: /monitor #actuator的访问路径endpoints: shutdown: enabled: true配置中关闭了安全认证的功能，如果需要开启这个功能的话还需引入spring-boot-starter-security依赖。除了使用Spring Security来开启监控路径安全认证外，还可以使用Shiro对监控路径进行权限控制。监控的端口和应用一致，配置context-path为/monitor，这样可以避免和自己应用的路径映射地址重复。endpoints.shutdown.enabled: true提供了使用post请求来关闭Spring Boot应用的功能。Actuator接口列表Actuator提供了13个接口，可以分为三大类：配置接口、度量接口和其它接口，具体如下表所示：HTTP 方法路径描述GET/autoconfig提供了一份自动配置报告，记录哪些自动配置条件通过了，哪些没通过GET/configprops描述配置属性(包含默认值)如何注入BeanGET/beans描述应用程序上下文里全部的Bean，以及它们的关系GET/dump获取线程活动的快照GET/env获取全部环境属性GET/env/{name}根据名称获取特定的环境属性值GET/health报告应用程序的健康指标，这些值由HealthIndicator的实现类提供GET/info获取应用程序的定制信息，这些信息由info打头的属性提供GET/mappings描述全部的URI路径，以及它们和控制器(包含Actuator端点)的映射关系GET/metrics报告各种应用程序度量信息，比如内存用量和HTTP请求计数GET/metrics/{name}报告指定名称的应用程序度量值POST/shutdown关闭应用程序，要求endpoints.shutdown.enabled设置为trueGET/trace提供基本的HTTP请求跟踪信息(时间戳、HTTP头等)接口使用示例autoconfig显示所有自动装配类的报告，以及是什么原因导致自动装配成功或者不成功。在浏览器输入：http://localhost/monitor/autoconfig，输出如下（截取部分）：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&#123; "positiveMatches": &#123; "AuditAutoConfiguration#auditListener": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.listener.AbstractAuditListener; SearchStrategy: all) did not find any beans" &#125;], "AuditAutoConfiguration.AuditEventRepositoryConfiguration": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) did not find any beans" &#125;], "EndpointAutoConfiguration#autoConfigurationReportEndpoint": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnBean (types: org.springframework.boot.autoconfigure.condition.ConditionEvaluationReport; SearchStrategy: all) found bean 'autoConfigurationReport'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.AutoConfigurationReportEndpoint; SearchStrategy: current) did not find any beans" &#125;], "EndpointAutoConfiguration#beansEndpoint": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.BeansEndpoint; SearchStrategy: all) did not find any beans" &#125;], "EndpointAutoConfiguration#configurationPropertiesReportEndpoint": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) did not find any beans" &#125;], "EndpointAutoConfiguration#dumpEndpoint": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.DumpEndpoint; SearchStrategy: all) did not find any beans" &#125;], "EndpointAutoConfiguration#environmentEndpoint": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.EnvironmentEndpoint; SearchStrategy: all) did not find any beans" &#125;], "EndpointAutoConfiguration#healthEndpoint": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.HealthEndpoint; SearchStrategy: all) did not find any beans" &#125;], "EndpointAutoConfiguration#infoEndpoint": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.InfoEndpoint; SearchStrategy: all) did not find any beans" &#125;], "EndpointAutoConfiguration#loggersEndpoint": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnBean (types: org.springframework.boot.logging.LoggingSystem; SearchStrategy: all) found bean 'springBootLoggingSystem'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.LoggersEndpoint; SearchStrategy: all) did not find any beans" &#125;], "EndpointAutoConfiguration#metricsEndpoint": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.MetricsEndpoint; SearchStrategy: all) did not find any beans" &#125;], "EndpointAutoConfiguration#shutdownEndpoint": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.ShutdownEndpoint; SearchStrategy: all) did not find any beans" &#125;], "EndpointAutoConfiguration#traceEndpoint": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.TraceEndpoint; SearchStrategy: all) did not find any beans" &#125;], "EndpointAutoConfiguration.RequestMappingEndpointConfiguration": [&#123; "condition": "OnClassCondition", "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.handler.AbstractHandlerMethodMapping'; @ConditionalOnMissingClass did not find unwanted class" &#125;], "EndpointAutoConfiguration.RequestMappingEndpointConfiguration#requestMappingEndpoint": [&#123; "condition": "OnBeanCondition", "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.RequestMappingEndpoint; SearchStrategy: all) did not find any beans" &#125;],...&#125;beans查看Spring 容器管理的Bean,访问http://localhost/monitor/beans，输出如下（截取部分）：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238[&#123; "context": "application:80", "parent": null, "beans": [&#123; "bean": "demoApplication", "aliases": [], "scope": "singleton", "type": "com.springboot.demo.DemoApplication$$EnhancerBySpringCGLIB$$77e6b2b4", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory", "aliases": [], "scope": "singleton", "type": "org.springframework.core.type.classreading.CachingMetadataReaderFactory", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration$$EnhancerBySpringCGLIB$$dc9af024", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.condition.BeanTypeRegistry", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.condition.BeanTypeRegistry", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "propertySourcesPlaceholderConfigurer", "aliases": [], "scope": "singleton", "type": "org.springframework.context.support.PropertySourcesPlaceholderConfigurer", "resource": "class path resource [org/springframework/boot/autoconfigure/context/PropertyPlaceholderAutoConfiguration.class]", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$$EnhancerBySpringCGLIB$$a4dba584", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "standardJacksonObjectMapperBuilderCustomizer", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration$StandardJackson2ObjectMapperBuilderCustomizer", "resource": "class path resource [org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration.class]", "dependencies": ["org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@78f30883", "spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties"] &#125;, &#123; "bean": "spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.jackson.JacksonProperties", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor", "resource": "null", "dependencies": ["org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.store"] &#125;, &#123; "bean": "org.springframework.boot.context.properties.ConfigurationPropertiesBindingPostProcessor.store", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.context.properties.ConfigurationBeanFactoryMetaData", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration$$EnhancerBySpringCGLIB$$e9c4bf95", "resource": "null", "dependencies": ["org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@78f30883"] &#125;, &#123; "bean": "jacksonObjectMapperBuilder", "aliases": [], "scope": "singleton", "type": "org.springframework.http.converter.json.Jackson2ObjectMapperBuilder", "resource": "class path resource [org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration.class]", "dependencies": ["standardJacksonObjectMapperBuilderCustomizer"] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration$$EnhancerBySpringCGLIB$$3777fd7c", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "jacksonObjectMapper", "aliases": [], "scope": "singleton", "type": "com.fasterxml.jackson.databind.ObjectMapper", "resource": "class path resource [org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration$JacksonObjectMapperConfiguration.class]", "dependencies": ["jacksonObjectMapperBuilder"] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration$$EnhancerBySpringCGLIB$$19839b0b", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "jsonComponentModule", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.jackson.JsonComponentModule", "resource": "class path resource [org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.class]", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration$TomcatWebSocketConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration$TomcatWebSocketConfiguration$$EnhancerBySpringCGLIB$$ab6fe14", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "websocketContainerCustomizer", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.websocket.TomcatWebSocketContainerCustomizer", "resource": "class path resource [org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration$TomcatWebSocketConfiguration.class]", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration$$EnhancerBySpringCGLIB$$ee951243", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat$$EnhancerBySpringCGLIB$$8f67c107", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "tomcatEmbeddedServletContainerFactory", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory", "resource": "class path resource [org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat.class]", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration$$EnhancerBySpringCGLIB$$48514e2b", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "embeddedServletContainerCustomizerBeanPostProcessor", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizerBeanPostProcessor", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "errorPageRegistrarBeanPostProcessor", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.web.servlet.ErrorPageRegistrarBeanPostProcessor", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration$DispatcherServletConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration$DispatcherServletConfiguration$$EnhancerBySpringCGLIB$$824a2d3d", "resource": "null", "dependencies": ["spring.mvc-org.springframework.boot.autoconfigure.web.WebMvcProperties"] &#125;, &#123; "bean": "dispatcherServlet", "aliases": [], "scope": "singleton", "type": "org.springframework.web.servlet.DispatcherServlet", "resource": "class path resource [org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration$DispatcherServletConfiguration.class]", "dependencies": [] &#125;, &#123; "bean": "spring.mvc-org.springframework.boot.autoconfigure.web.WebMvcProperties", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.web.WebMvcProperties", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration$$EnhancerBySpringCGLIB$$fd39bc64", "resource": "null", "dependencies": ["serverProperties", "spring.mvc-org.springframework.boot.autoconfigure.web.WebMvcProperties"] &#125;, &#123; "bean": "dispatcherServletRegistration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.web.servlet.ServletRegistrationBean", "resource": "class path resource [org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration.class]", "dependencies": ["dispatcherServlet"] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration$$EnhancerBySpringCGLIB$$d158c03f", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration$$EnhancerBySpringCGLIB$$4ce40e75", "resource": "null", "dependencies": [] &#125;, &#123; "bean": "methodValidationPostProcessor", "aliases": [], "scope": "singleton", "type": "org.springframework.validation.beanvalidation.MethodValidationPostProcessor", "resource": "class path resource [org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.class]", "dependencies": ["environment"] &#125;, ...... &#123; "bean": "org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration", "aliases": [], "scope": "singleton", "type": "org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration$$EnhancerBySpringCGLIB$$ec83a29e", "resource": "null", "dependencies": [] &#125;]&#125;]configprops所有＠ConfigurationProperties注解的配置信息，如文件上传的最大允许配置等。访问http://localhost/monitor/configprops，输出如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440&#123; "environmentMvcEndpoint": &#123; "prefix": "endpoints.env", "properties": &#123; "path": "/env" &#125; &#125;, "heapdumpMvcEndpoint": &#123; "prefix": "endpoints.heapdump", "properties": &#123; "enabled": true, "path": "/heapdump", "sensitive": true &#125; &#125;, "managementServerProperties": &#123; "prefix": "management", "properties": &#123; "port": 80, "addApplicationContextHeader": true, "address": null, "contextPath": "/monitor", "ssl": null, "security": &#123; "enabled": false, "roles": ["ACTUATOR"], "sessions": "STATELESS" &#125; &#125; &#125;, "spring.mvc-org.springframework.boot.autoconfigure.web.WebMvcProperties": &#123; "prefix": "spring.mvc", "properties": &#123; "locale": null, "mediaTypes": &#123;&#125;, "localeResolver": "ACCEPT_HEADER", "messageCodesResolverFormat": null, "async": &#123; "requestTimeout": null &#125;, "dispatchOptionsRequest": true, "servlet": &#123; "loadOnStartup": -1 &#125;, "ignoreDefaultModelOnRedirect": true, "dispatchTraceRequest": false, "staticPathPattern": "/**", "dateFormat": null, "view": &#123; "prefix": null, "suffix": null &#125;, "logResolvedException": false, "throwExceptionIfNoHandlerFound": false &#125; &#125;, "spring.http.multipart-org.springframework.boot.autoconfigure.web.MultipartProperties": &#123; "prefix": "spring.http.multipart", "properties": &#123; "enabled": true, "maxRequestSize": "10MB", "location": null, "resolveLazily": false, "fileSizeThreshold": "0", "maxFileSize": "1MB" &#125; &#125;, "spring.http.encoding-org.springframework.boot.autoconfigure.web.HttpEncodingProperties": &#123; "prefix": "spring.http.encoding", "properties": &#123; "charset": "UTF-8", "mapping": null, "force": false, "forceResponse": false, "forceRequest": false &#125; &#125;, "endpoints.health-org.springframework.boot.actuate.autoconfigure.HealthMvcEndpointProperties": &#123; "prefix": "endpoints.health", "properties": &#123; "mapping": &#123;&#125; &#125; &#125;, "spring.resources-org.springframework.boot.autoconfigure.web.ResourceProperties": &#123; "prefix": "spring.resources", "properties": &#123; "staticLocations": ["/", "classpath:/META-INF/resources/", "classpath:/resources/", "classpath:/static/", "classpath:/public/"], "addMappings": true, "chain": &#123; "cache": true, "htmlApplicationCache": false, "gzipped": false, "strategy": &#123; "fixed": &#123; "enabled": false, "paths": ["/**"], "version": null &#125;, "content": &#123; "enabled": false, "paths": ["/**"] &#125; &#125; &#125;, "cachePeriod": null &#125; &#125;, "shutdownMvcEndpoint": &#123; "prefix": "endpoints.shutdown", "properties": &#123; "path": "/shutdown" &#125; &#125;, "requestMappingEndpoint": &#123; "prefix": "endpoints.mappings", "properties": &#123; "id": "mappings", "enabled": true, "sensitive": true &#125; &#125;, "autoConfigurationReportEndpoint": &#123; "prefix": "endpoints.autoconfig", "properties": &#123; "id": "autoconfig", "enabled": true, "sensitive": true &#125; &#125;, "management.trace-org.springframework.boot.actuate.trace.TraceProperties": &#123; "prefix": "management.trace", "properties": &#123; "include": ["TIME_TAKEN", "ERRORS", "REQUEST_HEADERS", "COOKIES", "RESPONSE_HEADERS"] &#125; &#125;, "management.info-org.springframework.boot.actuate.autoconfigure.InfoContributorProperties": &#123; "prefix": "management.info", "properties": &#123; "git": &#123; "mode": "SIMPLE" &#125; &#125; &#125;, "loggersEndpoint": &#123; "prefix": "endpoints.loggers", "properties": &#123; "id": "loggers", "enabled": true, "sensitive": true &#125; &#125;, "spring.jackson-org.springframework.boot.autoconfigure.jackson.JacksonProperties": &#123; "prefix": "spring.jackson", "properties": &#123; "deserialization": &#123;&#125;, "defaultPropertyInclusion": null, "propertyNamingStrategy": null, "locale": null, "serialization": &#123;&#125;, "jodaDateTimeFormat": null, "mapper": &#123;&#125;, "generator": &#123;&#125;, "timeZone": null, "dateFormat": null, "parser": &#123;&#125; &#125; &#125;, "shutdownEndpoint": &#123; "prefix": "endpoints.shutdown", "properties": &#123; "id": "shutdown", "enabled": true, "sensitive": true &#125; &#125;, "endpoints.metrics.filter-org.springframework.boot.actuate.autoconfigure.MetricFilterProperties": &#123; "prefix": "endpoints.metrics.filter", "properties": &#123; "counterSubmissions": ["MERGED"], "gaugeSubmissions": ["MERGED"] &#125; &#125;, "loggersMvcEndpoint": &#123; "prefix": "endpoints.loggers", "properties": &#123; "path": "/loggers" &#125; &#125;, "dumpEndpoint": &#123; "prefix": "endpoints.dump", "properties": &#123; "id": "dump", "enabled": true, "sensitive": true &#125; &#125;, "endpoints-org.springframework.boot.actuate.endpoint.EndpointProperties": &#123; "prefix": "endpoints", "properties": &#123; "enabled": true, "sensitive": null &#125; &#125;, "metricsMvcEndpoint": &#123; "prefix": "endpoints.metrics", "properties": &#123; "path": "/metrics" &#125; &#125;, "metricsEndpoint": &#123; "prefix": "endpoints.metrics", "properties": &#123; "id": "metrics", "enabled": true, "sensitive": true &#125; &#125;, "healthEndpoint": &#123; "prefix": "endpoints.health", "properties": &#123; "id": "health", "enabled": true, "timeToLive": 1000, "sensitive": false &#125; &#125;, "auditEventMvcEndpoint": &#123; "prefix": "endpoints.auditevents", "properties": &#123; "enabled": true, "path": "/auditevents", "sensitive": true &#125; &#125;, "healthMvcEndpoint": &#123; "prefix": "endpoints.health", "properties": &#123; "path": "/health" &#125; &#125;, "endpoints.cors-org.springframework.boot.actuate.autoconfigure.EndpointCorsProperties": &#123; "prefix": "endpoints.cors", "properties": &#123; "maxAge": 1800, "exposedHeaders": [], "allowedHeaders": [], "allowedOrigins": [], "allowedMethods": [], "allowCredentials": null &#125; &#125;, "diskSpaceHealthIndicatorProperties": &#123; "prefix": "management.health.diskspace", "properties": &#123; "path": "C:\\Users\\Administrator\\Desktop\\01.Start-Spring-Boot\\.", "threshold": 10485760 &#125; &#125;, "beansEndpoint": &#123; "prefix": "endpoints.beans", "properties": &#123; "id": "beans", "enabled": true, "sensitive": true &#125; &#125;, "traceEndpoint": &#123; "prefix": "endpoints.trace", "properties": &#123; "id": "trace", "enabled": true, "sensitive": true &#125; &#125;, "auditEventsEndpoint": &#123; "prefix": "endpoints.auditevents", "properties": &#123; "enabled": true &#125; &#125;, "endpoints.jmx-org.springframework.boot.actuate.autoconfigure.EndpointMBeanExportProperties": &#123; "prefix": "endpoints.jmx", "properties": &#123; "enabled": true, "uniqueNames": false, "domain": "", "staticNames": &#123;&#125; &#125; &#125;, "spring.metrics.export-org.springframework.boot.actuate.metrics.export.MetricExportProperties": &#123; "prefix": "spring.metrics.export", "properties": &#123; "enabled": true, "redis": &#123; "prefix": "spring.metrics.application.7f8f2ef33a0f173c075f96c8f5c5b4fd", "key": "******" &#125;, "aggregate": &#123; "prefix": "application.7f8f2ef33a0f173c075f96c8f5c5b4fd", "keyPattern": "k.d" &#125;, "excludes": null, "statsd": &#123; "host": null, "port": 8125, "prefix": null &#125;, "triggers": &#123;&#125;, "includes": null &#125; &#125;, "configurationPropertiesReportEndpoint": &#123; "prefix": "endpoints.configprops", "properties": &#123; "id": "configprops", "enabled": true, "sensitive": true &#125; &#125;, "spring.info-org.springframework.boot.autoconfigure.info.ProjectInfoProperties": &#123; "prefix": "spring.info", "properties": &#123; "git": &#123; "location": &#123;&#125; &#125;, "build": &#123; "location": &#123;&#125; &#125; &#125; &#125;, "infoEndpoint": &#123; "prefix": "endpoints.info", "properties": &#123; "id": "info", "enabled": true, "sensitive": false &#125; &#125;, "serverProperties": &#123; "prefix": "server", "properties": &#123; "undertow": &#123; "maxHttpPostSize": 0, "bufferSize": null, "buffersPerRegion": null, "ioThreads": null, "workerThreads": null, "directBuffers": null, "accesslog": &#123; "enabled": null, "pattern": "common", "prefix": "access_log.", "suffix": "log", "dir": "C:\\Users\\Administrator\\Desktop\\01.Start-Spring-Boot\\logs", "rotate": true &#125; &#125;, "port": 80, "error": &#123; "path": "/error", "includeStacktrace": "NEVER" &#125;, "maxHttpHeaderSize": 0, "jspServlet": null, "ssl": null, "maxHttpPostSize": 0, "jetty": &#123; "maxHttpPostSize": 0, "acceptors": null, "selectors": null &#125;, "servletPath": "/", "tomcat": &#123; "accesslog": &#123; "enabled": false, "pattern": "common", "directory": "logs", "prefix": "access_log", "suffix": ".log", "rotate": true, "renameOnRotate": false, "fileDateFormat": ".yyyy-MM-dd", "requestAttributesEnabled": false, "buffered": true &#125;, "internalProxies": "10\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|169\\.254\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|127\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|172\\.1[6-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|172\\.2[0-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|172\\.3[0-1]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;", "protocolHeader": null, "protocolHeaderHttpsValue": "https", "portHeader": "X-Forwarded-Port", "remoteIpHeader": null, "basedir": null, "backgroundProcessorDelay": 30, "maxThreads": 0, "minSpareThreads": 0, "maxHttpPostSize": 0, "redirectContextRoot": null, "uriEncoding": null, "maxConnections": 0, "acceptCount": 0, "additionalTldSkipPatterns": [] &#125;, "connectionTimeout": null, "session": &#123; "timeout": null, "trackingModes": null, "persistent": false, "storeDir": null, "cookie": &#123; "name": null, "domain": null, "path": null, "comment": null, "httpOnly": null, "secure": null, "maxAge": null &#125; &#125;, "address": null, "contextParameters": &#123;&#125;, "serverHeader": null, "useForwardHeaders": null, "contextPath": null, "displayName": "application" &#125; &#125;, "management.health.status-org.springframework.boot.actuate.autoconfigure.HealthIndicatorProperties": &#123; "prefix": "management.health.status", "properties": &#123; "order": null &#125; &#125;, "environmentEndpoint": &#123; "prefix": "endpoints.env", "properties": &#123; "id": "env", "enabled": true, "sensitive": true &#125; &#125;&#125;trace/trace接口能查看最近的HTTP 请求和响应，在浏览器输入：http://localhost/monitor/trace，输出如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105[&#123; "timestamp": 1525657638444, "info": &#123; "method": "GET", "path": "/login;JSESSIONID=c1d0a83c-05fd-479c-ae6b-2ecc9b878a4a", "headers": &#123; "request": &#123; "host": "localhost", "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "accept-language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2", "accept-encoding": "gzip, deflate", "connection": "keep-alive", "upgrade-insecure-requests": "1", "pragma": "no-cache", "cache-control": "no-cache" &#125;, "response": &#123; "X-Application-Context": "application:80", "status": "404" &#125; &#125;, "timeTaken": "11" &#125;&#125;, &#123; "timestamp": 1525657495017, "info": &#123; "method": "GET", "path": "/monitor/beans", "headers": &#123; "request": &#123; "host": "localhost", "connection": "keep-alive", "upgrade-insecure-requests": "1", "user-agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.10 Safari/537.36", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8", "accept-encoding": "gzip, deflate, br", "accept-language": "zh-CN,zh;q=0.9,en;q=0.8" &#125;, "response": &#123; "X-Application-Context": "application:80", "Content-Type": "application/vnd.spring-boot.actuator.v1+json;charset=UTF-8", "Transfer-Encoding": "chunked", "Date": "Mon, 07 May 2018 01:44:55 GMT", "status": "200" &#125; &#125;, "timeTaken": "609" &#125;&#125;, &#123; "timestamp": 1525657402454, "info": &#123; "method": "GET", "path": "/favicon.ico", "headers": &#123; "request": &#123; "host": "localhost", "connection": "keep-alive", "pragma": "no-cache", "cache-control": "no-cache", "user-agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.10 Safari/537.36", "accept": "image/webp,image/apng,image/*,*/*;q=0.8", "referer": "http://localhost/monitor/autoconfig", "accept-encoding": "gzip, deflate, br", "accept-language": "zh-CN,zh;q=0.9,en;q=0.8" &#125;, "response": &#123; "X-Application-Context": "application:80", "Last-Modified": "Wed, 29 Nov 2017 01:54:48 GMT", "Accept-Ranges": "bytes", "Content-Type": "application/octet-stream", "Content-Length": "946", "Date": "Mon, 07 May 2018 01:43:22 GMT", "status": "200" &#125; &#125;, "timeTaken": "21" &#125;&#125;, &#123; "timestamp": 1525657402076, "info": &#123; "method": "GET", "path": "/monitor/autoconfig", "headers": &#123; "request": &#123; "host": "localhost", "connection": "keep-alive", "cache-control": "max-age=0", "upgrade-insecure-requests": "1", "user-agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.10 Safari/537.36", "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8", "accept-encoding": "gzip, deflate, br", "accept-language": "zh-CN,zh;q=0.9,en;q=0.8" &#125;, "response": &#123; "X-Application-Context": "application:80", "Content-Type": "application/vnd.spring-boot.actuator.v1+json;charset=UTF-8", "Transfer-Encoding": "chunked", "Date": "Mon, 07 May 2018 01:43:22 GMT", "status": "200" &#125; &#125;, "timeTaken": "300" &#125;&#125;]dump获取某一时刻虚拟机线程栈信息。线程栈表示某一时刻虚拟机正在做的事情，访问http://localhost/monitor/dump，输出如下（截取部分）：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249[&#123; "threadName": "DestroyJavaVM", "threadId": 32, "blockedTime": -1, "blockedCount": 0, "waitedTime": -1, "waitedCount": 0, "lockName": null, "lockOwnerId": -1, "lockOwnerName": null, "inNative": false, "suspended": false, "threadState": "RUNNABLE", "stackTrace": [], "lockedMonitors": [], "lockedSynchronizers": [], "lockInfo": null&#125;, &#123; "threadName": "http-nio-80-AsyncTimeout", "threadId": 30, "blockedTime": -1, "blockedCount": 0, "waitedTime": -1, "waitedCount": 14903, "lockName": null, "lockOwnerId": -1, "lockOwnerName": null, "inNative": false, "suspended": false, "threadState": "TIMED_WAITING", "stackTrace": [&#123; "methodName": "sleep", "fileName": "Thread.java", "lineNumber": -2, "className": "java.lang.Thread", "nativeMethod": true &#125;, &#123; "methodName": "run", "fileName": "AbstractProtocol.java", "lineNumber": 1211, "className": "org.apache.coyote.AbstractProtocol$AsyncTimeout", "nativeMethod": false &#125;, &#123; "methodName": "run", "fileName": "Thread.java", "lineNumber": 745, "className": "java.lang.Thread", "nativeMethod": false &#125;], "lockedMonitors": [], "lockedSynchronizers": [], "lockInfo": null&#125;, &#123; "threadName": "http-nio-80-Acceptor-0", "threadId": 29, "blockedTime": -1, "blockedCount": 0, "waitedTime": -1, "waitedCount": 0, "lockName": null, "lockOwnerId": -1, "lockOwnerName": null, "inNative": true, "suspended": false, "threadState": "RUNNABLE", "stackTrace": [&#123; "methodName": "accept0", "fileName": "ServerSocketChannelImpl.java", "lineNumber": -2, "className": "sun.nio.ch.ServerSocketChannelImpl", "nativeMethod": true &#125;, &#123; "methodName": "accept", "fileName": "ServerSocketChannelImpl.java", "lineNumber": 250, "className": "sun.nio.ch.ServerSocketChannelImpl", "nativeMethod": false &#125;, &#123; "methodName": "run", "fileName": "NioEndpoint.java", "lineNumber": 455, "className": "org.apache.tomcat.util.net.NioEndpoint$Acceptor", "nativeMethod": false &#125;, &#123; "methodName": "run", "fileName": "Thread.java", "lineNumber": 745, "className": "java.lang.Thread", "nativeMethod": false &#125;], "lockedMonitors": [&#123; "className": "java.lang.Object", "identityHashCode": 1985974129, "lockedStackDepth": 1, "lockedStackFrame": &#123; "methodName": "accept", "fileName": "ServerSocketChannelImpl.java", "lineNumber": 250, "className": "sun.nio.ch.ServerSocketChannelImpl", "nativeMethod": false &#125; &#125;], "lockedSynchronizers": [], "lockInfo": null&#125;, &#123; "threadName": "http-nio-80-ClientPoller-1", "threadId": 28, "blockedTime": -1, "blockedCount": 6, "waitedTime": -1, "waitedCount": 0, "lockName": null, "lockOwnerId": -1, "lockOwnerName": null, "inNative": true, "suspended": false, "threadState": "RUNNABLE", "stackTrace": [&#123; "methodName": "poll0", "fileName": "WindowsSelectorImpl.java", "lineNumber": -2, "className": "sun.nio.ch.WindowsSelectorImpl$SubSelector", "nativeMethod": true &#125;, &#123; "methodName": "poll", "fileName": "WindowsSelectorImpl.java", "lineNumber": 296, "className": "sun.nio.ch.WindowsSelectorImpl$SubSelector", "nativeMethod": false &#125;, &#123; "methodName": "access$400", "fileName": "WindowsSelectorImpl.java", "lineNumber": 278, "className": "sun.nio.ch.WindowsSelectorImpl$SubSelector", "nativeMethod": false &#125;, &#123; "methodName": "doSelect", "fileName": "WindowsSelectorImpl.java", "lineNumber": 159, "className": "sun.nio.ch.WindowsSelectorImpl", "nativeMethod": false &#125;, &#123; "methodName": "lockAndDoSelect", "fileName": "SelectorImpl.java", "lineNumber": 87, "className": "sun.nio.ch.SelectorImpl", "nativeMethod": false &#125;, &#123; "methodName": "select", "fileName": "SelectorImpl.java", "lineNumber": 98, "className": "sun.nio.ch.SelectorImpl", "nativeMethod": false &#125;, &#123; "methodName": "run", "fileName": "NioEndpoint.java", "lineNumber": 793, "className": "org.apache.tomcat.util.net.NioEndpoint$Poller", "nativeMethod": false &#125;, &#123; "methodName": "run", "fileName": "Thread.java", "lineNumber": 745, "className": "java.lang.Thread", "nativeMethod": false &#125;], "lockedMonitors": [&#123; "className": "sun.nio.ch.Util$2", "identityHashCode": 511554453, "lockedStackDepth": 4, "lockedStackFrame": &#123; "methodName": "lockAndDoSelect", "fileName": "SelectorImpl.java", "lineNumber": 87, "className": "sun.nio.ch.SelectorImpl", "nativeMethod": false &#125; &#125;, &#123; "className": "java.util.Collections$UnmodifiableSet", "identityHashCode": 563515370, "lockedStackDepth": 4, "lockedStackFrame": &#123; "methodName": "lockAndDoSelect", "fileName": "SelectorImpl.java", "lineNumber": 87, "className": "sun.nio.ch.SelectorImpl", "nativeMethod": false &#125; &#125;, &#123; "className": "sun.nio.ch.WindowsSelectorImpl", "identityHashCode": 761235575, "lockedStackDepth": 4, "lockedStackFrame": &#123; "methodName": "lockAndDoSelect", "fileName": "SelectorImpl.java", "lineNumber": 87, "className": "sun.nio.ch.SelectorImpl", "nativeMethod": false &#125; &#125;], "lockedSynchronizers": [], "lockInfo": null&#125;,...... &#123; "threadName": "Finalizer", "threadId": 3, "blockedTime": -1, "blockedCount": 202, "waitedTime": -1, "waitedCount": 51, "lockName": "java.lang.ref.ReferenceQueue$Lock@bd5f3f3", "lockOwnerId": -1, "lockOwnerName": null, "inNative": false, "suspended": false, "threadState": "WAITING", "stackTrace": [&#123; "methodName": "wait", "fileName": "Object.java", "lineNumber": -2, "className": "java.lang.Object", "nativeMethod": true &#125;, &#123; "methodName": "remove", "fileName": "ReferenceQueue.java", "lineNumber": 135, "className": "java.lang.ref.ReferenceQueue", "nativeMethod": false &#125;, &#123; "methodName": "remove", "fileName": "ReferenceQueue.java", "lineNumber": 151, "className": "java.lang.ref.ReferenceQueue", "nativeMethod": false &#125;, &#123; "methodName": "run", "fileName": "Finalizer.java", "lineNumber": 209, "className": "java.lang.ref.Finalizer$FinalizerThread", "nativeMethod": false &#125;], "lockedMonitors": [], "lockedSynchronizers": [], "lockInfo": &#123; "className": "java.lang.ref.ReferenceQueue$Lock", "identityHashCode": 198570995 &#125;&#125;]env显示Spring Boot环境变量，如使用的JDK版本、加载的jar包、配置文件信息、日志文件信息。访问，输出如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124&#123; "profiles": [], "server.ports": &#123; "local.server.port": 80 &#125;, "servletContextInitParams": &#123;&#125;, "systemProperties": &#123; "java.runtime.name": "Java(TM) SE Runtime Environment", "sun.boot.library.path": "C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\bin", "java.vm.version": "24.80-b11", "java.vm.vendor": "Oracle Corporation", "java.vendor.url": "http://java.oracle.com/", "path.separator": ";", "java.vm.name": "Java HotSpot(TM) 64-Bit Server VM", "file.encoding.pkg": "sun.io", "user.country": "CN", "user.script": "", "sun.java.launcher": "SUN_STANDARD", "sun.os.patch.level": "", "PID": "15184", "java.vm.specification.name": "Java Virtual Machine Specification", "user.dir": "C:\\Users\\Administrator\\Desktop\\01.Start-Spring-Boot", "java.runtime.version": "1.7.0_80-b15", "java.awt.graphicsenv": "sun.awt.Win32GraphicsEnvironment", "org.jboss.logging.provider": "slf4j", "java.endorsed.dirs": "C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\endorsed", "os.arch": "amd64", "java.io.tmpdir": "C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\", "line.separator": "\r\n", "java.vm.specification.vendor": "Oracle Corporation", "user.variant": "", "os.name": "Windows 8.1", "sun.jnu.encoding": "GBK", "spring.beaninfo.ignore": "true", "java.library.path": "C:\\Program Files\\Java\\jdk1.7.0_80\\bin;C:\\Windows\\Sun\\Java\\bin;C:\\Windows\\system32;C:\\Windows;C:/Program Files/Java/jre1.8.0_31/bin/server;C:/Program Files/Java/jre1.8.0_31/bin;C:/Program Files/Java/jre1.8.0_31/lib/amd64;f:\\app\\Administrator\\product\\11.2.0\\client_1\\bin;f:\\app\\Administrator\\product\\11.2.0\\dbhome_1\\bin;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\nodejs\\;C:\\Program Files\\Git\\cmd;\"%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin\";%M2_HOME%\\bin;C:\\Program Files\\TortoiseSVN\\bin;C:\\Program Files\\PuTTY\\;C:\\ProgramData\\chocolatey\\bin;C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Administrator\\AppData\\Roaming\\npm;\"C:\\Program Files\\Java\\jdk1.8.0_31\\bin;C:\\Program Files\\Java\\jdk1.8.0_31\\jre\\bin\";D:\\Program Files\\apache-maven-3.3.9-bin\\apache-maven-3.3.9\\bin;C:\\Program Files\\cmder;;D:\\Program Files\\Oxygen;;.", "java.specification.name": "Java Platform API Specification", "java.class.version": "51.0", "sun.management.compiler": "HotSpot 64-Bit Tiered Compilers", "os.version": "6.3", "user.home": "C:\\Users\\Administrator", "catalina.useNaming": "false", "user.timezone": "Asia/Shanghai", "java.awt.printerjob": "sun.awt.windows.WPrinterJob", "file.encoding": "UTF-8", "java.specification.version": "1.7", "catalina.home": "C:\\Users\\Administrator\\AppData\\Local\\Temp\\tomcat.2042919348800278549.80", "java.class.path": "C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\resources.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\rt.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\jsse.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\jce.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\charsets.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\jfr.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\ext\\access-bridge-64.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\ext\\dnsns.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\ext\\jaccess.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\ext\\localedata.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\ext\\sunec.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\ext\\sunjce_provider.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\ext\\sunmscapi.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\ext\\zipfs.jar;C:\\Users\\Administrator\\Desktop\\01.Start-Spring-Boot\\target\\classes;D:\\m2\\repository\\org\\springframework\\boot\\spring-boot-starter-web\\1.5.9.RELEASE\\spring-boot-starter-web-1.5.9.RELEASE.jar;D:\\m2\\repository\\org\\springframework\\boot\\spring-boot-starter\\1.5.9.RELEASE\\spring-boot-starter-1.5.9.RELEASE.jar;D:\\m2\\repository\\org\\springframework\\boot\\spring-boot\\1.5.9.RELEASE\\spring-boot-1.5.9.RELEASE.jar;D:\\m2\\repository\\org\\springframework\\boot\\spring-boot-autoconfigure\\1.5.9.RELEASE\\spring-boot-autoconfigure-1.5.9.RELEASE.jar;D:\\m2\\repository\\org\\springframework\\boot\\spring-boot-starter-logging\\1.5.9.RELEASE\\spring-boot-starter-logging-1.5.9.RELEASE.jar;D:\\m2\\repository\\ch\\qos\\logback\\logback-classic\\1.1.11\\logback-classic-1.1.11.jar;D:\\m2\\repository\\ch\\qos\\logback\\logback-core\\1.1.11\\logback-core-1.1.11.jar;D:\\m2\\repository\\org\\slf4j\\jcl-over-slf4j\\1.7.25\\jcl-over-slf4j-1.7.25.jar;D:\\m2\\repository\\org\\slf4j\\jul-to-slf4j\\1.7.25\\jul-to-slf4j-1.7.25.jar;D:\\m2\\repository\\org\\slf4j\\log4j-over-slf4j\\1.7.25\\log4j-over-slf4j-1.7.25.jar;D:\\m2\\repository\\org\\yaml\\snakeyaml\\1.17\\snakeyaml-1.17.jar;D:\\m2\\repository\\org\\springframework\\boot\\spring-boot-starter-tomcat\\1.5.9.RELEASE\\spring-boot-starter-tomcat-1.5.9.RELEASE.jar;D:\\m2\\repository\\org\\apache\\tomcat\\embed\\tomcat-embed-core\\8.5.23\\tomcat-embed-core-8.5.23.jar;D:\\m2\\repository\\org\\apache\\tomcat\\tomcat-annotations-api\\8.5.23\\tomcat-annotations-api-8.5.23.jar;D:\\m2\\repository\\org\\apache\\tomcat\\embed\\tomcat-embed-el\\8.5.23\\tomcat-embed-el-8.5.23.jar;D:\\m2\\repository\\org\\apache\\tomcat\\embed\\tomcat-embed-websocket\\8.5.23\\tomcat-embed-websocket-8.5.23.jar;D:\\m2\\repository\\org\\hibernate\\hibernate-validator\\5.3.6.Final\\hibernate-validator-5.3.6.Final.jar;D:\\m2\\repository\\javax\\validation\\validation-api\\1.1.0.Final\\validation-api-1.1.0.Final.jar;D:\\m2\\repository\\org\\jboss\\logging\\jboss-logging\\3.3.1.Final\\jboss-logging-3.3.1.Final.jar;D:\\m2\\repository\\com\\fasterxml\\classmate\\1.3.4\\classmate-1.3.4.jar;D:\\m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-databind\\2.8.10\\jackson-databind-2.8.10.jar;D:\\m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-annotations\\2.8.0\\jackson-annotations-2.8.0.jar;D:\\m2\\repository\\com\\fasterxml\\jackson\\core\\jackson-core\\2.8.10\\jackson-core-2.8.10.jar;D:\\m2\\repository\\org\\springframework\\spring-web\\4.3.13.RELEASE\\spring-web-4.3.13.RELEASE.jar;D:\\m2\\repository\\org\\springframework\\spring-aop\\4.3.13.RELEASE\\spring-aop-4.3.13.RELEASE.jar;D:\\m2\\repository\\org\\springframework\\spring-beans\\4.3.13.RELEASE\\spring-beans-4.3.13.RELEASE.jar;D:\\m2\\repository\\org\\springframework\\spring-context\\4.3.13.RELEASE\\spring-context-4.3.13.RELEASE.jar;D:\\m2\\repository\\org\\springframework\\spring-webmvc\\4.3.13.RELEASE\\spring-webmvc-4.3.13.RELEASE.jar;D:\\m2\\repository\\org\\springframework\\spring-expression\\4.3.13.RELEASE\\spring-expression-4.3.13.RELEASE.jar;D:\\m2\\repository\\org\\slf4j\\slf4j-api\\1.7.25\\slf4j-api-1.7.25.jar;D:\\m2\\repository\\org\\springframework\\spring-core\\4.3.13.RELEASE\\spring-core-4.3.13.RELEASE.jar;D:\\m2\\repository\\org\\springframework\\boot\\spring-boot-starter-actuator\\1.5.9.RELEASE\\spring-boot-starter-actuator-1.5.9.RELEASE.jar;D:\\m2\\repository\\org\\springframework\\boot\\spring-boot-actuator\\1.5.9.RELEASE\\spring-boot-actuator-1.5.9.RELEASE.jar", "user.name": "Administrator", "java.vm.specification.version": "1.7", "sun.java.command": "com.springboot.demo.DemoApplication", "java.home": "C:\\Program Files\\Java\\jdk1.7.0_80\\jre", "sun.arch.data.model": "64", "user.language": "zh", "java.specification.vendor": "Oracle Corporation", "awt.toolkit": "sun.awt.windows.WToolkit", "java.vm.info": "mixed mode", "java.version": "1.7.0_80", "java.ext.dirs": "C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\ext;C:\\Windows\\Sun\\Java\\lib\\ext", "sun.boot.class.path": "C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\resources.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\rt.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\sunrsasign.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\jsse.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\jce.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\charsets.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\lib\\jfr.jar;C:\\Program Files\\Java\\jdk1.7.0_80\\jre\\classes", "java.awt.headless": "true", "java.vendor": "Oracle Corporation", "catalina.base": "C:\\Users\\Administrator\\AppData\\Local\\Temp\\tomcat.2042919348800278549.80", "file.separator": "\\", "java.vendor.url.bug": "http://bugreport.sun.com/bugreport/", "sun.io.unicode.encoding": "UnicodeLittle", "sun.cpu.endian": "little", "sun.desktop": "windows", "sun.cpu.isalist": "amd64" &#125;, "systemEnvironment": &#123; "USERPROFILE": "C:\\Users\\Administrator", "ProgramData": "C:\\ProgramData", "PATHEXT": ".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC", "JAVA_HOME": "C:\\Program Files\\Java\\jdk1.8.0_31", "ProgramFiles(x86)": "C:\\Program Files (x86)", "ChocolateyLastPathUpdate": "周四 4月 26 09:03:47 2018", "TEMP": "C:\\Users\\ADMINI~1\\AppData\\Local\\Temp", "SystemDrive": "C:", "ProgramFiles": "C:\\Program Files", "Path": "C:/Program Files/Java/jre1.8.0_31/bin/server;C:/Program Files/Java/jre1.8.0_31/bin;C:/Program Files/Java/jre1.8.0_31/lib/amd64;f:\\app\\Administrator\\product\\11.2.0\\client_1\\bin;f:\\app\\Administrator\\product\\11.2.0\\dbhome_1\\bin;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\nodejs\\;C:\\Program Files\\Git\\cmd;\"%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin\";%M2_HOME%\\bin;C:\\Program Files\\TortoiseSVN\\bin;C:\\Program Files\\PuTTY\\;C:\\ProgramData\\chocolatey\\bin;C:\\Users\\Administrator\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\Administrator\\AppData\\Roaming\\npm;\"C:\\Program Files\\Java\\jdk1.8.0_31\\bin;C:\\Program Files\\Java\\jdk1.8.0_31\\jre\\bin\";D:\\Program Files\\apache-maven-3.3.9-bin\\apache-maven-3.3.9\\bin;C:\\Program Files\\cmder;;D:\\Program Files\\Oxygen;", "HOMEDRIVE": "C:", "PROCESSOR_REVISION": "4e03", "=C:": "C:\\", "USERDOMAIN": "SC-201802012049", "ALLUSERSPROFILE": "C:\\ProgramData", "ProgramW6432": "C:\\Program Files", "PROCESSOR_IDENTIFIER": "Intel64 Family 6 Model 78 Stepping 3, GenuineIntel", "SESSIONNAME": "Console", "FPS_BROWSER_USER_PROFILE_STRING": "Default", "TMP": "C:\\Users\\ADMINI~1\\AppData\\Local\\Temp", "PROCESSOR_ARCHITECTURE": "AMD64", "CommonProgramFiles": "C:\\Program Files\\Common Files", "CLASSPATH": ".;C:\\Program Files\\Java\\jdk1.8.0_31\\lib;C:\\Program Files\\Java\\jdk1.8.0_31\\lib\\tools.jar", "=::": "::\\", "LOGONSERVER": "\\\\SC-201802012049", "M2_HOME": "D:\\Program Files\\apache-maven-3.3.9-bin\\apache-maven-3.3.9", "OS": "Windows_NT", "HOMEPATH": "\\Users\\Administrator", "PROCESSOR_LEVEL": "6", "FPS_BROWSER_APP_PROFILE_STRING": "Internet Explorer", "CommonProgramW6432": "C:\\Program Files\\Common Files", "USERDOMAIN_ROAMINGPROFILE": "SC-201802012049", "LOCALAPPDATA": "C:\\Users\\Administrator\\AppData\\Local", "COMPUTERNAME": "SC-201802012049", "windir": "C:\\Windows", "SystemRoot": "C:\\Windows", "asl.log": "Destination=file", "NUMBER_OF_PROCESSORS": "4", "USERNAME": "Administrator", "PUBLIC": "C:\\Users\\Public", "PSModulePath": "C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules", "CommonProgramFiles(x86)": "C:\\Program Files (x86)\\Common Files", "ComSpec": "C:\\Windows\\system32\\cmd.exe", "ChocolateyInstall": "C:\\ProgramData\\chocolatey", "APPDATA": "C:\\Users\\Administrator\\AppData\\Roaming" &#125;, "applicationConfig: [classpath:/application.yml]": &#123; "server.port": 80, "management.security.enabled": false, "management.port": 80, "management.context-path": "/monitor", "endpoints.shutdown.enabled": true &#125;&#125;health查看所在应用的健康状态， 如磁盘、数据源、Redis 、Elasticsearch等。健康状态分为UP（正常）和DOWN（故障）状态。访问http://localhost/monitor/health，显示如下：123456789&#123; "status": "UP", "diskSpace": &#123; "status": "UP", "total": 107380994048, "free": 63853707264, "threshold": 10485760 &#125;&#125;mappings输出所有通过注解＠RequestMapping设置的URL映射，可以通过此来查看URL对应的Controller。访问http://localhost/monitor/mappings，显示如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495&#123; "/webjars/**": &#123; "bean": "resourceHandlerMapping" &#125;, "/**": &#123; "bean": "resourceHandlerMapping" &#125;, "/**/favicon.ico": &#123; "bean": "faviconHandlerMapping" &#125;, "&#123;[/]&#125;": &#123; "bean": "requestMappingHandlerMapping", "method": "java.lang.String com.springboot.demo.DemoApplication.index()" &#125;, "&#123;[/error]&#125;": &#123; "bean": "requestMappingHandlerMapping", "method": "public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)" &#125;, "&#123;[/error],produces=[text/html]&#125;": &#123; "bean": "requestMappingHandlerMapping", "method": "public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)" &#125;, "&#123;[/monitor/loggers/&#123;name:.*&#125;],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.get(java.lang.String)" &#125;, "&#123;[/monitor/loggers/&#123;name:.*&#125;],methods=[POST],consumes=[application/vnd.spring-boot.actuator.v1+json || application/json],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.LoggersMvcEndpoint.set(java.lang.String,java.util.Map&lt;java.lang.String, java.lang.String&gt;)" &#125;, "&#123;[/monitor/loggers || /monitor/loggers.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()" &#125;, "&#123;[/monitor/shutdown || /monitor/shutdown.json],methods=[POST],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint.invoke()" &#125;, "&#123;[/monitor/trace || /monitor/trace.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()" &#125;, "&#123;[/monitor/heapdump || /monitor/heapdump.json],methods=[GET],produces=[application/octet-stream]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException" &#125;, "&#123;[/monitor/autoconfig || /monitor/autoconfig.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()" &#125;, "&#123;[/monitor/beans || /monitor/beans.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()" &#125;, "&#123;[/monitor/mappings || /monitor/mappings.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()" &#125;, "&#123;[/monitor/health || /monitor/health.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(javax.servlet.http.HttpServletRequest,java.security.Principal)" &#125;, "&#123;[/monitor/metrics/&#123;name:.*&#125;],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)" &#125;, "&#123;[/monitor/metrics || /monitor/metrics.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()" &#125;, "&#123;[/monitor/dump || /monitor/dump.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()" &#125;, "&#123;[/monitor/env/&#123;name:.*&#125;],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)" &#125;, "&#123;[/monitor/env || /monitor/env.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()" &#125;, "&#123;[/monitor/info || /monitor/info.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()" &#125;, "&#123;[/monitor/configprops || /monitor/configprops.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()" &#125;, "&#123;[/monitor/auditevents || /monitor/auditevents.json],methods=[GET],produces=[application/vnd.spring-boot.actuator.v1+json || application/json]&#125;": &#123; "bean": "endpointHandlerMapping", "method": "public org.springframework.http.ResponseEntity&lt;?&gt; org.springframework.boot.actuate.endpoint.mvc.AuditEventsMvcEndpoint.findByPrincipalAndAfterAndType(java.lang.String,java.util.Date,java.lang.String)" &#125;&#125;metrics显示Spring Boot的性能指标，如己有内存、未占用内存、垃圾回收次数、类信息等。访问http://localhost/monitor/metrics，输出如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&#123; "mem": 245361, "mem.free": 76255, "processors": 4, "instance.uptime": 15927377, "uptime": 15932920, "systemload.average": -1.0, "heap.committed": 209408, "heap.init": 122659, "heap.used": 133152, "heap": 1745920, "nonheap.committed": 36480, "nonheap.init": 24000, "nonheap.used": 35953, "nonheap": 133120, "threads.peak": 24, "threads.daemon": 20, "threads.totalStarted": 27, "threads": 22, "classes": 6107, "classes.loaded": 6107, "classes.unloaded": 0, "gc.ps_scavenge.count": 5, "gc.ps_scavenge.time": 73, "gc.ps_marksweep.count": 0, "gc.ps_marksweep.time": 0, "httpsessions.max": -1, "httpsessions.active": 0, "counter.status.200.monitor.autoconfig": 2, "counter.status.200.monitor.beans": 2, "counter.status.200.monitor.configprops": 1, "counter.status.200.monitor.dump": 4, "counter.status.200.monitor.env": 1, "counter.status.200.monitor.health": 1, "counter.status.200.monitor.info": 1, "counter.status.200.monitor.loggers": 1, "counter.status.200.monitor.mappings": 1, "counter.status.200.monitor.trace": 3, "counter.status.200.star-star.favicon.ico": 3, "counter.status.404.star-star": 2, "gauge.response.monitor.autoconfig": 14.0, "gauge.response.monitor.beans": 42.0, "gauge.response.monitor.configprops": 440.0, "gauge.response.monitor.dump": 62.0, "gauge.response.monitor.env": 14.0, "gauge.response.monitor.health": 22.0, "gauge.response.monitor.info": 26.0, "gauge.response.monitor.loggers": 237.0, "gauge.response.monitor.mappings": 7.0, "gauge.response.monitor.trace": 8.0, "gauge.response.star-star": 12.0, "gauge.response.star-star.favicon.ico": 6.0&#125;对/metrics接口提供的信息进行简单分类如下表：分类前缀报告内容垃圾收集器gc.已经发生过的垃圾收集次数，以及垃圾收集所耗费的时间，适用于标记-清理垃圾收集器和并行垃圾收集器(数据源自java.lang.management. GarbageCollectorMXBean)内存mem.分配给应用程序的内存数量和空闲的内存数量(数据源自java.lang. Runtime)堆heap.当前内存用量(数据源自java.lang.management.MemoryUsage)类加载器classes.JVM类加载器加载与卸载的类的数量(数据源自java.lang. management.ClassLoadingMXBean)系统processors、instance.uptime、uptime、systemload.average系统信息，例如处理器数量(数据源自java.lang.Runtime)、运行时间(数据源自java.lang.management.RuntimeMXBean)、平均负载(数据源自java.lang.management.OperatingSystemMXBean)线程池thread.线程、守护线程的数量，以及JVM启动后的线程数量峰值(数据源自 java.lang .management.ThreadMXBean)数据源datasource.数据源连接的数量(源自数据源的元数据，仅当Spring应用程序上下文里存在 DataSource Bean 的时候才会有这个信息)Tomcat 会话httpsessions.*Tomcat的活跃会话数和最大会话数(数据源自嵌入式Tomcat的Bean，仅在使用嵌入式Tomcat服务器运行应用程序时才有这个信息)HTTPcounter.status.、gauge.response.多种应用程序服务HTTP请求的度量值与计数器HTTP的计数器和度量值需要做一点说明。counter.status后的值是HTTP状态码，随后是所请求的路径。举个例子，counter.status.200.metrics 表明/metrics端点返回 200(OK) 状态码的次数。HTTP的度量信息在结构上也差不多，却在报告另一类信息。它们全部以gauge.response开头，表明这是HTTP响应的度量信息。前缀后是对应的路径。度量值是以毫秒为单位的时间，反映了最近处理该路径请求的耗时。这里还有几个特殊的值需要注意。root路径指向的是根路径或/。star-star代表了那些Spring认为是静态资源的路径，包括图片、JavaScript和样式表，其中还包含了那些找不到的资源。这就是为什么你经常会看到counter.status.404.star-star，这是返回了HTTP 404 (NOT FOUND)状态的请求数。/metrics接口会返回所有的可用度量值，但你也可能只对某个值感兴趣。要获取单个值，请求时可以在URL后加上对应的键名。例如，要查看空闲内存大小,可以向/metrics/mem.free发一个GET请求。定制Actuator修改接口ID每个Actuator接口都有一个ID用来决定接口的路径，比方说，/beans接口的默认ID就是beans。比如要修改/beans为 /instances，则设置如下：123endpoints: beans: id: instances启用和禁用接口虽然Actuator的接口都很有用，但你不一定需要全部这些接口。默认情况下，所有接口（除了/shutdown）都启用。比如要禁用 /metrics 接口，则可以设置如下：123endpoints: metrics: enabled: false如果你只想打开一两个接口，那就先禁用全部接口，然后启用那几个你要的，这样更方便。1234endpoints: enabled: false metrics: enabled: true参考文章：https://www.jianshu.com/p/af9738634a21。源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/21.Spring-Boot-Actuator。]]></content>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot整合Swagger2构建RESTful API]]></title>
    <url>%2Fblog%2FSpring-Boot-Swagger2-RESTful-API.html</url>
    <content type="text"><![CDATA[Swagger是一款可以快速生成符合RESTful风格API并进行在线调试的插件。本文将介绍如何在Spring Boot中整合Swagger。在此之前，我们先聊聊什么是REST。REST实际上为Representational State Transfer的缩写，翻译为“表现层状态转化” 。如果一个架构符合REST 原则，就称它为RESTful架构。实际上，“表现层状态转化”省略了主语，完整的说应该是“资源表现层状态转化”。什么是资源（Resource）？资源指的是网络中信息的表现形式，比如一段文本，一首歌，一个视频文件等等；什么是表现层（Reresentational）？表现层即资源的展现在你面前的形式，比如文本可以是JSON格式的，也可以是XML形式的，甚至为二进制形式的。图片可以是gif，也可以是PNG；什么是状态转换（State Transfer）？用户可使用URL通过HTTP协议来获取各种资源，HTTP协议包含了一些操作资源的方法，比如：GET 用来获取资源， POST 用来新建资源 , PUT 用来更新资源， DELETE 用来删除资源， PATCH 用来更新资源的部分属性。通过这些HTTP协议的方法来操作资源的过程即为状态转换。下面对比下传统URL请求和RESTful风格请求的区别：描述传统请求方法RESTful请求方法查询/user/query?name=mrbirdGET/user?name=mrbirdGET详情/user/getInfo?id=1GET/user/1GET创建/user/create?name=mrbirdPOST/userPOST修改/user/update?name=mrbird&amp;id=1POST/user/1PUT删除/user/delete?id=1GET/user/1DELETE从上面这张表，我们大致可以总结下传统请求和RESTful请求的几个区别：传统请求通过URL来描述行为，如create，delete等；RESTful请求通过URL来描述资源。RESTful请求通过HTTP请求的方法来描述行为，比如DELETE，POST，PUT等，并且使用HTTP状态码来表示不同的结果。RESTful请求通过JSON来交换数据。RESTful只是一种风格，并不是一种强制性的标准。引入Swagger依赖本文使用的Swagger版本为2.6.1：12345678910&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.6.1&lt;/version&gt;&lt;/dependency&gt;配置SwaggerConfig使用JavaConfig的形式配置Swagger：1234567891011121314151617181920212223242526272829303132import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;@Configuration@EnableSwagger2public class SwaggerConfig &#123; @Bean public Docket buildDocket() &#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(buildApiInf()) .select() .apis(RequestHandlerSelectors.basePackage("com.example.demo.controller")) .paths(PathSelectors.any()) .build(); &#125; private ApiInfo buildApiInf() &#123; return new ApiInfoBuilder() .title("系统RESTful API文档") .contact(new Contact("mrbird", "https://mrbird.cc", "852252810@qq.com")) .version("1.0") .build(); &#125;&#125;在配置类中添加@EnableSwagger2注解来启用Swagger2，apis()定义了扫描的包路径。配置较为简单，其他不做过多说明。Swagger常用注解@Api：修饰整个类，描述Controller的作用；@ApiOperation：描述一个类的一个方法，或者说一个接口；@ApiParam：单个参数描述；@ApiModel：用对象来接收参数；@ApiProperty：用对象接收参数时，描述对象的一个字段；@ApiResponse：HTTP响应其中1个描述；@ApiResponses：HTTP响应整体描述；@ApiIgnore：使用该注解忽略这个API；@ApiError ：发生错误返回的信息；@ApiImplicitParam：一个请求参数；@ApiImplicitParams：多个请求参数。编写RESTful API接口Spring Boot中包含了一些注解，对应于HTTP协议中的方法：@GetMapping对应HTTP中的GET方法；@PostMapping对应HTTP中的POST方法；@PutMapping对应HTTP中的PUT方法；@DeleteMapping对应HTTP中的DELETE方法；@PatchMapping对应HTTP中的PATCH方法。我们使用这些注解来编写一个RESTful测试Controller：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.DeleteMapping;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.PutMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import com.example.demo.domain.User;import io.swagger.annotations.Api;import io.swagger.annotations.ApiImplicitParam;import io.swagger.annotations.ApiImplicitParams;import io.swagger.annotations.ApiOperation;import springfox.documentation.annotations.ApiIgnore;@Api(value = "用户Controller")@Controller@RequestMapping("user")public class UserController &#123; @ApiIgnore @GetMapping("hello") public @ResponseBody String hello() &#123; return "hello"; &#125; @ApiOperation(value = "获取用户信息", notes = "根据用户id获取用户信息") @ApiImplicitParam(name = "id", value = "用户id", required = true, dataType = "Long", paramType = "path") @GetMapping("/&#123;id&#125;") public @ResponseBody User getUserById(@PathVariable(value = "id") Long id) &#123; User user = new User(); user.setId(id); user.setName("mrbird"); user.setAge(25); return user; &#125; @ApiOperation(value = "获取用户列表", notes = "获取用户列表") @GetMapping("/list") public @ResponseBody List&lt;User&gt; getUserList() &#123; List&lt;User&gt; list = new ArrayList&lt;&gt;(); User user1 = new User(); user1.setId(1l); user1.setName("mrbird"); user1.setAge(25); list.add(user1); User user2 = new User(); user2.setId(2l); user2.setName("scott"); user2.setAge(29); list.add(user2); return list; &#125; @ApiOperation(value = "新增用户", notes = "根据用户实体创建用户") @ApiImplicitParam(name = "user", value = "用户实体", required = true, dataType = "User") @PostMapping("/add") public @ResponseBody Map&lt;String, Object&gt; addUser(@RequestBody User user) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put("result", "success"); return map; &#125; @ApiOperation(value = "删除用户", notes = "根据用户id删除用户") @ApiImplicitParam(name = "id", value = "用户id", required = true, dataType = "Long", paramType = "path") @DeleteMapping("/&#123;id&#125;") public @ResponseBody Map&lt;String, Object&gt; deleteUser(@PathVariable(value = "id") Long id) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put("result", "success"); return map; &#125; @ApiOperation(value = "更新用户", notes = "根据用户id更新用户") @ApiImplicitParams(&#123; @ApiImplicitParam(name = "id", value = "用户id", required = true, dataType = "Long", paramType = "path"), @ApiImplicitParam(name = "user", value = "用户实体", required = true, dataType = "User") &#125;) @PutMapping("/&#123;id&#125;") public @ResponseBody Map&lt;String, Object&gt; updateUser(@PathVariable(value = "id") Long id, @RequestBody User user) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); map.put("result", "success"); return map; &#125;&#125;对于不需要生成API的方法或者类，只需要在上面添加@ApiIgnore注解即可。启动&amp;测试启动项目，访问http://localhost:8080/swagger-ui.html即可看到Swagger给我们生成的API页面：点击接口下的“Try it out”Swagger会用curl命令发送请求，并且返回响应信息，如下所示:源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/20.Spring-Boot-Swagger2]]></content>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Swagger</tag>
        <tag>RESTful</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot中编写单元测试]]></title>
    <url>%2Fblog%2FSpring-Boot%20TESTing.html</url>
    <content type="text"><![CDATA[编写单元测试可以帮助开发人员编写高质量的代码，提升代码质量，减少Bug，便于重构。Spring Boot提供了一些实用程序和注解，用来帮助我们测试应用程序，在Spring Boot中开启单元测试只需引入spring-boot-starter-test即可，其包含了一些主流的测试库。本文主要介绍基于 Service和Controller的单元测试。引入spring-boot-starter-test：12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;运行Maven命令dependency:tree可看到其包含了以下依赖：123456789101112131415161718[INFO] +- org.springframework.boot:spring-boot-starter-test:jar:1.5.9.RELEASE:test[INFO] | +- org.springframework.boot:spring-boot-test:jar:1.5.9.RELEASE:test[INFO] | +- org.springframework.boot:spring-boot-test-autoconfigure:jar:1.5.9.RELEASE:test[INFO] | +- com.jayway.jsonpath:json-path:jar:2.2.0:test[INFO] | | +- net.minidev:json-smart:jar:2.2.1:test[INFO] | | | \- net.minidev:accessors-smart:jar:1.1:test[INFO] | | | \- org.ow2.asm:asm:jar:5.0.3:test[INFO] | | \- org.slf4j:slf4j-api:jar:1.7.25:compile[INFO] | +- junit:junit:jar:4.12:test[INFO] | +- org.assertj:assertj-core:jar:2.6.0:test[INFO] | +- org.mockito:mockito-core:jar:1.10.19:test[INFO] | | \- org.objenesis:objenesis:jar:2.1:test[INFO] | +- org.hamcrest:hamcrest-core:jar:1.3:test[INFO] | +- org.hamcrest:hamcrest-library:jar:1.3:test[INFO] | +- org.skyscreamer:jsonassert:jar:1.4.0:test[INFO] | | \- com.vaadin.external.google:android-json:jar:0.0.20131108.vaadin1:test[INFO] | +- org.springframework:spring-core:jar:4.3.13.RELEASE:compile[INFO] | \- org.springframework:spring-test:jar:4.3.13.RELEASE:testJUnit，标准的单元测试Java应用程序；Spring Test &amp; Spring Boot Test，对Spring Boot应用程序的单元测试提供支持；Mockito, Java mocking框架，用于模拟任何Spring管理的Bean，比如在单元测试中模拟一个第三方系统Service接口返回的数据，而不会去真正调用第三方系统；AssertJ，一个流畅的assertion库，同时也提供了更多的期望值与测试返回值的比较方式；Hamcrest，库的匹配对象（也称为约束或谓词）；JsonPath，提供类似XPath那样的符号来获取JSON数据片段；JSONassert，对JSON对象或者JSON字符串断言的库。一个标准的Spring Boot测试单元应有如下的代码结构：123456789import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;@RunWith(SpringRunner.class)@SpringBootTestpublic class ApplicationTest &#123; &#125;知识准备JUnit4注解JUnit4中包含了几个比较重要的注解：@BeforeClass、@AfterClass、@Before、@After和@Test。其中， @BeforeClass和@AfterClass在每个类加载的开始和结束时运行，必须为静态方法；而@Before和@After则在每个测试方法开始之前和结束之后运行。见如下例子：123456789101112131415161718192021222324252627282930313233343536@RunWith(SpringRunner.class)@SpringBootTestpublic class TestApplicationTests &#123; @BeforeClass public static void beforeClassTest() &#123; System.out.println("before class test"); &#125; @Before public void beforeTest() &#123; System.out.println("before test"); &#125; @Test public void Test1() &#123; System.out.println("test 1+1=2"); Assert.assertEquals(2, 1 + 1); &#125; @Test public void Test2() &#123; System.out.println("test 2+2=4"); Assert.assertEquals(4, 2 + 2); &#125; @After public void afterTest() &#123; System.out.println("after test"); &#125; @AfterClass public static void afterClassTest() &#123; System.out.println("after class test"); &#125;&#125;运行输出如下：12345678910...before class testbefore testtest 1+1=2after testbefore testtest 2+2=4after testafter class test...从上面的输出可以看出各个注解的运行时机。Assert上面代码中，我们使用了Assert类提供的assert口方法，下面列出了一些常用的assert方法：assertEquals(&quot;message&quot;,A,B)，判断A对象和B对象是否相等，这个判断在比较两个对象时调用了equals()方法。assertSame(&quot;message&quot;,A,B)，判断A对象与B对象是否相同，使用的是==操作符。assertTrue(&quot;message&quot;,A)，判断A条件是否为真。assertFalse(&quot;message&quot;,A)，判断A条件是否不为真。assertNotNull(&quot;message&quot;,A)，判断A对象是否不为null。assertArrayEquals(&quot;message&quot;,A,B)，判断A数组与B数组是否相等。MockMvc下文中，对Controller的测试需要用到MockMvc技术。MockMvc，从字面上来看指的是模拟的MVC，即其可以模拟一个MVC环境，向Controller发送请求然后得到响应。在单元测试中，使用MockMvc前需要进行初始化，如下所示：123456789private MockMvc mockMvc;@Autowiredprivate WebApplicationContext wac;@Beforepublic void setupMockMvc()&#123; mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();&#125;MockMvc模拟MVC请求模拟一个get请求：1mockMvc.perform(MockMvcRequestBuilders.get("/hello?name=&#123;name&#125;","mrbird"));模拟一个post请求：1mockMvc.perform(MockMvcRequestBuilders.post("/user/&#123;id&#125;", 1));模拟文件上传：1mockMvc.perform(MockMvcRequestBuilders.fileUpload("/fileupload").file("file", "文件内容".getBytes("utf-8")));模拟请求参数：1234// 模拟发送一个message参数，值为hellomockMvc.perform(MockMvcRequestBuilders.get("/hello").param("message", "hello"));// 模拟提交一个checkbox值，name为hobby，值为sleep和eatmockMvc.perform(MockMvcRequestBuilders.get("/saveHobby").param("hobby", "sleep", "eat"));也可以直接使用MultiValueMap构建参数：12345MultiValueMap&lt;String, String&gt; params = new LinkedMultiValueMap&lt;String, String&gt;();params.add("name", "mrbird");params.add("hobby", "sleep");params.add("hobby", "eat");mockMvc.perform(MockMvcRequestBuilders.get("/hobby/save").params(params));模拟发送JSON参数：12String jsonStr = "&#123;\"username\":\"Dopa\",\"passwd\":\"ac3af72d9f95161a502fd326865c2f15\",\"status\":\"1\"&#125;";mockMvc.perform(MockMvcRequestBuilders.post("/user/save").content(jsonStr.getBytes()));实际测试中，要手动编写这么长的JSON格式字符串很繁琐也很容易出错，可以借助Spring Boot自带的Jackson技术来序列化一个Java对象（可参考Spring Boot中的JSON技术），如下所示：1234567User user = new User();user.setUsername("Dopa");user.setPasswd("ac3af72d9f95161a502fd326865c2f15");user.setStatus("1");String userJson = mapper.writeValueAsString(user);mockMvc.perform(MockMvcRequestBuilders.post("/user/save").content(userJson.getBytes()));其中，mapper为com.fasterxml.jackson.databind.ObjectMapper对象。模拟Session和Cookie：12mockMvc.perform(MockMvcRequestBuilders.get("/index").sessionAttr(name, value));mockMvc.perform(MockMvcRequestBuilders.get("/index").cookie(new Cookie(name, value)));设置请求的Content-Type：1mockMvc.perform(MockMvcRequestBuilders.get("/index").contentType(MediaType.APPLICATION_JSON_UTF8));设置返回格式为JSON：1mockMvc.perform(MockMvcRequestBuilders.get("/user/&#123;id&#125;", 1).accept(MediaType.APPLICATION_JSON));模拟HTTP请求头：1mockMvc.perform(MockMvcRequestBuilders.get("/user/&#123;id&#125;", 1).header(name, values));MockMvc处理返回结果期望成功调用，即HTTP Status为200：12mockMvc.perform(MockMvcRequestBuilders.get("/user/&#123;id&#125;", 1)) .andExpect(MockMvcResultMatchers.status().isOk());期望返回内容是application/json：12mockMvc.perform(MockMvcRequestBuilders.get("/user/&#123;id&#125;", 1)) .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON));检查返回JSON数据中某个值的内容：12mockMvc.perform(MockMvcRequestBuilders.get("/user/&#123;id&#125;", 1)) .andExpect(MockMvcResultMatchers.jsonPath("$.username").value("mrbird"));这里使用到了jsonPath，$代表了JSON的根节点。更多关于jsonPath的介绍可参考 https://github.com/json-path/JsonPath。判断Controller方法是否返回某视图：12mockMvc.perform(MockMvcRequestBuilders.post("/index")) .andExpect(MockMvcResultMatchers.view().name("index.html"));比较Model：1234mockMvc.perform(MockMvcRequestBuilders.get("/user/&#123;id&#125;", 1)) .andExpect(MockMvcResultMatchers.model().size(1)) .andExpect(MockMvcResultMatchers.model().attributeExists("password")) .andExpect(MockMvcResultMatchers.model().attribute("username", "mrbird"));比较forward或者redirect：12345mockMvc.perform(MockMvcRequestBuilders.get("/index")) .andExpect(MockMvcResultMatchers.forwardedUrl("index.html"));// 或者mockMvc.perform(MockMvcRequestBuilders.get("/index")) .andExpect(MockMvcResultMatchers.redirectedUrl("index.html"));比较返回内容，使用content()：1234567891011// 返回内容为hellomockMvc.perform(MockMvcRequestBuilders.get("/index")) .andExpect(MockMvcResultMatchers.content().string("hello"));// 返回内容是XML，并且与xmlCotent一样mockMvc.perform(MockMvcRequestBuilders.get("/index")) .andExpect(MockMvcResultMatchers.content().xml(xmlContent));// 返回内容是JSON ，并且与jsonContent一样mockMvc.perform(MockMvcRequestBuilders.get("/index")) .andExpect(MockMvcResultMatchers.content().json(jsonContent));输出响应结果：12mockMvc.perform(MockMvcRequestBuilders.get("/index")) .andDo(MockMvcResultHandlers.print());测试Service现有如下Service：1234567891011121314@Repository("userService")public class UserServiceImpl extends BaseService&lt;User&gt; implements UserService &#123; @Override public User findByName(String userName) &#123; Example example = new Example(User.class); example.createCriteria().andCondition("username=", userName); List&lt;User&gt; userList = this.selectByExample(example); if (userList.size() != 0) return userList.get(0); else return null; &#125;&#125;编写一个该Service的单元测试，测试findByName方法是否有效：12345678910111213@RunWith(SpringRunner.class)@SpringBootTestpublic class UserServiceTest &#123; @Autowired UserService userService; @Test public void test() &#123; User user = this.userService.findByName("scott"); Assert.assertEquals("用户名为scott", "scott", user.getUsername()); &#125;&#125;运行后，JUnit没有报错说明测试通过，即UserService的findByName方法可行。 此外，和在Controller中引用Service相比，在测试单元中对Service测试完毕后，数据能自动回滚，只需要在测试方法上加上@Transactional注解，比如:1234567891011@Test@Transactionalpublic void test() &#123; User user = new User(); user.setId(this.userService.getSequence("seq_user")); user.setUsername("JUnit"); user.setPasswd("123456"); user.setStatus("1"); user.setCreateTime(new Date()); this.userService.save(user);&#125;运行，测试通过，查看数据库发现数据并没有被插入，这样很好的避免了不必要的数据污染。测试Controller现有如下Controller：123456789101112131415@RestControllerpublic class UserController &#123; @Autowired UserService userService; @GetMapping("user/&#123;userName&#125;") public User getUserByName(@PathVariable(value = "userName") String userName) &#123; return this.userService.findByName(userName); &#125; @PostMapping("user/save") public void saveUser(@RequestBody User user) &#123; this.userService.saveUser(user); &#125;&#125;现在编写一个针对于该ControllergetUserByName(@PathVariable(value = &quot;userName&quot;) String userName)方法的测试类：123456789101112131415161718192021222324@RunWith(SpringRunner.class)@SpringBootTestpublic class UserControllerTest &#123; private MockMvc mockMvc; @Autowired private WebApplicationContext wac; @Before public void setupMockMvc()&#123; mockMvc = MockMvcBuilders.webAppContextSetup(wac).build(); &#125; @Test public void test() throws Exception &#123; mockMvc.perform( MockMvcRequestBuilders.get("/user/&#123;userName&#125;", "scott") .contentType(MediaType.APPLICATION_JSON_UTF8)) .andExpect(MockMvcResultMatchers.status().isOk()) .andExpect(MockMvcResultMatchers.jsonPath("$.username").value("scott")) .andDo(MockMvcResultHandlers.print()); &#125;&#125;运行后，JUnit通过，控制台输出过程如下所示：12345678910111213141516171819202122232425262728293031323334MockHttpServletRequest: HTTP Method = GET Request URI = /user/scott Parameters = &#123;&#125; Headers = &#123;Content-Type=[application/json;charset=UTF-8]&#125;Handler: Type = demo.springboot.test.controller.UserController Method = public demo.springboot.test.domain.User demo.springboot.test.controller.UserController.getUserByName(java.lang.String)Async: Async started = false Async result = nullResolved Exception: Type = nullModelAndView: View name = null View = null Model = nullFlashMap: Attributes = nullMockHttpServletResponse: Status = 200 Error message = null Headers = &#123;Content-Type=[application/json;charset=UTF-8]&#125; Content type = application/json;charset=UTF-8 Body = &#123;&quot;id&quot;:23,&quot;username&quot;:&quot;scott&quot;,&quot;passwd&quot;:&quot;ac3af72d9f95161a502fd326865c2f15&quot;,&quot;createTime&quot;:1514535399000,&quot;status&quot;:&quot;1&quot;&#125; Forwarded URL = null Redirected URL = null Cookies = []继续编写一个针对于该ControllersaveUser(@RequestBody User user)方法的测试类：1234567891011121314151617181920212223242526272829303132333435@RunWith(SpringRunner.class)@SpringBootTestpublic class UserControllerTest &#123; private MockMvc mockMvc; @Autowired private WebApplicationContext wac; @Autowired ObjectMapper mapper; @Before public void setupMockMvc()&#123; mockMvc = MockMvcBuilders.webAppContextSetup(wac).build(); &#125; @Test @Transactional public void test() throws Exception &#123; User user = new User(); user.setUsername("Dopa"); user.setPasswd("ac3af72d9f95161a502fd326865c2f15"); user.setStatus("1"); String userJson = mapper.writeValueAsString(user); mockMvc.perform( MockMvcRequestBuilders.post("/user/save") .contentType(MediaType.APPLICATION_JSON_UTF8) .content(userJson.getBytes())) .andExpect(MockMvcResultMatchers.status().isOk()) .andDo(MockMvcResultHandlers.print()); &#125;&#125;运行过程如下所示：12345678910111213141516171819202122232425262728293031323334MockHttpServletRequest: HTTP Method = POST Request URI = /user/save Parameters = &#123;&#125; Headers = &#123;Content-Type=[application/json;charset=UTF-8]&#125;Handler: Type = demo.springboot.test.controller.UserController Method = public void demo.springboot.test.controller.UserController.saveUser(demo.springboot.test.domain.User)Async: Async started = false Async result = nullResolved Exception: Type = nullModelAndView: View name = null View = null Model = nullFlashMap: Attributes = nullMockHttpServletResponse: Status = 200 Error message = null Headers = &#123;&#125; Content type = null Body = Forwarded URL = null Redirected URL = null Cookies = []值得注意的是，在一个完整的系统中编写测试单元时，可能需要模拟一个登录用户信息Session，MockMvc也提供了解决方案，可在初始化的时候模拟一个HttpSession：123456789101112131415private MockMvc mockMvc;private MockHttpSession session;@Autowiredprivate WebApplicationContext wac;@Beforepublic void setupMockMvc()&#123; mockMvc = MockMvcBuilders.webAppContextSetup(wac).build(); session = new MockHttpSession(); User user =new User(); user.setUsername("Dopa"); user.setPasswd("ac3af72d9f95161a502fd326865c2f15"); session.setAttribute("user", user); &#125;源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/19.Spring-Boot-Testing]]></content>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot中的JSON技术]]></title>
    <url>%2Fblog%2FSpring-Boot%20JSON.html</url>
    <content type="text"><![CDATA[平日里在项目中处理JSON一般用的都是阿里巴巴的Fastjson，后来发现使用Spring Boot内置的Jackson来完成JSON的序列化和反序列化操作也挺方便。Jackson不但可以完成简单的序列化和反序列化操作，也能实现复杂的个性化的序列化和反序列化操作。自定义ObjectMapper我们都知道，在Spring中使用@ResponseBody注解可以将方法返回的对象序列化成JSON，比如：12345678@RequestMapping("getuser")@ResponseBodypublic User getUser() &#123; User user = new User(); user.setUserName("mrbird"); user.setBirthday(new Date()); return user;&#125;User类：123456789public class User implements Serializable &#123; private static final long serialVersionUID = 6222176558369919436L; private String userName; private int age; private String password; private Date birthday; ...&#125;访问getuser页面输出：1&#123;"userName":"mrbird","age":0,"password":null,"birthday":1522634892365&#125;可看到时间默认以时间戳的形式输出，如果想要改变这个默认行为，我们可以自定义一个ObjectMapper来替代：12345678910111213141516import java.text.SimpleDateFormat;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import com.fasterxml.jackson.databind.ObjectMapper;@Configurationpublic class JacksonConfig &#123; @Bean public ObjectMapper getObjectMapper()&#123; ObjectMapper mapper = new ObjectMapper(); mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")); return mapper; &#125;&#125;上面配置获取了ObjectMapper对象，并且设置了时间格式。再次访问getuser，页面输出：1&#123;"userName":"mrbird","age":0,"password":null,"birthday":"2018-04-02 10:14:24"&#125;序列化Jackson通过使用mapper的writeValueAsString方法将Java对象序列化为JSON格式字符串：1234567891011121314151617@AutowiredObjectMapper mapper;@RequestMapping("serialization")@ResponseBodypublic String serialization() &#123; try &#123; User user = new User(); user.setUserName("mrbird"); user.setBirthday(new Date()); String str = mapper.writeValueAsString(user); return str; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null;&#125;反序列化使用@ResponseBody注解可以使对象序列化为JSON格式字符串，除此之外，Jackson也提供了反序列化方法。树遍历当采用树遍历的方式时，JSON被读入到JsonNode对象中，可以像操作XML DOM那样读取JSON。比如：1234567891011121314151617@AutowiredObjectMapper mapper;@RequestMapping("readjsonstring")@ResponseBodypublic String readJsonString() &#123; try &#123; String json = "&#123;\"name\":\"mrbird\",\"age\":26&#125;"; JsonNode node = this.mapper.readTree(json); String name = node.get("name").asText(); int age = node.get("age").asInt(); return name + " " + age; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null;&#125;readTree方法可以接受一个字符串或者字节数组、文件、InputStream等， 返回JsonNode作为根节点，你可以像操作XML DOM那样操作遍历JsonNode以获取数据。解析多级JSON例子：1234String json = "&#123;\"name\":\"mrbird\",\"hobby\":&#123;\"first\":\"sleep\",\"second\":\"eat\"&#125;&#125;";;JsonNode node = this.mapper.readTree(json);JsonNode hobby = node.get("hobby");String first = hobby.get("first").asText();绑定对象我们也可以将Java对象和JSON数据进行绑定，如下所示：1234567891011121314151617@AutowiredObjectMapper mapper;@RequestMapping("readjsonasobject")@ResponseBodypublic String readJsonAsObject() &#123; try &#123; String json = "&#123;\"name\":\"mrbird\",\"age\":26&#125;"; User user = mapper.readValue(json, User.class); String name = user.getUserName(); int age = user.getAge(); return name + " " + age; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null;&#125;Jackson注解Jackson包含了一些实用的注解：@JsonProperty@JsonProperty，作用在属性上，用来为JSON Key指定一个别名。12@JsonProperty("bth")private Date birthday;再次访问getuser页面输出：1&#123;"userName":"mrbird","age":0,"password":null,"bth":"2018-04-02 10:38:37"&#125;key birthday已经被替换为了bth。@Jsonlgnore@Jsonlgnore，作用在属性上，用来忽略此属性。12@JsonIgnoreprivate String password;再次访问getuser页面输出：1&#123;"userName":"mrbird","age":0,"bth":"2018-04-02 10:40:45"&#125;password属性已被忽略。@JsonIgnoreProperties@JsonIgnoreProperties，忽略一组属性，作用于类上，比如JsonIgnoreProperties({ &quot;password&quot;, &quot;age&quot; })。1234@JsonIgnoreProperties(&#123; "password", "age" &#125;)public class User implements Serializable &#123; ...&#125;再次访问getuser页面输出：1&#123;"userName":"mrbird","bth":"2018-04-02 10:45:34"&#125;@JsonFormat@JsonFormat，用于日期格式化，如：12@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")private Date birthday;@JsonNaming@JsonNaming，用于指定一个命名策略，作用于类或者属性上。Jackson自带了多种命名策略，你可以实现自己的命名策略，比如输出的key 由Java命名方式转为下面线命名方法 —— userName转化为user-name。1234@JsonNaming(PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy.class)public class User implements Serializable &#123; ...&#125;再次访问getuser页面输出：1&#123;"user_name":"mrbird","bth":"2018-04-02 10:52:12"&#125;@JsonSerialize@JsonSerialize，指定一个实现类来自定义序列化。类必须实现JsonSerializer接口，代码如下：123456789101112131415161718import java.io.IOException;import com.example.pojo.User;import com.fasterxml.jackson.core.JsonGenerator;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.JsonSerializer;import com.fasterxml.jackson.databind.SerializerProvider;public class UserSerializer extends JsonSerializer&lt;User&gt; &#123; @Override public void serialize(User user, JsonGenerator generator, SerializerProvider provider) throws IOException, JsonProcessingException &#123; generator.writeStartObject(); generator.writeStringField("user-name", user.getUserName()); generator.writeEndObject(); &#125;&#125;上面的代码中我们仅仅序列化userName属性，且输出的key是user-name。 使用注解@JsonSerialize来指定User对象的序列化方式：1234@JsonSerialize(using = UserSerializer.class)public class User implements Serializable &#123; ...&#125;再次访问getuser页面输出：1&#123;"user-name":"mrbird"&#125;@JsonDeserialize@JsonDeserialize，用户自定义反序列化，同@JsonSerialize ，类需要实现JsonDeserializer接口。123456789101112131415161718192021import java.io.IOException;import com.example.pojo.User;import com.fasterxml.jackson.core.JsonParser;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.DeserializationContext;import com.fasterxml.jackson.databind.JsonDeserializer;import com.fasterxml.jackson.databind.JsonNode;public class UserDeserializer extends JsonDeserializer&lt;User&gt; &#123; @Override public User deserialize(JsonParser parser, DeserializationContext context) throws IOException, JsonProcessingException &#123; JsonNode node = parser.getCodec().readTree(parser); String userName = node.get("user-name").asText(); User user = new User(); user.setUserName(userName); return user; &#125;&#125;使用注解@JsonDeserialize来指定User对象的序列化方式：1234@JsonDeserialize (using = UserDeserializer.class)public class User implements Serializable &#123; ...&#125;测试：12345678910111213141516@AutowiredObjectMapper mapper;@RequestMapping("readjsonasobject")@ResponseBodypublic String readJsonAsObject() &#123; try &#123; String json = "&#123;\"user-name\":\"mrbird\"&#125;"; User user = mapper.readValue(json, User.class); String name = user.getUserName(); return name; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null;&#125;访问readjsonasobject，页面输出：1mrbird@JsonView@JsonView，作用在类或者属性上，用来定义一个序列化组。 比如对于User对象，某些情况下只返回userName属性就行，而某些情况下需要返回全部属性。 因此User对象可以定义成如下：12345678910111213141516171819public class User implements Serializable &#123; private static final long serialVersionUID = 6222176558369919436L; public interface UserNameView &#123;&#125;; public interface AllUserFieldView extends UserNameView &#123;&#125;; @JsonView(UserNameView.class) private String userName; @JsonView(AllUserFieldView.class) private int age; @JsonView(AllUserFieldView.class) private String password; @JsonView(AllUserFieldView.class) private Date birthday; ... &#125;User定义了两个接口类，一个为userNameView，另外一个为AllUserFieldView继承了userNameView接口。这两个接口代表了两个序列化组的名称。属性userName使用了@JsonView(UserNameView.class)，而剩下属性使用了@JsonView(AllUserFieldView.class)。Spring中Controller方法允许使用@JsonView指定一个组名，被序列化的对象只有在这个组的属性才会被序列化，代码如下：1234567891011@JsonView(User.UserNameView.class)@RequestMapping("getuser")@ResponseBodypublic User getUser() &#123; User user = new User(); user.setUserName("mrbird"); user.setAge(26); user.setPassword("123456"); user.setBirthday(new Date()); return user;&#125;访问getuser页面输出：1&#123;"userName":"mrbird"&#125;如果将@JsonView(User.UserNameView.class)替换为@JsonView(User.AllUserFieldView.class)，输出：1&#123;"userName":"mrbird","age":26,"password":"123456","birthday":"2018-04-02 11:24:00"&#125;因为接口AllUserFieldView继承了接口UserNameView所以userName也会被输出。集合的反序列化在Controller方法中，可以使用＠RequestBody将提交的JSON自动映射到方法参数上，比如：12345@RequestMapping("updateuser")@ResponseBodypublic int updateUser(@RequestBody List&lt;User&gt; list)&#123; return list.size();&#125;上面方法可以接受如下一个JSON请求，并自动映射到User对象上：1[&#123;"userName":"mrbird","age":26&#125;,&#123;"userName":"scott","age":27&#125;]Spring Boot 能自动识别出List对象包含的是User类，因为在方法中定义的泛型的类型会被保留在字节码中，所以Spring Boot能识别List包含的泛型类型从而能正确反序列化。有些情况下，集合对象并没有包含泛型定义，如下代码所示，反序列化并不能得到期望的结果。1234567891011121314@AutowiredObjectMapper mapper;@RequestMapping("customize")@ResponseBodypublic String customize() throws JsonParseException, JsonMappingException, IOException &#123; String jsonStr = "[&#123;\"userName\":\"mrbird\",\"age\":26&#125;,&#123;\"userName\":\"scott\",\"age\":27&#125;]"; List&lt;User&gt; list = mapper.readValue(jsonStr, List.class); String msg = ""; for (User user : list) &#123; msg += user.getUserName(); &#125; return msg;&#125;访问customize，控制台抛出异常：java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to com.example.pojo.User这是因为在运行时刻，泛型己经被擦除了（不同于方法参数定义的泛型，不会被擦除）。为了提供泛型信息，Jackson提供了JavaType ，用来指明集合类型，将上述方法改为：123456789101112131415@AutowiredObjectMapper mapper;@RequestMapping("customize")@ResponseBodypublic String customize() throws JsonParseException, JsonMappingException, IOException &#123; String jsonStr = "[&#123;\"userName\":\"mrbird\",\"age\":26&#125;,&#123;\"userName\":\"scott\",\"age\":27&#125;]"; JavaType type = mapper.getTypeFactory().constructParametricType(List.class, User.class); List&lt;User&gt; list = mapper.readValue(jsonStr, type); String msg = ""; for (User user : list) &#123; msg += user.getUserName(); &#125; return msg;&#125;访问customize，页面输出：mrbirdscott。源码连接https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/18.Spring-Boot-Jackson]]></content>
      <tags>
        <tag>Spring Boot</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Jsoup防御XSS攻击]]></title>
    <url>%2Fblog%2FJsoup%20XSS.html</url>
    <content type="text"><![CDATA[跨站脚本攻击(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。使用Jsoup可以有效的过滤不安全的代码。Jsoup使用白名单的机制来预防XSS攻击，比如白名单中规定只允许&lt;span&gt;标签的存在，那么其他标签都会被过滤掉。常见的XSS攻击比如页面的某个表单允许用户输入任意内容，当某个调皮的用户输入如下内容： 保存后，你会发现页面文字都变成了红色！或者输入&lt;script&gt;for(var i=0;i&lt;10;i++){alert(&quot;fuck you&quot;);}&lt;/script&gt;，保存后页面将弹窗10次！引入Jsoup使用Maven构建一个简单的Spring Boot项目，在pom中引入：12345&lt;dependency&gt; &lt;groupId&gt;org.jsoup&lt;/groupId&gt; &lt;artifactId&gt;jsoup&lt;/artifactId&gt; &lt;version&gt;1.9.2&lt;/version&gt;&lt;/dependency&gt;JsoupUtil创建一个JsoupUtil工具类：1234567891011121314151617181920212223242526272829import java.io.FileNotFoundException;import java.io.IOException;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.safety.Whitelist;/** * Xss过滤工具 * */public class JsoupUtil &#123; private static final Whitelist whitelist = Whitelist.basicWithImages(); /* * 配置过滤化参数,不对代码进行格式化 */ private static final Document.OutputSettings outputSettings = new Document.OutputSettings().prettyPrint(false); static &#123; /* * 富文本编辑时一些样式是使用style来进行实现的 比如红色字体 style="color:red;" 所以需要给所有标签添加style属性 */ whitelist.addAttributes(":all", "style"); &#125; public static String clean(String content) &#123; return Jsoup.clean(content, "", whitelist, outputSettings); &#125;&#125;这里采用的白名单为basicWithImages，Jsoup内置了几种常见的白名单供我们选择，如下表所示：白名单对象标签说明none无只保留标签内文本内容simpleTextb,em,i,strong,u简单的文本标签basica,b,blockquote,br,cite,code,dd,dl,dt,em,i,li,ol,p,pre,q,small,span,strike,strong,sub,sup,u,ul基本使用的标签basicWithImagesbasic 的基础上添加了 img 标签及 img 标签的 src,align,alt,height,width,title 属性基本使用的加上 img 标签relaxeda,b,blockquote,br,caption,cite,code,col,colgroup,dd,div,dl,dt,em,h1,h2,h3,h4,h5,h6,i,img,li,ol,p,pre,q,small,span,strike,strong,sub,sup,table,tbody,td,tfoot,th,thead,tr,u,ul在 basicWithImages 的基础上又增加了一部分部分标签XssHttpServletRequestWrapper创建一个XssHttpServletRequestWrapper，同过重写getParameter()，getParameterValues()和getHeader()方法来过滤HTTP请求中参数包含的恶意字符：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletRequestWrapper;import org.apache.commons.lang.StringUtils;import cc.mrbird.common.util.JsoupUtil;/** * Jsoup过滤http请求，防止Xss攻击 * */public class XssHttpServletRequestWrapper extends HttpServletRequestWrapper &#123; HttpServletRequest orgRequest = null; private boolean isIncludeRichText = false; public XssHttpServletRequestWrapper(HttpServletRequest request, boolean isIncludeRichText) &#123; super(request); orgRequest = request; this.isIncludeRichText = isIncludeRichText; &#125; /** * 覆盖getParameter方法，将参数名和参数值都做xss过滤如果需要获得原始的值，则通过super.getParameterValues(name)来获取 * getParameterNames,getParameterValues和getParameterMap也可能需要覆盖 */ @Override public String getParameter(String name) &#123; if (("content".equals(name) || name.endsWith("WithHtml")) &amp;&amp; !isIncludeRichText) &#123; return super.getParameter(name); &#125; name = JsoupUtil.clean(name); String value = super.getParameter(name); if (StringUtils.isNotBlank(value)) &#123; value = JsoupUtil.clean(value); &#125; return value; &#125; @Override public String[] getParameterValues(String name) &#123; String[] arr = super.getParameterValues(name); if (arr != null) &#123; for (int i = 0; i &lt; arr.length; i++) &#123; arr[i] = JsoupUtil.clean(arr[i]); &#125; &#125; return arr; &#125; /** * 覆盖getHeader方法，将参数名和参数值都做xss过滤如果需要获得原始的值，则通过super.getHeaders(name)来获取 * getHeaderNames 也可能需要覆盖 */ @Override public String getHeader(String name) &#123; name = JsoupUtil.clean(name); String value = super.getHeader(name); if (StringUtils.isNotBlank(value)) &#123; value = JsoupUtil.clean(value); &#125; return value; &#125; /** * 获取原始的request */ public HttpServletRequest getOrgRequest() &#123; return orgRequest; &#125; /** * 获取原始的request的静态方法 */ public static HttpServletRequest getOrgRequest(HttpServletRequest req) &#123; if (req instanceof XssHttpServletRequestWrapper) &#123; return ((XssHttpServletRequestWrapper) req).getOrgRequest(); &#125; return req; &#125;&#125;XssFilter创建XssFilter，同过使用上面定义的XssHttpServletRequestWrapper类中的getParameter()等方法来保证参数得到了过滤：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.regex.Matcher;import java.util.regex.Pattern;import javax.servlet.Filter;import javax.servlet.FilterChain;import javax.servlet.FilterConfig;import javax.servlet.ServletException;import javax.servlet.ServletRequest;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.BooleanUtils;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;/** * Xss攻击拦截器 * */public class XssFilter implements Filter &#123; private static Logger logger = LoggerFactory.getLogger(XssFilter.class); // 是否过滤富文本内容 private static boolean IS_INCLUDE_RICH_TEXT = false; public List&lt;String&gt; excludes = new ArrayList&lt;String&gt;(); @Override public void init(FilterConfig filterConfig) throws ServletException &#123; logger.info("------------ xss filter init ------------"); String isIncludeRichText = filterConfig.getInitParameter("isIncludeRichText"); if (StringUtils.isNotBlank(isIncludeRichText)) &#123; IS_INCLUDE_RICH_TEXT = BooleanUtils.toBoolean(isIncludeRichText); &#125; String temp = filterConfig.getInitParameter("excludes"); if (temp != null) &#123; String[] url = temp.split(","); for (int i = 0; url != null &amp;&amp; i &lt; url.length; i++) &#123; excludes.add(url[i]); &#125; &#125; &#125; @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; HttpServletRequest req = (HttpServletRequest) request; HttpServletResponse resp = (HttpServletResponse) response; if (handleExcludeURL(req, resp)) &#123; chain.doFilter(request, response); return; &#125; XssHttpServletRequestWrapper xssRequest = new XssHttpServletRequestWrapper((HttpServletRequest) request, IS_INCLUDE_RICH_TEXT); chain.doFilter(xssRequest, response); &#125; @Override public void destroy() &#123; &#125; private boolean handleExcludeURL(HttpServletRequest request, HttpServletResponse response) &#123; if (excludes == null || excludes.isEmpty()) &#123; return false; &#125; String url = request.getServletPath(); for (String pattern : excludes) &#123; Pattern p = Pattern.compile("^" + pattern); Matcher m = p.matcher(url); if (m.find()) return true; &#125; return false; &#125;&#125;Spring Boot中配置XssFilter使用JavaConfig的形式配置：12345678910111213@Beanpublic FilterRegistrationBean xssFilterRegistrationBean() &#123; FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean(); filterRegistrationBean.setFilter(new XssFilter()); filterRegistrationBean.setOrder(1); filterRegistrationBean.setEnabled(true); filterRegistrationBean.addUrlPatterns("/*"); Map&lt;String, String&gt; initParameters = new HashMap&lt;String, String&gt;(); initParameters.put("excludes", "/favicon.ico,/img/*,/js/*,/css/*"); initParameters.put("isIncludeRichText", "true"); filterRegistrationBean.setInitParameters(initParameters); return filterRegistrationBean;&#125;参考文章：https://blog.csdn.net/u014411966/article/details/78164752https://www.jianshu.com/p/32abc12a175a?nomobile=yes]]></content>
      <tags>
        <tag>Security</tag>
        <tag>Spring Boot</tag>
        <tag>Jsoup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[腾讯云部署Java Web项目小记]]></title>
    <url>%2Fblog%2Ftecent%20cloud%20Java-Web.html</url>
    <content type="text"><![CDATA[近期腾讯云推出云服务器团购优惠，刚好打算搭建个FEBS的演示环境，于是买了台120/年的云服务器，配置为1核2G、1M带宽，加赠50GB对象存储空间，系统为Ubuntu 16.04。部署过程中遇到一些新的问题，在这记录一下。工具准备搭建前先准备好远程登录软件，这类软件很多，这里推荐的是MobaXterm；文件的上传下载推荐使用FileZilla；数据库连接推荐使用Navicat Premium。Java环境搭建Java环境的搭建可参考（包括安装JDK，MySQL）：ubuntu16-04搭建Java开发环境。Tomcat下载后解压即可。远程连接MySQL开启MySQL远程连接的前提是在安装MySQL初始化的时候允许远程连接，然后输入以下命令：1mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'IDENTIFIED BY '123456' WITH GRANT OPTION;这段话的意思是允许任何IP以root账户远程访问，密码为123456。这里的密码设定只是为了演示，实际必须满足在初始化MySQL时密码强度的设定，即validate_password_policy：PolicyTests Performed0&nbsp;or&nbsp;LOWLength1&nbsp;or&nbsp;MEDIUMLength; numeric, lowercase/uppercase, and special characters2&nbsp;or&nbsp;STRONGLength; numeric, lowercase/uppercase, and special characters; dictionary file当密码强度和设定的不一致时，MySQL提示 Your password does not satisfy the current policy requirements错误。然后执行一下语句，使得设定生效：1mysql&gt; FLUSH PRIVILEGES;接下来使用Navicat远程连接MySQL，打开Navicat，新建MySQL连接：IP填云服务器的公网IP地址，用户名和密码为上面设定的root和123456。除此之外，还得填写SSH连接信息：IP填云服务器的公网IP地址，用户名和密码为云服务器的用户名和密码。点击连接测试后发现Navicat报错：Lost connection to MySQL server at &#39;reading initial communication packet&#39;, system error: 0打开MySQL配置：1vim /etc/mysql/mysql.conf.d/mysqld.cnf找到[mysqld]，添加skip-name-resolve，并将bind-address= 127.0.0.1配置注释掉即可，如下所示：然后再次点击Navicat连接测试即可成功。项目部署在本地将项目打包后，使用FileZilla将项目上传到Tomcat的webapp目录下，运行bin目录下的startup.sh脚本即可。域名绑定如下新增域名解析：记录值为云服务器的公网IP地址。配置解析后，就可使用 域名:端口号/项目名 的形式访问了。比如http://demo.mrbird.cc:80/febs/login，端口号默认就是80，所以可以简写为http://demo.mrbird.cc/febs/login。]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Spring Boot和Shiro的后台管理系统FEBS]]></title>
    <url>%2Fblog%2FSpring-Boot%20Shiro%20FEBS.html</url>
    <content type="text"><![CDATA[FEBS是一个简单高效的后台权限管理系统。项目基础框架采用全新的Java Web开发框架 —— Spring Boot2.0.3，消除了繁杂的XML配置，使得二次开发更为简单；数据访问层采用Mybatis，同时引入了通用Mapper和PageHelper插件，可快速高效的对单表进行增删改查操作，消除了大量传统XML配置SQL的代码；安全框架采用时下流行的Apache Shiro，可实现对按钮级别的权限控制；前端页面使用Bootstrap构建，主题风格为时下Google最新设计语言Material Design，并提供多套配色以供选择。FEBS意指：Fast，Easy use，Beautiful和Safe。功能模块系统功能模块组成如下所示：1234567891011121314151617181920212223242526272829303132|-------------------------------------------|| ______ ______ ____ _____ || | ____| ____| _ \ / ____| || | |__ | |__ | |_) | (___ || | __| | __| | _ &lt; \___ \ || | | | |____| |_) |____) | || |_| |______|____/|_____/ || Spring-Boot-Version: 2.0.3.RELEASE ||-------------------------------------------|├─系统管理│ ├─字典管理│ ├─用户管理│ ├─菜单管理│ ├─角色管理│ └─部门管理├─系统监控│ ├─在线用户│ └─系统日志├─任务调度│ ├─定时任务│ └─调度日志└─网络资源 ├─One一个 │ ├─散文 │ ├─绘画 │ └─语文 ├─天气查询 ├─影视资讯 │ ├─即将上映 │ └─正在热映 └─每日一文技术选型后端基础框架：Spring Boot 2.0.3.RELEASE持久层框架：Mybatis 3.4.5安全框架：Apache Shiro 1.4.0摸板引擎：Thymeleaf 3.0.9.RELEASE数据库连接池：阿里巴巴Druid 1.1.10缓存框架：Ehcache日志打印：logback其他：fastjson，poi，javacsv，quartz等。前端基础框架：Bootstrap 4JavaScript框架：jQuery消息组件：Bootstrap notify提示框插件：SweetAlert2树形插件：jsTree树形表格插件：jqTreeGrid表格插件：BootstrapTable表单校验插件：jQuery-validate多选下拉框插件：multiple-select图表插件：Highcharts时间插件：daterangepicker开发环境语言：Java 8IDE：Eclipse Oxygen &amp; IDEA 2018.1.4(Ultimate Edition)依赖管理：Maven数据库：Oracle 11g &amp; MySQL5.7版本管理：SVN，git系统预览主题预览下载部署码云地址： https://gitee.com/github-16661027/projectGitHub 地址： https://github.com/wuyouzhuguli/FEBS下载后以Maven项目的方式导入Eclipse或者IDEA。开发时直接使用Spring Boot的入口类cc.mrbird.Application启动即可，访问地址localhost:8080，账号mrbird，密码123456。部署时，使用Maven将项目打包成febs.jar，然后使用命令java -jar febs.jar启动即可。在Linux下部署Spring Boot jar，并编写启停脚本可参考链接https://mrbird.cc/Linux%20Spring-Boot-jar.html。常见问题如何下载代码手动下载下载Oracle版本：分支选择master，然后点击 download zip即可，如下图所示：下载MySQL版本：分支选择mysql，然后点击 download zip即可，如下图所示：Git命令下载oracle版本：1git clone https://github.com/wuyouzhuguli/FEBS.git下载mysql版本：1git clone -b mysql https://github.com/wuyouzhuguli/FEBS.gitServlet依赖问题启动项目后报Servlet依赖未找到，比如：Post-processing of merged bean definition failed; nested exception is java.lang.NoClassDefFoundError: javax/servlet/ServletRequest出现这个问题一般是使用IDEA的同学，解决办法：打开pom文件，然后下图中的&lt;scope&gt;provided&lt;/scope&gt;去掉：表不存在这个问题一般出现在Linux环境下的MySQL数据库中，Linux下的MySQL数据库默认开启了大小写敏感，即t_user和T_USER是两个完全不同的表。解决办法：将代码中的表名大小写改为和数据库一致（不推荐！繁琐又容易出错）；关闭MySQL大小写敏感，可参考：https://blog.csdn.net/fdipzone/article/details/73692929。Oracle驱动依赖问题以ojdbc6为例，由于版权的原因，我们需要将ojdbc6.jar依赖安装到本地的maven仓库，然后才可以在pom中进行配置。下载ojdbc6.jar文件后，将其放到比较好找的目录下，比如D盘根目录。然后运行以下命令：1234567891011121314C:\Users\Administrator&gt;mvn install:install-file -Dfile=D:/ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=6.0 -Dpackaging=jar -DgeneratePom=true...[INFO] --- maven-install-plugin:2.4:install-file (default-cli) @ standalone-pom ---[INFO] Installing D:\ojdbc6.jar to D:\m2\repository\com\oracle\ojdbc6\6.0\ojdbc6-6.0.jar[INFO] Installing C:\Users\ADMINI~1\AppData\Local\Temp\mvninstall9103688544010617483.pom to D:\m2\repository\com\oracle\ojdbc6\6.0\ojdbc6-6.0.pom[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 0.940 s[INFO] Finished at: 2017-08-13T15:06:38+08:00[INFO] Final Memory: 6M/145M[INFO] ------------------------------------------------------------------------接着在pom中引入：12345&lt;dependency&gt; &lt;groupId&gt;com.oracle&lt;/groupId&gt; &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt; &lt;version&gt;6.0&lt;/version&gt;&lt;/dependency&gt;这里的groupid就是你之前安装时指定的-Dgroupid的值，artifactid就是你安装时指定的-Dartifactid的值，version也一样。]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Shiro</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树形插件jsTree]]></title>
    <url>%2Fblog%2F%E6%A0%91%E5%BD%A2%E6%8F%92%E4%BB%B6jsTree.html</url>
    <content type="text"><![CDATA[jsTree是一款基于jQuery的树形控件，具有扩展性强，可编辑和可配置的特性，支持HTML，JSON和Ajax数据加载。jsTree官网地址：https://www.jstree.com/。这里主要介绍的是基于Ajax从数据库获取数据，然后生成树形菜单的用法。jsTree的皮肤可以自由定制，本文使用的是一款第三方jsTree皮肤。引入依赖因为其基于jQuery，所以引入jsTree依赖前得先引入jQuery：1234&lt;!-- jQuery --&gt;&lt;script src="https://cdn.bootcss.com/jquery/2.2.0/jquery.min.js"&gt;&lt;/script&gt;&lt;!-- jsTree --&gt;&lt;script src="https://cdn.bootcss.com/jstree/3.3.5/jstree.min.js"&gt;&lt;/script&gt;由于第三方皮肤没有CDN地址，所以我们下载到本地后手动引入（可在文末得源码中获取）：1&lt;link rel="stylesheet" data-th-href="@&#123;css/jsTree/style.min.css&#125;"&gt;皮肤预览： 数据准备本文用到的数据表：12345678910111213141516171819202122-- ------------------------------ Table structure for T_DEPT-- ----------------------------DROP TABLE "MRBIRD"."T_DEPT";CREATE TABLE "MRBIRD"."T_DEPT" ("DEPT_ID" NUMBER NOT NULL ,"PARENT_ID" NUMBER NOT NULL ,"DEPT_NAME" VARCHAR2(100 BYTE) NOT NULL ,"ORDER_NUM" NUMBER NULL ,"CREATE_TIME" DATE NULL );-- ------------------------------ Records of T_DEPT-- ----------------------------INSERT INTO "MRBIRD"."T_DEPT" VALUES ('1', '0', '开发部', null, TO_DATE('2018-01-04 15:42:26', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_DEPT" VALUES ('3', '1', '开发二部', null, TO_DATE('2018-01-04 15:42:29', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_DEPT" VALUES ('5', '0', '人事部', null, TO_DATE('2018-01-04 15:42:32', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_DEPT" VALUES ('2', '1', '开发一部', null, TO_DATE('2018-01-04 15:42:34', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_DEPT" VALUES ('4', '0', '市场部', null, TO_DATE('2018-01-04 15:42:36', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_DEPT" VALUES ('6', '0', '测试部', null, TO_DATE('2018-01-04 15:42:38', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_DEPT" VALUES ('7', '2', '一部分部', null, TO_DATE('2018-03-16 10:46:31', 'YYYY-MM-DD HH24:MI:SS'));后端框架为Spring Boot + Mybatis（通用mapper），由于本文的重点是jsTree的使用，所以获取数据的细节和数据格式的处理这里不做阐述，具体可参考文末的源码。最终通过Ajax获取到的JSON数据如下所示：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102&#123; "code": 0, "msg": &#123; "id": "0", "icon": null, "url": null, "text": "根节点", "state": &#123; "opened": true &#125;, "checked": true, "attributes": null, "children": [&#123; "id": "1", "icon": null, "url": null, "text": "开发部", "state": null, "checked": false, "attributes": null, "children": [&#123; "id": "3", "icon": null, "url": null, "text": "开发二部", "state": null, "checked": false, "attributes": null, "children": [], "parentId": "1", "hasParent": true, "hasChildren": false &#125;, &#123; "id": "2", "icon": null, "url": null, "text": "开发一部", "state": null, "checked": false, "attributes": null, "children": [&#123; "id": "7", "icon": null, "url": null, "text": "一部分部", "state": null, "checked": false, "attributes": null, "children": [], "parentId": "2", "hasParent": true, "hasChildren": false &#125;], "parentId": "1", "hasParent": true, "hasChildren": true &#125;], "parentId": "0", "hasParent": false, "hasChildren": true &#125;, &#123; "id": "5", "icon": null, "url": null, "text": "人事部", "state": null, "checked": false, "attributes": null, "children": [], "parentId": "0", "hasParent": false, "hasChildren": false &#125;, &#123; "id": "4", "icon": null, "url": null, "text": "市场部", "state": null, "checked": false, "attributes": null, "children": [], "parentId": "0", "hasParent": false, "hasChildren": false &#125;, &#123; "id": "6", "icon": null, "url": null, "text": "测试部", "state": null, "checked": false, "attributes": null, "children": [], "parentId": "0", "hasParent": false, "hasChildren": false &#125;], "parentId": "", "hasParent": false, "hasChildren": true &#125;&#125;基本使用方法使用Ajax从后台获取到如上所示格式的JSON数据（也就是r.msg）,然后使用jsTree生成树形控件：HTML:1&lt;div id="deptTree"&gt;&lt;/div&gt;JavaScript:1234567891011121314151617&lt;script data-th-inline="javascript"&gt;var ctx = [[@&#123;/&#125;]];$(function() &#123; createDeptTree();&#125;);function createDeptTree() &#123; $.post(ctx + "dept/tree", &#123;&#125;, function(r) &#123; var data = r.msg; $('#deptTree').jstree(&#123; "core": &#123; 'data': data.children &#125; &#125;); &#125;)&#125;&lt;/script&gt;效果如下所示：div.deptTree{padding:1rem;width:25%;border:1px solid #efefef}$("#deptTree1").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]}})常用操作上面介绍了最基本的jsTree使用方法，下面开始介绍一些常用的jsTree操作。显示CheckboxJavaScript代码如下所示：123456$('#deptTree').jstree(&#123; "core": &#123; 'data': data.children &#125;, "plugins" : [ "checkbox" ]&#125;);显示效果如下：$("#deptTree2").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox"]})此时，被选中的选项默认会有浅蓝色的背景，如果想要去除，只需将js代码改为：123456789$('#deptTree').jstree(&#123; "core": &#123; 'data': data.children &#125;, "plugins" : [ "checkbox" ], "checkbox" : &#123; "keep_selected_style" : false &#125;&#125;);效果如下所示：$("#deptTree3").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox"],checkbox:{keep_selected_style:!1}})Wholerow插件该插件可以给选中的项目或者hover的项目添加一个行级别的背景色，js代码如下所示：123456$('#deptTree').jstree(&#123; "core": &#123; 'data': data.children &#125;, "plugins" : [ "checkbox", "wholerow" ]&#125;);效果如下所示：$("#deptTree4").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox","wholerow"]})添加该插件后，控件前的虚线没了，具体原因未知=。=取消父子关联默认情况下，选中父节点后，其下的所有子节点也会跟着被选中，取消父子节点关联只需添加&quot;checkbox&quot;: {&quot;three_state&quot;: false}即可：123456789$('#deptTree').jstree(&#123; "core": &#123; 'data': data.children &#125;, "plugins" : [ "checkbox" ], "checkbox": &#123; "three_state": false // 取消选择父节点后选中所有子节点 &#125;,&#125;);效果如下所示：$("#deptTree5").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox"],checkbox:{three_state:!1}})设置单选设置单选的前提是必须先取消父子关联，然后在core里添加：12345678910$('#deptTree').jstree(&#123; "core": &#123; 'data': data.children, 'multiple': false // 取消多选 &#125;, "plugins" : [ "checkbox" ], "checkbox": &#123; "three_state": false // 取消选择父节点后选中所有子节点 &#125;,&#125;);效果如下所示：$("#deptTree6").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}],multiple:!1},plugins:["checkbox"],checkbox:{three_state:!1}})全部展开如果需要初始化控件的时候展开树，可调用jsTree的open_all()方法：12345678$('#deptTree').jstree(&#123; "core": &#123; 'data': data.children &#125;, "plugins" : [ "checkbox" ]&#125;).on("loaded.jstree", function (event, data) &#123; $('#deptTree').jstree().open_all();&#125;);或者设置state：123456789$('#deptTree').jstree(&#123; "core": &#123; 'data': data.children &#125;, "plugins" : [ "checkbox", "state" ], 'state': &#123; "opened": true, &#125;&#125;);效果如下所示：$("#deptTree7").jstree({core:{state:{opened:!0},data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox"]}).on("loaded.jstree",function(e,l){$("#deptTree7").jstree().open_all()})默认选中jsTree可以在初始化后默认选中某些节点：12345678910111213$('#deptTree').jstree(&#123; "core": &#123; 'data': data.children &#125;, "plugins" : [ "checkbox" ], "checkbox": &#123; "three_state": false &#125;,&#125;).on("loaded.jstree", function (event, data) &#123; $('#deptTree').jstree().open_all(); $('#deptTree').jstree('select_node', [5, 7], true); console.log($('#deptTree').jstree(true).get_selected()); // ["5", "7"]&#125;);效果如下所示：$("#deptTree8").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox"],checkbox:{three_state:!1}}).on("loaded.jstree",function(e,l){$("#deptTree8").jstree().open_all(),$("#deptTree8").jstree("select_node",[5,7],!0)})绑定选取监听jsTree可以在选中和取消选中的时候绑定监听事件：123456789$('#deptTree').jstree(&#123; "core": &#123; 'data': data.children &#125;, "plugins" : [ "checkbox" ]&#125;).on("changed.jstree", function (e, data) &#123; console.log(data.changed.selected); // newly selected console.log(data.changed.deselected); // newly deselected&#125;);效果如下所示：$("#deptTree9").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox","changed"],checkbox:{three_state:!1}}).on("loaded.jstree",function(e,l){$("#deptTree9").jstree().open_all()}).on("changed.jstree",function(e,l){l.changed.selected.length&&alert("选中节点ID："+l.changed.selected),l.changed.deselected.length&&alert("取消选中节点ID："+l.changed.deselected)})附录其他方法和属性可参考官方文档（官方文档写的比较抽象=。=）：https://www.jstree.com/api/。源码链接：https://drive.google.com/open?id=17rdibWmH9CunPP9vs9sQrJPj5FefzoHj]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery Validate表单校验插件]]></title>
    <url>%2Fblog%2FjQuery-Validate.html</url>
    <content type="text"><![CDATA[jQuery Validate 插件为表单提供了强大的验证功能，让客户端表单验证变得更简单，同时提供了大量的定制选项，满足应用程序各种需求。该插件捆绑了一套有用的验证方法，包括 URL 和电子邮件验证，同时提供了一个用来编写用户自定义方法的 API。官网地址为：https://jqueryvalidation.org/。引入依赖引入Bootstrap（jQuery Validate并不依赖于Bootstap，这里引入Bootstrap是为了用于构建表单）：1234567&lt;link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css"&gt;&lt;!-- jQuery --&gt;&lt;script src="http://ajax.aspnetcdn.com/ajax/jquery/jquery-2.0.0.min.js"&gt;&lt;/script&gt;&lt;!-- popper --&gt;&lt;script src="https://cdn.bootcss.com/popper.js/1.12.9/umd/popper.min.js"&gt;&lt;/script&gt;&lt;!-- bootstrap --&gt;&lt;script src="https://cdn.bootcss.com/bootstrap/4.0.0/js/bootstrap.min.js"&gt;&lt;/script&gt;引入jQuery Validate依赖：1234&lt;!-- jquery-validate --&gt;&lt;script src="https://cdn.bootcss.com/jquery-validate/1.17.0/jquery.validate.js"&gt;&lt;/script&gt;&lt;script src="https://cdn.bootcss.com/jquery-validate/1.17.0/additional-methods.js"&gt;&lt;/script&gt;&lt;script src="https://cdn.bootcss.com/jquery-validate/1.17.0/localization/messages_zh.js"&gt;&lt;/script&gt;jquery.validate.js为核心代码；additional-methods.js为扩展的校验方法，一般我们自定义的校验方法都放到这个文件里；messages_zh.js为中文汉化包。默认校验规则jquery.validate.js为我们提供了一系列的默认校验规则：序号规则描述1required:true必须输入的字段。2remote:”check.php”使用 ajax 方法调用 check.php 验证输入值。3email:true必须输入正确格式的电子邮件。4url:true必须输入正确格式的网址。5date:true必须输入正确格式的日期。日期校验 ie6 出错，慎用。6dateISO:true必须输入正确格式的日期（ISO），例如：2009-06-23，1998/01/22。只验证格式，不验证有效性。7number:true必须输入合法的数字（负数，小数）。8digits:true必须输入整数。9creditcard:必须输入合法的信用卡号。10equalTo:”#field”输入值必须和 #field 相同。11accept:输入拥有合法后缀名的字符串（上传文件的后缀）。12maxlength:5输入长度最多是 5 的字符串（汉字算一个字符）。当为checkbox时，指选中个数。13minlength:10输入长度最小是 10 的字符串（汉字算一个字符）。当为checkbox时，指选中个数。14rangelength:[5,10]输入长度必须介于 5 和 10 之间的字符串（汉字算一个字符）。当为checkbox时，指选中个数。15range:[5,10]输入值必须介于 5 和 10 之间。16max:5输入值不能大于 5。17min:10输入值不能小于 10。默认的提示（messages_zh.js）：12345678910111213141516171819$.extend($.validator.messages, &#123; required: "这是必填字段", remote: "请修正此字段", email: "请输入有效的电子邮件地址", url: "请输入有效的网址", date: "请输入有效的日期", dateISO: "请输入有效的日期 (YYYY-MM-DD)", number: "请输入有效的数字", digits: "只能输入数字", creditcard: "请输入有效的信用卡号码", equalTo: "你的输入不相同", extension: "请输入有效的后缀", maxlength: $.validator.format("最多可以输入 &#123;0&#125; 个字符"), minlength: $.validator.format("最少要输入 &#123;0&#125; 个字符"), rangelength: $.validator.format("请输入长度在 &#123;0&#125; 到 &#123;1&#125; 之间的字符串"), range: $.validator.format("请输入范围在 &#123;0&#125; 到 &#123;1&#125; 之间的数值"), max: $.validator.format("请输入不大于 &#123;0&#125; 的数值"), min: $.validator.format("请输入不小于 &#123;0&#125; 的数值")&#125;);自定义校验除了使用自带的校验方法外，我们也可以添加自己的校验方法，比如添加手机号码格式的校验方法：1234jQuery.validator.addMethod("checkPhone", function(value, element, params) &#123; var checkPhone = /^0?(13[0-9]|15[012356789]|17[013678]|18[0-9]|14[57])[0-9]&#123;8&#125;$/; return this.optional(element) || (checkPhone.test(value));&#125;, "请输入正确的手机号");value值当前校验的值，element为校验的元素，params为校验参数。自定义的校验方法一般都添加到additional-methods.js。错误信息提示当校验不通过时，默认错误信息会插入到校验元素的后面，但当校验元素是radio或者checkbox的时候，错误信息的位置需要进行调整：调整方法：12345678errorPlacement: function(error, element) &#123; //指定错误信息位置 if (element.is(':radio') || element.is(':checkbox')) &#123; //如果是radio或checkbox var eid = element.attr('name'); //获取元素的name属性 error.appendTo(element.parent().parent()); //将错误信息添加当前元素的父元素的父元素后面(根据实际html结构进行调整) &#125; else &#123; error.insertAfter(element); &#125;&#125;调整后： 后端校验remote选项用于后端校验，比如校验用户名的唯一性等：12345678910remote: &#123; url: "user/checkUserName", type: "get", dataType: "json", data: &#123; username: function() &#123; return $("input[name='username']").val(); &#125; &#125;&#125;后端返回boolean类型即可。实例编写个form表单：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;form class="form"&gt; &lt;div class="form-group"&gt; &lt;label&gt;用户名&lt;/label&gt; &lt;input type="text" class="form-control" name="userName" placeholder="用户名"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;密码&lt;/label&gt; &lt;input type="password" class="form-control" name="password" placeholder="密码"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;确认密码&lt;/label&gt; &lt;input type="password" class="form-control" name="confirm_password" placeholder="请再次输入密码"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;手机号&lt;/label&gt; &lt;input type="text" class="form-control" name="phone" placeholder="手机号"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;邮箱&lt;/label&gt; &lt;input type="text" class="form-control" name="email" placeholder="邮箱"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;地址&lt;/label&gt; &lt;select class="form-control" name="address"&gt; &lt;option value=""&gt;- 请选择 -&lt;/option&gt; &lt;option value="1"&gt;福州&lt;/option&gt; &lt;option value="2"&gt;厦门&lt;/option&gt; &lt;option value="3"&gt;龙岩&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;爱好&lt;/label&gt; &lt;div class="form-check form-check-inline"&gt; &lt;input class="form-check-input" type="checkbox" name="hobby" value="1"&gt; &lt;label class="form-check-label"&gt;游泳&lt;/label&gt; &lt;/div&gt; &lt;div class="form-check form-check-inline"&gt; &lt;input class="form-check-input" type="checkbox" name="hobby" value="2"&gt; &lt;label class="form-check-label"&gt;唱歌&lt;/label&gt; &lt;/div&gt; &lt;div class="form-check form-check-inline"&gt; &lt;input class="form-check-input" type="checkbox" name="hobby" value="3"&gt; &lt;label class="form-check-label"&gt;睡觉&lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;性别&lt;/label&gt; &lt;div class="form-check form-check-inline"&gt; &lt;input class="form-check-input" type="radio" name="sex" value="1"&gt; &lt;label class="form-check-label"&gt;男&lt;/label&gt; &lt;/div&gt; &lt;div class="form-check form-check-inline"&gt; &lt;input class="form-check-input" type="radio" name="sex" value="2"&gt; &lt;label class="form-check-label"&gt;女&lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;上传图片&lt;/label&gt; &lt;input type="file" class="form-control-file" name="file"&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;div class="form-check form-check-inline"&gt; &lt;input type="checkbox" class="form-check-input" name="subscribe"&gt; &lt;label class="form-check-label"&gt;订阅&lt;/label&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;订阅方式&lt;/label&gt; &lt;div class="form-check form-check-inline"&gt; &lt;input class="form-check-input" type="radio" name="stype" value="1"&gt; &lt;label class="form-check-label"&gt;RSS&lt;/label&gt; &lt;/div&gt; &lt;div class="form-check form-check-inline"&gt; &lt;input class="form-check-input" type="radio" name="stype" value="2"&gt; &lt;label class="form-check-label"&gt;邮箱订阅&lt;/label&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt;&lt;button id="submit" class="btn btn-primary"&gt;Submit&lt;/button&gt;&lt;button id="reset" class="btn btn-danger"&gt;Reset&lt;/button&gt;绑定校验规则等：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111jQuery.validator.addMethod("checkPhone", function(value, element, params) &#123; var checkPhone = /^0?(13[0-9]|15[012356789]|17[013678]|18[0-9]|14[57])[0-9]&#123;8&#125;$/; return this.optional(element) || (checkPhone.test(value));&#125;, "请输入正确的手机号");$(function() &#123; validateRule(); $("#submit").on('click', function() &#123; var validator = $(".form").validate(); var flag = validator.form(); if (flag) &#123; alert("true"); &#125; else &#123; alert("false"); &#125; &#125;); $("#reset").on('click', function() &#123; var validator = $(".form").validate(); validator.resetForm(); &#125;);&#125;);function validateRule() &#123; $(".form").validate(&#123; rules: &#123; userName: &#123; required: true, minlength: 3, maxlength: 10 &#125;, password: &#123; required: true, minlength: 5 &#125;, confirm_password: &#123; required: true, minlength: 5, equalTo: "[name='password']" &#125;, address: &#123; required: true &#125;, phone: &#123; checkPhone: true &#125;, email: &#123; required: true, email: true &#125;, hobby: &#123; required: true, minlength: 2 &#125;, sex: &#123; required: true &#125;, file: &#123; required: true, accept: "image/jpg,image/jpeg,image/png,image/gif" &#125;, stype: &#123; required: "[name='subscribe']:checked" &#125; &#125;, messages: &#123; userName: &#123; required: "请输入用户名", minlength: "用户名长度不能少于&#123;0&#125;个字符", maxlength: "用户名长度不能超过&#123;0&#125;个字符" &#125;, password: &#123; required: "请输入密码", minlength: "密码长度不能小于&#123;0&#125;个字母" &#125;, confirm_password: &#123; required: "请输入密码", minlength: "密码长度不能小于&#123;0&#125;个字母", equalTo: "两次密码输入不一致" &#125;, address: &#123; required: "请选择地址" &#125;, email: &#123; required: "请输入邮箱", email: "邮箱格式不正确" &#125;, hobby: &#123; required: "请选择爱好", minlength: "至少选择&#123;0&#125;项爱好" &#125;, sex: &#123; required: "请选择性别" &#125;, file: &#123; required: "请上传附件", accept: "只支持jpg，jpeg，png或gif后缀的图片" &#125;, stype: &#123; required: "请选择订阅方式" &#125; &#125;, errorPlacement: function(error, element) &#123; if (element.is(':radio') || element.is(':checkbox')) &#123; var eid = element.attr('name'); error.appendTo(element.parent().parent()); &#125; else &#123; error.insertAfter(element); &#125; &#125; &#125;);&#125;这里提下关于附件的格式问题，其限定的不是文件格式后缀，而是文件的MIME类型，具体可参考：BootstrapValidator指南中列举的MIME类型。演示效果如下：See the Pen jquery-validation by wuyouzhuguli (@mrbird) on CodePen.源码地址：https://drive.google.com/open?id=1lyUVNyX5VkxN3GqQz0_y_oBX3twMxPAh其他使用事项可参考：http://www.runoob.com/jquery/jquery-plugin-validate.htmlhttps://jqueryvalidation.org/documentation/]]></content>
      <tags>
        <tag>Bootstrap</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树形表格插件jQuery TreeGrid]]></title>
    <url>%2Fblog%2FjQuery-TreeGrid.html</url>
    <content type="text"><![CDATA[借助树形表格插件jQuery TreeGrid，我们可以以表格的形式来展现那些带有层级关系的数据，比如部门上下级，菜单表等。jQuery TreeGrid的官方地址为：http://maxazan.github.io/jquery-treegrid/。由于这里的使用环境为bootstrap，原始的jQuery TreeGrid插件显得不是那么的灵活和美观，为了在bootstrap中无缝的使用该插件，这里引用了经过二次封装的jQuery TreeGrid插件jquery.treegrid.extension.js，作者为：http://www.cnblogs.com/landeanfen/p/6776152.html。引入依赖首先先引入bootstrap相关的依赖：1234&lt;link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css"&gt;&lt;script src="http://code.jquery.com/jquery-2.0.0.min.js"&gt;&lt;/script&gt;&lt;script src="https://cdn.bootcss.com/popper.js/1.12.9/umd/popper.min.js"&gt;&lt;/script&gt;&lt;script src="https://cdn.bootcss.com/bootstrap/4.0.0/js/bootstrap.min.js"&gt;&lt;/script&gt;然后引入jQuery TreeGrid依赖以及jquery.treegrid.extension.js ：12345&lt;!-- jquery.treegrid --&gt;&lt;link rel="stylesheet" data-th-href="@&#123;css/jqTreeGrid/jquery.treegrid.css&#125;"&gt;&lt;script data-th-src="@&#123;js/jqTreeGrid/jquery.treegrid.js&#125;"&gt;&lt;/script&gt;&lt;!-- jquery.treegrid.extension --&gt;&lt;script data-th-src="@&#123;js/jqTreeGrid/jquery.treegrid.extension.js&#125;"&gt;&lt;/script&gt;因为bootstrap没有自带图标组件，为了下文的使用，这里引入font-awesome:1&lt;link href="https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.css" rel="stylesheet"&gt;数据使用的数据表：12345678910111213141516171819202122-- ------------------------------ Table structure for T_DEPT-- ----------------------------DROP TABLE "MRBIRD"."T_DEPT";CREATE TABLE "MRBIRD"."T_DEPT" ("DEPT_ID" NUMBER NOT NULL ,"PARENT_ID" NUMBER NOT NULL ,"DEPT_NAME" VARCHAR2(100 BYTE) NOT NULL ,"ORDER_NUM" NUMBER NULL ,"CREATE_TIME" DATE NULL );-- ------------------------------ Records of T_DEPT-- ----------------------------INSERT INTO "MRBIRD"."T_DEPT" VALUES ('7', '2', '开发一部福州分部', null, TO_DATE('2018-03-15 09:32:15', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_DEPT" VALUES ('1', '0', '开发部', null, TO_DATE('2018-01-04 15:42:26', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_DEPT" VALUES ('3', '1', '开发二部', null, TO_DATE('2018-01-04 15:42:29', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_DEPT" VALUES ('5', '0', '人事部', null, TO_DATE('2018-01-04 15:42:32', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_DEPT" VALUES ('2', '1', '开发一部', null, TO_DATE('2018-01-04 15:42:34', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_DEPT" VALUES ('4', '0', '市场部', null, TO_DATE('2018-01-04 15:42:36', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_DEPT" VALUES ('6', '0', '测试部', null, TO_DATE('2018-01-04 15:42:38', 'YYYY-MM-DD HH24:MI:SS'));后端框架为Spring Boot + MyBatis（通用mapper和pagehelper插件），获取数据的具体细节这里不再描述，可参考文末的源码。使用编写一个简单的页面：1234567891011121314151617&lt;form class="form"&gt; &lt;div class="row"&gt; &lt;div class="col"&gt; &lt;div class="input-group"&gt; &lt;span class="input-group-addon"&gt;部门名称：&lt;/span&gt; &lt;div class="form-group"&gt; &lt;input type="text" name="deptName" class="form-control"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="col"&gt; &lt;button type="button" class="btn btn-success" onclick="refresh()"&gt;重置&lt;/button&gt; &lt;button type="button" class="btn btn-primary" onclick="search()"&gt;搜索&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt;&lt;table id="deptTreeTable" data-mobile-responsive="true" class="mb-bootstrap-table text-nowrap"&gt;&lt;/table&gt;jQuery TreeGrid插件的使用：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354var ctx = [[@&#123;/&#125;]];$(function() &#123; initDeptTreeTable();&#125;);function initDeptTreeTable() &#123; $('#deptTreeTable').bootstrapTreeTable(&#123; id: 'deptId', // 选取记录返回的值 code: 'deptId', // 用于设置父子关系 parentCode: 'parentId', // 用于设置父子关系 rootCodeValue: null, //设置根节点code值----可指定根节点，默认为null,"",0,"0" data: [], // 构造table的数据集合，如果是ajax请求则不必填写 type: "GET", // 请求数据的ajax类型 url: ctx + 'dept/list', // 请求数据的ajax的url ajaxParams: &#123; deptName: $(".form").find("input[name='deptName']").val().trim() &#125;, // 请求数据的ajax的data属性 expandColumn: 2, // 在哪一列上面显示展开按钮 expandAll: true, // 是否全部展开 striped: true, // 是否各行渐变色 columns: [&#123; field: 'selectItem', checkbox: true &#125;, &#123; title: '编号', field: 'deptId', width: '50px' &#125;, &#123; title: '名称', field: 'deptName' &#125;, &#123; title: '创建时间', field: 'createTime' &#125; ], // 设置列 toolbar: null, //顶部工具条 height: 0, expanderExpandedClass: 'fa fa-chevron-down', // 展开的按钮的图标 expanderCollapsedClass: 'fa fa-chevron-up' // 缩起的按钮的图标 &#125;);&#125;// 搜索方法function search() &#123; initDeptTreeTable();&#125;// 重置方法function refresh() &#123; $(".form")[0].reset(); search();&#125;参数说明如注解所示，其中expanderExpandedClass和expanderCollapsedClass为展开和缩起的图标，这里使用的是文章开始引入的font-awesome。后端返回的JSON数据如下所示：12345678910111213141516171819202122232425262728293031323334353637383940414243[&#123; "deptId": 1, "parentId": 0, "deptName": "开发部", "orderNum": null, "createTime": 1515051746000&#125;, &#123; "deptId": 2, "parentId": 1, "deptName": "开发一部", "orderNum": null, "createTime": 1515051754000&#125;, &#123; "deptId": 3, "parentId": 1, "deptName": "开发二部", "orderNum": null, "createTime": 1515051749000&#125;, &#123; "deptId": 4, "parentId": 0, "deptName": "市场部", "orderNum": null, "createTime": 1515051756000&#125;, &#123; "deptId": 5, "parentId": 0, "deptName": "人事部", "orderNum": null, "createTime": 1515051752000&#125;, &#123; "deptId": 6, "parentId": 0, "deptName": "测试部", "orderNum": null, "createTime": 1515051758000&#125;, &#123; "deptId": 7, "parentId": 2, "deptName": "开发一部福州分部", "orderNum": null, "createTime": 1521077535000&#125;]页面显示效果如下： 其实，在实际使用中我们并不需要配置那么多参数，查看jquery.treegrid.extension.js源码可发现，其默认参数为：12345678910111213141516171819$.fn.bootstrapTreeTable.defaults = &#123; id: 'menuId', code: 'menuId', parentCode: 'parentId', rootCodeValue: null, data: [], type: "GET", url: null, ajaxParams: &#123;&#125;, expandColumn: null, expandAll: true, striped: false, columns: [], toolbar: null, height: 0, expanderExpandedClass: 'fa fa-chevron-down', expanderCollapsedClass: 'fa fa-chevron-up'&#125;;所以使用的时候只需配置几个我们关注的参数即可：1234567891011121314151617181920212223242526272829$('#deptTreeTable').bootstrapTreeTable(&#123; id: 'deptId', code: 'deptId', parentCode: 'parentId', url: ctx + 'dept/list', ajaxParams: &#123; deptName: $(".form").find("input[name='deptName']").val().trim() &#125;, expandColumn: 2, striped: true, columns: [&#123; field: 'selectItem', checkbox: true &#125;, &#123; title: '编号', field: 'deptId', width: '50px' &#125;, &#123; title: '名称', field: 'deptName' &#125;, &#123; title: '创建时间', field: 'createTime' &#125; ]&#125;);jquery.treegrid.extension.js还封装了一些方法：12345678910111213141516171819202122232425262728293031$.fn.bootstrapTreeTable.methods = &#123; // 返回选中记录的id（返回的id由配置中的id属性指定） // 为了兼容bootstrap-table的写法，统一返回数组，这里只返回了指定的id getSelections: function(target, data) &#123; // 所有被选中的记录input var _ipt = target.find("tbody").find("tr").find("input[name='select_item']:checked"); var chk_value = []; // 如果是radio if (_ipt.attr("type") == "radio") &#123; chk_value.push(&#123; id: _ipt.val() &#125;); &#125; else &#123; _ipt.each(function(_i, _item) &#123; chk_value.push(&#123; id: $(_item).val() &#125;); &#125;); &#125; return chk_value; &#125;, // 刷新记录 refresh: function(target, parms) &#123; if (parms) &#123; target.load(parms); &#125; else &#123; target.load(); &#125; &#125;, // 重置表格视图 resetHeight: function(target, height) &#123; target.find("tbody").css("height", height + 'px'); &#125; // 组件的其他方法也可以进行类似封装........&#125;;比如获取选中行的数据可使用getSelections：1$("#deptTreeTable").bootstrapTreeTable("getSelections");附录源码链接：https://drive.google.com/open?id=1fgYRpD5CNCn4gj06_MiLm-g2fCjsSYtk]]></content>
      <tags>
        <tag>Bootstrap</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bootstrap Table学习指南]]></title>
    <url>%2Fblog%2FBootstrap-Table%20guide.html</url>
    <content type="text"><![CDATA[Bootstrap Table是一款基于Bootstrap的jQuery表格插件，通过简单的设置，就可以拥有强大的单选、多选、排序、分页，以及编辑、导出、过滤、扩展等等的功能。作者地址：https://github.com/wenzhixin/bootstrap-table。这里简单介绍下使用方法以及对其进行二次封装，方便日常开发使用。准备工作因为基于Bootstrap，所以先引入Bootstrap依赖：1234&lt;link rel="stylesheet" href="https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css"&gt;&lt;script src="http://code.jquery.com/jquery-2.0.0.min.js"&gt;&lt;/script&gt;&lt;script src="https://cdn.bootcss.com/popper.js/1.12.9/umd/popper.min.js"&gt;&lt;/script&gt;&lt;script src="https://cdn.bootcss.com/bootstrap/4.0.0/js/bootstrap.min.js"&gt;&lt;/script&gt;然后引入Bootstrap Table依赖：123456&lt;!-- Latest compiled and minified CSS --&gt;&lt;link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.9.0/bootstrap-table.min.css"&gt;&lt;!-- Latest compiled and minified JavaScript --&gt;&lt;script src="//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.9.0/bootstrap-table.min.js"&gt;&lt;/script&gt;&lt;!-- Latest compiled and minified Locales --&gt;&lt;script src="//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.9.0/locale/bootstrap-table-zh-CN.min.js"&gt;&lt;/script&gt;数据准备本例中使用到的数据表SQL如下：123456789101112131415161718192021222324-- ------------------------------ Table structure for T_ROLE-- ----------------------------DROP TABLE "MRBIRD"."T_ROLE";CREATE TABLE "MRBIRD"."T_ROLE" ("ROLE_ID" NUMBER NOT NULL ,"ROLE_NAME" VARCHAR2(100 BYTE) NOT NULL ,"REMARK" VARCHAR2(100 BYTE) NULL ,"CREATE_TIME" DATE NOT NULL ,"MODIFY_TIME" DATE NULL );-- ------------------------------ Records of T_ROLE-- ----------------------------INSERT INTO "MRBIRD"."T_ROLE" VALUES ('23', '用户管理员', '负责用户的增删改操作', TO_DATE('2018-01-09 15:32:41', 'YYYY-MM-DD HH24:MI:SS'), null);INSERT INTO "MRBIRD"."T_ROLE" VALUES ('1', '管理员', '管理员', TO_DATE('2017-12-27 16:23:11', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2018-02-24 16:01:45', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_ROLE" VALUES ('2', '测试账号', '测试账号', TO_DATE('2017-12-27 16:25:09', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2018-01-23 09:11:11', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_ROLE" VALUES ('3', '注册账户', '注册账户，只可查看，不可操作', TO_DATE('2017-12-29 16:00:15', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2018-02-24 17:33:45', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_ROLE" VALUES ('24', '系统监控员', '可查看系统监控信息，但不可操作', TO_DATE('2018-01-09 15:52:01', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2018-03-07 19:05:33', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_ROLE" VALUES ('25', '用户查看', '查看用户，无相应操作权限', TO_DATE('2018-01-09 15:56:30', 'YYYY-MM-DD HH24:MI:SS'), null);INSERT INTO "MRBIRD"."T_ROLE" VALUES ('63', '影院工作者', '可查看影视信息', TO_DATE('2018-02-06 08:48:28', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2018-03-07 19:05:26', 'YYYY-MM-DD HH24:MI:SS'));INSERT INTO "MRBIRD"."T_ROLE" VALUES ('64', '天气预报员', '可查看天气预报信息', TO_DATE('2018-02-27 08:47:04', 'YYYY-MM-DD HH24:MI:SS'), null);INSERT INTO "MRBIRD"."T_ROLE" VALUES ('65', '文章审核', '文章类', TO_DATE('2018-02-27 08:48:01', 'YYYY-MM-DD HH24:MI:SS'), TO_DATE('2018-03-13 11:20:34', 'YYYY-MM-DD HH24:MI:SS'));后端框架为Spring Boot + MyBatis（通用mapper和pagehelper插件），获取数据的具体细节这里不再描述，可参考文末的源码。使用编写一个简单的页面：123456789101112131415161718&lt;form class="form"&gt; &lt;div class="row"&gt; &lt;div class="col"&gt; &lt;div class="input-group"&gt; &lt;span class="input-group-addon"&gt;角色：&lt;/span&gt; &lt;div class="form-group"&gt; &lt;input type="text" name="roleName" class="form-control"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="col"&gt;&lt;/div&gt; &lt;div class="col"&gt; &lt;button type="button" class="btn btn-success" onclick="refresh()"&gt;重置&lt;/button&gt; &lt;button type="button" class="btn btn-primary" onclick="search()"&gt;搜索&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt;&lt;table id="roleTable" data-mobile-responsive="true" class="mb-bootstrap-table text-nowrap"&gt;&lt;/table&gt;Bootstrap Table插件的使用：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253$('#roleTable').bootstrapTable(&#123; method: 'get', // 服务器数据的请求方式 get or post url: ctx + "bootstrap-table/list", // 服务器数据的加载地址 striped: true, //是否显示行间隔色 cache: false, //是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*） pagination: true, //是否显示分页（*） sortable: false, //是否启用排序 sidePagination: "server", //分页方式：client客户端分页，server服务端分页（*） pageNumber: 1, //初始化加载第一页，默认第一页 pageSize: 5, //每页的记录行数（*） pageList: [5, 25, 50, 100], //可供选择的每页的行数（*） strictSearch: true, minimumCountColumns: 2, //最少允许的列数 clickToSelect: true, //是否启用点击选中行 uniqueId: "ID", //每一行的唯一标识，一般为主键列 cardView: false, detailView: false, //是否显示详细视图 smartDisplay: false, queryParams: function(params) &#123; return &#123; pageSize: params.limit, pageNum: params.offset / params.limit + 1, roleName: $(".form").find("input[name='roleName']").val().trim(), &#125;; &#125;, columns: [&#123; checkbox: true &#125;,&#123; field: 'roleId', title: '角色ID' &#125;,&#123; field: 'roleName', title: '角色' &#125;, &#123; field: 'remark', title: '描述' &#125;, &#123; field: 'createTime', title: '创建时间' &#125;, &#123; field: 'modifyTime', title: '修改时间' &#125;]&#125;);// 搜索方法function search() &#123; $('#roleTable').bootstrapTable('refresh');&#125;// 重置方法function refresh() &#123; $(".form")[0].reset(); search();&#125;后端返回的JSON数据如下所示：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&#123; "total": 9, "rows": [&#123; "roleId": 1, "roleName": "管理员", "remark": "管理员", "createTime": 1514362991000, "modifyTime": 1519459305000 &#125;, &#123; "roleId": 2, "roleName": "测试账号", "remark": "测试账号", "createTime": 1514363109000, "modifyTime": 1516669871000 &#125;, &#123; "roleId": 3, "roleName": "注册账户", "remark": "注册账户，只可查看，不可操作", "createTime": 1514534415000, "modifyTime": 1519464825000 &#125;, &#123; "roleId": 23, "roleName": "用户管理员", "remark": "负责用户的增删改操作", "createTime": 1515483161000, "modifyTime": null &#125;, &#123; "roleId": 24, "roleName": "系统监控员", "remark": "可查看系统监控信息，但不可操作", "createTime": 1515484321000, "modifyTime": 1520420733000 &#125;, &#123; "roleId": 25, "roleName": "用户查看", "remark": "查看用户，无相应操作权限", "createTime": 1515484590000, "modifyTime": null &#125;, &#123; "roleId": 63, "roleName": "影院工作者", "remark": "可查看影视信息", "createTime": 1517878108000, "modifyTime": 1520420726000 &#125;, &#123; "roleId": 64, "roleName": "天气预报员", "remark": "可查看天气预报信息", "createTime": 1519692424000, "modifyTime": null &#125;, &#123; "roleId": 65, "roleName": "文章审核", "remark": "文章类", "createTime": 1519692481000, "modifyTime": 1520911234000 &#125;]&#125;页面显示效果如下： 二次封装实际使用中除了几个常用的参数比如url，queryParams，columns等等之外，剩下的参数一般默认就好，所以接下来对其进行二次封装，使得开发中更为方便。123456789101112131415161718192021222324252627282930313233343536373839404142434445var $Mrbird = (function() &#123; var bootstrapTable_default = &#123; method: 'get', striped: true, cache: false, pagination: true, sortable: false, sidePagination: "server", pageNumber: 1, pageSize: 5, pageList: [5, 10, 25, 50, 100], strictSearch: true, showColumns: false, minimumCountColumns: 2, clickToSelect: true, uniqueId: "ID", cardView: false, detailView: false, smartDisplay: false, queryParams: function(params) &#123; return &#123; pageSize: params.limit, pageNum: params.offset / params.limit + 1, &#125;; &#125; &#125; function _initTable(id, settings) &#123; var params = $.extend(&#123;&#125;, bootstrapTable_default, settings); if (typeof params.url == 'undefined') &#123; throw '初始化表格失败，请配置url参数！'; &#125; if (typeof params.columns == 'undefined') &#123; throw '初始化表格失败，请配置columns参数！'; &#125; $('#' + id).bootstrapTable(params); &#125; return &#123; initTable: function(id, settings) &#123; _initTable(id, settings); &#125;, refreshTable: function(id) &#123; $('#' + id).bootstrapTable('refresh'); &#125; &#125;&#125;)($);这样，在使用Bootstap Table插件的时候只需要像下面这样书写即可：123456789101112131415161718192021222324252627282930313233$(function() &#123; var settings = &#123; url: ctx + "bootstrap-table/list", queryParams: function(params) &#123; return &#123; pageSize: params.limit, pageNum: params.offset / params.limit + 1, roleName: $(".form").find("input[name='roleName']").val().trim(), &#125;; &#125;, columns: [&#123; checkbox: true &#125;, &#123; field: 'roleId', title: '角色ID' &#125;, &#123; field: 'roleName', title: '角色' &#125;, &#123; field: 'remark', title: '描述' &#125;, &#123; field: 'createTime', title: '创建时间' &#125;, &#123; field: 'modifyTime', title: '修改时间' &#125; ] &#125; $Mrbird.initTable('roleTable', settings);&#125;);附录Bootstap Table除了上面介绍的内容外，其还包含了许多别的特性，可参考官方文档：http://bootstrap-table.wenzhixin.net.cn/zh-cn/documentation/。源码链接：https://drive.google.com/open?id=1qEVgDDBfbdaVJ1FSckzQr6RAUyGF7k6J]]></content>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下部署Spring Boot jar]]></title>
    <url>%2Fblog%2FLinux%20Spring-Boot-jar.html</url>
    <content type="text"><![CDATA[部署Spring Boot项目可以使用Maven命令mvn:clean package将项目打包成只执行的jar文件，然后使用命令java -jar XX.jar来执行。但这样做无法将shell命令行释放，关闭terminal后项目也随之关闭了。这里介绍在Linux系统中后台运行Spring Boot jar文件的方法。实现这个功能主要依赖于Linux的nohup命令。nohup命令可以将程序以忽略挂起信号的方式运行起来，被运行的程序的输出信息将不会显示到终端。nohup语法：123nohup 命令用途：不挂断地运行命令。语法：nohup Command [ Arg … ][ &amp; ]所以只需要在启动命令前加上nohup命令，末尾加上&amp;即可：nohup java -jar XX.jar &amp;。为了方便，我们可以编写启动脚本start.sh：1nohup java -jar XX.jar &amp;关停脚本stop.sh：12345678PID=`ps -ef | grep sms-2.0.jar | grep -v grep | awk '&#123;print $2&#125;'`if [ -z "$PID" ]then echo Application is already stoppedelse echo kill $PID kill -9 $PIDfi重启脚本run.sh：1234echo stop applicationsource stop.shecho start applicationsource start.sh在编写shell脚本的过程中遇到了两个问题：执行.sh文件提示权限不足：解决办法：执行命令chmod u+x XX.sh赋予当前用于可执行的权限即可。提示/bin/bash^M: bad interpreter: 没有那个文件或目录。问题出现的原因是shell脚本是在windows中编写的然后上传到Linux中的，出现了兼容性问题。解决办法：执行vim XX.sh打开shell文件，然后切换到命令模式，执行:set fileformat=unix后保存退出即可。使用了nohup命令后，会在jar文件目录下生成一个nohup.out文件，可通过其观察当前项目的运行情况：1234567891011121314151617181920$ ll总用量 76612drwxrwxr-x 2 zjrun zjrun 4096 2月 8 08:49 log-rw------- 1 zjrun zjrun 58695723 2月 8 10:15 nohup.out-rwxrw-r-- 1 zjrun zjrun 88 2月 7 15:17 run.sh-rw-rw-r-- 1 zjrun zjrun 19730199 2月 8 10:11 sms-1.0.jar-rwxrw-r-- 1 zjrun zjrun 60 2月 7 15:22 start.sh-rwxrw-r-- 1 zjrun zjrun 184 2月 7 15:19 stop.sh$ tail -10f nohup.out 10:14:31.309 logback [main] INFO o.s.j.e.a.AnnotationMBeanExporter - Registering beans for JMX exposure on startup10:14:31.478 logback [main] INFO o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8963"]10:14:31.498 logback [main] INFO o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8963"]10:14:31.506 logback [main] INFO o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read10:14:31.634 logback [main] INFO o.s.b.c.e.t.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8963 (http)10:14:31.644 logback [main] INFO com.xingyi.sms.SmsApplication - Started SmsApplication in 7.213 seconds (JVM running for 8.03)complete!10:15:26.978 logback [http-nio-8963-exec-1] INFO o.a.c.c.C.[.[localhost].[/mobilePre] - Initializing Spring FrameworkServlet 'dispatcherServlet'10:15:26.979 logback [http-nio-8963-exec-1] INFO o.s.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started10:15:27.004 logback [http-nio-8963-exec-1] INFO o.s.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 25 ms参考自： http://blog.didispace.com/spring-boot-run-backend/]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot logback日志配置[转]]]></title>
    <url>%2Fblog%2FSpring-Boot-logback.html</url>
    <content type="text"><![CDATA[Spring Boot在所有内部日志中使用Commons Logging，但是默认配置也提供了对常用日志的支持，如：Java Util Logging，Log4J, Log4J2和Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。SLF4J —— Simple Logging Facade For Java，它是一个针对于各类Java日志框架的统一Facade抽象。Java日志框架众多——常用的有java.util.logging, log4j, logback，commons-logging, Spring框架使用的是Jakarta Commons Logging API（JCL）。而SLF4J定义了统一的日志抽象接口，而真正的日志实现则是在运行时决定的——它提供了各类日志框架的绑定。Logback是log4j框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J。默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。在运行应用程序和其他例子时，你应该已经看到很多INFO级别的日志了。123456789101112 _ _ _ _ _ _ / \ / \ / \ / \ / \ / \ ( m | r | b | i | r | d ) \_/ \_/ \_/ \_/ \_/ \_/ 2018-02-08 15:05:03.368 INFO 14404 --- [ main] cc.mrbird.Application : Starting Application on SC-201802012049 with PID 14404 (D:\neonWorkspace\mrbird\target\classes started by Administrator in D:\neonWorkspace\mrbird)2018-02-08 15:05:03.375 INFO 14404 --- [ main] cc.mrbird.Application : No active profile set, falling back to default profiles: default2018-02-08 15:05:03.777 INFO 14404 --- [ main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@31321838: startup date [Thu Feb 08 15:05:03 CST 2018]; root of context hierarchy2018-02-08 15:05:05.083 INFO 14404 --- [ main] o.s.b.f.s.DefaultListableBeanFactory : Overriding bean definition for bean &apos;advisorAutoProxyCreator&apos; with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=shiroConfig; factoryMethodName=advisorAutoProxyCreator; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [cc/mrbird/config/ShiroConfig.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=com.alibaba.druid.spring.boot.autoconfigure.stat.DruidSpringAopConfiguration; factoryMethodName=advisorAutoProxyCreator; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/stat/DruidSpringAopConfiguration.class]]2018-02-08 15:05:05.554 INFO 14404 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean &apos;shiroConfig&apos; of type [cc.mrbird.config.ShiroConfig$$EnhancerBySpringCGLIB$$b7e43ac8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2018-02-08 15:05:05.600 INFO 14404 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean &apos;com.alibaba.druid.spring.boot.autoconfigure.stat.DruidSpringAopConfiguration&apos; of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidSpringAopConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2018-02-08 15:05:06.231 INFO 14404 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean &apos;mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties&apos; of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)...从上面可以看到，日志输出内容元素具体如下：时间日期：精确到毫秒；日志级别：ERROR, WARN, INFO, DEBUG or TRACE；进程ID；分隔符：---标识实际日志的开始；线程名：方括号括起来（可能会截断控制台输出）；Logger名：通常使用源代码的类名；日志内容。添加日志依赖假如maven依赖中添加了spring-boot-starter-logging：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;&lt;/dependency&gt;那么，我们的Spring Boot应用将自动使用logback作为应用日志框架，Spring Boot启动的时候，由org.springframework.boot.logging.Logging-Application-Listener根据情况初始化并使用。默认配置属性支持Spring Boot为我们提供了很多默认的日志配置，所以，只要将spring-boot-starter-logging作为依赖加入到当前应用的classpath，则“开箱即用”。 下面介绍几种在application.properties就可以配置的日志相关属性。控制台输出日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出。 Spring Boot中默认配置ERROR、WARN和INFO级别的日志输出到控制台。您还可以通过启动您的应用程序–debug标志来启用“调试”模式（开发的时候推荐开启）,以下两种方式皆可：在运行命令后加入–debug标志，如：$ java -jar springTest.jar --debug。在application.properties中配置debug=true，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。文件输出默认情况下，Spring Boot将日志输出到控制台，不会写到日志文件。如果要编写除控制台输出之外的日志文件，则需在application.properties中设置logging.file或logging.path属性。logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log。logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log。如果只配置 logging.file，会在项目的当前路径下生成一个 xxx.log 日志文件。如果只配置 logging.path，在 /var/log文件夹生成一个日志文件为 spring.log。级别控制所有支持的日志记录系统都可以在Spring环境中设置记录级别（例如在application.properties中） 格式为：’logging.level.* = LEVEL’logging.level：日志级别控制前缀，*为包名或Logger名LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF举例：logging.level.com.mrbird=DEBUG：com.mrbird包下所有class以DEBUG级别输出。logging.level.root=WARN：root日志以WARN级别输出。自定义日志配置由于日志服务一般都在ApplicationContext创建前就初始化了，它并不是必须通过Spring的配置文件控制。因此通过系统属性和传统的Spring Boot外部配置文件依然可以很好的支持日志控制和管理。根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovyLog4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xmlLog4j2：log4j2-spring.xml, log4j2.xmlJDK (Java Util Logging)：logging.propertiesSpring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项（下面会提到）。上面是默认的命名规则，并且放在src/main/resources下面即可。如果你即想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，可以在application.properties配置文件里面通过logging.config属性指定自定义的名字：1logging.config=classpath:logging-config.xml虽然一般并不需要改变配置文件的名字，但是如果你想针对不同运行时Profile使用不同的日 志配置，这个功能会很有用。下面我们来看看一个普通的logback-spring.xml例子:12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE xml&gt;&lt;configuration scan="true" scanPeriod="60 seconds" debug="false"&gt; &lt;contextName&gt;logback&lt;/contextName&gt; &lt;property name="log.path" value="log" /&gt; &lt;!--输出到控制台--&gt; &lt;appender name="console" class="ch.qos.logback.core.ConsoleAppender"&gt; &lt;!-- &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;/filter&gt;--&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;!--输出到文件--&gt; &lt;appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt; &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt; &lt;fileNamePattern&gt;$&#123;log.path&#125;/logback.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt; &lt;/appender&gt; &lt;root level="info"&gt; &lt;appender-ref ref="console" /&gt; &lt;appender-ref ref="file" /&gt; &lt;/root&gt; &lt;!-- logback为java中的包 --&gt; &lt;logger name="com.mrbird.controller"/&gt; &lt;!--logback.LogbackDemo：类的全路径 --&gt; &lt;logger name="com.mrbird.controller.LoginController" level="WARN" additivity="false"&gt; &lt;appender-ref ref="console"/&gt; &lt;/logger&gt;&lt;/configuration&gt;根节点&lt;configuration&gt;包含的属性scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。根节点&lt;configuration&gt;的子节点：&lt;configuration&gt;下面一共有2个属性，3个子节点，分别是：属性一：设置上下文名称&lt;contextName&gt;每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。1&lt;contextName&gt;logback&lt;/contextName&gt;属性二：设置变量&lt;property&gt; 用来定义变量值的标签，有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。1&lt;property name="log.path" value="log" /&gt;子节点一&lt;appender&gt;appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。控制台输出ConsoleAppender：123456789&lt;!--输出到控制台--&gt;&lt;appender name="console" class="ch.qos.logback.core.ConsoleAppender"&gt; &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt; &lt;level&gt;ERROR&lt;/level&gt; &lt;/filter&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt;&lt;/appender&gt;&lt;encoder&gt;表示对日志进行编码：%d{HH: mm:ss.SSS}——日志输出时间。%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用。%-5level——日志级别，并且使用5个字符靠左对齐。%logger{36}——日志输出者的名字。%msg——日志消息。%n——平台的换行符。ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志~输出到文件RollingFileAppender：另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。RollingFileAppender用于切分文件日志：1234567891011&lt;!--输出到文件--&gt;&lt;appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender"&gt; &lt;rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"&gt; &lt;fileNamePattern&gt;$&#123;log.path&#125;/logback.%d&#123;yyyy-MM-dd&#125;.log&lt;/fileNamePattern&gt; &lt;maxHistory&gt;30&lt;/maxHistory&gt; &lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt; &lt;/rollingPolicy&gt; &lt;encoder&gt; &lt;pattern&gt;%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n&lt;/pattern&gt; &lt;/encoder&gt;&lt;/appender&gt;其中重要的是rollingPolicy的定义：&lt;fileNamePattern&gt;${log.path}/logback.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;定义了日志的切分方式——把每一天的日志归档到一个文件中；&lt;maxHistory&gt;30&lt;/maxHistory&gt;表示只保留最近30天的日志，以防止日志填满整个磁盘空间。同理，可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式；&lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。logback 每天生成和大小生成冲突的问题可以看这个解答：http://blog.csdn.net/wujianmin577/article/details/68922545。子节点二&lt;root&gt;root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性，用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。可以包含零个或多个元素，标识这个appender将会添加到这个logger。1234&lt;root level="debug"&gt; &lt;appender-ref ref="console" /&gt; &lt;appender-ref ref="file" /&gt;&lt;/root&gt;子节点三&lt;logger&gt;&lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、以及指定&lt;appender&gt;。&lt;logger&gt;仅有一个name属性，一个可选的level和一个可选的addtivity属性。name：用来指定受此logger约束的某一个包或者具体的某一个类。level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。addtivity：是否向上级logger传递打印信息。默认是true。logger在实际使用的时候有两种情况：先来看一看代码中如何使用：12345678910111213141516171819202122232425262728package com.mrbird.controller;@Controllerpublic class LearnController &#123; private Logger logger = LoggerFactory.getLogger(this.getClass()); @RequestMapping(value = "/login",method = RequestMethod.POST) @ResponseBody public Map&lt;String,Object&gt; login(HttpServletRequest request, HttpServletResponse response)&#123; //日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出。 logger.trace("日志输出 trace"); logger.debug("日志输出 debug"); logger.info("日志输出 info"); logger.warn("日志输出 warn"); logger.error("日志输出 error"); Map&lt;String,Object&gt; map =new HashMap&lt;String,Object&gt;(); String userName=request.getParameter("userName"); String password=request.getParameter("password"); if(!userName.equals("") &amp;&amp; password!="")&#123; User user =new User(userName,password); request.getSession().setAttribute("user",user); map.put("result","1"); &#125;else&#123; map.put("result","0"); &#125; return map; &#125;&#125;这是一个登录的判断的方法，我们引入日志，并且打印不同级别的日志，然后根据logback-spring.xml中的配置来看看打印了哪几种级别日志。第一种：带有logger的配置，不指定级别，不指定appender：1&lt;logger name="com.mrbird.controller"/&gt;&lt;logger name=&quot;com.mrbird.controller&quot; /&gt;将控制controller包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级的日志级别“info”；没有设置addtivity，默认为true，将此logger的打印信息向上级传递；没有设置appender，此logger本身不打印任何信息。&lt;root level=&quot;info&quot;&gt;将root的打印级别设置为“info”，指定了名字为“console”的appender。当执行com.mrbird.controller.LearnController类的login方法时，LearnController 在包com.mrbird.controller中，所以首先执行&lt;logger name=&quot;com.mrbird.controller&quot;/&gt;，将级别为“info”及大于“info”的日志信息传递给root，本身并不打印； root接到下级传递的信息，交给已经配置好的名为“console”的appender处理，“console”appender将信息打印到控制台；打印结果如下：12316:00:17.407 logback [http-nio-8080-exec-8] INFO com.mrbird.controller.LearnController - 日志输出 info16:00:17.408 logback [http-nio-8080-exec-8] WARN com.mrbird.controller.LearnController - 日志输出 warn16:00:17.408 logback [http-nio-8080-exec-8] ERROR com.mrbird.controller.LearnController - 日志输出 error第二种：带有多个logger的配置，指定级别，指定appender；1234&lt;!--logback.LogbackDemo：类的全路径 --&gt;&lt;logger name="com.mrbird.controller.LearnController" level="WARN" additivity="false"&gt; &lt;appender-ref ref="console"/&gt;&lt;/logger&gt;控制com.mrbird.controller.LearnController类的日志打印，打印级别为“WARN”;additivity属性为false，表示此logger的打印信息不再向上级传递；指定了名字为“console”的appender。这时候执行com.mrbird.controller.LearnController类的login方法时，先执行&lt;logger name=&quot;com.mrbird.controller.LearnController&quot; level=&quot;WARN&quot; additivity=&quot;false&quot;&gt;, 将级别为“WARN”及大于“WARN”的日志信息交给此logger指定的名为“console”的appender处理，在控制台中打出日志，不再向上级root传递打印信息。打印结果如下：1216:00:17.408 logback [http-nio-8080-exec-8] WARN com.mrbird.controller.LearnController - 日志输出 warn16:00:17.408 logback [http-nio-8080-exec-8] ERROR com.mrbird.controller.LearnController - 日志输出 error当然如果你把additivity=”false”改成additivity=”true”的话，就会打印两次，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次。转载自： http://tengj.top/2017/04/05/springboot7/]]></content>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bootstrap Modal遮罩问题]]></title>
    <url>%2Fblog%2FBootstrap-Moda%20error.html</url>
    <content type="text"><![CDATA[当同时打开多层Modal并关闭的时候，发现页面的遮罩层并没有消失，可以使用下面的方法手动删除：123$("modal").bind('hide.bs.modal', function() &#123; $(".modal-backdrop").remove();&#125;)]]></content>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis通用Mapper和PageHelper]]></title>
    <url>%2Fblog%2FMyBatis%20common%20Mapper%20PageHelper.html</url>
    <content type="text"><![CDATA[如果项目中使用到了MyBatis框架，那么使用通用Mapper和PageHelper分页插件将极大的简化我们的操作。通用Mapper可以简化对单表的CRUD操作，PageHelper分页插件可以帮我们自动拼接分页SQL，并且可以使用MyBatis Geneator来自动生成实体类，Mapper接口和Mapper xml代码，非常的方便。插件地址及作者链接https://gitee.com/free。引入依赖这里使用Spring Boot来构建，可参考Spring-Boot中使用Mybatis.html搭建一个Spring boot + MyBatis的框架，然后在pom中引入：123456789101112131415161718&lt;!-- mybatis --&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 通用mapper --&gt;&lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.5&lt;/version&gt;&lt;/dependency&gt;&lt;!-- pagehelper 分页插件 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt;&lt;/dependency&gt;接着在pom中配置MyBatis Geneator：123456789101112131415161718192021222324252627282930313233343536373839&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.5&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;!-- 数据库连接驱动 --&gt; &lt;groupId&gt;com.oracle&lt;/groupId&gt; &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt; &lt;version&gt;6.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;tk.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mapper&lt;/artifactId&gt; &lt;version&gt;3.4.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;Generate MyBatis Artifacts&lt;/id&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;generate&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;configuration&gt; &lt;!--允许移动生成的文件 --&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;!-- 是否覆盖 --&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;!-- 自动生成的配置 --&gt; &lt;configurationFile&gt;src/main/resources/mybatis-generator.xml&lt;/configurationFile&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt;src/main/resources/mybatis-generator.xml为生成器的配置，下文会介绍到。配置插件在Spring Boot配置文件application.yml中配置MyBatis：1234567mybatis: # type-aliases扫描路径 type-aliases-package: com.springboot.bean # mapper xml实现扫描路径 mapper-locations: classpath:mapper/*.xml property: order: BEFORE接下来开始配置插件。配置通用Mapper在Spring Boot配置文件application.yml中配置通用Mapper：12345#mappers 多个接口时逗号隔开mapper: mappers: com.springboot.config.MyMapper not-empty: false identity: oracle关于参数的说明，参考https://gitee.com/free/Mapper/blob/master/wiki/mapper3/2.Integration.md中的可配参数介绍。除此之外，我们需要定义一个MyMapper接口：123456import tk.mybatis.mapper.common.Mapper;import tk.mybatis.mapper.common.MySqlMapper;public interface MyMapper&lt;T&gt; extends Mapper&lt;T&gt;, MySqlMapper&lt;T&gt; &#123; &#125;值得注意的是，该接口不能被扫描到，应该和自己定义的Mapper分开。自己定义的Mapper都需要继承这个接口。配置PageHelper在Spring Boot配置文件application.yml中配置通用配置PageHelper：123456#pagehelperpagehelper: helperDialect: oracle reasonable: true supportMethodsArguments: true params: count=countSql参数相关说明参考https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md中的分页插件参数介绍。配置Geneator*在路径src/main/resources/下新建mybatis-generator.xml：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;&lt;generatorConfiguration&gt; &lt;context id="oracle" targetRuntime="MyBatis3Simple" defaultModelType="flat"&gt; &lt;plugin type="tk.mybatis.mapper.generator.MapperPlugin"&gt; &lt;!-- 该配置会使生产的Mapper自动继承MyMapper --&gt; &lt;property name="mappers" value="com.springboot.config.MyMapper" /&gt; &lt;!-- caseSensitive默认false，当数据库表名区分大小写时，可以将该属性设置为true --&gt; &lt;property name="caseSensitive" value="false"/&gt; &lt;/plugin&gt; &lt;!-- 阻止生成自动注释 --&gt; &lt;commentGenerator&gt; &lt;property name="javaFileEncoding" value="UTF-8"/&gt; &lt;property name="suppressDate" value="true"/&gt; &lt;property name="suppressAllComments" value="true"/&gt; &lt;/commentGenerator&gt; &lt;!-- 数据库链接地址账号密码 --&gt; &lt;jdbcConnection driverClass="oracle.jdbc.driver.OracleDriver" connectionURL="jdbc:oracle:thin:@localhost:1521:ORCL" userId="scott" password="6742530"&gt; &lt;/jdbcConnection&gt; &lt;javaTypeResolver&gt; &lt;property name="forceBigDecimals" value="false"/&gt; &lt;/javaTypeResolver&gt; &lt;!-- 生成Model类存放位置 --&gt; &lt;javaModelGenerator targetPackage="com.springboot.bean" targetProject="src/main/java"&gt; &lt;property name="enableSubPackages" value="true"/&gt; &lt;property name="trimStrings" value="true"/&gt; &lt;/javaModelGenerator&gt; &lt;!-- 生成映射文件存放位置 --&gt; &lt;sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources"&gt; &lt;property name="enableSubPackages" value="true"/&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 生成Dao类存放位置 --&gt; &lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件的代码 type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象 type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口 --&gt; &lt;javaClientGenerator type="XMLMAPPER" targetPackage="com.springboot.mapper" targetProject="src/main/java"&gt; &lt;property name="enableSubPackages" value="true"/&gt; &lt;/javaClientGenerator&gt; &lt;!-- 配置需要生成的表 --&gt; &lt;table tableName="T_USER" domainObjectName="User" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"&gt; &lt;generatedKey column="id" sqlStatement="oralce" identity="true"/&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt;更详细的说明可参考链接：http://blog.csdn.net/isea533/article/details/42102297。代码生成配置好MyBatis Geneator后，在eclipse中运行命令mybatis-generator:generate：以下为自动成成的代码：User：123456789101112131415161718192021@Table(name = "T_USER")public class User &#123; @Id @Column(name = "ID") @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column(name = "USERNAME") private String username; @Column(name = "PASSWD") private String passwd; @Column(name = "CREATE_TIME") private Date createTime; @Column(name = "STATUS") private String status; ...&#125;因为这里数据库试用的是Oracle，其没有主键自动自增的功能，这里先将@GeneratedValue(strategy = GenerationType.IDENTITY)去掉，主键的生成下面会介绍到。生成的主键是BigDecimal类型的，我们将其改为Long类型。UserMapper：12345import com.springboot.bean.User;import com.springboot.config.MyMapper;public interface UserMapper extends MyMapper&lt;User&gt; &#123;&#125;UserMapper.xml：1234567891011121314&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.springboot.mapper.UserMapper"&gt; &lt;resultMap id="BaseResultMap" type="com.springboot.bean.User"&gt; &lt;!-- WARNING - @mbg.generated --&gt; &lt;id column="ID" jdbcType="DECIMAL" property="id" /&gt; &lt;result column="USERNAME" jdbcType="VARCHAR" property="username" /&gt; &lt;result column="PASSWD" jdbcType="VARCHAR" property="passwd" /&gt; &lt;result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" /&gt; &lt;result column="STATUS" jdbcType="CHAR" property="status" /&gt; &lt;/resultMap&gt;&lt;/mapper&gt;极其方便的说！Mapper要让Spring Boot扫描到Mapper接口，需要在Spring Boot入口类中加入@MapperScan(&quot;com.springboot.mapper&quot;)注解。为了获取到Oracle 中序列的值，我们定义一个SeqenceMapper接口：1234public interface SeqenceMapper &#123; @Select("select $&#123;seqName&#125;.nextval from dual") Long getSequence(@Param("seqName") String seqName);&#125;因为这里仅介绍Mapper自带的CRUD方法，所以UserMapper接口中无需定义任何方法。通用Service我们可以定义一个通用的Service，在其中定义一些通用的方法：IService：12345678910111213141516171819@Servicepublic interface IService&lt;T&gt; &#123; Long getSequence(@Param("seqName") String seqName); List&lt;T&gt; selectAll(); T selectByKey(Object key); int save(T entity); int delete(Object key); int updateAll(T entity); int updateNotNull(T entity); List&lt;T&gt; selectByExample(Object example);&#125;其实现类BaseService：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public abstract class BaseService&lt;T&gt; implements IService&lt;T&gt; &#123; @Autowired protected Mapper&lt;T&gt; mapper; @Autowired protected SeqenceMapper seqenceMapper; public Mapper&lt;T&gt; getMapper() &#123; return mapper; &#125; @Override public Long getSequence(@Param("seqName") String seqName)&#123; return seqenceMapper.getSequence(seqName); &#125; @Override public List&lt;T&gt; selectAll() &#123; //说明：查询所有数据 return mapper.selectAll(); &#125; @Override public T selectByKey(Object key) &#123; //说明：根据主键字段进行查询，方法参数必须包含完整的主键属性，查询条件使用等号 return mapper.selectByPrimaryKey(key); &#125; @Override public int save(T entity) &#123; //说明：保存一个实体，null的属性也会保存，不会使用数据库默认值 return mapper.insert(entity); &#125; @Override public int delete(Object key) &#123; //说明：根据主键字段进行删除，方法参数必须包含完整的主键属性 return mapper.deleteByPrimaryKey(key); &#125; @Override public int updateAll(T entity) &#123; //说明：根据主键更新实体全部字段，null值会被更新 return mapper.updateByPrimaryKey(entity); &#125; @Override public int updateNotNull(T entity) &#123; //根据主键更新属性不为null的值 return mapper.updateByPrimaryKeySelective(entity); &#125; @Override public List&lt;T&gt; selectByExample(Object example) &#123; //说明：根据Example条件进行查询 //重点：这个查询支持通过Example类指定查询列，通过selectProperties方法指定查询列 return mapper.selectByExample(example); &#125;&#125;接下来让UserService接口继承IService接口：123public interface UserService extends IService&lt;User&gt;&#123; &#125;其实现类UserServiceImpl：1234@Repository("userService")public class UserServiceImpl extends BaseService&lt;User&gt; implements UserService&#123; &#125;这样即可在UserService中使用BaseService中的通用方法了。测试测试插入：1234567891011121314151617@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = Application.class)public class ApplicationTest &#123; @Autowired private UserService userService; @Test public void test() throws Exception &#123; User user = new User(); user.setId(userService.getSequence("seq_user")); user.setUsername("scott"); user.setPasswd("ac089b11709f9b9e9980e7c497268dfa"); user.setCreateTime(new Date()); user.setStatus("0"); this.userService.save(user); &#125;&#125;运行代码，查看数据库：测试查询：1234567891011121314151617Example example = new Example(User.class);example.createCriteria().andCondition("username like '%i%'");example.setOrderByClause("id desc");List&lt;User&gt; userList = this.userService.selectByExample(example);for (User u : userList) &#123; System.out.println(u.getUsername());&#125;List&lt;User&gt; all = this.userService.selectAll();for (User u : all) &#123; System.out.println(u.getUsername());&#125;User user = new User();user.setId(1l);user = this.userService.selectByKey(user);System.out.println(user.getUsername());测试删除：123User user = new User();user.setId(4l);this.userService.delete(user);分页测试，从第二页开始，每页2条数据：1234567PageHelper.startPage(2, 2);List&lt;User&gt; list = userService.selectAll();PageInfo&lt;User&gt; pageInfo = new PageInfo&lt;User&gt;(list);List&lt;User&gt; result = pageInfo.getList();for (User u : result) &#123; System.out.println(u.getUsername());&#125;查看日志打印出的SQL：12342017-12-28 10:25:14.033 DEBUG 11116 --- [main] c.s.mapper.UserMapper.selectAll : ==&gt; Preparing: SELECT * FROM ( SELECT TMP_PAGE.*, ROWNUM ROW_ID FROM ( SELECT ID,USERNAME,PASSWD,CREATE_TIME,STATUS FROM T_USER ) TMP_PAGE WHERE ROWNUM &lt;= ? ) WHERE ROW_ID &gt; ? 2017-12-28 10:25:14.068 DEBUG 11116 --- [main] c.s.mapper.UserMapper.selectAll : ==&gt; Parameters: 4(Integer), 2(Integer)2017-12-28 10:25:14.073 DEBUG 11116 --- [main] c.s.mapper.UserMapper.selectAll : &lt;== Total: 2插件已经帮我自动拼接好了。其他注意事项参考官方说明。源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/27.Spring-Boot-Mapper-PageHelper]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot Shiro在线会话管理]]></title>
    <url>%2Fblog%2FSpring-Boot-Shiro%20session.html</url>
    <content type="text"><![CDATA[在Shiro中我们可以通过org.apache.shiro.session.mgt.eis.SessionDAO对象的getActiveSessions()方法方便的获取到当前所有有效的Session对象。通过这些Session对象，我们可以实现一些比较有趣的功能，比如查看当前系统的在线人数，查看这些在线用户的一些基本信息，强制让某个用户下线等。为了达到这几个目标，我们在现有的Spring Boot Shiro项目基础上进行一些改造（缓存使用Ehcache）。更改ShiroConfig为了能够在Spring Boot中使用SessionDao，我们在ShiroConfig中配置该Bean：12345@Beanpublic SessionDAO sessionDAO() &#123; MemorySessionDAO sessionDAO = new MemorySessionDAO(); return sessionDAO;&#125;如果使用的是Redis作为缓存实现，那么SessionDAO则为RedisSessionDAO：123456@Beanpublic RedisSessionDAO sessionDAO() &#123; RedisSessionDAO redisSessionDAO = new RedisSessionDAO(); redisSessionDAO.setRedisManager(redisManager()); return redisSessionDAO;&#125;在Shiro中，SessionDao通过org.apache.shiro.session.mgt.SessionManager进行管理，所以继续在ShiroConfig中配置SessionManager：123456789@Beanpublic SessionManager sessionManager() &#123; DefaultWebSessionManager sessionManager = new DefaultWebSessionManager(); Collection&lt;SessionListener&gt; listeners = new ArrayList&lt;SessionListener&gt;(); listeners.add(new ShiroSessionListener()); sessionManager.setSessionListeners(listeners); sessionManager.setSessionDAO(sessionDAO()); return sessionManager;&#125;其中ShiroSessionListener为org.apache.shiro.session.SessionListener接口的手动实现，所以接下来定义一个该接口的实现：123456789101112131415161718public class ShiroSessionListener implements SessionListener&#123; private final AtomicInteger sessionCount = new AtomicInteger(0); @Override public void onStart(Session session) &#123; sessionCount.incrementAndGet(); &#125; @Override public void onStop(Session session) &#123; sessionCount.decrementAndGet(); &#125; @Override public void onExpiration(Session session) &#123; sessionCount.decrementAndGet(); &#125;&#125;其维护着一个原子类型的Integer对象，用于统计在线Session的数量。定义完SessionManager后，还需将其注入到SecurityManager中：12345678@Bean public SecurityManager securityManager()&#123; DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(); securityManager.setRealm(shiroRealm()); ... securityManager.setSessionManager(sessionManager()); return securityManager; &#125;UserOnline配置完ShiroConfig后，我们可以创建一个UserOnline实体类，用于描述每个在线用户的基本信息：1234567891011121314151617181920212223public class UserOnline implements Serializable&#123; private static final long serialVersionUID = 3828664348416633856L; // session id private String id; // 用户id private String userId; // 用户名称 private String username; // 用户主机地址 private String host; // 用户登录时系统IP private String systemHost; // 状态 private String status; // session创建时间 private Date startTimestamp; // session最后访问时间 private Date lastAccessTime; // 超时时间 private Long timeout; // get set略&#125;Service创建一个Service接口，包含查看所有在线用户和根据SessionId踢出用户抽象方法：1234public interface SessionService &#123; List&lt;UserOnline&gt; list(); boolean forceLogout(String sessionId);&#125;其具体实现：123456789101112131415161718192021222324252627282930313233343536373839404142434445@Service("sessionService")public class SessionServiceImpl implements SessionService &#123; @Autowired private SessionDAO sessionDAO; @Override public List&lt;UserOnline&gt; list() &#123; List&lt;UserOnline&gt; list = new ArrayList&lt;&gt;(); Collection&lt;Session&gt; sessions = sessionDAO.getActiveSessions(); for (Session session : sessions) &#123; UserOnline userOnline = new UserOnline(); User user = new User(); SimplePrincipalCollection principalCollection = new SimplePrincipalCollection(); if (session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY) == null) &#123; continue; &#125; else &#123; principalCollection = (SimplePrincipalCollection) session .getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY); user = (User) principalCollection.getPrimaryPrincipal(); userOnline.setUsername(user.getUserName()); userOnline.setUserId(user.getId().toString()); &#125; userOnline.setId((String) session.getId()); userOnline.setHost(session.getHost()); userOnline.setStartTimestamp(session.getStartTimestamp()); userOnline.setLastAccessTime(session.getLastAccessTime()); Long timeout = session.getTimeout(); if (timeout == 0l) &#123; userOnline.setStatus("离线"); &#125; else &#123; userOnline.setStatus("在线"); &#125; userOnline.setTimeout(timeout); list.add(userOnline); &#125; return list; &#125; @Override public boolean forceLogout(String sessionId) &#123; Session session = sessionDAO.readSession(sessionId); session.setTimeout(0); return true; &#125;&#125;通过SessionDao的getActiveSessions()方法，我们可以获取所有有效的Session，通过该Session，我们还可以获取到当前用户的Principal信息。值得说明的是，当某个用户被踢出后（Session Time置为0），该Session并不会立刻从ActiveSessions中剔除，所以我们可以通过其timeout信息来判断该用户在线与否。如果使用的Redis作为缓存实现，那么，forceLogout()方法需要稍作修改：123456@Overridepublic boolean forceLogout(String sessionId) &#123; Session session = sessionDAO.readSession(sessionId); sessionDAO.delete(session); return true;&#125;Controller定义一个SessionContoller，用于处理Session的相关操作：1234567891011121314151617181920212223242526272829@Controller@RequestMapping("/online")public class SessionController &#123; @Autowired SessionService sessionService; @RequestMapping("index") public String online() &#123; return "online"; &#125; @ResponseBody @RequestMapping("list") public List&lt;UserOnline&gt; list() &#123; return sessionService.list(); &#125; @ResponseBody @RequestMapping("forceLogout") public ResponseBo forceLogout(String id) &#123; try &#123; sessionService.forceLogout(id); return ResponseBo.ok(); &#125; catch (Exception e) &#123; e.printStackTrace(); return ResponseBo.error("踢出用户失败"); &#125; &#125;&#125;页面我们编写一个online.html页面，用于展示所有在线用户的信息：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;在线用户管理&lt;/title&gt; &lt;script th:src="@&#123;/js/jquery-1.11.1.min.js&#125;"&gt;&lt;/script&gt; &lt;script th:src="@&#123;/js/dateFormat.js&#125;"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h3&gt;在线用户数：&lt;span id="onlineCount"&gt;&lt;/span&gt;&lt;/h3&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;序号&lt;/th&gt; &lt;th&gt;用户名称&lt;/th&gt; &lt;th&gt;登录时间&lt;/th&gt; &lt;th&gt;最后访问时间&lt;/th&gt; &lt;th&gt;主机&lt;/th&gt; &lt;th&gt;状态&lt;/th&gt; &lt;th&gt;操作&lt;/th&gt; &lt;/tr&gt; &lt;/table&gt; &lt;a th:href="@&#123;/index&#125;"&gt;返回&lt;/a&gt;&lt;/body&gt;&lt;script th:inline="javascript"&gt; var ctx = [[@&#123;/&#125;]]; $.get(ctx + "online/list", &#123;&#125;, function(r)&#123; var length = r.length; $("#onlineCount").text(length); var html = ""; for(var i = 0; i &lt; length; i++)&#123; html += "&lt;tr&gt;" + "&lt;td&gt;" + (i+1) + "&lt;/td&gt;" + "&lt;td&gt;" + r[i].username + "&lt;/td&gt;" + "&lt;td&gt;" + new Date(r[i].startTimestamp).Format("yyyy-MM-dd hh:mm:ss") + "&lt;/td&gt;" + "&lt;td&gt;" + new Date(r[i].lastAccessTime).Format("yyyy-MM-dd hh:mm:ss") + "&lt;/td&gt;" + "&lt;td&gt;" + r[i].host + "&lt;/td&gt;" + "&lt;td&gt;" + r[i].status + "&lt;/td&gt;" + "&lt;td&gt;&lt;a href='#' onclick='offline(\"" + r[i].id + "\",\"" + r[i].status +"\")'&gt;下线&lt;/a&gt;&lt;/td&gt;" + "&lt;/tr&gt;"; &#125; $("table").append(html); &#125;,"json"); function offline(id,status)&#123; if(status == "离线")&#123; alert("该用户已是离线状态！！"); return; &#125; $.get(ctx + "online/forceLogout", &#123;"id": id&#125;, function(r)&#123; if (r.code == 0) &#123; alert('该用户已强制下线！'); location.href = ctx + 'online/index'; &#125; else &#123; alert(r.msg); &#125; &#125;,"json"); &#125;&lt;/script&gt;&lt;/html&gt;在index.html中加入该页面的入口：1234567891011121314...&lt;body&gt; &lt;p&gt;你好！[[$&#123;user.userName&#125;]]&lt;/p&gt; &lt;p shiro:hasRole="admin"&gt;你的角色为超级管理员&lt;/p&gt; &lt;p shiro:hasRole="test"&gt;你的角色为测试账户&lt;/p&gt; &lt;div&gt; &lt;a shiro:hasPermission="user:user" th:href="@&#123;/user/list&#125;"&gt;获取用户信息&lt;/a&gt; &lt;a shiro:hasPermission="user:add" th:href="@&#123;/user/add&#125;"&gt;新增用户&lt;/a&gt; &lt;a shiro:hasPermission="user:delete" th:href="@&#123;/user/delete&#125;"&gt;删除用户&lt;/a&gt; &lt;/div&gt; &lt;a shiro:hasRole="admin" th:href="@&#123;/online/index&#125;"&gt;在线用户管理&lt;/a&gt; &lt;a th:href="@&#123;/logout&#125;"&gt;注销&lt;/a&gt;&lt;/body&gt;...测试启动项目，在Opera浏览器中使用mrbird账户访问：在FireFox浏览器中使用tester账户访问：然后在mrbird主界面点击“在线用户管理”：显示的信息符合我们的预期，点击tester的下线按钮，强制将其踢出：回到tester用户的主界面，点击“查看用户信息”，会发现页面已经被重定向到login页面，因为其Session已经失效！再次刷新mrbird的online页面，显示如下：源码链接（Ehcache版）：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/17.Spring-Boot-Shiro-Session源码链接（Redis版）：https://drive.google.com/open?id=1GHJxnoX2rZuQXtMYpNv-TE5SHRwyqSN7]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Shiro</tag>
        <tag>Security</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot Thymeleaf中使用Shiro标签]]></title>
    <url>%2Fblog%2FSpring-Boot-Themeleaf%20Shiro%20tag.html</url>
    <content type="text"><![CDATA[在《Spring-Boot-shiro权限控制》中，当用户访问没有权限的资源时，我们采取的做法是跳转到403页面，但在实际项目中更为常见的做法是只显示当前用户拥有访问权限的资源链接。配合Thymeleaf中的Shiro标签可以很简单的实现这个目标。实际上Thymeleaf官方并没有提供Shiro的标签，我们需要引入第三方实现，地址为https://github.com/theborakompanioni/thymeleaf-extras-shiro。引入thymeleaf-extras-shiro在pom中引入：12345&lt;dependency&gt; &lt;groupId&gt;com.github.theborakompanioni&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf-extras-shiro&lt;/artifactId&gt; &lt;version&gt;2.0.0&lt;/version&gt;&lt;/dependency&gt;ShiroConfig配置引入依赖后，需要在ShiroConfig中配置该方言标签：1234 @Beanpublic ShiroDialect shiroDialect() &#123; return new ShiroDialect();&#125;首页改造更改index.html，用于测试Shiro标签的使用：12345678910111213141516171819 &lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.thymeleaf.org" xmlns:shiro="http://www.pollix.at/thymeleaf/shiro" &gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;首页&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;你好！[[$&#123;user.userName&#125;]]&lt;/p&gt; &lt;p shiro:hasRole="admin"&gt;你的角色为超级管理员&lt;/p&gt; &lt;p shiro:hasRole="test"&gt;你的角色为测试账户&lt;/p&gt; &lt;div&gt; &lt;a shiro:hasPermission="user:user" th:href="@&#123;/user/list&#125;"&gt;获取用户信息&lt;/a&gt; &lt;a shiro:hasPermission="user:add" th:href="@&#123;/user/add&#125;"&gt;新增用户&lt;/a&gt; &lt;a shiro:hasPermission="user:delete" th:href="@&#123;/user/delete&#125;"&gt;删除用户&lt;/a&gt; &lt;/div&gt; &lt;a th:href="@&#123;/logout&#125;"&gt;注销&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;值得注意的是，在html页面中使用Shiro标签需要给html标签添加xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot;。测试启动项目，使用mrbird（角色为admin，具有user:user，user:add，user:delete权限）账户登录：使用tester（角色为tester，仅有user:user权限）账户登录：更多标签The following examples show how to integrate the tags in your Thymeleaf templates. These are all implementations of the examples given in the JSP / GSP Tag Library Section of the Apache Shiro documentation.Tags can be written in attribute or element notation:Attribute123&lt;p shiro:anyTag&gt; Goodbye cruel World!&lt;/p&gt;Element123&lt;shiro:anyTag&gt; &lt;p&gt;Hello World!&lt;/p&gt;&lt;/shiro:anyTag&gt;The guest tag123&lt;p shiro:guest=""&gt; Please &lt;a href="login.html"&gt;Login&lt;/a&gt;&lt;/p&gt;The user tag123&lt;p shiro:user=""&gt; Welcome back John! Not John? Click &lt;a href="login.html"&gt;here&lt;a&gt; to login.&lt;/p&gt;The authenticated tag1&lt;a shiro:authenticated="" href="updateAccount.html"&gt;Update your contact information&lt;/a&gt;The notAuthenticated tag123&lt;p shiro:notAuthenticated=""&gt; Please &lt;a href="login.html"&gt;login&lt;/a&gt; in order to update your credit card information.&lt;/p&gt;The principal tag1&lt;p&gt;Hello, &lt;span shiro:principal=""&gt;&lt;/span&gt;, how are you today?&lt;/p&gt;or1&lt;p&gt;Hello, &lt;shiro:principal/&gt;, how are you today?&lt;/p&gt;Typed principal and principal property are also supported.The hasRole tag1&lt;a shiro:hasRole="administrator" href="admin.html"&gt;Administer the system&lt;/a&gt;The lacksRole tag123&lt;p shiro:lacksRole="administrator"&gt; Sorry, you are not allowed to administer the system.&lt;/p&gt;The hasAllRoles tag123&lt;p shiro:hasAllRoles="developer, project manager"&gt; You are a developer and a project manager.&lt;/p&gt;The hasAnyRoles tag123&lt;p shiro:hasAnyRoles="developer, project manager, administrator"&gt; You are a developer, project manager, or administrator.&lt;/p&gt;The hasPermission tag1&lt;a shiro:hasPermission="user:create" href="createUser.html"&gt;Create a new User&lt;/a&gt;The lacksPermission tag123&lt;p shiro:lacksPermission="user:delete"&gt; Sorry, you are not allowed to delete user accounts.&lt;/p&gt;The hasAllPermissions tag123&lt;p shiro:hasAllPermissions="user:create, user:delete"&gt; You can create and delete users.&lt;/p&gt;The hasAnyPermissions tag123&lt;p shiro:hasAnyPermissions="user:create, user:delete"&gt; You can create or delete users.&lt;/p&gt;源码地址：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/16.Spring-Boot-Shiro-Thymeleaf-Tag]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Shiro</tag>
        <tag>Security</tag>
        <tag>Spring Boot</tag>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot Shiro中使用缓存]]></title>
    <url>%2Fblog%2FSpring-Boot-Shiro%20cache.html</url>
    <content type="text"><![CDATA[在Shiro中加入缓存可以使权限相关操作尽可能快，避免频繁访问数据库获取权限信息，因为对于一个用户来说，其权限在短时间内基本是不会变化的。Shiro提供了Cache的抽象，其并没有直接提供相应的实现，因为这已经超出了一个安全框架的范围。在Shiro中可以集成常用的缓存实现，这里介绍基于Redis和Ehcache缓存的实现。在《Spring-Boot-shiro权限控制》中，当用户访问”获取用户信息”、”新增用户”和”删除用户”的时候，后台输出了三次打印信息，如下所示：123用户mrbird获取权限-----ShiroRealm.doGetAuthorizationInfo用户mrbird获取权限-----ShiroRealm.doGetAuthorizationInfo用户mrbird获取权限-----ShiroRealm.doGetAuthorizationInfo说明在这三次访问中，Shiro都会从数据库中获取用户的权限信息，通过Druid数据源SQL监控后台也可以证实这一点：这对数据库来说是没必要的消耗。接下来使用缓存来解决这个问题。Redis引入Redis依赖网络上已经有关于Shiro集成Redis的实现，我们引入即可：123456&lt;!-- shiro-redis --&gt;&lt;dependency&gt; &lt;groupId&gt;org.crazycake&lt;/groupId&gt; &lt;artifactId&gt;shiro-redis&lt;/artifactId&gt; &lt;version&gt;2.4.2.1-RELEASE&lt;/version&gt;&lt;/dependency&gt;配置Redis我们在application.yml配置文件中加入Redis配置：12345678910spring: redis: host: localhost port: 6379 pool: max-active: 8 max-wait: -1 max-idle: 8 min-idle: 0 timeout: 0接着在ShiroConfig中配置Redis：12345678910public RedisManager redisManager() &#123; RedisManager redisManager = new RedisManager(); return redisManager;&#125;public RedisCacheManager cacheManager() &#123; RedisCacheManager redisCacheManager = new RedisCacheManager(); redisCacheManager.setRedisManager(redisManager()); return redisCacheManager;&#125;上面代码配置了RedisManager，并将其注入到了RedisCacheManager中，最后在SecurityManager中加入RedisCacheManager：1234567@Bean public SecurityManager securityManager()&#123; DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(); ... securityManager.setCacheManager(cacheManager()); return securityManager; &#125;配置完毕启动项目，分别访问访问”获取用户信息”、”新增用户”和”删除用户”，可发现后台只打印一次获取权限信息：1用户mrbird获取权限-----ShiroRealm.doGetAuthorizationInfo查看Druid数据源SQL监控：源码：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/14.Spring-Boot-Shiro-RedisEhcacheEhcache依赖加入Ehcache相关依赖：123456789101112131415&lt;!-- shiro ehcache --&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-ehcache&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- ehchache --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt; &lt;artifactId&gt;ehcache&lt;/artifactId&gt;&lt;/dependency&gt;Ehcache配置在src/main/resource/config路径下新增一个Ehcache配置——shiro-ehcache.xml：123456789101112131415161718192021222324&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd" updateCheck="false"&gt; &lt;diskStore path="java.io.tmpdir/Tmp_EhCache" /&gt; &lt;defaultCache maxElementsInMemory="10000" eternal="false" timeToIdleSeconds="120" timeToLiveSeconds="120" overflowToDisk="false" diskPersistent="false" diskExpiryThreadIntervalSeconds="120" /&gt; &lt;!-- 登录记录缓存锁定1小时 --&gt; &lt;cache name="passwordRetryCache" maxEntriesLocalHeap="2000" eternal="false" timeToIdleSeconds="3600" timeToLiveSeconds="0" overflowToDisk="false" statistics="true" /&gt;&lt;/ehcache&gt;ShiroConfig配置Ehcache接着在ShiroConfig中注入Ehcache缓存：123456@Beanpublic EhCacheManager getEhCacheManager() &#123; EhCacheManager em = new EhCacheManager(); em.setCacheManagerConfigFile("classpath:config/shiro-ehcache.xml"); return em;&#125;将缓存对象注入到SecurityManager中：12345678@Bean public SecurityManager securityManager()&#123; DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(); securityManager.setRealm(shiroRealm()); securityManager.setRememberMeManager(rememberMeManager()); securityManager.setCacheManager(getEhCacheManager()); return securityManager; &#125;配置完毕启动项目，分别访问访问”获取用户信息”、”新增用户”和”删除用户”，可发现后台只打印一次获取权限信息：1用户mrbird获取权限-----ShiroRealm.doGetAuthorizationInfo查看Druid数据源SQL监控：SQL只执行了一次，说明缓存成功。源码连接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/15.Spring-Boot-Shiro-Ehcache]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Shiro</tag>
        <tag>Security</tag>
        <tag>Spring Boot</tag>
        <tag>Ehcache</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot Shiro权限控制]]></title>
    <url>%2Fblog%2FSpring-Boot-Shiro%20Authorization.html</url>
    <content type="text"><![CDATA[在《Spring-Boot-shiro用户认证》中，我们通过继承AuthorizingRealm抽象类实现了doGetAuthenticationInfo()方法完成了用户认证操作。接下来继续实现doGetAuthorizationInfo()方法完成Shiro的权限控制功能。授权也称为访问控制，是管理资源访问的过程。即根据不同用户的权限判断其是否有访问相应资源的权限。在Shiro中，权限控制有三个核心的元素：权限，角色和用户。库模型设计在这里，我们使用RBAC（Role-Based Access Control，基于角色的访问控制）模型设计用户，角色和权限间的关系。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。在这种模型中，用户与角色之间，角色与权限之间，一般者是多对多的关系。如下图所示：根据这个模型，设计数据库表，并插入一些测试数据：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394-- ------------------------------ Table structure for T_PERMISSION-- ----------------------------CREATE TABLE "SCOTT"."T_PERMISSION" ( "ID" NUMBER(10) NOT NULL , "URL" VARCHAR2(256 BYTE) NULL , "NAME" VARCHAR2(64 BYTE) NULL );COMMENT ON COLUMN "SCOTT"."T_PERMISSION"."URL" IS 'url地址';COMMENT ON COLUMN "SCOTT"."T_PERMISSION"."NAME" IS 'url描述';-- ------------------------------ Records of T_PERMISSION-- ----------------------------INSERT INTO "SCOTT"."T_PERMISSION" VALUES ('1', '/user', 'user:user');INSERT INTO "SCOTT"."T_PERMISSION" VALUES ('2', '/user/add', 'user:add');INSERT INTO "SCOTT"."T_PERMISSION" VALUES ('3', '/user/delete', 'user:delete');-- ------------------------------ Table structure for T_ROLE-- ----------------------------CREATE TABLE "SCOTT"."T_ROLE" ( "ID" NUMBER NOT NULL , "NAME" VARCHAR2(32 BYTE) NULL , "MEMO" VARCHAR2(32 BYTE) NULL );COMMENT ON COLUMN "SCOTT"."T_ROLE"."NAME" IS '角色名称';COMMENT ON COLUMN "SCOTT"."T_ROLE"."MEMO" IS '角色描述';-- ------------------------------ Records of T_ROLE-- ----------------------------INSERT INTO "SCOTT"."T_ROLE" VALUES ('1', 'admin', '超级管理员');INSERT INTO "SCOTT"."T_ROLE" VALUES ('2', 'test', '测试账户');-- ------------------------------ Table structure for T_ROLE_PERMISSION-- ----------------------------CREATE TABLE "SCOTT"."T_ROLE_PERMISSION" ( "RID" NUMBER(10) NULL , "PID" NUMBER(10) NULL );COMMENT ON COLUMN "SCOTT"."T_ROLE_PERMISSION"."RID" IS '角色id';COMMENT ON COLUMN "SCOTT"."T_ROLE_PERMISSION"."PID" IS '权限id';-- ------------------------------ Records of T_ROLE_PERMISSION-- ----------------------------INSERT INTO "SCOTT"."T_ROLE_PERMISSION" VALUES ('1', '2');INSERT INTO "SCOTT"."T_ROLE_PERMISSION" VALUES ('1', '3');INSERT INTO "SCOTT"."T_ROLE_PERMISSION" VALUES ('2', '1');INSERT INTO "SCOTT"."T_ROLE_PERMISSION" VALUES ('1', '1');-- ------------------------------ Table structure for T_USER-- ----------------------------CREATE TABLE "SCOTT"."T_USER" ( "ID" NUMBER NOT NULL , "USERNAME" VARCHAR2(20 BYTE) NOT NULL , "PASSWD" VARCHAR2(128 BYTE) NOT NULL , "CREATE_TIME" DATE NULL , "STATUS" CHAR(1 BYTE) NOT NULL );COMMENT ON COLUMN "SCOTT"."T_USER"."USERNAME" IS '用户名';COMMENT ON COLUMN "SCOTT"."T_USER"."PASSWD" IS '密码';COMMENT ON COLUMN "SCOTT"."T_USER"."CREATE_TIME" IS '创建时间';COMMENT ON COLUMN "SCOTT"."T_USER"."STATUS" IS '是否有效 1：有效 0：锁定';-- ------------------------------ Records of T_USER-- ----------------------------INSERT INTO "SCOTT"."T_USER" VALUES ('2', 'tester', '243e29429b340192700677d48c09d992', TO_DATE('2017-12-11 17:20:21', 'YYYY-MM-DD HH24:MI:SS'), '1');INSERT INTO "SCOTT"."T_USER" VALUES ('1', 'mrbird', '42ee25d1e43e9f57119a00d0a39e5250', TO_DATE('2017-12-11 10:52:48', 'YYYY-MM-DD HH24:MI:SS'), '1');-- ------------------------------ Table structure for T_USER_ROLE-- ----------------------------CREATE TABLE "SCOTT"."T_USER_ROLE" ( "USER_ID" NUMBER(10) NULL , "RID" NUMBER(10) NULL );COMMENT ON COLUMN "SCOTT"."T_USER_ROLE"."USER_ID" IS '用户id';COMMENT ON COLUMN "SCOTT"."T_USER_ROLE"."RID" IS '角色id';-- ------------------------------ Records of T_USER_ROLE-- ----------------------------INSERT INTO "SCOTT"."T_USER_ROLE" VALUES ('1', '1');INSERT INTO "SCOTT"."T_USER_ROLE" VALUES ('2', '2');一些非空约束这里就不贴了，可参考源码中的init.sql。上面的sql创建了五张表：用户表T_USER、角色表T_ROLE、用户角色关联表T_USER_ROLE、权限表T_PERMISSION和权限角色关联表T_ROLE_PERMISSION。用户mrbird角色为admin，用户tester角色为test。admin角色拥有用户的所有权限（user:user,user:add,user:delete），而test角色只拥有用户的查看权限（user:user）。密码都是123456，经过Shiro提供的MD5加密。Dao层创建两个实体类，对应用户角色表Role和用户权限表Permission：Role:12345678public class Role implements Serializable&#123; private static final long serialVersionUID = -227437593919820521L; private Integer id; private String name; private String memo; // get set略&#125;Permission:12345678public class Permission implements Serializable&#123; private static final long serialVersionUID = 7160557680614732403L; private Integer id; private String url; private String name; // get,set略 &#125;创建两个dao接口，分别用户查询用户的所有角色和用户的所有权限：UserRoleMapper：1234@Mapperpublic interface UserRoleMapper &#123; List&lt;Role&gt; findByUserName(String userName);&#125;UserPermissionMapper：1234@Mapperpublic interface UserPermissionMapper &#123; List&lt;Permission&gt; findByUserName(String userName);&#125;其xml实现：UserRoleMapper.xml：123456789101112131415&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.springboot.dao.UserRoleMapper"&gt; &lt;resultMap type="com.springboot.pojo.Role" id="role"&gt; &lt;id column="id" property="id" javaType="java.lang.Integer" jdbcType="NUMERIC"/&gt; &lt;id column="name" property="name" javaType="java.lang.String" jdbcType="VARCHAR"/&gt; &lt;id column="memo" property="memo" javaType="java.lang.String" jdbcType="VARCHAR"/&gt; &lt;/resultMap&gt; &lt;select id="findByUserName" resultMap="role"&gt; select r.id,r.name,r.memo from t_role r left join t_user_role ur on(r.id = ur.rid) left join t_user u on(u.id = ur.user_id) where u.username = #&#123;userName&#125; &lt;/select&gt;&lt;/mapper&gt;UserPermissionMapper.xml：1234567891011121314151617&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.springboot.dao.UserPermissionMapper"&gt; &lt;resultMap type="com.springboot.pojo.Permission" id="permission"&gt; &lt;id column="id" property="id" javaType="java.lang.Integer" jdbcType="NUMERIC"/&gt; &lt;id column="url" property="url" javaType="java.lang.String" jdbcType="VARCHAR"/&gt; &lt;id column="name" property="name" javaType="java.lang.String" jdbcType="VARCHAR"/&gt; &lt;/resultMap&gt; &lt;select id="findByUserName" resultMap="permission"&gt; select p.id,p.url,p.name from t_role r left join t_user_role ur on(r.id = ur.rid) left join t_user u on(u.id = ur.user_id) left join t_role_permission rp on(rp.rid = r.id) left join t_permission p on(p.id = rp.pid ) where u.username = #&#123;userName&#125; &lt;/select&gt;&lt;/mapper&gt;数据层准备好后，接下来对Realm进行改造。Realm在Shiro中，用户角色和权限的获取是在Realm的doGetAuthorizationInfo()方法中实现的，所以接下来手动实现该方法：123456789101112131415161718192021222324252627282930313233343536373839404142434445public class ShiroRealm extends AuthorizingRealm &#123; @Autowired private UserMapper userMapper; @Autowired private UserRoleMapper userRoleMapper; @Autowired private UserPermissionMapper userPermissionMapper; /** * 获取用户角色和权限 */ @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principal) &#123; User user = (User) SecurityUtils.getSubject().getPrincipal(); String userName = user.getUserName(); System.out.println("用户" + userName + "获取权限-----ShiroRealm.doGetAuthorizationInfo"); SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo(); // 获取用户角色集 List&lt;Role&gt; roleList = userRoleMapper.findByUserName(userName); Set&lt;String&gt; roleSet = new HashSet&lt;String&gt;(); for (Role r : roleList) &#123; roleSet.add(r.getName()); &#125; simpleAuthorizationInfo.setRoles(roleSet); // 获取用户权限集 List&lt;Permission&gt; permissionList = userPermissionMapper.findByUserName(userName); Set&lt;String&gt; permissionSet = new HashSet&lt;String&gt;(); for (Permission p : permissionList) &#123; permissionSet.add(p.getName()); &#125; simpleAuthorizationInfo.setStringPermissions(permissionSet); return simpleAuthorizationInfo; &#125; /** * 登录认证 */ @Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123; // 登录认证已经实现过，这里不再贴代码 &#125;&#125;在上述代码中，我们通过方法userRoleMapper.findByUserName(userName)和userPermissionMapper.findByUserName(userName)获取了当前登录用户的角色和权限集，然后保存到SimpleAuthorizationInfo对象中，并返回给Shiro，这样Shiro中就存储了当前用户的角色和权限信息了。除了对Realm进行改造外，我们还需修改ShiroConfig配置。ShiroConfigShiro为我们提供了一些和权限相关的注解，如下所示：1234567891011121314// 表示当前Subject已经通过login进行了身份验证；即Subject.isAuthenticated()返回true。@RequiresAuthentication // 表示当前Subject已经身份验证或者通过记住我登录的。@RequiresUser // 表示当前Subject没有身份验证或通过记住我登录过，即是游客身份。@RequiresGuest // 表示当前Subject需要角色admin和user。 @RequiresRoles(value=&#123;"admin", "user"&#125;, logical= Logical.AND) // 表示当前Subject需要权限user:a或user:b。@RequiresPermissions (value=&#123;"user:a", "user:b"&#125;, logical= Logical.OR)要开启这些注解的使用，需要在ShiroConfig中添加如下配置：12345678910111213141516...@Bean@DependsOn(&#123;"lifecycleBeanPostProcessor"&#125;)public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() &#123; DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator(); advisorAutoProxyCreator.setProxyTargetClass(true); return advisorAutoProxyCreator;&#125;@Beanpublic AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor(SecurityManager securityManager) &#123; AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = new AuthorizationAttributeSourceAdvisor(); authorizationAttributeSourceAdvisor.setSecurityManager(securityManager); return authorizationAttributeSourceAdvisor;&#125;...Controller编写一个UserController，用于处理User类的访问请求，并使用Shiro权限注解控制权限：12345678910111213141516171819202122232425@Controller@RequestMapping("/user")public class UserController &#123; @RequiresPermissions("user:user") @RequestMapping("list") public String userList(Model model) &#123; model.addAttribute("value", "获取用户信息"); return "user"; &#125; @RequiresPermissions("user:add") @RequestMapping("add") public String userAdd(Model model) &#123; model.addAttribute("value", "新增用户"); return "user"; &#125; @RequiresPermissions("user:delete") @RequestMapping("delete") public String userDelete(Model model) &#123; model.addAttribute("value", "删除用户"); return "user"; &#125;&#125;在LoginController中添加一个/403跳转：1234@GetMapping("/403")public String forbid() &#123; return "403";&#125;前端页面对index.html进行改造，添加三个用户操作的链接：1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;首页&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;你好！[[$&#123;user.userName&#125;]]&lt;/p&gt; &lt;h3&gt;权限测试链接&lt;/h3&gt; &lt;div&gt; &lt;a th:href="@&#123;/user/list&#125;"&gt;获取用户信息&lt;/a&gt; &lt;a th:href="@&#123;/user/add&#125;"&gt;新增用户&lt;/a&gt; &lt;a th:href="@&#123;/user/delete&#125;"&gt;删除用户&lt;/a&gt; &lt;/div&gt; &lt;a th:href="@&#123;/logout&#125;"&gt;注销&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;当用户对用户的操作有相应权限的时候，跳转到user.html：1234567891011&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;[[$&#123;value&#125;]]&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;[[$&#123;value&#125;]]&lt;/p&gt; &lt;a th:href="@&#123;/index&#125;"&gt;返回&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;403页面：12345678910&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;暂无权限&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;您没有权限访问该资源！！&lt;/p&gt; &lt;a th:href="@&#123;/index&#125;"&gt;返回&lt;/a&gt;&lt;/body&gt;测试启动项目，使用mrbird的账户登录后主页如下图所示：点击”获取用户信息连接”：因为mrbird角色为admin，对着三个链接都由访问权限，所以这里就不演示了。接着使用tester用户登录。因为tester用户角色为test，只拥有（user:user）权限，所以当其点击”新增用户”和”删除用户”的时候：后台抛出org.apache.shiro.authz.AuthorizationException: Not authorized to invoke method:…异常！！！这里有点出乎意料，本以为在ShiroConfig中配置了shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/403&quot;);，没有权限的访问会自动重定向到/403，结果证明并不是这样。后来研究发现，该设置只对filterChain起作用，比如在filterChain中设置了filterChainDefinitionMap.put(&quot;/user/update&quot;, &quot;perms[user:update]&quot;);，如果用户没有user:update权限，那么当其访问/user/update的时候，页面会被重定向到/403。那么对于上面这个问题，我们可以定义一个全局异常捕获类：12345678@ControllerAdvice@Order(value = Ordered.HIGHEST_PRECEDENCE)public class GlobalExceptionHandler &#123; @ExceptionHandler(value = AuthorizationException.class) public String handleAuthorizationException() &#123; return "403"; &#125;&#125;启动项目，再次使用tester的账号点击”新增用户”和”删除用户”链接的时候，页面如下所示：页面已经成功重定向到/403。源码链接https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/13.Spring-Boot-Shiro-Authorization]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Shiro</tag>
        <tag>Security</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot Shiro Remember Me]]></title>
    <url>%2Fblog%2FSpring-Boot-Shiro%20Remember-Me.html</url>
    <content type="text"><![CDATA[接着《Spring-Boot-shiro用户认证》，当用户成功登录后，关闭浏览器然后再打开浏览器访问http://localhost:8080/web/index，页面会跳转到登录页，之前的登录因为浏览器的关闭已经失效。Shiro为我们提供了Remember Me的功能，用户的登录状态不会因为浏览器的关闭而失效，直到Cookie过期。更改 ShiroConfig继续编辑ShiroConfig，加入：1234567891011121314151617181920212223/** * cookie对象 * @return */public SimpleCookie rememberMeCookie() &#123; // 设置cookie名称，对应login.html页面的&lt;input type="checkbox" name="rememberMe"/&gt; SimpleCookie cookie = new SimpleCookie("rememberMe"); // 设置cookie的过期时间，单位为秒，这里为一天 cookie.setMaxAge(86400); return cookie;&#125;/** * cookie管理对象 * @return */public CookieRememberMeManager rememberMeManager() &#123; CookieRememberMeManager cookieRememberMeManager = new CookieRememberMeManager(); cookieRememberMeManager.setCookie(rememberMeCookie()); // rememberMe cookie加密的密钥 cookieRememberMeManager.setCipherKey(Base64.decode("4AvVhmFLUs0KTA3Kprsdag==")); return cookieRememberMeManager;&#125;接下来将cookie管理对象设置到SecurityManager中：1234567@Bean public SecurityManager securityManager()&#123; DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(); securityManager.setRealm(shiroRealm()); securityManager.setRememberMeManager(rememberMeManager()); return securityManager; &#125;最后修改权限配置，将ShiroFilterFactoryBean的filterChainDefinitionMap.put(&quot;/**&quot;, &quot;authc&quot;);更改为filterChainDefinitionMap.put(&quot;/**&quot;, &quot;user&quot;);。user指的是用户认证通过或者配置了Remember Me记住用户登录状态后可访问。更改 login.html在login.html中加入Remember Me checkbox：12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;登录&lt;/title&gt; &lt;link rel="stylesheet" th:href="@&#123;/css/login.css&#125;" type="text/css"&gt; &lt;script th:src="@&#123;/js/jquery-1.11.1.min.js&#125;"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="login-page"&gt; &lt;div class="form"&gt; &lt;input type="text" placeholder="用户名" name="username" required="required"/&gt; &lt;input type="password" placeholder="密码" name="password" required="required"/&gt; &lt;p&gt;&lt;input type="checkbox" name="rememberMe" /&gt;记住我&lt;/p&gt; &lt;button onclick="login()"&gt;登录&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;script th:inline="javascript"&gt; var ctx = [[@&#123;/&#125;]]; function login() &#123; var username = $("input[name='username']").val(); var password = $("input[name='password']").val(); var rememberMe = $("input[name='rememberMe']").is(':checked'); $.ajax(&#123; type: "post", url: ctx + "login", data: &#123;"username": username,"password": password,"rememberMe": rememberMe&#125;, dataType: "json", success: function (r) &#123; if (r.code == 0) &#123; location.href = ctx + 'index'; &#125; else &#123; alert(r.msg); &#125; &#125; &#125;); &#125;&lt;/script&gt;&lt;/html&gt;更改 LoginController更改LoginController的login()方法：12345678910111213141516171819@PostMapping("/login")@ResponseBodypublic ResponseBo login(String username, String password, Boolean rememberMe) &#123; password = MD5Utils.encrypt(username, password); UsernamePasswordToken token = new UsernamePasswordToken(username, password, rememberMe); Subject subject = SecurityUtils.getSubject(); try &#123; subject.login(token); return ResponseBo.ok(); &#125; catch (UnknownAccountException e) &#123; return ResponseBo.error(e.getMessage()); &#125; catch (IncorrectCredentialsException e) &#123; return ResponseBo.error(e.getMessage()); &#125; catch (LockedAccountException e) &#123; return ResponseBo.error(e.getMessage()); &#125; catch (AuthenticationException e) &#123; return ResponseBo.error("认证失败！"); &#125;&#125;当rememberMe参数为true的时候，Shiro就会帮我们记住用户的登录状态。启动项目即可看到效果。源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/12.Spring-Boot-Shiro-RememberMe]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Shiro</tag>
        <tag>Security</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot Shiro用户认证]]></title>
    <url>%2Fblog%2FSpring-Boot-shiro%20Authentication.html</url>
    <content type="text"><![CDATA[在Spring Boot中集成Shiro进行用户的认证过程主要可以归纳为以下三点：1、定义一个ShiroConfig，然后配置SecurityManager Bean，SecurityManager为Shiro的安全管理器，管理着所有Subject；2、在ShiroConfig中配置ShiroFilterFactoryBean，其为Shiro过滤器工厂类，依赖于SecurityManager；3、自定义Realm实现，Realm包含doGetAuthorizationInfo()和doGetAuthenticationInfo()方法，因为本文只涉及用户认证，所以只实现doGetAuthenticationInfo()方法。引入依赖首先可根据文章《开启Spring Boot》搭建一个Spring Boot Web程序，然后引入Shiro、MyBatis、数据库和thymeleaf依赖：123456789101112131415161718192021222324252627282930313233&lt;!-- MyBatis --&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- thymeleaf --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- shiro-spring --&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt; &lt;version&gt;1.4.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- oracle驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.oracle&lt;/groupId&gt; &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt; &lt;version&gt;6.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- druid数据源驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.6&lt;/version&gt;&lt;/dependency&gt;ShiroConfig定义一个Shiro配置类，名称为ShiroConfig：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354@Configurationpublic class ShiroConfig &#123; @Bean public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) &#123; ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean(); // 设置securityManager shiroFilterFactoryBean.setSecurityManager(securityManager); // 登录的url shiroFilterFactoryBean.setLoginUrl("/login"); // 登录成功后跳转的url shiroFilterFactoryBean.setSuccessUrl("/index"); // 未授权url shiroFilterFactoryBean.setUnauthorizedUrl("/403"); LinkedHashMap&lt;String, String&gt; filterChainDefinitionMap = new LinkedHashMap&lt;&gt;(); // 定义filterChain，静态资源不拦截 filterChainDefinitionMap.put("/css/**", "anon"); filterChainDefinitionMap.put("/js/**", "anon"); filterChainDefinitionMap.put("/fonts/**", "anon"); filterChainDefinitionMap.put("/img/**", "anon"); // druid数据源监控页面不拦截 filterChainDefinitionMap.put("/druid/**", "anon"); // 配置退出过滤器，其中具体的退出代码Shiro已经替我们实现了 filterChainDefinitionMap.put("/logout", "logout"); filterChainDefinitionMap.put("/", "anon"); // 除上以外所有url都必须认证通过才可以访问，未通过认证自动访问LoginUrl filterChainDefinitionMap.put("/**", "authc"); shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap); return shiroFilterFactoryBean; &#125; @Bean public SecurityManager securityManager()&#123; // 配置SecurityManager，并注入shiroRealm DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(); securityManager.setRealm(shiroRealm()); return securityManager; &#125; @Bean(name = "lifecycleBeanPostProcessor") public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() &#123; // Shiro生命周期处理器 return new LifecycleBeanPostProcessor(); &#125; @Bean public ShiroRealm shiroRealm()&#123; // 配置Realm，需自己实现 ShiroRealm shiroRealm = new ShiroRealm(); return shiroRealm; &#125; &#125;需要注意的是filterChain基于短路机制，即最先匹配原则，如：12/user/**=anon/user/aa=authc 永远不会执行其中anon、authc等为Shiro为我们实现的过滤器，具体如下表所示：Filter NameClassDescriptionanonorg.apache.shiro.web.filter.authc.AnonymousFilter匿名拦截器，即不需要登录即可访问；一般用于静态资源过滤；示例/static/**=anonauthcorg.apache.shiro.web.filter.authc.FormAuthenticationFilter基于表单的拦截器；如/**=authc，如果没有登录会跳到相应的登录页面登录authcBasicorg.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilterBasic HTTP身份验证拦截器logoutorg.apache.shiro.web.filter.authc.LogoutFilter退出拦截器，主要属性：redirectUrl：退出成功后重定向的地址（/），示例/logout=logoutnoSessionCreationorg.apache.shiro.web.filter.session.NoSessionCreationFilter不创建会话拦截器，调用subject.getSession(false)不会有什么问题，但是如果subject.getSession(true)将抛出DisabledSessionException异常permsorg.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter权限授权拦截器，验证用户是否拥有所有权限；属性和roles一样；示例/user/**=perms[&quot;user:create&quot;]portorg.apache.shiro.web.filter.authz.PortFilter端口拦截器，主要属性port(80)：可以通过的端口；示例/test= port[80]，如果用户访问该页面是非80，将自动将请求端口改为80并重定向到该80端口，其他路径/参数等都一样restorg.apache.shiro.web.filter.authz.HttpMethodPermissionFilterrest风格拦截器，自动根据请求方法构建权限字符串；示例/users=rest[user]，会自动拼出user:read,user:create,user:update,user:delete权限字符串进行权限匹配（所有都得匹配，isPermittedAll）rolesorg.apache.shiro.web.filter.authz.RolesAuthorizationFilter角色授权拦截器，验证用户是否拥有所有角色；示例/admin/**=roles[admin]sslorg.apache.shiro.web.filter.authz.SslFilterSSL拦截器，只有请求协议是https才能通过；否则自动跳转会https端口443；其他和port拦截器一样；userorg.apache.shiro.web.filter.authc.UserFilter用户拦截器，用户已经身份验证/记住我登录的都可；示例/**=user配置完ShiroConfig后，接下来对Realm进行实现，然后注入到SecurityManager中。Realm自定义Realm实现只需继承AuthorizingRealm类，然后实现doGetAuthorizationInfo()和doGetAuthenticationInfo()方法即可。这两个方法名乍看有点像，authorization发音[ˌɔ:θəraɪˈzeɪʃn]，为授权，批准的意思，即获取用户的角色和权限等信息；authentication发音[ɔ:ˌθentɪ’keɪʃn]，认证，身份验证的意思，即登录时验证用户的合法性，比如验证用户名和密码。1234567891011121314151617181920212223242526272829303132333435363738394041public class ShiroRealm extends AuthorizingRealm &#123; @Autowired private UserMapper userMapper; /** * 获取用户角色和权限 */ @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principal) &#123; return null; &#125; /** * 登录认证 */ @Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123; // 获取用户输入的用户名和密码 String userName = (String) token.getPrincipal(); String password = new String((char[]) token.getCredentials()); System.out.println("用户" + userName + "认证-----ShiroRealm.doGetAuthenticationInfo"); // 通过用户名到数据库查询用户信息 User user = userMapper.findByUserName(userName); if (user == null) &#123; throw new UnknownAccountException("用户名或密码错误！"); &#125; if (!password.equals(user.getPassword())) &#123; throw new IncorrectCredentialsException("用户名或密码错误！"); &#125; if (user.getStatus().equals("0")) &#123; throw new LockedAccountException("账号已被锁定,请联系管理员！"); &#125; SimpleAuthenticationInfo info = new SimpleAuthenticationInfo(user, password, getName()); return info; &#125;&#125;因为本节只讲述用户认证，所以doGetAuthorizationInfo()方法先不进行实现。其中UnknownAccountException等异常为Shiro自带异常，Shiro具有丰富的运行时AuthenticationException层次结构，可以准确指出尝试失败的原因。你可以包装在一个try/catch块，并捕捉任何你希望的异常，并作出相应的反应。例如：12345678910try &#123; currentUser.login(token);&#125; catch ( UnknownAccountException uae ) &#123; ...&#125; catch ( IncorrectCredentialsException ice ) &#123; ...&#125; catch ( LockedAccountException lae ) &#123; ...&#125; catch ( ExcessiveAttemptsException eae ) &#123; ...&#125; ... catch your own ...&#125; catch ( AuthenticationException ae ) &#123; //unexpected error?&#125;虽然我们可以准确的获取异常信息，并根据这些信息给用户提示具体错误，但最安全的做法是在登录失败时仅向用户显示通用错误提示信息，例如“用户名或密码错误”。这样可以防止数据库被恶意扫描。在Realm中UserMapper为Dao层，标准的做法应该还有Service层，但这里为了方便就不再定义Service层了。接下来编写和数据库打交道的Dao层。数据层首先创建一张用户表，用于存储用户的基本信息（基于Oracle 11g）：1234567891011121314151617181920212223242526-- ------------------------------ Table structure for T_USER-- ----------------------------CREATE TABLE "SCOTT"."T_USER" ( "ID" NUMBER NOT NULL , "USERNAME" VARCHAR2(20 BYTE) NOT NULL , "PASSWD" VARCHAR2(128 BYTE) NOT NULL , "CREATE_TIME" DATE NULL , "STATUS" CHAR(1 BYTE) NOT NULL );COMMENT ON COLUMN "SCOTT"."T_USER"."USERNAME" IS '用户名';COMMENT ON COLUMN "SCOTT"."T_USER"."PASSWD" IS '密码';COMMENT ON COLUMN "SCOTT"."T_USER"."CREATE_TIME" IS '创建时间';COMMENT ON COLUMN "SCOTT"."T_USER"."STATUS" IS '是否有效 1：有效 0：锁定';-- ------------------------------ Records of T_USER-- ----------------------------INSERT INTO "SCOTT"."T_USER" VALUES ('2', 'test', '7a38c13ec5e9310aed731de58bbc4214', TO_DATE('2017-11-19 17:20:21', 'YYYY-MM-DD HH24:MI:SS'), '0');INSERT INTO "SCOTT"."T_USER" VALUES ('1', 'mrbird', '42ee25d1e43e9f57119a00d0a39e5250', TO_DATE('2017-11-19 10:52:48', 'YYYY-MM-DD HH24:MI:SS'), '1');-- ------------------------------ Primary Key structure for table T_USER-- ----------------------------ALTER TABLE "SCOTT"."T_USER" ADD PRIMARY KEY ("ID");数据源的配置这里就不贴出来了，具体可参考源码，或者参考https://mrbird.cc/Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Mybatis.html。库表对应的实体类：123456789101112public class User implements Serializable&#123; private static final long serialVersionUID = -5440372534300871944L; private Integer id; private String userName; private String password; private Date createTime; private String status; // get,set略&#125;定义接口UserMapper：1234@Mapperpublic interface UserMapper &#123; User findByUserName(String userName);&#125;xml实现：1234567891011121314&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.springboot.dao.UserMapper"&gt; &lt;resultMap type="com.springboot.pojo.User" id="User"&gt; &lt;id column="id" property="id" javaType="java.lang.Integer" jdbcType="NUMERIC"/&gt; &lt;id column="username" property="userName" javaType="java.lang.String" jdbcType="VARCHAR"/&gt; &lt;id column="passwd" property="password" javaType="java.lang.String" jdbcType="VARCHAR"/&gt; &lt;id column="create_time" property="createTime" javaType="java.util.Date" jdbcType="DATE"/&gt; &lt;id column="status" property="status" javaType="java.lang.String" jdbcType="VARCHAR"/&gt; &lt;/resultMap&gt; &lt;select id="findByUserName" resultMap="User"&gt; select * from t_user where username = #&#123;userName&#125; &lt;/select&gt;&lt;/mapper&gt;数据层准备完了，接下来编写login.html和index.html页面。页面准备编写登录页面login.html：1234567891011121314151617181920212223242526272829303132333435363738&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;登录&lt;/title&gt; &lt;link rel="stylesheet" th:href="@&#123;/css/login.css&#125;" type="text/css"&gt; &lt;script th:src="@&#123;/js/jquery-1.11.1.min.js&#125;"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="login-page"&gt; &lt;div class="form"&gt; &lt;input type="text" placeholder="用户名" name="username" required="required"/&gt; &lt;input type="password" placeholder="密码" name="password" required="required"/&gt; &lt;button onclick="login()"&gt;登录&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;script th:inline="javascript"&gt; var ctx = [[@&#123;/&#125;]]; function login() &#123; var username = $("input[name='username']").val(); var password = $("input[name='password']").val(); $.ajax(&#123; type: "post", url: ctx + "login", data: &#123;"username": username,"password": password&#125;, dataType: "json", success: function (r) &#123; if (r.code == 0) &#123; location.href = ctx + 'index'; &#125; else &#123; alert(r.msg); &#125; &#125; &#125;); &#125;&lt;/script&gt;&lt;/html&gt;主页index.html：1234567891011&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;首页&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;你好！[[$&#123;user.userName&#125;]]&lt;/p&gt; &lt;a th:href="@&#123;/logout&#125;"&gt;注销&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;页面准备完毕，接下来编写LoginController。ControllerLoginController代码如下：12345678910111213141516171819202122232425262728293031323334353637383940414243@Controllerpublic class LoginController &#123; @GetMapping("/login") public String login() &#123; return "login"; &#125; @PostMapping("/login") @ResponseBody public ResponseBo login(String username, String password) &#123; // 密码MD5加密 password = MD5Utils.encrypt(username, password); UsernamePasswordToken token = new UsernamePasswordToken(username, password); // 获取Subject对象 Subject subject = SecurityUtils.getSubject(); try &#123; subject.login(token); return ResponseBo.ok(); &#125; catch (UnknownAccountException e) &#123; return ResponseBo.error(e.getMessage()); &#125; catch (IncorrectCredentialsException e) &#123; return ResponseBo.error(e.getMessage()); &#125; catch (LockedAccountException e) &#123; return ResponseBo.error(e.getMessage()); &#125; catch (AuthenticationException e) &#123; return ResponseBo.error("认证失败！"); &#125; &#125; @RequestMapping("/") public String redirectIndex() &#123; return "redirect:/index"; &#125; @RequestMapping("/index") public String index(Model model) &#123; // 登录成后，即可通过Subject获取登录的用户信息 User user = (User) SecurityUtils.getSubject().getPrincipal(); model.addAttribute("user", user); return "index"; &#125;&#125;登录成功后，根据之前在ShiroConfig中的配置shiroFilterFactoryBean.setSuccessUrl(&quot;/index&quot;)，页面会自动访问/index路径。测试最终项目目录如下图所示：启动项目，分别访问：http://localhost:8080/web/http://localhost:8080/web/indexhttp://localhost:8080/web/aaaaaaahttp://localhost:8080/web可发现页面都被重定向到http://localhost:8080/web/login：当输入错误的用户信息时：用test的账户登录（test账户的status为0，已被锁定）：当输入正确的用户名密码时候：点击注销连接，根据ShiroConfig的配置filterChainDefinitionMap.put(&quot;/logout&quot;, &quot;logout&quot;)，Shiro会自动帮我们注销用户信息，并重定向到/路径。Spring Boot集成Shiro进行用户认证到此就结束了，源码参见https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/11.Spring-Boot-Shiro-Authentication]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Shiro</tag>
        <tag>Security</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Apache Shiro简介]]></title>
    <url>%2Fblog%2FApache%20Shiro%E7%AE%80%E4%BB%8B.html</url>
    <content type="text"><![CDATA[Apache Shiro（发音为shee-roh，日语堡垒（Castle）的意思）是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用。相较于Spring Security来说较为简单，易于上手。Apache Shiro有三个核心的概念Subject，SecurityManager和Realms，如下图所示：1、Subject：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等，即一个抽象概念。所有Subject 都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager。可以把Subject认为是一个门面，SecurityManager才是实际的执行者。在shiro中通过org.apache.shiro.SecurityUtils类来获取Subject对象：1234import org.apache.shiro.subject.Subject;import org.apache.shiro.SecurityUtils;...Subject currentUser = SecurityUtils.getSubject();更多关于Subject的信息可访问http://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/subject/Subject.html2、SecurityManager：安全管理器，即所有与安全有关的操作都会与SecurityManager交互，且它管理着所有Subject，可以看出它是Shiro的核心。它负责与后边介绍的其他组件进行 交互，类似于Spring MVC中的DispatcherServlet前端控制器。3、Realm：域，Shiro从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法。 也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作。简而言之，创建一个基本的Shiro应用过程为：应用代码通过Subject来进行认证和授权，而Subject又委托给SecurityManager；我们需要给Shiro的SecurityManager注入Realm，从而让SecurityManager能得到合法的用户及其权限进行判断。Shiro并没有为我们提供Realm的实现，需要我们手动编写实现。基本过程为继承org.apache.shiro.realm.AuthorizingRealm抽象类，实现doGetAuthorizationInfo和doGetAuthenticationInfo方法。了解了Shiro的核心组件后，接下来看看Shiro为我们带来了哪些功能模块：Shiro提供了四大基本安全功能：认证，授权，会话管理和加密。身份验证(Authentication)：也称为登录验证，即验证用户名和密码是否正确；授权(Authorization)：根据用户的角色和权限来控制用户可访问的资源；会话管理(Session Management)：即使在非Web或EJB应用程序中，也可以管理用户特定的SESSION会话；密码学(Cryptography)：使用加密算法保证数据安全，同时易于使用。除此之外，Shiro也支持以下特性：Web支持(Web Support)：Shiro提供的web程序API可以帮助轻松保护Web应用程序；缓存(Caching)：缓存可确保安全验证操作保持快速高效；并发性(Concurrency)：Apache Shiro支持具有并发功能的多线程应用程序；测试(Testing)：测试API帮助您编写单元测试和集成测试；运行方式(Run As)：允许用户以别的用户身份（如果允许）登录；记住我(Remember Me)：在会话中记住用户的身份，只有在强制登录时才需要登录。参考自:http://shiro.apache.org/introduction.htmlhttp://www.infoq.com/cn/articles/apache-shiro]]></content>
      <tags>
        <tag>Shiro</tag>
        <tag>Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot项目打包成war包]]></title>
    <url>%2Fblog%2FSpring-Boot%20war.html</url>
    <content type="text"><![CDATA[在pom.xml文件中，将打包方式改为war：1&lt;packaging&gt;war&lt;/packaging&gt;然后添加如下的Tomcat依赖配置，覆盖Spring Boot自带的Tomcat依赖：12345&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;在&lt;build&gt;&lt;/build&gt;标签内配置项目名（该配置类似于server.context-path=mrbird）：123456...&lt;build&gt; ... &lt;finalName&gt;mrbird&lt;/finalName&gt;&lt;/build&gt;...添加启动类ServletInitializer：123456789import org.springframework.boot.builder.SpringApplicationBuilder;import org.springframework.boot.web.support.SpringBootServletInitializer;public class ServletInitializer extends SpringBootServletInitializer &#123; @Override protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123; return application.sources(Application.class); &#125;&#125;其中Application为Spring Boot的启动类。准备完毕后，运行mvn clean package命令即可在target目录下生产war包：]]></content>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot中使用缓存]]></title>
    <url>%2Fblog%2FSpring-Boot%20cache.html</url>
    <content type="text"><![CDATA[在程序中可以使用缓存的技术来节省对数据库的开销。Spring Boot对缓存提供了很好的支持，我们几乎不用做过多的配置即可使用各种缓存实现。这里主要介绍平日里个人接触较多的Ehcache和Redis缓存实现。准备工作可根据Spring-Boot中使用Mybatis.html搭建一个Spring Boot项目，然后yml中配置日志输出级别以观察SQL的执行情况：12345logging: level: com: springboot: mapper: debug其中com.spring.mapper为MyBatis的Mapper接口路径。然后编写如下测试方法：12345678910111213141516@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = Application.class)public class ApplicationTest &#123; @Autowired private StudentService studentService; @Test public void test() throws Exception &#123; Student student1 = this.studentService.queryStudentBySno("001"); System.out.println("学号" + student1.getSno() + "的学生姓名为：" + student1.getName()); Student student2 = this.studentService.queryStudentBySno("001"); System.out.println("学号" + student2.getSno() + "的学生姓名为：" + student2.getName()); &#125;&#125;右键run as junit test：123456782017-11-17 16:34:26.535 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select * from student where sno=? 2017-11-17 16:34:26.688 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-17 16:34:26.716 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：KangKang2017-11-17 16:34:26.720 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select * from student where sno=? 2017-11-17 16:34:26.720 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-17 16:34:26.721 DEBUG 9932 --- [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：KangKang可发现第二个查询虽然和第一个查询完全一样，但其还是对数据库进行了查询。接下来引入缓存来改善这个结果。使用缓存要开启Spring Boot的缓存功能，需要在pom中引入spring-boot-starter-cache：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;&lt;/dependency&gt;接着在Spring Boot入口类中加入@EnableCaching注解开启缓存功能：1234567@SpringBootApplication@EnableCachingpublic class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class,args); &#125;&#125;在StudentService接口中加入缓存注解：123456789101112@CacheConfig(cacheNames = "student")@Repositorypublic interface StudentService &#123; @CachePut(key = "#p0.sno") Student update(Student student); @CacheEvict(key = "#p0", allEntries = true) void deleteStudentBySno(String sno); @Cacheable(key = "#p0") Student queryStudentBySno(String sno);&#125;我们在StudentService接口中加入了@CacheConfig注解，queryStudentBySno方法使用了注解@Cacheable(key=&quot;#p0&quot;)，即将id作为redis中的key值。当我们更新数据的时候，应该使用@CachePut(key=&quot;#p0.sno&quot;)进行缓存数据的更新，否则将查询到脏数据，因为该注解保存的是方法的返回值，所以这里应该返回Student。其实现类：123456789101112131415161718192021@Repository("studentService")public class StudentServiceImpl implements StudentService&#123; @Autowired private StudentMapper studentMapper; @Override public Student update(Student student) &#123; this.studentMapper.update(student); return this.studentMapper.queryStudentBySno(student.getSno()); &#125; @Override public void deleteStudentBySno(String sno) &#123; this.studentMapper.deleteStudentBySno(sno); &#125; @Override public Student queryStudentBySno(String sno) &#123; return this.studentMapper.queryStudentBySno(sno); &#125;&#125;在Spring Boot中可使用的缓存注解有：缓存注解@CacheConfig：主要用于配置该类中会用到的一些共用的缓存配置。在这里@CacheConfig(cacheNames = &quot;student&quot;)：配置了该数据访问对象中返回的内容将存储于名为student的缓存对象中，我们也可以不使用该注解，直接通过@Cacheable自己配置缓存集的名字来定义；@Cacheable：配置了queryStudentBySno函数的返回值将被加入缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。该注解主要有下面几个参数：value、cacheNames：两个等同的参数（cacheNames为Spring 4新增，作为value的别名），用于指定缓存存储的集合名。由于Spring 4中新增了@CacheConfig，因此在Spring 3中原本必须有的value属性，也成为非必需项了；key：缓存对象存储在Map集合中的key值，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用SpEL表达式，比如：@Cacheable(key = &quot;#p0&quot;)：使用函数第一个参数作为缓存的key值，更多关于SpEL表达式的详细内容可参考https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache；condition：缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：@Cacheable(key = &quot;#p0&quot;, condition = &quot;#p0.length() &lt; 3&quot;)，表示只有当第一个参数的长度小于3的时候才会被缓存；unless：另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于condition参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对result进行判断；keyGenerator：用于指定key生成器，非必需。若需要指定一个自定义的key生成器，我们需要去实现org.springframework.cache.interceptor.KeyGenerator接口，并使用该参数来指定；cacheManager：用于指定使用哪个缓存管理器，非必需。只有当有多个时才需要使用；cacheResolver：用于指定使用那个缓存解析器，非必需。需通过org.springframework.cache.interceptor.CacheResolver接口来实现自己的缓存解析器，并用该参数指定；@CachePut：配置于函数上，能够根据参数定义条件来进行缓存，其缓存的是方法的返回值，它与@Cacheable不同的是，它每次都会真实调用函数，所以主要用于数据新增和修改操作上。它的参数与@Cacheable类似，具体功能可参考上面对@Cacheable参数的解析；@CacheEvict：配置于函数上，通常用在删除方法上，用来从缓存中移除相应数据。除了同@Cacheable一样的参数之外，它还有下面两个参数：allEntries：非必需，默认为false。当为true时，会移除所有数据；beforeInvocation：非必需，默认为false，会在调用方法之后移除数据。当为true时，会在调用方法之前移除数据。缓存实现要使用上Spring Boot的缓存功能，还需要提供一个缓存的具体实现。Spring Boot根据下面的顺序去侦测缓存实现：GenericJCache (JSR-107)EhCache 2.xHazelcastInfinispanRedisGuavaSimple除了按顺序侦测外，我们也可以通过配置属性spring.cache.type来强制指定。接下来主要介绍基于Redis和Ehcache的缓存实现。RedisRedis的下载地址为https://github.com/MicrosoftArchive/redis/releases，Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我们下载 Redis-x64-xxx.zip压缩包到C盘。打开一个CMD窗口，输入如下命令：123456789101112131415161718192021222324C:\Users\Administrator&gt;cd c:\Redis-x64-3.2.100c:\Redis-x64-3.2.100&gt;redis-server.exe redis.windows.conf _._ _.-``__ ''-._ _.-`` `. `_. ''-._ Redis 3.2.100 (00000000/0) 64 bit .-`` .-```. ```\/ _.,_ ''-._ ( ' , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|'` _.-'| Port: 6379 | `-._ `._ / _.-' | PID: 6404 `-._ `-._ `-./ _.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | http://redis.io `-._ `-._`-.__.-'_.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | `-._ `-._`-.__.-'_.-' _.-' `-._ `-.__.-' _.-' `-._ _.-' `-.__.-'[6404] 25 Dec 09:47:58.890 # Server started, Redis version 3.2.100[6404] 25 Dec 09:47:58.898 * DB loaded from disk: 0.007 seconds[6404] 25 Dec 09:47:58.898 * The server is now ready to accept connections on port 6379然后打开另外一个CMD终端，输入：1234C:\Users\Administrator&gt;cd c:\Redis-x64-3.2.100c:\Redis-x64-3.2.100&gt;redis-cli.exe -p 6379127.0.0.1:6379&gt;准备工作做完后，接下来开始在Spring Boot项目里引入Redis：12345&lt;!-- spring-boot redis --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt;在application.yml中配置Redis：12345678910111213141516171819spring: redis: # Redis数据库索引（默认为0） database: 0 # Redis服务器地址 host: localhost # Redis服务器连接端口 port: 6379 pool: # 连接池最大连接数（使用负值表示没有限制） max-active: 8 # 连接池最大阻塞等待时间（使用负值表示没有限制） max-wait: -1 # 连接池中的最大空闲连接 max-idle: 8 # 连接池中的最小空闲连接 min-idle: 0 # 连接超时时间（毫秒） timeout: 0更多关于Spring Boot Redis配置可参考：https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html# REDIS接着创建一个Redis配置类：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647@Configurationpublic class RedisConfig extends CachingConfigurerSupport &#123; // 自定义缓存key生成策略 @Bean public KeyGenerator keyGenerator() &#123; return new KeyGenerator() &#123; @Override public Object generate(Object target, java.lang.reflect.Method method, Object... params) &#123; StringBuffer sb = new StringBuffer(); sb.append(target.getClass().getName()); sb.append(method.getName()); for (Object obj : params) &#123; sb.append(obj.toString()); &#125; return sb.toString(); &#125; &#125;; &#125; // 缓存管理器 @Bean public CacheManager cacheManager(@SuppressWarnings("rawtypes") RedisTemplate redisTemplate) &#123; RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate); // 设置缓存过期时间（秒） cacheManager.setDefaultExpiration(3600); return cacheManager; &#125; @Bean public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory factory) &#123; StringRedisTemplate template = new StringRedisTemplate(factory); setSerializer(template);// 设置序列化工具 template.afterPropertiesSet(); return template; &#125; private void setSerializer(StringRedisTemplate template) &#123; @SuppressWarnings(&#123; "rawtypes", "unchecked" &#125;) Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); ObjectMapper om = new ObjectMapper(); om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(om); template.setValueSerializer(jackson2JsonRedisSerializer); &#125;&#125;运行测试，控制台输出：123452017-11-17 18:17:06.995 DEBUG 8836 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select * from student where sno=? 2017-11-17 18:17:07.128 DEBUG 8836 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-17 18:17:07.152 DEBUG 8836 --- [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：KangKang学号001的学生姓名为：KangKang第二次查询没有访问数据库，而是从缓存中获取的，在redis中查看该值：12345127.0.0.1:6379&gt; keys *1) "student~keys"2) "001"127.0.0.1:6379&gt; get 001"[\"com.springboot.bean.Student\",&#123;\"sno\":\"001\",\"name\":\"KangKang\",\"sex\":\"M \"&#125;]"在测试方法中测试更新：1234567891011@Testpublic void test() throws Exception &#123; Student student1 = this.studentService.queryStudentBySno("001"); System.out.println("学号" + student1.getSno() + "的学生姓名为：" + student1.getName()); student1.setName("康康"); this.studentService.update(student1); Student student2 = this.studentService.queryStudentBySno("001"); System.out.println("学号" + student2.getSno() + "的学生姓名为：" + student2.getName());&#125;控制台输出：123456789学号001的学生姓名为：KangKang2017-11-17 19:30:05.813 INFO 11244 --- [main] com.alibaba.druid.pool.DruidDataSource : &#123;dataSource-1&#125; inited2017-11-17 19:30:05.823 DEBUG 11244 --- [main] c.s.mapper.StudentMapper.update : ==&gt; Preparing: update student set sname=?,ssex=? where sno=? 2017-11-17 19:30:05.941 DEBUG 11244 --- [main] c.s.mapper.StudentMapper.update : ==&gt; Parameters: 康康(String), M (String), 001(String)2017-11-17 19:30:05.953 DEBUG 11244 --- [main] c.s.mapper.StudentMapper.update : &lt;== Updates: 12017-11-17 19:30:05.957 DEBUG 11244 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select * from student where sno=? 2017-11-17 19:30:05.959 DEBUG 11244 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-17 19:30:05.976 DEBUG 11244 --- [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：康康在redis中查看：12127.0.0.1:6379&gt; get 001"[\"com.springboot.bean.Student\",&#123;\"sno\":\"001\",\"name\":\"\xe5\xba\xb7\xe5\xba\xb7\",\"sex\":\"M \"&#125;]"可见更新数据库的同时，缓存也得到了更新。源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/09.Spring-Boot-Redis-CacheEhcache引入Ehcache依赖：12345&lt;!-- ehcache --&gt;&lt;dependency&gt; &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt; &lt;artifactId&gt;ehcache&lt;/artifactId&gt;&lt;/dependency&gt;在src/main/resources目录下新建ehcache.xml：123456789101112131415161718192021&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="ehcache.xsd"&gt; &lt;defaultCache maxElementsInMemory="10000" eternal="false" timeToIdleSeconds="3600" timeToLiveSeconds="0" overflowToDisk="false" diskPersistent="false" diskExpiryThreadIntervalSeconds="120" /&gt; &lt;cache name="student" maxEntriesLocalHeap="2000" eternal="false" timeToIdleSeconds="3600" timeToLiveSeconds="0" overflowToDisk="false" statistics="true"/&gt;&lt;/ehcache&gt;关于Ehcahe的一些说明：name：缓存名称。maxElementsInMemory：缓存最大数目maxElementsOnDisk：硬盘最大缓存个数。eternal：对象是否永久有效，一但设置了，timeout将不起作用。overflowToDisk：是否保存到磁盘。timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。timeToLiveSeconds：设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0，也就是对象存活时间无穷大。diskPersistent：是否缓存虚拟机重启期数据，默认值为false。diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。clearOnFlush：内存数量最大时是否清除。memoryStoreEvictionPolicy：Ehcache的三种清空策略：FIFO，first in first out，这个是大家最熟的，先进先出。LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。接着在application.yml中指定ehcache配置的路径：1234spring: cache: ehcache: config: 'classpath:ehcache.xml'这样就可以开始使用ehcache了，运行测试类，观察控制台：123452017-11-18 09:10:40.201 DEBUG 3364 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select * from student where sno=? 2017-11-18 09:10:40.343 DEBUG 3364 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-18 09:10:40.364 DEBUG 3364 --- [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：KangKang学号001的学生姓名为：KangKang可看到第二次是从缓存中获取的。测试更新：12345678910112017-11-18 09:18:04.230 DEBUG 11556 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select * from student where sno=? 2017-11-18 09:18:04.397 DEBUG 11556 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-18 09:18:04.427 DEBUG 11556 --- [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：KangKang2017-11-18 09:18:04.433 DEBUG 11556 --- [main] c.s.mapper.StudentMapper.update : ==&gt; Preparing: update student set sname=?,ssex=? where sno=? 2017-11-18 09:18:04.438 DEBUG 11556 --- [main] c.s.mapper.StudentMapper.update : ==&gt; Parameters: 康康(String), M (String), 001(String)2017-11-18 09:18:04.440 DEBUG 11556 --- [main] c.s.mapper.StudentMapper.update : &lt;== Updates: 12017-11-18 09:18:04.440 DEBUG 11556 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Preparing: select * from student where sno=? 2017-11-18 09:18:04.441 DEBUG 11556 --- [main] c.s.m.StudentMapper.queryStudentBySno : ==&gt; Parameters: 001(String)2017-11-18 09:18:04.442 DEBUG 11556 --- [main] c.s.m.StudentMapper.queryStudentBySno : &lt;== Total: 1学号001的学生姓名为：康康可见，即使更新方法加了@CachePut注解，第二次查询因为Student对象更新了，其是从数据库获取数据的，所以对于Ehcache来说，更新方法加不加@CachePut注解，结果都一样。源码链接：https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/10.Spring-Boot-Ehcache-Cache]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
        <tag>Ehcache</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle Merge语句]]></title>
    <url>%2Fblog%2FOracle-Merge%E8%AF%AD%E5%8F%A5.html</url>
    <content type="text"><![CDATA[Merge语句是Oracle 9i新增的语法，用来合并Update和Insert语句。通过Merge语句，根据一张表或子查询的连接条件对另外一张表进行查询，连接条件匹配上的进行Update，无法匹配的执行Insert。这个语法仅需要一次全表扫描就完成了全部工作，执行效率要高于Insert+Update。merge语句语法如下：1234merge into table_name tusing (subquery) s on (s.column = t.column)when matched then update ...when not matched then insert ...on关键字声明了关联条件，当有记录匹配时执行Update语句，没有匹配时，执行Insert语句。示例创建一张student表：1234567create table student( sno varchar2(3) not null, -- 学生编号 sname varchar(9) not null, -- 学生姓名 ssex char(2) not null -- 性别);表已创建。插入一条学生标号为001的数据：123456789101112131415SQL&gt; merge into student s using (select '001' sno,'KangKang' sname,'M' ssex from dual) t on (s.sno = t.sno) when matched then update set s.sname = t.sname,s.ssex = t.ssex when not matched then insert (s.sno,s.sname,s.ssex) values(t.sno,t.sname,t.ssex);1 行已合并。SQL&gt; select * from student;SNO SNAME SS--- --------- --001 KangKang M再次插入一条学生编号为001的数据，不过sname和ssex不一样：123456789101112131415SQL&gt; merge into student s using (select '001' sno,'Maria' sname,'F' ssex from dual) t on (s.sno = t.sno) when matched then update set s.sname = t.sname,s.ssex = t.ssex when not matched then insert (s.sno,s.sname,s.ssex) values(t.sno,t.sname,t.ssex);1 行已合并。SQL&gt; select * from student;SNO SNAME SS--- --------- --001 Maria F]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
        <tag>Oracle 11g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle分析函数（窗口函数）]]></title>
    <url>%2Fblog%2Foracle%20Window%20function.html</url>
    <content type="text"><![CDATA[Oracle 中的分析函数基于对数据行的分组来计算相关值，类似于聚合函数。其和聚合函数主要的区别在于：分析函数对于每个分组返回多行数据，而聚合函数每个分组只能对应一行数据。分析函数由三个部分组成：分区子句、排序子句和开窗子句，基本语法如下：12function(arg1,arg2,...argN)over([partition-by-clause] [order-by-clause] [windowing-clause])开窗子句windowing-clause 指定了分析函数进行运算的数据子集。开窗子句的具体语法如下：1234[rows | range] between &lt;start expr&gt; and &lt;end expr&gt;&lt;start expr&gt; is [unbounded preceding | current row | n preceding | n following]&lt;end expr&gt; is [unbounded following | current row | n preceding | n following]unbounded preceding表示以分组数据的第一行最为上边界；unbounded following表示以分组数据的最后一行最为下边界；current row表示当前数据行；n preceding表示当前数据行的前n 行；n following表示当前数据行的后n 行。为了演示分析函数，首先在SH用户下创建一张sales_fact表：12345678910111213141516171819SQL&gt; create table sales_fact as select country_name country,country_subRegion region,prod_name product, calendar_year year,calendar_week_number week, sum(amount_sold) sale, sum(amount_sold*( case when mod(rownum,10)=0 then 1.4 when mod(rownum,5)=0 then 0.6 when mod(rownum,2)=0 then 0.9 when mod(rownum,2)=1 then 1.2 else 1 end)) receipts from sales,times,customers,countries,products where sales.time_id=times.time_id and sales.prod_id = products.prod_id and sales.cust_id = customers.cust_id and customers.country_id = countries.country_id group by country_name,country_subRegion,prod_name,calendar_year,calendar_week_number;表已创建。分析模式下的聚合函数前面所说聚合函数每个分组只能对应一行数据是在传统的非分析模式下的结果。分析模式下的聚合函数则没有此限制。比如下面的SQL语句计算了sale列按照产品，国家，地区和年份为一组，从每年年初开始到该年份每一周的动态求和值。（为了节约篇幅，下面结果只取前10周结果集）。12345678910111213141516171819202122232425262728293031323334353637383940414243444546SQL&gt; select year,week,sale, sum(sale) over( partition by product,country,region,year order by week rows between unbounded preceding and current row ) running_sum_sale from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week &lt;= 10 order by year,week; YEAR WEEK SALE RUNNING_SUM_SALE---------- ---------- ---------- ---------------- 1998 1 58.15 58.15 1998 2 29.39 87.54 1998 3 29.49 117.03 1998 4 29.49 146.52 1998 5 29.8 176.32 1998 6 58.78 235.1 1998 9 58.78 293.88 1998 10 117.76 411.64 1999 1 53.52 53.52 1999 3 94.6 148.12 1999 4 40.5 188.62 1999 5 80.01 268.63 1999 6 40.5 309.13 1999 8 103.11 412.24 1999 9 53.34 465.58 1999 10 72 537.58 2000 1 46.7 46.7 2000 3 93.41 140.11 2000 4 46.54 186.65 2000 5 46.7 233.35 2000 7 70.8 304.15 2000 8 46.54 350.69 2001 1 92.26 92.26 2001 2 118.38 210.64 2001 3 47.24 257.88 2001 4 256.7 514.58 2001 5 93.44 608.02 2001 6 22.44 630.46 2001 7 69.96 700.42 2001 8 46.06 746.48 2001 9 92.67 839.15 2001 10 69.05 908.2已选择32行。聚合函数sum(sale)声明要求和的列，partition by product,country,region,year分区子句声明了分组的列，order by week排序子句声明了分组的数据行按照week列来进行排序，rows between unbounded preceding and current row开窗子句声明了计算的窗口范围为分组的第一行到当前行。下面例子的窗口范围为整个分组：12345678910111213141516171819202122232425262728293031323334353637383940414243444546SQL&gt; select year,week,sale, max(sale) over( partition by product,country,region,year order by week rows between unbounded preceding and unbounded following ) max_sal_per_year from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week &lt;= 10 order by year,week; YEAR WEEK SALE MAX_SAL_PER_YEAR---------- ---------- ---------- ---------------- 1998 1 58.15 117.76 1998 2 29.39 117.76 1998 3 29.49 117.76 1998 4 29.49 117.76 1998 5 29.8 117.76 1998 6 58.78 117.76 1998 9 58.78 117.76 1998 10 117.76 117.76 1999 1 53.52 103.11 1999 3 94.6 103.11 1999 4 40.5 103.11 1999 5 80.01 103.11 1999 6 40.5 103.11 1999 8 103.11 103.11 1999 9 53.34 103.11 1999 10 72 103.11 2000 1 46.7 93.41 2000 3 93.41 93.41 2000 4 46.54 93.41 2000 5 46.7 93.41 2000 7 70.8 93.41 2000 8 46.54 93.41 2001 1 92.26 256.7 2001 2 118.38 256.7 2001 3 47.24 256.7 2001 4 256.7 256.7 2001 5 93.44 256.7 2001 6 22.44 256.7 2001 7 69.96 256.7 2001 8 46.06 256.7 2001 9 92.67 256.7 2001 10 69.05 256.7已选择32行。下面例子的窗口范围为当前周的前两周和后两周，也就是五周。在分组的边界处，窗口会自动缩小：12345678910111213141516171819202122232425262728293031323334353637383940414243444546SQL&gt; select year,week,sale, max(sale) over( partition by product,country,region,year order by week rows between 2 preceding and 2 following ) max_sal_per_year from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week &lt;= 10 order by year,week; YEAR WEEK SALE MAX_SAL_PER_YEAR---------- ---------- ---------- ---------------- 1998 1 58.15 58.15 1998 2 29.39 58.15 1998 3 29.49 58.15 1998 4 29.49 58.78 1998 5 29.8 58.78 1998 6 58.78 117.76 1998 9 58.78 117.76 1998 10 117.76 117.76 1999 1 53.52 94.6 1999 3 94.6 94.6 1999 4 40.5 94.6 1999 5 80.01 103.11 1999 6 40.5 103.11 1999 8 103.11 103.11 1999 9 53.34 103.11 1999 10 72 103.11 2000 1 46.7 93.41 2000 3 93.41 93.41 2000 4 46.54 93.41 2000 5 46.7 93.41 2000 7 70.8 70.8 2000 8 46.54 70.8 2001 1 92.26 118.38 2001 2 118.38 256.7 2001 3 47.24 256.7 2001 4 256.7 256.7 2001 5 93.44 256.7 2001 6 22.44 256.7 2001 7 69.96 93.44 2001 8 46.06 92.67 2001 9 92.67 92.67 2001 10 69.05 92.67已选择32行。默认的窗口子句是rows between unbounded preceding and current row。lag和leadlag和lead函数能够实现跨行引用。lag能够访问结果集中前面行内容，lead能够访问结果集中后面行内容。lag和lead函数不支持开窗子句，仅支持partition by和order by子句。laglag函数的语法如下：1lag(expression, offset, default) over(partition-clause order-by-clause)expression表示返回的列，offset表示相隔的行数（不能为负数），default表示默认值。比如，从前一行中返回一个值：123456789101112131415161718192021222324252627282930313233343536373839404142434445SQL&gt; select year,week,sale, lag(sale) over( partition by product,country,region,year order by week ) prior_wk_sales from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week &lt;= 10 order by product,country,year,week; YEAR WEEK SALE PRIOR_WK_SALES---------- ---------- ---------- -------------- 1998 1 58.15 1998 2 29.39 58.15 1998 3 29.49 29.39 1998 4 29.49 29.49 1998 5 29.8 29.49 1998 6 58.78 29.8 1998 9 58.78 58.78 1998 10 117.76 58.78 1999 1 53.52 1999 3 94.6 53.52 1999 4 40.5 94.6 1999 5 80.01 40.5 1999 6 40.5 80.01 1999 8 103.11 40.5 1999 9 53.34 103.11 1999 10 72 53.34 2000 1 46.7 2000 3 93.41 46.7 2000 4 46.54 93.41 2000 5 46.7 46.54 2000 7 70.8 46.7 2000 8 46.54 70.8 2001 1 92.26 2001 2 118.38 92.26 2001 3 47.24 118.38 2001 4 256.7 47.24 2001 5 93.44 256.7 2001 6 22.44 93.44 2001 7 69.96 22.44 2001 8 46.06 69.96 2001 9 92.67 46.06 2001 10 69.05 92.67已选择32行。可见lag函数在分区的上边界返回空值，默认行数为1。指定lag函数的默认值，并指定行数为3：123456789101112131415161718192021222324252627282930313233343536373839404142434445SQL&gt; select year,week,sale, lag(sale,3,sale) over( partition by product,country,region,year order by week ) prior_wk_sales from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week &lt;= 10 order by product,country,year,week; YEAR WEEK SALE PRIOR_WK_SALES---------- ---------- ---------- -------------- 1998 1 58.15 58.15 1998 2 29.39 29.39 1998 3 29.49 29.49 1998 4 29.49 58.15 1998 5 29.8 29.39 1998 6 58.78 29.49 1998 9 58.78 29.49 1998 10 117.76 29.8 1999 1 53.52 53.52 1999 3 94.6 94.6 1999 4 40.5 40.5 1999 5 80.01 53.52 1999 6 40.5 94.6 1999 8 103.11 40.5 1999 9 53.34 80.01 1999 10 72 40.5 2000 1 46.7 46.7 2000 3 93.41 93.41 2000 4 46.54 46.54 2000 5 46.7 46.7 2000 7 70.8 93.41 2000 8 46.54 46.54 2001 1 92.26 92.26 2001 2 118.38 118.38 2001 3 47.24 47.24 2001 4 256.7 92.26 2001 5 93.44 118.38 2001 6 22.44 47.24 2001 7 69.96 256.7 2001 8 46.06 93.44 2001 9 92.67 22.44 2001 10 69.05 69.96已选择32行。leadlead和lag类似。不再赘述。first_value和last_valuefirst_value和last_value函数通常与order by语句配合来筛选出分区中的最大值和最小值。它们都支持开窗子句。first_valuefirst_value返回窗口中的第一个值。ignore nulls表示忽略空值，如果第一个是空值返回第二个：12345678910111213141516171819202122232425262728293031323334353637383940414243444546SQL&gt; select year,week,sale, first_value(sale ignore nulls) over( partition by product,country,region,year order by sale desc rows between unbounded preceding and unbounded following ) max_sale from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week &lt;= 10 order by product,country,year,week; YEAR WEEK SALE MAX_SALE---------- ---------- ---------- ---------- 1998 1 58.15 117.76 1998 2 29.39 117.76 1998 3 29.49 117.76 1998 4 29.49 117.76 1998 5 29.8 117.76 1998 6 58.78 117.76 1998 9 58.78 117.76 1998 10 117.76 117.76 1999 1 53.52 103.11 1999 3 94.6 103.11 1999 4 40.5 103.11 1999 5 80.01 103.11 1999 6 40.5 103.11 1999 8 103.11 103.11 1999 9 53.34 103.11 1999 10 72 103.11 2000 1 46.7 93.41 2000 3 93.41 93.41 2000 4 46.54 93.41 2000 5 46.7 93.41 2000 7 70.8 93.41 2000 8 46.54 93.41 2001 1 92.26 256.7 2001 2 118.38 256.7 2001 3 47.24 256.7 2001 4 256.7 256.7 2001 5 93.44 256.7 2001 6 22.44 256.7 2001 7 69.96 256.7 2001 8 46.06 256.7 2001 9 92.67 256.7 2001 10 69.05 256.7已选择32行。last_valuelast_value返回窗口中的最后一个值。respect nulls表示识别空值，如果最后一个是空值也将其返回。12345678910111213141516171819202122232425262728293031323334353637383940414243444546SQL&gt; select year,week,sale, last_value(sale respect nulls) over( partition by product,country,region,year order by sale desc rows between unbounded preceding and unbounded following ) min_sale from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week &lt;= 10 order by product,country,year,week; YEAR WEEK SALE MIN_SALE---------- ---------- ---------- ---------- 1998 1 58.15 29.39 1998 2 29.39 29.39 1998 3 29.49 29.39 1998 4 29.49 29.39 1998 5 29.8 29.39 1998 6 58.78 29.39 1998 9 58.78 29.39 1998 10 117.76 29.39 1999 1 53.52 40.5 1999 3 94.6 40.5 1999 4 40.5 40.5 1999 5 80.01 40.5 1999 6 40.5 40.5 1999 8 103.11 40.5 1999 9 53.34 40.5 1999 10 72 40.5 2000 1 46.7 46.54 2000 3 93.41 46.54 2000 4 46.54 46.54 2000 5 46.7 46.54 2000 7 70.8 46.54 2000 8 46.54 46.54 2001 1 92.26 22.44 2001 2 118.38 22.44 2001 3 47.24 22.44 2001 4 256.7 22.44 2001 5 93.44 22.44 2001 6 22.44 22.44 2001 7 69.96 22.44 2001 8 46.06 22.44 2001 9 92.67 22.44 2001 10 69.05 22.44已选择32行。nth_valuenth_value函数用于返回任意行的数据，语法如下：12nth_value(measure, n) [from first | from last] [respect nulls | ignore nulls]over(partition-clause order-by-clause windowing-clause)比如first_value(sale)等价于nth_value(sale,1)；first_value(sale ignore nulls)等价于nth_value(sale,1) from first ignore nulls。比如求得分区内第二大的sale值大小：12345678910111213141516171819202122232425262728293031323334353637383940414243444546SQL&gt; select year,week,sale, nth_value(sale,2) ignore nulls over( partition by product,country,region,year order by sale desc rows between unbounded preceding and unbounded following ) second_max_sale from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week &lt;= 10 order by product,country,year,week; YEAR WEEK SALE SECOND_MAX_SALE---------- ---------- ---------- --------------- 1998 1 58.15 58.78 1998 2 29.39 58.78 1998 3 29.49 58.78 1998 4 29.49 58.78 1998 5 29.8 58.78 1998 6 58.78 58.78 1998 9 58.78 58.78 1998 10 117.76 58.78 1999 1 53.52 94.6 1999 3 94.6 94.6 1999 4 40.5 94.6 1999 5 80.01 94.6 1999 6 40.5 94.6 1999 8 103.11 94.6 1999 9 53.34 94.6 1999 10 72 94.6 2000 1 46.7 70.8 2000 3 93.41 70.8 2000 4 46.54 70.8 2000 5 46.7 70.8 2000 7 70.8 70.8 2000 8 46.54 70.8 2001 1 92.26 118.38 2001 2 118.38 118.38 2001 3 47.24 118.38 2001 4 256.7 118.38 2001 5 93.44 118.38 2001 6 22.44 118.38 2001 7 69.96 118.38 2001 8 46.06 118.38 2001 9 92.67 118.38 2001 10 69.05 118.38已选择32行。rankrank函数以数值的形式返回一个数据行在排序后的结果集中的位置。在排名并列的情况下，具有相同值的行将具有相同的排名，并且接下来的排名会被跳过。rank函数不支持开窗子句，作用于整个分区：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647SQL&gt; select * from ( select year,week,sale, rank() over( partition by product,country,region,year order by sale desc ) sales_rank from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week &lt;= 10 order by product,country,year,week ) order by year,sales_rank; YEAR WEEK SALE SALES_RANK---------- ---------- ---------- ---------- 1998 10 117.76 1 1998 6 58.78 2 1998 9 58.78 2 1998 1 58.15 4 1998 5 29.8 5 1998 4 29.49 6 1998 3 29.49 6 1998 2 29.39 8 1999 8 103.11 1 1999 3 94.6 2 1999 5 80.01 3 1999 10 72 4 1999 1 53.52 5 1999 9 53.34 6 1999 4 40.5 7 1999 6 40.5 7 2000 3 93.41 1 2000 7 70.8 2 2000 1 46.7 3 2000 5 46.7 3 2000 4 46.54 5 2000 8 46.54 5 2001 4 256.7 1 2001 2 118.38 2 2001 5 93.44 3 2001 9 92.67 4 2001 1 92.26 5 2001 7 69.96 6 2001 10 69.05 7 2001 3 47.24 8 2001 8 46.06 9 2001 6 22.44 10已选择32行。dense_rankdense_rank函数是rank函数的变体，区别在于dense_rank函数的排名值是连续的：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647SQL&gt; select * from ( select year,week,sale, dense_rank() over( partition by product,country,region,year order by sale desc ) sales_dense_rank from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week &lt;= 10 order by product,country,year,week ) order by year,sales_dense_rank; YEAR WEEK SALE SALES_DENSE_RANK---------- ---------- ---------- ---------------- 1998 10 117.76 1 1998 6 58.78 2 1998 9 58.78 2 1998 1 58.15 3 1998 5 29.8 4 1998 4 29.49 5 1998 3 29.49 5 1998 2 29.39 6 1999 8 103.11 1 1999 3 94.6 2 1999 5 80.01 3 1999 10 72 4 1999 1 53.52 5 1999 9 53.34 6 1999 4 40.5 7 1999 6 40.5 7 2000 3 93.41 1 2000 7 70.8 2 2000 1 46.7 3 2000 5 46.7 3 2000 4 46.54 4 2000 8 46.54 4 2001 4 256.7 1 2001 2 118.38 2 2001 5 93.44 3 2001 9 92.67 4 2001 1 92.26 5 2001 7 69.96 6 2001 10 69.05 7 2001 3 47.24 8 2001 8 46.06 9 2001 6 22.44 10已选择32行。row_numberrow_number函数为结果集中的每一行分配一个递增行编号，支持开窗子句。如果存在值相同的数据行，谁先谁后具有不确定性。123456789101112131415161718192021222324252627282930313233343536373839404142434445SQL&gt; select year,week,sale, row_number() over( partition by product,country,region,year order by sale ) sales_rn from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week &lt;= 10 order by product,country,year,sale; YEAR WEEK SALE SALES_RN---------- ---------- ---------- ---------- 1998 2 29.39 1 1998 3 29.49 2 1998 4 29.49 3 1998 5 29.8 4 1998 1 58.15 5 1998 9 58.78 6 1998 6 58.78 7 1998 10 117.76 8 1999 4 40.5 1 1999 6 40.5 2 1999 9 53.34 3 1999 1 53.52 4 1999 10 72 5 1999 5 80.01 6 1999 3 94.6 7 1999 8 103.11 8 2000 4 46.54 1 2000 8 46.54 2 2000 5 46.7 3 2000 1 46.7 4 2000 7 70.8 5 2000 3 93.41 6 2001 6 22.44 1 2001 8 46.06 2 2001 3 47.24 3 2001 10 69.05 4 2001 7 69.96 5 2001 1 92.26 6 2001 9 92.67 7 2001 5 93.44 8 2001 2 118.38 9 2001 4 256.7 10已选择32行。ratio_to_reportratio_to_report函数用于计算当前行的值占分区总和的值的百分比，该函数没有排序和开窗子句。比如计算当前周的销售额在该年以及所有销售额中的百分比：12345678910111213141516171819202122232425262728293031323334353637383940414243SQL&gt; select year,week,sale, trunc(100*ratio_to_report(sale) over(partition by product,country,region,year),2) || '%' p1, trunc(100*ratio_to_report(sale) over(partition by product,country,region),2) || '%' p2 from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week &lt;= 10 order by product,country,year,week; YEAR WEEK SALE P1 P2 ---------- ---------- ---------- --------------- ----------------- 1998 1 58.15 14.12% 2.63% 1998 2 29.39 7.13% 1.33% 1998 3 29.49 7.16% 1.33% 1998 4 29.49 7.16% 1.33% 1998 5 29.8 7.23% 1.34% 1998 6 58.78 14.27% 2.66% 1998 9 58.78 14.27% 2.66% 1998 10 117.76 28.6% 5.33% 1999 1 53.52 9.95% 2.42% 1999 3 94.6 17.59% 4.28% 1999 4 40.5 7.53% 1.83% 1999 5 80.01 14.88% 3.62% 1999 6 40.5 7.53% 1.83% 1999 8 103.11 19.18% 4.66% 1999 9 53.34 9.92% 2.41% 1999 10 72 13.39% 3.26% 2000 1 46.7 13.31% 2.11% 2000 3 93.41 26.63% 4.23% 2000 4 46.54 13.27% 2.1% 2000 5 46.7 13.31% 2.11% 2000 7 70.8 20.18% 3.2% 2000 8 46.54 13.27% 2.1% 2001 1 92.26 10.15% 4.17% 2001 2 118.38 13.03% 5.36% 2001 3 47.24 5.2% 2.13% 2001 4 256.7 28.26% 11.62% 2001 5 93.44 10.28% 4.23% 2001 6 22.44 2.47% 1.01% 2001 7 69.96 7.7% 3.16% 2001 8 46.06 5.07% 2.08% 2001 9 92.67 10.2% 4.19% 2001 10 69.05 7.6% 3.12%已选择32行。ntilentile函数对一个分区中的有序结果集进行划分，分为若干个组，如果不能够等分，则每个组中相差的数据行不能超过一行，并为每个小组分配唯一的组编号。该函数不支持开窗子句。比如将2001年的销售额数据行分为十个小组：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657SQL&gt; select year,week,sale, ntile(10) over( partition by product,country,region,year order by sale ) group# from sales_fact where country in ('Australia') and product = 'Xtend Memory' and year=2001; YEAR WEEK SALE GROUP#---------- ---------- ---------- ---------- 2001 18 22.37 1 2001 23 22.38 1 2001 6 22.44 1 2001 52 23.14 1 2001 50 23.14 1 2001 44 23.29 2 2001 40 45.18 2 2001 49 45.26 2 2001 8 46.06 2 2001 3 47.24 2 2001 41 67.19 3 2001 34 68.9 3 2001 32 68.9 3 2001 10 69.05 3 2001 7 69.96 3 2001 11 71.57 4 2001 36 91.12 4 2001 15 91.98 4 2001 31 92.21 4 2001 1 92.26 4 2001 9 92.67 5 2001 37 93.16 5 2001 5 93.44 5 2001 46 93.58 5 2001 27 94.48 5 2001 51 114.82 6 2001 33 115.52 6 2001 39 115.57 6 2001 13 116.81 6 2001 12 116.81 7 2001 29 116.85 7 2001 20 118.03 7 2001 2 118.38 7 2001 24 136.92 8 2001 42 136.98 8 2001 38 139 8 2001 25 139.28 8 2001 43 139.58 9 2001 22 141.78 9 2001 14 162.91 9 2001 30 162.91 9 2001 48 182.96 10 2001 21 233.7 10 2001 4 256.7 10 2001 16 278.44 10已选择45行。stddevstddev函数用于计算某些数据行在分区中的标准差：12345678910111213141516171819202122232425262728293031323334353637383940414243SQL&gt; select year,week,sale, stddev(sale) over( partition by product,country,region,year order by sale rows between unbounded preceding and unbounded following ) stddev from sales_fact where country in ('Australia') and product = 'Xtend Memory' and week&lt;10 order by product,country,year,week; YEAR WEEK SALE STDDEV---------- ---------- ---------- ---------- 1998 1 58.15 15.517783 1998 2 29.39 15.517783 1998 3 29.49 15.517783 1998 4 29.49 15.517783 1998 5 29.8 15.517783 1998 6 58.78 15.517783 1998 9 58.78 15.517783 1999 1 53.52 25.8395281 1999 3 94.6 25.8395281 1999 4 40.5 25.8395281 1999 5 80.01 25.8395281 1999 6 40.5 25.8395281 1999 8 103.11 25.8395281 1999 9 53.34 25.8395281 2000 1 46.7 19.670004 2000 3 93.41 19.670004 2000 4 46.54 19.670004 2000 5 46.7 19.670004 2000 7 70.8 19.670004 2000 8 46.54 19.670004 2001 1 92.26 68.235866 2001 2 118.38 68.235866 2001 3 47.24 68.235866 2001 4 256.7 68.235866 2001 5 93.44 68.235866 2001 6 22.44 68.235866 2001 7 69.96 68.235866 2001 8 46.06 68.235866 2001 9 92.67 68.235866已选择29行。listagglistagg函数将分区中多个数据行中的某列的值以某个符号拼接成一行，语法如下：1listagg(string,separator) within group(order-by-clause) over(partition-by-clause)within group(order-by-clause)子句声明排序顺序。比如将sales_fact数据表中的country转化为以逗号分隔的一行值：12345678910111213SQL&gt; col country_string for a50SQL&gt; select listagg(country,',') within group(order by country desc) country_string from( select distinct country from sales_fact );COUNTRY_STRING--------------------------------------------------United States of America,United Kingdom,Turkey,Spain,Singapore,Saudi Arabia,Poland,New Zealand,Japan,Italy,Germany,France,Denmark,China,Canada,Brazil,Australia,Argentina]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
        <tag>Oracle 11g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle对象类型]]></title>
    <url>%2Fblog%2FOracle-Object-Type.html</url>
    <content type="text"><![CDATA[在Oracle数据库中，我们可以创建自定义的对象类型（Object Type）。数据库的对象类型和Java中的类相似，可以包含属性和方法（函数和存储过程）。对象类型包括对象类型规范（Object Type Specification）和对象类型主体（Object Type Body）。对象类型规范用于定义对象的属性和不包含实现的方法。对象类型主体用于实现对象类型规范中定义的方法。如果对象类型规范中没有定义方法，则可以不用定义对象类型主体。创建简单的对象类型简单的对象类型就是不包含方法的对象类型，语法如下：1234create [or replace] type type_name as object ( column_name data_type [,column_name data_type, ... ]);比如创建一个地址对象类型：1234567SQL&gt; create or replace type address as object ( province varchar2(10), city varchar2(10) ) not final; /类型已创建。not final关键字说明该对象类型可以被继承，接下来定义一个子类型addressDetail 继承自address 类型：1234567891011121314SQL&gt; create or replace type addressdetail under address ( street varchar2(20) ); /类型已创建。SQL&gt; desc addressdetail; addressdetail 扩展 SCOTT.ADDRESS 名称 是否为空? 类型 ----------------------------------------- -------- ---------------------------- PROVINCE VARCHAR2(10) CITY VARCHAR2(10) STREET VARCHAR2(20)可见addressdetail 继承了address 的province 和city 属性。创建带有方法的对象类型可以在定义对象类型规范的时候包含函数或者存储过程，语法如下：1234567create [or replace] type type_name as object ( column_name data_type, ..., [ map|order ]member function method_name(args_list) return return_type, [ map|order ]member procedure pro_name(aggs_list), ...)其中map 或order 关键字表示对结果进行排序。比如创建一个学生信息对象类型student：123456789SQL&gt; create or replace type student as object ( name varchar2(20), sex char(2), birthday date, member function get_age return number ); /类型已创建。函数get_age()用于返回学生年龄。接下来创建student 对象主体：1234567891011SQL&gt; create or replace type body student as member function get_age return number as var_age number; begin select floor(months_between(sysdate,birthday)/12) into var_age from dual; return var_age; end; end; /类型主体已创建。对象类型的应用创建对象类型后，可以在数据库中使用对象类型。一般来说根据使用情况的不同，可以分为以下四种类型：列对象、对象表、可变数组与嵌套表。列对象列对象指的是数据表中的单个列的类型为对象类型。创建员工信息表，其中address属性类型为上述定义的addressdetail类型：12345678SQL&gt; create table empinfo ( eName varchar2(20), eSex char(2), eAge int, eAddress addressdetail );表已创建。查看empinfo表的结构：123456789101112SQL&gt; set desc depth 2SQL&gt; desc empinfo 名称 是否为空? 类型 ----------------------------------------- -------- ---------------------------- ENAME VARCHAR2(20) ESEX CHAR(2) EAGE NUMBER(38) EADDRESS ADDRESSDETAIL ADDRESSDETAIL 扩展 SCOTT.ADDRESS PROVINCE VARCHAR2(10) CITY VARCHAR2(10) STREET VARCHAR2(20)在往包含列对象的数据表插入数据的时候，只能使用对象类型的构造方法：123SQL&gt; insert into empinfo values('KangKang','M',25,addressdetail('福建','福州','鼓楼区'));已创建 1 行。查询student表信息的时候，如果以对象类型中的某个属性为查询条件时，必须使用表的别名的形式，比如：1234567891011SQL&gt; select * from empinfo where eAddress.city='福州';select * from empinfo where eAddress.city='福州' *第 1 行出现错误:ORA-00904: "EADDRESS"."CITY": 标识符无效SQL&gt; select * from empinfo e where e.eAddress.city='福州';ENAME ES EAGE EADDRESS(PROVINCE, CITY, STREET)-------------------- -- ---------- ----------------------------------------KangKang M 25 ADDRESSDETAIL('福建', '福州', '鼓楼区')更新包含两种方式：整体更新和只更列对象的某一列。1.更新整体：123 SQL&gt; update empinfo e set e.eAddress = addressdetail('福建','福州','台江区');已更新 1 行。2.更新列对象的某一列：123SQL&gt; update empinfo e set e.eAddress.city='厦门' where e.eName='KangKang';已更新 1 行。对象表如果需要使用对象类型来定义整个表，那么可以将这个表创建为对象表，对象表中的每一组数据都是一个对象。语法如下：1create table table_name of type_name;创建一个上述定义的student 对象表：12345678910SQL&gt; create table studentinfo of student;表已创建。SQL&gt; desc studentinfo 名称 是否为空? 类型 ----------------------------------------- -------- ---------------------------- NAME VARCHAR2(20) SEX CHAR(2) BIRTHDAY DATE向对象表插入数据有两种方式：当普通表插入和使用构造方法插入：1.当普通表插入：123SQL&gt; insert into studentinfo values('KangKang','M',to_date('19920314','yyyyMMdd'));已创建 1 行。2.使用构造方法插入：123SQL&gt; insert into studentinfo values(student('Jane','F',to_date('19930905','yyyyMMdd')));已创建 1 行。查询数据和查询普通表没有区别。因为student对象包含了get_age()函数，这里演示该函数的使用：123456SQL&gt; select s.name,s.birthday,s.get_age() age from studentinfo s;NAME BIRTHDAY AGE-------------------- -------------- ----------KangKang 14-3月 -92 25Jane 05-9月 -93 24对象标识符和对象引用对象表中的每个对象都具有一个唯一的对象标识符（Object Identifier，OID），可以存储在名为ref 的列中：1234567891011SQL&gt; col ref for a60SQL&gt; set linesize 120SQL&gt; select s.name,ref(s) ref from studentinfo s;NAME REF-------------------- ------------------------------------------------------------KangKang 00002802093C3B2A8DC8BD4ED991B4D78B90B44F1A293F80C3178D48158B B3E126560AE7120100023F0000Jane 0000280209E237A8A6E6A844AE87A66B0F284E7231293F80C3178D48158B B3E126560AE7120100023F0001那个一大串的字符便是OID。对象的引用使用ref 关键字来完成，引用的值实际上为对象表中的OID。比如创建一个成绩表，其中stu 属性为studentinfo 对象表中对象的引用：123456SQL&gt; create table stuScore ( stu ref student, score number );表已创建。往该表插入信息：123456SQL&gt; insert into stuScore select ref(s),98 from studentinfo s where s.name='KangKang';已创建 1 行。SQL&gt; insert into stuScore select ref(s),100 from studentinfo s where s.name='Jane';已创建 1 行。ref(s)可以获取对当前对象表中对象的OID。查询：12345678910SQL&gt; col stu for a60SQL&gt; select stu,score from stuScore;STU SCORE------------------------------------------------------------ ----------00002202083C3B2A8DC8BD4ED991B4D78B90B44F1A293F80C3178D48158B 98B3E126560AE7120000220208E237A8A6E6A844AE87A66B0F284E7231293F80C3178D48158B 100B3E126560AE712这里虽然关联了学生信息表studentinfo，但是默认查询出来stu 的值为OID，如果需要查看详细的学生信息，可以使用deref()函数：123456SQL&gt; select deref(stu) stu,score from stuScore;STU(NAME, SEX, BIRTHDAY) SCORE------------------------------------------------------------ ----------STUDENT('KangKang', 'M ', '14-3月 -92') 98STUDENT('Jane', 'F ', '05-9月 -93') 100使用下面的方法也可以查询出关联信息：123456SQL&gt; select s.stu.name,s.stu.birthday,s.stu.get_age(),s.score from stuScore s;STU.NAME STU.BIRTHDAY S.STU.GET_AGE() SCORE-------------------- -------------- --------------- ----------KangKang 14-3月 -92 25 98Jane 05-9月 -93 24 100可变数组Oralce中的可变数组就是一个可以存储多个值的有最大长度的数组，数组的成员可以是任意类型。创建一个长度为10的可变数组，存放数据类型是scoreType1234567891011SQL&gt; create or replace type scoreType as object ( subName varchar2(10), score int ); /类型已创建。SQL&gt; create or replace type arrScoreType as varray(10) of scoreType; /类型已创建。创建一个学生信息表：123456SQL&gt; create table stuInfo ( stuId int primary key, score arrScoreType );表已创建。使用可变数组的构造函数往stuInfo 表插入数据：123456789SQL&gt; insert into stuInfo values(1, arrScoreType(scoreType('sql', 50), scoreType('C#', 80), scoreType('java', 90)));已创建 1 行。SQL&gt; insert into stuInfo values(2, arrScoreType(scoreType('sql', 60), scoreType('C#', 85), scoreType('java', 95), scoreType('html', 60)));已创建 1 行。直接查询stuInfo 表数据：1234567SQL&gt; col score for a100SQL&gt; select stuid, score from stuInfo; STUID SCORE(SUBNAME, SCORE)---------- ---------------------------------------------------------------------------------------------------- 1 ARRSCORETYPE(SCORETYPE('sql', 50), SCORETYPE('C#', 80), SCORETYPE('java', 90)) 2 ARRSCORETYPE(SCORETYPE('sql', 60), SCORETYPE('C#', 85), SCORETYPE('java', 95), SCORETYPE('html', 60))查询结果是集合。如何才能查询出可变数组里的数据呢？思路是：用table函数把集合转化为表，然后再从这个表查询数据：12345678910111213SQL&gt; select s.stuid,t.* from stuinfo s,table(select score from stuinfo where stuid = s.stuid) t; STUID SUBNAME SCORE---------- ---------- ---------- 1 sql 50 1 C# 80 1 java 90 2 sql 60 2 C# 85 2 java 95 2 html 60已选择7行。table函数里面只能是一个可变数组或嵌套表。更新值。更新stuinfo只能整个可变数组一起更新，不能只更新数组的某个元素：123update stuInfo set score = arrScoreType(scoreType('sql', 50), scoreType('C#', 80)) where stuId = 1;已更新 1 行。嵌套表创建一个嵌套表类型，类型为scoreType：1234SQL&gt; create or replace type nestTableType is table of scoreType; /类型已创建。接着创建包含嵌套表的学生信息表：123456SQL&gt; create table stuInfo ( stuid int, score nestTableType ) nested table score store as nestTable;表已创建。nested table score store as nestTable意思是：stuInfo这个表中的score这一列是嵌套表类型，嵌套表实际是存在nestTable这个表中。插入值的方式和可变数组一样：123SQL&gt; insert into stuInfo values(3, nestTableType(scoreType('sql', 70), scoreType('java', 93)));已创建 1 行。查询方式也和可变数组一样：123456SQL&gt; select s.stuid,t.* from stuinfo s,table(select score from stuinfo where stuid = s.stuid) t; STUID SUBNAME SCORE---------- ---------- ---------- 3 sql 70 3 java 93嵌套表更新和可变数组不一样，嵌套表更新可以只更新部分数据：123SQL&gt; update table(select score from stuinfo where stuid = 3) t set t.score = 80 where t.subname = 'sql';已更新 1 行。可变数组和嵌套表的异同：相同点：都是对象类型；都可以作为表中某列的数据类型（record和快表是不能作为列的数据类型的）。不同点：可变数组本身就存放在原表中，而嵌套表存放在另外的表中；可变数组有大小限制，而嵌套表没有；可变数组更新时必须更新整个可变数组，而嵌套表更新时可以只更新嵌套表中的部分记录。参考自https://my.oschina.net/u/2273582/blog/493931]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
        <tag>Oracle 11g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle程序包]]></title>
    <url>%2Fblog%2FOracle%E7%A8%8B%E5%BA%8F%E5%8C%85.html</url>
    <content type="text"><![CDATA[程序包由PL/SQL 程序元素（如变量、类型）和匿名PL/SQL 块（如游标）、命名PL/SQL 块（如存储过程和函数）组成。一个完整的程序包包含程序包规范和程序包主体，程序包规范用于规定在程序包中可以使用哪些变量、类型、游标和子程序（只包含名称没有具体实现）；程序包的主体包含了在规范中声明的游标、过程和函数的实现代码。这个过程类似于在Java中定义一个包含抽象方法的接口，然后创建一个该接口的实现类。程序包的规范程序包的语法如下：1234567create [or replace ] package pack_name is [declare_variable]; [declare_type]; [declare_cursor]; [declare_function]; [declare_ procedure];end [pack_name];比如创建一个程序包规范，并声明一个获取指定部门平均工资函数和一个提高指定部门指定百分比工资的存储过程：1234567SQL&gt; create or replace package pack_test is function avg_sal(var_deptno number) return number; procedure rise_sal(var_job varchar2,percent number); end; /程序包已创建。在“规范”中声明的函数和存储过程只有头部的声明，而没有函数体和存储过程主体。程序包主体程序包的语法如下：1234567891011121314151617create [or replace] package body pack_name is [inner_variable] [cursor_body] [function_title] &#123;begin fun_plsql; [exception] [dowith _ sentences;] end [fun_name]&#125; [procedure_title] &#123;begin pro_plsql; [exception] [dowith _ sentences;] end [pro_name]&#125; …end [pack_name];创建pack_test的主体：1234567891011121314151617181920SQL&gt; create or replace package body pack_test is function avg_sal(var_deptno number) return number is //函数实现 num_avg_sal number; begin select avg(sal) into num_avg_sal from emp where deptno = var_deptno; return num_avg_sal; exception when no_data_found then dbms_output.put_line('没有该部门'); return 0; end; procedure rise_sal(var_job varchar2,percent number) is //存储过程实现 begin update emp set sal=sal*(1+percent) where job = var_job; end; end; /程序包体已创建。在PL/SQL代码块中调用程序包的avg_sal函数和rise_sal存储过程：123456789101112SQL&gt; set serveroutput onSQL&gt; declare num_avg_sal number; begin num_avg_sal:=pack_test.avg_sal(10); dbms_output.put_line('10号部门的平均工资为：'||num_avg_sal); pack_test.rise_sal('SALESMAN',0.2); end; /10号部门的平均工资为：2916.666666666666666666666666666666666667PL/SQL 过程已成功完成。]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
        <tag>Oracle 11g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle触发器]]></title>
    <url>%2Fblog%2FOracle%E8%A7%A6%E5%8F%91%E5%99%A8.html</url>
    <content type="text"><![CDATA[触发器可以看做一种“特殊”的存储过程，由“触发事件”触发。所谓的“触发事件”指能够引起触发器运行的操作，包括：1.执行DML 语句（使用INSERT、UPDATE、DELETE 语句对表或视图执行数据处理操作）；2.执行DDL语句（使用CREATE、ALTER、DROP语句在数据库中创建、修改、删除模式对象）；3.引发数据库系统事件（如系统启动或退出、产生异常错误等）；4.引发用户事件（如登录或退出数据库操作）。 触发器的语法如下：1234567create [or replace] trigger tri_name [before | after | instead of] tri_event on table_name | view_name | user_name | db_name [for each row] [when tri_condition]begin plsql_sentences;end tri_name;before | after | instead of：表示“触发时机”的关键字。before 表示在执行DML 等操作之前触发；after 表示在DML等操作之后发生；instead of 表示触发器为 替代触发器。on：表示操作的数据表、视图、用户模式和数据库等，对它们执行某种数据操作（比如对表执行INSERT、ALTER、DROP 等操作），将引起触发器的运行。for each row：指定触发器为行级触发器，当DML语句对每一行数据进行操作时都会引起该触发器的运行。如果未指定该条件，则表示创建语句级触发器，这时无论数据操作影响多少行，触发器都只会执行一次。tri_condition：表示触发条件表达式。根据触发器的触发事件和触发器的执行情况，将Oracle 所支持的触发器分为以下4 种类型：语句级触发器语句级触发器，就是针对一条DML 语句而引起的触发器执行。在语句级触发器中，不使用for each row 子句，也就是说无论数据操作影响多少行，触发器都只会执行一次。比如设计一个触发器，用于记录对soctt.dept表的增删改查操作：1.创建dept_log 数据表，用于记录操作类型和时间：123456SQL&gt; create table dept_log( operate_tag varchar2(10), operate_time date );表已创建。2.创建一个关于dept 表的语句级触发器，将用户对dept 表的操作信息保存到dept_log 表中：123456789101112131415161718SQL&gt; create or replace trigger tir_dept before insert or update or delete on dept declare var_tag varchar2(10); begin if inserting then var_tag:='insert'; elsif updating then var_tag:='update'; elsif deleting then var_tag:='delete'; end if; insert into dept_log values(var_tag,sysdate); end; /触发器已创建用户甚至还可以在其中判断特定列是否被更新。例如，要判断用户是否对dept 表中dname 列进行了修改，可以使用下面的语句：123if updating(dname) then //若修改了dept 表中的dname 列 do something about update dnameend if;3.执行DML 语句来触发tri_dept：123456789SQL&gt; delete from dept where deptno = 90;已删除 1 行。SQL&gt; insert into dept values(90,'清算风控部门','福州');已创建 1 行。SQL&gt; update dept set loc='厦门' where deptno = 90;已更新 1 行。4.到dept_log 表中查看日志信息：1234567SQL&gt; select * from dept_log;OPERATE_TA OPERATE_TIME---------- --------------delete 13-11月-17insert 13-11月-17update 13-11月-17行级触发器行级触发器会针对DML 操作所影响的每一行数据都执行一次触发器。创建这种触发器时，必须在语法中使用for each row。使用行级触发器的一个典型应用就是给数据表生成主键值。举个例子：1.创建一个用于存储商品种类的数据表，其中包括商品序号列和商品名称列，其中商品序号为主键：123456SQL&gt; create table goods( id int not null primary key, good_name varchar2(50) );表已创建。2.为主键创建一个序列：123SQL&gt; create sequence seq_goods_id;序列已创建。3.创建一个触发器，用于自动为goods 表的id 列赋值：12345678910SQL&gt; create or replace trigger tri_save_good before insert on goods for each row begin select seq_goods_id.nextval into :new.id from dual; end; /触发器已创建这里使用了:new.id关键字——列标识符，这个列标识符用来指向新行的id 列，给它赋值。列标识符可以分为原值标识符和新值标识符：原值标识符用于标识当前行某个列的原始值，记作:old.column_name（如，:old.id），通常在update 语句和delete 语句中使用；新值标识符用于标识当前行某个列的新值，记作:new.column_name（如，:new.id），通常在insert 语句和update 语句中使用。4.向 goods 表中插入两条记录，其中一条记录不指定id 列的值，由序列seq_goods_id 来产生；另一条记录指定id 的值：123456SQL&gt; insert into goods(good_name) values('apple');已创建 1 行。SQL&gt; insert into goods(id,good_name) values(100,'banana');已创建 1 行。5.查看goods表结果：123456SQL&gt; select * from goods; ID GOOD_NAME---------- ---------------------- 1 apple 2 banana可见手动指定的id值（100）无法覆盖触发器中指定的seq_goods_id.nextval值。替换触发器替换触发器——instead of 触发器是定义在视图view上的。Oracle中一般不让直接对视图进行DML操作，但我们可以使用替换触发器来实现。1.创建一个包含dept表和emp表信息的视图：123456SQL&gt; create view view_emp_dept as select empno,ename,dept.deptno,dname,job,hiredate from emp,dept where emp.deptno = dept.deptno;视图已创建。直接往视图里插入数据：123456SQL&gt; insert into view_emp_dept values(7966,'Jane',70,'市场部','经理',sysdate);insert into view_emp_dept values(*第 1 行出现错误:ORA-01776: 无法通过联接视图修改多个基表2.直接往视图里插入数据报错，此时编写一个关于view_emp_dept 视图在insert 事件中的触发器：12345678910111213141516SQL&gt; create or replace trigger tri_insert_view_emp_dept instead of insert on view_emp_dept declare row_dept dept%rowtype; begin select * into row_dept from dept where deptno=:new.deptno; if sql%notfound then insert into dept(deptno,dname) values(:new.deptno,:new.dname); end if; insert into emp(empno,ename,deptno,job,hiredate) values(:new.empno,:new.ename,:new.deptno,:new.job,:new.hiredate); end; /触发器已创建在上面触发器的主体代码中，如果新插入行的部门编号（deptno）不在dept 表中，则首先向dept表中插入关于新部门编号的数据行，然后再向emp 表中插入记录行，这是因为emp 表的外键值（emp.deptno）是dept 表的主键值（dept.deptno）。3.再次执行insert into view_emp_dept values(7966,&#39;Jane&#39;,70,&#39;市场部&#39;,&#39;经理&#39;,sysdate);：12345678SQL&gt; insert into view_emp_dept values(7966,'Jane',70,'市场部','经理',sysdate);已创建 1 行。SQL&gt; select * from view_emp_dept where empno=7966; EMPNO ENAME DEPTNO DNAME JOB HIREDATE---------- ---------- ---------- -------------- --------- -------------- 7966 Jane 70 市场部 经理 13-11月-17用户事件触发器用户事件触发器是因进行 DDL 操作或用户登录、退出等操作而引起运行的一种触发器，引起该类型触发器运行的常见用户事件包括：CREATE、ALTER、DROP、ANALYZE、COMMENT、GRANT、REVOKE、RENAME、TRUNCATE、SUSPEND、LOGON 和LOGOFF 等。1.创建一个日志信息表，用于保存DDL 操作的信息:123456789SQL&gt; create table ddl_oper_log( db_obj_name varchar2(20), //数据对象名称 db_obj_type varchar2(20), //数据对象类型 oper_action varchar2(20), //操作行为 oper_user varchar2(20), //操作用户 oper_time date //操作时间 );表已创建。2.创建一个用户触发器，用于将当前模式下的DDL 操作信息保存到上面所创建的ddl_oper_log日志信息表中：1234567891011121314SQL&gt; create or replace trigger tri_ddl_oper before create or alter or drop on scott.schema begin insert into ddl_oper_log values( ora_dict_obj_name, ora_dict_obj_type, ora_sysevent, ora_login_user, sysdate); end; /触发器已创建ora_dict_obj_name：获取DDL 操作所对应的数据库对象。ora_dict_obj_type：获取DDL 操作所对应的数据库对象的类型。ora_sysevent：获取触发器的系统事件名。ora_login_user：获取登录用户名。3.执行一些DDL 操作：123456789101112SQL&gt; create table tb_test(id number);表已创建。SQL&gt; create view v_test as select * from tb_test;视图已创建。SQL&gt; drop view v_test;视图已删除。SQL&gt; drop table tb_test;表已删除。4.查看ddl_oper_log日志表：12345678SQL&gt; select * from ddl_oper_log;DB_OBJ_NAME DB_OBJ_TYPE OPER_ACTION OPER_USER OPER_TIME-------------------- -------------------- -------------------- -------------------- -------------TB_TEST TABLE CREATE SCOTT 13-11月-17V_TEST VIEW CREATE SCOTT 13-11月-17V_TEST VIEW DROP SCOTT 13-11月-17TB_TEST TABLE DROP SCOTT 13-11月-17]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
        <tag>Oracle 11g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle存储过程与函数]]></title>
    <url>%2Fblog%2FOracle%20Stored%20procedure%20function.html</url>
    <content type="text"><![CDATA[存储过程存储过程是一种命名的PL/SQL程序块，它既可以没有参数，也可以有若干个输入、输出参数，甚至可以有多个既作输入又作输出的参数，但它通常没有返回值。存储过程被保存在数据库中，它不可以被SQL 语句直接执行或调用，只能通过EXECUT 命令执行或在PL/SQL 程序块内部被调用。由于存储过程是已经编译好的代码，所以其被调用或引用时，执行效率非常高。创建存储过程创建存储过程的语法如下：123456create [or replace] procedure pro_name [(parameter1[,parameter2]…)] is|asbegin plsql_sentences;[exception] [dowith _ sentences;]end [pro_name];pro_name：存储过程的名称，如果数据库中已经存在了此名称，则可以指定“or replace”关键字，这样新的存储过程将覆盖掉原来的存储过程。parameter1：存储过程的参数，若是输入参数，则需要在其后指定“in”关键字；若是输出参数，则需要在其后面指定“out”关键字。在in或out关键字的后面是参数的数据类型，但不能指定该类型的长度。创建一个存储过程，该存储过程实现向dept表中插入一条记录：123456789SQL&gt; create or replace procedure save_dept is begin insert into dept values(50,'开发一部','福州'); commit; dbms_output.put_line('插入数据成功！'); end; /过程已创建。创建过程中如果出现错误，可以使用show err指令查看。若要执行这个存储过程，则需要在SQL*Plus 环境中使用EXECUTE命令来执行该存储过程，或者在PL/SQL 程序块中调用该存储过程。12345SQL&gt; set serveroutput onSQL&gt; execute save_dept插入数据成功！PL/SQL 过程已成功完成。或者在 PL/SQL 块中调用存储过程：123456789101112SQL&gt; delete from dept where deptno=50;已删除 1 行。SQL&gt; set serveroutput onSQL&gt; begin save_dept; end; /插入数据成功！PL/SQL 过程已成功完成。存储过程的参数存储过程可以接受多个参数，参数模式包括IN、OUT 和IN OUT 3 种：1.IN模式参数这是一种输入类型的参数，参数值由调用方传入，并且只能被存储过程读取，是默认的参数模式。比如创建一个存储过程，并定义 3 个in 模式的变量，然后将这3 个变量的值插入到dept表中：1234567891011SQL&gt; create or replace procedure save_dept( deptno in number, dname in varchar2, loc in varchar2) is begin insert into dept values(deptno,dname,loc); commit; end; /过程已创建。调用该存储过程时传参有以下几种方式：指定名称传递：1pro_name(parameter1=&gt;value1[,parameter2=&gt;value2]…)使用这种方式调用上面定义的存储过程：123456SQL&gt; begin save_dept(dname=&gt;'开发二部',loc=&gt;'福州',deptno=&gt;60); end; /PL/SQL 过程已成功完成。使用“指定名称”的方式传递参数值与参数的定义顺序无关，但与参数个数有关。按位置传递：采用这种方式时，用户提供的参数值顺序必须与存储过程中定义的参数顺序相同：123456SQL&gt; begin save_dept(70,'市场部','福州'); end; /PL/SQL 过程已成功完成。混合方式传递：混合方式就是将前两种方式结合到一起：12345678 PL/SQL 过程已成功完成。SQL&gt; begin save_dept(80,loc=&gt;'福州',dname=&gt;'财务管理部'); end; /PL/SQL 过程已成功完成。有时候参数过多，用户不容易记住参数的顺序和类型，用户可以通过desc命令来查看存储过程中参数的定义信息：1234567SQL&gt; desc save_deptPROCEDURE save_dept参数名称 类型 输入/输出默认值?------------------------------ ----------------------- ------ -------- DEPTNO NUMBER IN DNAME VARCHAR2 IN LOC VARCHAR2 IN2.OUT 模式参数这是一种输出类型的参数，表示这个参数在存储过程中已经被赋值，并且这个参数值可以传递到当前存储过程以外的环境中：1234567891011SQL&gt; create or replace procedure select_dept( var_deptno in number, var_dname out dept.dname%type, var_loc out dept.loc%type) is begin select dname,loc into var_dname,var_loc from dept where deptno = var_deptno; end; /过程已创建。上述存储过程定义了两个out 参数，由于存储过程要通过out 参数返回值，所以当调用或执行这个存储过程时，都需要定义变量来保存这两个out参数值。使用EXECUTE命令来执行该存储过程：123456789101112131415161718192021222324SQL&gt; variable var_dname varchar2(50);SQL&gt; variable var_loc varchar2(50);SQL&gt; execute select_dept(50,:var_dname,:var_loc);PL/SQL 过程已成功完成。SQL&gt; print var_dname var_loc;VAR_DNAME--------------------------------------------------------------------------------开发一部VAR_LOC--------------------------------------------------------------------------------福州SQL&gt; select :var_dname,:var_loc from dual;:VAR_DNAME--------------------------------------------------------------------------------:VAR_LOC--------------------------------------------------------------------------------开发一部福州在PL/SQL 程序块中调用该存储过程：123456789101112SQL&gt; set serveroutput onSQL&gt; declare var_dname dept.dname%type; var_loc dept.loc%type; begin save_dept(50,var_dname,var_loc); dbms_output.put_line(var_dname||'位于'||var_loc); end; /开发一部位于福州PL/SQL 过程已成功完成。3.IN OUT模式参数在调用存储过程时，IN OUT模式参数可以从外界向该类型的参数传入值；在执行完存储过程之后，可以将该参数的返回值传给外界：12345678SQL&gt; create or replace procedure square( num in out number) is begin num:=power(num,2); end; /过程已创建。上面的存储过程中定义了一个in out模式的参数num，其既是输入参数也是输出参数，下面用PL/SQL程序块调用该存储过程：12345678910111213SQL&gt; declare var_number number; var_temp number; begin var_temp:=3; var_number:=var_temp; square(var_number); dbms_output.put_line(var_temp||'的平方为：'||var_number); end; /3的平方为：9PL/SQL 过程已成功完成。从上面的例子中可以看出，变量var_number 在调用存储过程之前是3，而存储过程执行完毕之后，该变量的值变为其平方根9。IN 参数的默认值前面的 IN 参数的值都是在调用存储过程时传入的，实际上，Oracle 支持在声明IN 参数的同时给其初始化默认值，这样在存储过程调用时，如果没有向IN参数传入值，则存储过程可以使用默认值进行操作：12345678910SQL&gt; create or replace procedure save_dept( var_deptno in number, var_dname in varchar2 default '产品创新中心', var_loc in varchar2 default '福州') is begin insert into dept values(var_deptno,var_dname,var_loc); end; /过程已创建。var_dname和var_loc定义了默认值，下面调用该存储过程：123456789SQL&gt; execute save_dept(90,var_dname=&gt;'人事行政部');PL/SQL 过程已成功完成。SQL&gt; select * from dept where deptno = 90; DEPTNO DNAME LOC---------- -------------- ------------- 90 人事行政部 福州这里var_loc采用了默认值“福州”。删除存储过程删除存储过程的语法很简单：1drop procedure procedure_name;比如删除save_dept这个存储过程：123SQL&gt; drop procedure save_dept;过程已删除。函数函数一般用于计算和返回一个值，可以将经常需要使用的计算或功能写成一个函数。创建函数函数的创建语法与存储过程比较类似，它也是一种存储在数据库中的命名程序块，函数可以接受零或多个输入参数，并且函数必须有返回值，语法如下：1234567create [or replace] function fun_name[(parameter1[,parameter2]…) return data_type is [inner_variable]begin plsql_ sentence;[exception] [dowith _ sentences;]end [fun_name];由于函数有返回值，所以在函数主体部分（即begin 部分）必须使用return 语句返回函数值，并且要求返回值的类型要与函数声明时的返回值类型（即data_type）相同。定义一个函数，用于计算emp 表中指定某个部门的平均工资：1234567891011121314SQL&gt; create or replace function avg_sal(var_deptno number) return number is var_result number; begin select avg(sal) into var_result from emp where deptno = var_deptno; return var_result; exception when no_data_found then dbms_output.put_line('没有该部门'); return 0; end; /函数已创建。调用函数由于函数有返回值，所以在调用函数时，必须使用一个变量来保存函数的返回值：1234567891011SQL&gt; set serveroutput onSQL&gt; declare var_result number; begin var_result:=avg_sal(10); dbms_output.put_line('编号为10的部门平均工资为：'||var_result); end; /编号为10的部门平均工资为：2916.666666666666666666666666666666666667PL/SQL 过程已成功完成。删除函数删除avg_sal函数：123SQL&gt; drop function avg_sal;函数已删除。]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
        <tag>Oracle 11g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle PL/SQL编程]]></title>
    <url>%2Fblog%2FOracle-PL-SQL%E7%BC%96%E7%A8%8B.html</url>
    <content type="text"><![CDATA[PL/SQL(Procedural Language/SQL)是一种过程化语言，在PL/SQL 中可以通过IF 语句或LOOP 语句实现控制程序的执行流程，甚至可以定义变量，以便在语句之间传递数据信息，这样PL/SQL 语言就能够实现操控程序处理的细节过程。PL/SQL 程序都是以块（BLOCK）为基本单位，整个PL/SQL 块分3 部分：声明部分（用DECLARE开头）、执行部分（以BEGIN 开头）和异常处理部分（以EXCEPTION 开头）：1234567[DECLARE] --声明部分，可选BEGIN --执行部分，必须[EXCEPTION] --异常处理部分，可选END对于 PL/SQL 块中的语句，需要指出的是：每一条语句都必须以分号结束，每条SQL 语句可以写成多行的形式，同样必须使用分号来结束。另外，一行中也可以有多条SQL 语句，但是它们之间必须以分号分隔。比如：12345678910111213141516SQL&gt; set serveroutput onSQL&gt; declare a int:=100; b int:=200; c number; begin c:=(a+b)/(a-b); dbms_output.put_line(c); exception when zero_divide then dbms_output.put_line('除数不能为零'); end; /-3PL/SQL 过程已成功完成。其中，“set serveroutput on”命令来实现在服务端显示执行结果；“dbms_output.put_line(c);”语句用于输出信息。数据类型基本数据类型1.数值类型数值类型主要包括NUMBER、PLS_INTEGER 和BINARY_INTEGER 3 种基本类型。其中，NUMBER 类型的变量可以存储整数或浮点数；而BINARY_INTEGER或PLS_INTEGER 类型的变量只存储整数。NUMBER 类型还可以通过NUMBER(P,S)的形式来格式化数字，其中，参数P表示精度，参数S表示刻度范围。精度是指数值中所有有效数字的个数。比如：1money number(9,2);2.字符类型字符类型主要包括 VARCHAR2、CHAR、LONG、NCHAR 和NVARCHAR2 等。这些类型的变量用来存储字符串或字符数据。VARCHAR2 类型：用于存储可变长度的字符串，其语法格式为：1VARCHAR2(maxlength)参数 maxlength表示可以存储字符串的最大长度，maxlength的最大值可以是32767 字节。CHAR 类型：CHAR 类型表示指定长度的字符串，其语法格式如下：1CHAR(maxlength)参数 maxlength 是指可存储字符串的最大长度，以字节为单位，最大为32767字节，CHAR 类型的默认最大长度为1字节。LONG 类型：LONG 类型表示一个可变的字符串，最大长度是32767 字节。NCHAR 和NVARCHAR2类型：这两种数据类型的长度要根据各国字符集来确定，只能具体情况具体分析。3.日期类型日期类型只有一种——DATE 类型，用来存储日期和时间信息，DATE类型的存储空间是7个字节，分别使用一个字节存储世纪、年、月、天、小时、分钟和秒。4.布尔类型布尔类型也只有一种——BOOLEAN类型，其变量值可以是TRUE、FALSE 或NULL 中的一种。特殊数据类型1.%TYPE 类型使用%TYPE关键字可以声明一个与指定列名称相同的数据类型，比如声明一个与 emp 表中job 列的数据类型完全相同的变量var_job：1declare var_job emp.job%type;如果emp.job 列的数据类型为VARCHAR2(10)，那么变量var_job 的数据类型也是 VARCHAR2(10)。比如，使用%type 类型的变量输出emp 表中编号为7369 的员工名称和职务信息：1234567891011121314SQL&gt; set serveroutput onSQL&gt; declare var_ename scott.emp.ename%type; var_job scott.emp.job%type; begin select ename,job into var_ename,var_job from scott.emp where empno=7369; dbms_output.put_line(var_ename||'的职务是'||var_job); end; /SMITH的职务是CLERKPL/SQL 过程已成功完成。由于into子句中的变量只能存储一个单独的值，所以要求select 子句只能返回一行数据。若SELECT子句返回多行数据，则代码运行后会返回错误信息。2.RECORD 类型RECORD 类型也称作“记录类型”，存储由多个列值组成的一行数据。语法结构如下：12345type record_type is record(var_member1 data_type [not null] [:=default_value],…var_membern data_type [not null] [:=default_value])比如，声明一个记录类型emp_type，然后使用该类型的变量存储emp表中的一条记录信息，并输出这条记录信息：12345678910111213141516171819SQL&gt; set serveroutput onSQL&gt; declare type emp_type is record ( var_ename varchar2(20), var_job varchar2(20), var_sal number ); empinfo emp_type; begin select ename,job,sal into empinfo from scott.emp where empno=7369; dbms_output.put_line('雇员'||empinfo.var_ename||'的职务是'||empinfo.var_job||'，工资是'||empinfo.var_sal); end; /雇员SMITH的职务是CLERK，工资是800PL/SQL 过程已成功完成。3.%ROWTYPE 类型%ROWTYPE 类型的变量结合了%TYPE 类型和RECORD 类型变量的优点，它可以根据数据表中行的结构定义一种特殊的数据类型，用来存储从数据表中检索到的一行数据，语法如下：1rowVar_name table_name%rowtype;使用%ROWTYPE改造上个RECORD类型的例子：123456789101112SQL&gt; set serveroutput onSQL&gt; declare row_emp scott.emp%rowtype; begin select * into row_emp from scott.emp where empno=7369; dbms_output.put_line('雇员'||row_emp.ename||'的职务是'||row_emp.job||'，工资是'||row_emp.sal); end; /雇员SMITH的职务是CLERK，工资是800PL/SQL 过程已成功完成。变量与常量定义变量定义变量的格式如下所示：1&lt;变量名&gt; &lt;数据类型&gt; [(长度):=&lt;初始值&gt;];比如： 定义一个用于存储国家名称的可变字符串变量 var_countryname，该变量的最大长度 是50，并且该变量的初始值为“中国”：1var_countryname varchar2(50):='中国';定义常量定义常量的格式如下所示：1&lt;常量名&gt; constant &lt;数据类型&gt;:=&lt;常量值&gt;;定义一个常量con_day，用来存储一年的天数：1con_day constant integer:=365;流程控制if…then语句其语法如下：123if &lt; condition_expression&gt; then plsql_sentenceend if;如果 if 后面的条件表达式存在“并且”、“或者”、“非”等逻辑运算，则可以使用“and”、“or”、“not”等逻辑运算符。另外，如果要判断if后面的条件表达式的值为空值，则需要在条件表达式中使用“is”和“null”关键字。if…then…else语句其语法如下：12345if &lt;condition_expression&gt; then plsql_sentence1;else plsql_sentence2;end if;if…then…elsif语句其语法如下：12345678if &lt; condition_expression1 &gt; then plsql_sentence_1;elsif &lt; condition_expression2 &gt; then plsql_sentence_2; ...else plsql_sentence_n;end if;case语句其语法如下：12345678910case &lt; selector&gt; when &lt;expression_1&gt; then plsql_sentence_1; when &lt;expression_2&gt; then plsql_sentence_2; ... when &lt;expression_n&gt; then plsql_sentence_n; [else plsql_sentence;]end case;loop语句loop 语句会先执行一次循环体，然后再判断“exit when”关键字后面的条件表达式的值是true 还是false，如果是true，则程序会退出循环体，否则程序将再次执行循环体，这样就使得程序至少能够执行一次循环体，语法如下：1234loop plsql_sentence; exit when end_condition_ exp;end loop;比如计算1到100自然数的和：12345678910111213141516SQL&gt; set serveroutput onSQL&gt; declare sum_i int:=0; i int:=0; begin loop i:=i+1; sum_i:=sum_i+i; exit when i&gt;=100; end loop; dbms_output.put_line('自然数1到100的和为：'||sum_i); end; /自然数1到100的和为：5050PL/SQL 过程已成功完成。while语句语法如下：123while condition_expression loop plsql_sentence;end loop;使用 while 语句求得前100 个自然数的和：123456789101112131415SQL&gt; set serveroutput onSQL&gt; declare sum_i int:=0; i int:=0; begin while i&lt;=99 loop i:=i+1; sum_i:=sum_i+i; end loop; dbms_output.put_line('自然数1到100的和为：'||sum_i); end; /自然数1到100的和为：5050PL/SQL 过程已成功完成。for语句语法如下：123for variable_ counter_name in [reverse] lower_limit..upper_limit loop plsql_sentence;end loop;variable_ counter_name：表示一个变量，通常为整数类型，用来作为计数器。默认情况下计数器的值会循环递增，当在循环中使用reverse关键字时，计数器的值会随循环递减。lower_limit：计数器的下限值，当计数器的值小于下限值时，程序终止for循环。upper_limit：计数器的上限值，当计数器的值大于上限值时，程序终止for循环。比如，使用 for 语句求得前100 个自然数中奇数之和，12345678910111213141516SQL&gt; set serveroutput onSQL&gt; declare i int:=0; sum_i int:=0; begin for i in reverse 1..100 loop if mod(i,2)!=0 then sum_i:=sum_i+i; end if; end loop; dbms_output.put_line('自然数1到100的奇数和为：'||sum_i); end; /自然数1到100的奇数和为：2500PL/SQL 过程已成功完成。在上面的for 语句中，由于使用了关键字“reverse”，表示计数器i 的值为递减状态，即i 的初始值为100，随着每次递减1，最后一次for 循环时i 的值变为1。如果在for 语句中不使用关键字“reverse”，则表示计数器i 的值为递增状态，即i 的初始值为1。游标游标分为显式游标和隐式游标。显式游标显式游标是由用户声明和操作的一种游标，通常用于操作查询结果集，使用它处理数据的步骤包括：声明游标、打开游标、读取游标和关闭游标4个步骤。1.声明游标声明游标主要包括游标名称和为游标提供结果集的 SELECT 语句。语法如下：123cursor cur_name[(input_parameter1[,input_parameter2]…)] [return ret_type]is select_ sentence;cur_name：表示所声明的游标名称。ret_type：表示执行游标操作后的返回值类型，这是一个可选项。select_ sentence：游标所使用的SELECT 语句，它为游标的反复读取提供了结果集。input_parameter1：作为游标的“输入参数”，可以有多个，这是一个可选项。比如声明一个游标，用来读取emp 表中职务为销售员（SALESMAN）的雇员信息：12345SQL&gt; declare cursor cur_emp(var_job in varchar2:='SALESMAN') is select empno,ename,sal from emp where job=var_job;输入参数var_job类型为varchar2，但不可以指定长度，如：varchar2(10)，否则程序报错。2.打开游标打开游标的语法格式如下：1open cur_name[(para_value1[,para_value2]…)];比如：1open cur_emp('MANAGER');上面这条语句表示打开游标 cur_emp，然后给游标的“输入参数”赋值为“MANAGER”。当然这里可以省略“(‘MANAGER’)”，这样表示“输入参数”的值仍然使用其初始值（即SALESMAN）。3.读取游标当打开一个游标之后，就可以读取游标中的数据了其语法格式如下：1fetch cur_name into &#123;variable&#125;;cur_name：要读取的游标名称。variable：%RECORD类型或者%ROWTYPE类型变量。4.关闭游标游标使用完毕后需要关闭，以释放系统资源，比如 SELECT 语句返回的结果集等。它的语法格式如下：1close cur_name;游标的属性无论是显式游标还是隐式游标，都具有%found、%notfound、%isopen 和%rowcount4个属性，通过这4个属性可以获知SQL语句的执行结果以及该游标的状态信息：%found：布尔型属性，如果SQL 语句至少影响到一行数据，则该属性为true，否则为fasle。%notfound：布尔型属性，与%found 属性的功能相反。%rowcount：数字型属性，返回受SQL 语句影响的行数。%isopen：布尔型属性，当游标已经打开时返回true，游标关闭时则为false。下面举个使用显式游标的例子：12345678910111213141516171819202122SQL&gt; set serveroutput onSQL&gt; declare cursor cur_emp(var_job in varchar2:='SALESMAN') is select * from scott.emp where job=var_job; row_emp scott.emp%rowtype; begin open cur_emp; fetch cur_emp into row_emp; //先让指针指向结果集中的第一行，并将值保存到row_emp中 while cur_emp%found loop dbms_output.put_line('雇员'||row_emp.ename||'的编号是'||row_emp.empno||'，工资是：'||row_emp.sal); fetch cur_emp into row_emp; //让指针指向结果集中的下一行，并将值保存到row_emp中 end loop; close cur_emp; end; /雇员ALLEN的编号是7499，工资是：1600雇员WARD的编号是7521，工资是：1250雇员MARTIN的编号是7654，工资是：1250雇员TURNER的编号是7844，工资是：1500PL/SQL 过程已成功完成。隐式游标在执行一个 SQL 语句时，Oracle 会自动创建一个隐式游标。这个游标是内存中处理该语句的工作区域。隐式游标主要是处理数据操纵语句（如UPDATE、DELETE 语句）的执行结果，当然特殊情况下，也可以处理SELECT 语句的查询结果。由于隐式游标也有属性，当使用隐式游标的属性时，需要在属性前面加上隐式游标的默认名称——sql。在实际的 PL/SQL 编程中，经常使用隐式游标来判断更新数据行或删除数据行的情况。比如把scott.emp表中销售员（即SALESMAN）的工资上调20%，然后使用隐式游标sql的%rowcount属性输出上调工资的员工数量：1234567891011121314SQL&gt; set serveroutput onSQL&gt; begin update scott.emp set sal=sal*1.2 where job='SALESMAN'; if sql%notfound then dbms_output.put_line('没有雇员需要上调工资'); else dbms_output.put_line('有'||sql%rowcount||'个雇员工资上调20%'); end if; end; /有4个雇员工资上调20%PL/SQL 过程已成功完成。通过for语句循环游标在使用隐式游标或显式游标处理具有多行数据的结果集时，用户可以配合for语句来完成。在使用for语句遍历游标中的数据时，可以把它的计时器看做一个自动的RECORD类型的变量。比如使用for遍历一个隐式游标：12345678910111213SQL&gt; set serveroutput onSQL&gt; begin for emp_record in (select * from scott.emp where job='SALESMAN') loop dbms_output.put_line('雇员编号：'||emp_record.empno||'，雇员姓名：'||emp_record.ename||'，工资为：'||emp_record); end loop; end; /雇员编号：7499，雇员姓名：ALLEN，工资为：1920雇员编号：7521，雇员姓名：WARD，工资为：1500雇员编号：7654，雇员姓名：MARTIN，工资为：1500雇员编号：7844，雇员姓名：TURNER，工资为：1800PL/SQL 过程已成功完成。异常在编写PL/SQL程序时，避免不了会发生一些异常。Oracle 系统异常分为预定义异常和自定义异常。预定义异常Oracle系统常见的预定义异常及其说明如下表所示：系统预定义异常说明ZERO_DIVIDE除数为零时引发的异常ACCESS_INTO_NULL企图为某个未初始化对象的属性赋值COLLECTION_IS_NULL企图使用未初始化的集合元素CURSOR_ALREADY_OPEN企图再次打开一个已经打开过的游标，但在重新打开之前，游标未关闭INVALID_CURSOR执行一个非法的游标操作，例如，关闭一个未打开的游标INVALID_NUMBER企图将一个字符串转换成一个无效的数字而失败LOGIN_DENIED企图使用无效的用户名或密码连接数据库NO_DATA_FOUNDSELECT INTO 语句没有返回数据ROWTYPE_MISMATCH主游标变量与PL/SQL 游标变量的返回类型不兼容SELF_IS_NULL使用对象类型时，使用空对象调用其方法SUBSCRIPT_BEYOND_COUNT元素下标超过嵌套表或VARRAY 的最大值SUBSCRIPT_OUTSIDE_LIMIT企图使用非法索引号引用嵌套表或VARRAY 中的元素SYS_INVALID_ROWID字符串向ROWID 转换时的错误，因为该字符串不是一个有效的ROWID 值TIMEOUT_ON_RESOURCEOracle 在等待资源时超时TOO_MANY_ROWS执行SELECT INTO 语句时，结果集超过一行引发的异常比如：1234567891011121314151617181920SQL&gt; set serveroutput onSQL&gt; declare var_empno number; var_ename varchar2(50); begin select empno,ename into var_empno,var_ename from scott.emp where deptno=10; if sql%found then dbms_output.put_line('雇员编号：'||var_empno); end if; exception when too_many_rows then dbms_output.put_line('返回记录超过一行'); when no_data_found then dbms_output.put_line('无数据'); end; /返回记录超过一行PL/SQL 过程已成功完成。自定义异常Oracle的自定义异常就可以分为错误编号异常和业务逻辑异常两种。1.错误编号异常错误编号异常是指在Oracle系统发生错误时，系统会显示错误编号和相关描述信息的异常，比如：12345SQL&gt; insert into scott.dept values(10,'开发一部','福州');insert into scott.dept values(10,'开发一部','福州')*第 1 行出现错误:ORA-00001: 违反唯一约束条件 (SCOTT.PK_DEPT)对于这种异常，首先在PL/SQL块的声明部分（DECLARE 部分）使用EXCEPTION类型定义一个异常变量名，然后使用语句PRAGMA EXCEPTION_INIT为“错误编号”关联这个异常变量名，接下来就可以像对待系统预定义异常一样处理了。比如：1234567891011121314SQL&gt; set serveroutput onSQL&gt; declare primary_iterant exception; pragma exception_init(primary_iterant,-00001); begin insert into scott.dept values(10,'开发一部','福州'); exception when primary_iterant then dbms_output.put_line('主键重复！'); end; /主键重复！PL/SQL 过程已成功完成。2.业务异常程序开发人员可以根据具体的业务逻辑规则自定义一个异常。业务逻辑异常是Oracle系统本身无法知道的，这样就需要有一个引发异常的机制，引发业务逻辑异常通常使用RAISE 语句来实现。比如，自定义一个异常变量，在向dept表中插入数据时，若判断loc字段的值为null，则使用raise语句引发异常：123456789101112131415161718192021SQL&gt; set serveroutput onSQL&gt; declare null_exception exception; dept_row scott.dept%rowtype; begin dept_row.deptno:=66; dept_row.dname:='开发二部'; insert into scott.dept values(dept_row.deptno,dept_row.dname,dept_row.loc); if dept_row.loc is null then raise null_exception; end if; exception when null_exception then dbms_output.put_line('loc字段不能为空！'); rollback; end; /loc字段不能为空！PL/SQL 过程已成功完成。]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
        <tag>Oracle 11g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle SQLPlus命令]]></title>
    <url>%2Fblog%2FOracle-SQLPlus%E5%91%BD%E4%BB%A4.html</url>
    <content type="text"><![CDATA[SQLPlus是一个被DBA和开发人员广泛使用的功能强大的Oracle工具，可以在各个平台上拥有操作的一致性。SQLPlus可以执行输入的SQL语句和SQL文件，通过SQLPlus可以和数据库进行对话。以下例子基于Oracle 11g。set命令设置运行环境在Oracle 11g中，可以使用set命令来设置SQLPlus的运行环境。set命令语法如下：1set variable valuevariable为变量名，value为变量值。下面介绍几个常用的set变量。pagesize变量pagesize变量用来设置从顶部标题到页结束行（包含页首的空行）之间的行数。pagesize的默认值为14：12SQL&gt; show pagesizepagesize 14使用set pagesize命令修改一页的行数为18：1234567891011121314151617181920SQL&gt; set pagesize 18;SQL&gt; select user_id,username,account_status from dba_users; USER_ID USERNAME ACCOUNT_STATUS---------- ------------------------------ -------------------------------- 74 MGMT_VIEW OPEN 0 SYS OPEN 5 SYSTEM OPEN 30 DBSNMP OPEN 72 SYSMAN OPEN 84 SCOTT OPEN 9 OUTLN EXPIRED &amp; LOCKED 75 FLOWS_FILES EXPIRED &amp; LOCKED 57 MDSYS EXPIRED &amp; LOCKED 53 ORDSYS EXPIRED &amp; LOCKED 42 EXFSYS EXPIRED &amp; LOCKED 32 WMSYS EXPIRED &amp; LOCKED 31 APPQOSSYS EXPIRED &amp; LOCKED 78 APEX_030200 EXPIRED &amp; LOCKED 83 OWBSYS_AUDIT EXPIRED &amp; LOCKED可手动数一下是不是18行(lll￢ω￢)。newpage变量该变量用于设置一页中空行的数量，默认值为1，可以使用set newpage命令改变该值：12345678910111213141516171819202122SQL&gt; show newpagenewpage 1SQL&gt; set newpage 5SQL&gt; select user_id,username,account_status from dba_users; USER_ID USERNAME ACCOUNT_STATUS---------- ------------------------------ -------------------------------- 74 MGMT_VIEW OPEN 0 SYS OPEN 5 SYSTEM OPEN 30 DBSNMP OPEN 72 SYSMAN OPEN 84 SCOTT OPEN 9 OUTLN EXPIRED &amp; LOCKED 75 FLOWS_FILES EXPIRED &amp; LOCKED 57 MDSYS EXPIRED &amp; LOCKED 53 ORDSYS EXPIRED &amp; LOCKED 42 EXFSYS EXPIRED &amp; LOCKEDlinesize变量该变量用于设置SQLPlus环境中一行所显示的最多字符总数，默认值为80，当pagesize过小时，数据就会出现折行显示的情况。可以使用set linesize命令来调整linesize的值：123SQL&gt; show linesizelinesize 80SQL&gt; set linesize 120pause变量用于设置输出结果翻页时，是否暂停，基本语法如下：1set pause valuevalue可取的值有：off，默认值，返回结果一次性输出完毕，中间翻页不会暂停；on，表示输出结果的每一页都暂停，用户按ENTER继续；text，在设置为on之后，继续设置text的值，用于暂停时显示；比如：1234567891011121314151617181920212223SQL&gt; set pause onSQL&gt; set pause '按&lt;enter&gt;键继续'SQL&gt; select user_id,username,account_status from dba_users;按&lt;enter&gt;键继续 USER_ID USERNAME ACCOUNT_STATUS---------- ------------------------------ -------------------------------- 74 MGMT_VIEW OPEN 0 SYS OPEN 5 SYSTEM OPEN 30 DBSNMP OPEN 72 SYSMAN OPEN 84 SCOTT OPEN 9 OUTLN EXPIRED &amp; LOCKED 75 FLOWS_FILES EXPIRED &amp; LOCKED 57 MDSYS EXPIRED &amp; LOCKED 53 ORDSYS EXPIRED &amp; LOCKED 42 EXFSYS EXPIRED &amp; LOCKED 32 WMSYS EXPIRED &amp; LOCKED 31 APPQOSSYS EXPIRED &amp; LOCKED 78 APEX_030200 EXPIRED &amp; LOCKED 83 OWBSYS_AUDIT EXPIRED &amp; LOCKED按&lt;enter&gt;键继续numformat变量该变量值用于设置显示数值的默认格式，基本语法如下：1set numformat formatformat为数值掩码，常用值及其说明如下：掩码说明举例9查询结果中数字替换格式的掩码9990格式中的掩码屏蔽掉查询结果中的数字999.00$在查询结果中的数字前添加美元前缀$999S为数字显示符号类型，通常用于显示查询结果中的正负数字S999,在字符,位置上放置都逗号/td&gt;999,99查看scott.emp表中的SAL字段值，然后使用”$999,999,999.00”格式显示:12345678910111213141516171819202122232425262728293031SQL&gt; select ename,job,sal from scott.emp;ENAME JOB SAL---------- --------- ----------SMITH CLERK 800ALLEN SALESMAN 1600WARD SALESMAN 1250JONES MANAGER 2975MARTIN SALESMAN 1250BLAKE MANAGER 2850CLARK MANAGER 2450SCOTT ANALYST 3000KING PRESIDENT 5000TURNER SALESMAN 1500ADAMS CLERK 1100SQL&gt; set numformat $999,999,999.00SQL&gt; select ename,job,sal from scott.emp;ENAME JOB SAL---------- --------- ----------------SMITH CLERK $800.00ALLEN SALESMAN $1,600.00WARD SALESMAN $1,250.00JONES MANAGER $2,975.00MARTIN SALESMAN $1,250.00BLAKE MANAGER $2,850.00CLARK MANAGER $2,450.00SCOTT ANALYST $3,000.00KING PRESIDENT $5,000.00TURNER SALESMAN $1,500.00ADAMS CLERK $1,100.00timing变量该变量用于显示执行SQL语句所花的时间，默认值为off：1234567891011121314151617181920212223242526SQL&gt; set timing onSQL&gt; select ename,job,sal from scott.emp;ENAME JOB SAL---------- --------- ----------------SMITH CLERK $800.00ALLEN SALESMAN $1,600.00WARD SALESMAN $1,250.00JONES MANAGER $2,975.00MARTIN SALESMAN $1,250.00BLAKE MANAGER $2,850.00CLARK MANAGER $2,450.00SCOTT ANALYST $3,000.00KING PRESIDENT $5,000.00TURNER SALESMAN $1,500.00ADAMS CLERK $1,100.00ENAME JOB SAL---------- --------- ----------------JAMES CLERK $950.00FORD ANALYST $3,000.00MILLER CLERK $1,300.00已选择14行。已用时间: 00: 00: 00.04set命令还有很多变量可用，可使用help set命令来查看。常用SQLPlus命令help命令help命令用来帮助用户查询指定命令详细介绍，类似于Linux的man，其的语法如下：1help|? [topic]?表示一个命令的部分字符，用于模糊查询；topic参数表示要查询的命令的完整名称。如果直接输入help，则显示的是命令本身的详细信息：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273SQL&gt; help HELP ---- Accesses this command line help system. Enter HELP INDEX or ? INDEX for a list of topics. You can view SQL*Plus resources at http://www.oracle.com/technology/tech/sql_plus/ and the Oracle Database Library at http://www.oracle.com/technology/documentation/ HELP|? [topic]SQL&gt; help set SET --- Sets a system variable to alter the SQL*Plus environment settings for your current session. For example, to: - set the display width for data - customize HTML formatting - enable or disable printing of column headings - set the number of lines per page SET system_variable value where system_variable and value represent one of the following clauses: APPI[NFO]&#123;OFF|ON|text&#125; NEWP[AGE] &#123;1|n|NONE&#125; ARRAY[SIZE] &#123;15|n&#125; NULL text AUTO[COMMIT] &#123;OFF|ON|IMM[EDIATE]|n&#125; NUMF[ORMAT] format AUTOP[RINT] &#123;OFF|ON&#125; NUM[WIDTH] &#123;10|n&#125; AUTORECOVERY &#123;OFF|ON&#125; PAGES[IZE] &#123;14|n&#125; AUTOT[RACE] &#123;OFF|ON|TRACE[ONLY]&#125; PAU[SE] &#123;OFF|ON|text&#125; [EXP[LAIN]] [STAT[ISTICS]] RECSEP &#123;WR[APPED]|EA[CH]|OFF&#125; BLO[CKTERMINATOR] &#123;.|c|ON|OFF&#125; RECSEPCHAR &#123;_|c&#125; CMDS[EP] &#123;;|c|OFF|ON&#125; SERVEROUT[PUT] &#123;ON|OFF&#125; COLSEP &#123;_|text&#125; [SIZE &#123;n | UNLIMITED&#125;] CON[CAT] &#123;.|c|ON|OFF&#125; [FOR[MAT] &#123;WRA[PPED] | COPYC[OMMIT] &#123;0|n&#125; WOR[D_WRAPPED] | COPYTYPECHECK &#123;ON|OFF&#125; TRU[NCATED]&#125;] DEF[INE] &#123;&amp;|c|ON|OFF&#125; SHIFT[INOUT] &#123;VIS[IBLE] | DESCRIBE [DEPTH &#123;1|n|ALL&#125;] INV[ISIBLE]&#125; [LINENUM &#123;OFF|ON&#125;] [INDENT &#123;OFF|ON&#125;] SHOW[MODE] &#123;OFF|ON&#125; ECHO &#123;OFF|ON&#125; SQLBL[ANKLINES] &#123;OFF|ON&#125; EDITF[ILE] file_name[.ext] SQLC[ASE] &#123;MIX[ED] | EMB[EDDED] &#123;OFF|ON&#125; LO[WER] | UP[PER]&#125; ERRORL[OGGING] &#123;ON|OFF&#125; SQLCO[NTINUE] &#123;&gt; | text&#125; [TABLE [schema.]tablename] SQLN[UMBER] &#123;ON|OFF&#125; [TRUNCATE] [IDENTIFIER identifier] SQLPLUSCOMPAT[IBILITY] &#123;x.y[.z]&#125; ESC[APE] &#123;\|c|OFF|ON&#125; SQLPRE[FIX] &#123;#|c&#125; ESCCHAR &#123;@|?|%|$|OFF&#125; SQLP[ROMPT] &#123;SQL&gt;|text&#125; EXITC[OMMIT] &#123;ON|OFF&#125; SQLT[ERMINATOR] &#123;;|c|ON|OFF&#125; FEED[BACK] &#123;6|n|ON|OFF&#125; SUF[FIX] &#123;SQL|text&#125; FLAGGER &#123;OFF|ENTRY|INTERMED[IATE]|FULL&#125; TAB &#123;ON|OFF&#125; FLU[SH] &#123;ON|OFF&#125; TERM[OUT] &#123;ON|OFF&#125; HEA[DING] &#123;ON|OFF&#125; TI[ME] &#123;OFF|ON&#125; HEADS[EP] &#123;||c|ON|OFF&#125; TIMI[NG] &#123;OFF|ON&#125; INSTANCE [instance_path|LOCAL] TRIM[OUT] &#123;ON|OFF&#125; LIN[ESIZE] &#123;80|n&#125; TRIMS[POOL] &#123;OFF|ON&#125; LOBOF[FSET] &#123;1|n&#125; UND[ERLINE] &#123;-|c|ON|OFF&#125; LOGSOURCE [pathname] VER[IFY] &#123;ON|OFF&#125; LONG &#123;80|n&#125; WRA[P] &#123;ON|OFF&#125; LONGC[HUNKSIZE] &#123;80|n&#125; XQUERY &#123;BASEURI text| MARK[UP] HTML [OFF|ON] ORDERING&#123;UNORDERED| [HEAD text] [BODY text] [TABLE text] ORDERED|DEFAULT&#125;| [ENTMAP &#123;ON|OFF&#125;] NODE&#123;BYVALUE|BYREFERENCE| [SPOOL &#123;OFF|ON&#125;] DEFAULT&#125;| [PRE[FORMAT] &#123;OFF|ON&#125;] CONTEXT text&#125;也可以使用help index命令查看SQLPlus命令清单：123456789101112131415161718SQL&gt; help indexEnter Help [topic] for help. @ COPY PAUSE SHUTDOWN @@ DEFINE PRINT SPOOL / DEL PROMPT SQLPLUS ACCEPT DESCRIBE QUIT START APPEND DISCONNECT RECOVER STARTUP ARCHIVE LOG EDIT REMARK STORE ATTRIBUTE EXECUTE REPFOOTER TIMING BREAK EXIT REPHEADER TTITLE BTITLE GET RESERVED WORDS (SQL) UNDEFINE CHANGE HELP RESERVED WORDS (PL/SQL) VARIABLE CLEAR HOST RUN WHENEVER OSERROR COLUMN INPUT SAVE WHENEVER SQLERROR COMPUTE LIST SET XQUERY CONNECT PASSWORD SHOWdescribe命令该命令用于查询指定数据表的组成结构，语法如下：1desc[ribe] object_namedescribe可缩写为desc。比如查询scott.emp表中SALESMAN的编号，姓名和工资，过程中，使用#desc scott.emp命令查询scott.emp表中工资字段的名称：123456789101112131415161718192021SQL&gt; select empno,ename, 2 #desc scott.emp 名称 是否为空? 类型 ----------------------------------------- -------- ---------------------------- EMPNO NOT NULL NUMBER(4) ENAME VARCHAR2(10) JOB VARCHAR2(9) MGR NUMBER(4) HIREDATE DATE SAL NUMBER(7,2) COMM NUMBER(7,2) DEPTNO NUMBER(2) 2 sal from scott.emp where job = 'SALESMAN'; EMPNO ENAME SAL---------- ---------- ---------- 7499 ALLEN 1600 7521 WARD 1250 7654 MARTIN 1250 7844 TURNER 1500spool命令该命令可以将查询结果输出到指定文件中，spool的语法格式如下：1spo[ol] [file_name[.ext] [CRE[ATE] | REP[LACE] | APP[END]] | OFF | OUT]cre[ate]，表示创建一个新的文件，默认值；rep[lace]，表示覆盖已存在的文件；app[end]，表示追加到一个已存在的文件中；off|out，表示关闭spool输出。比如：1234567891011121314151617181920212223242526SQL&gt; spool d:\emp.txtSQL&gt; select empno,ename,job,sal from scott.emp; EMPNO ENAME JOB SAL---------- ---------- --------- ---------- 7369 SMITH CLERK 800 7499 ALLEN SALESMAN 1600 7521 WARD SALESMAN 1250 7566 JONES MANAGER 2975 7654 MARTIN SALESMAN 1250 7698 BLAKE MANAGER 2850 7782 CLARK MANAGER 2450 7788 SCOTT ANALYST 3000 7839 KING PRESIDENT 5000 7844 TURNER SALESMAN 1500 7876 ADAMS CLERK 1100 EMPNO ENAME JOB SAL---------- ---------- --------- ---------- 7900 JAMES CLERK 950 7902 FORD ANALYST 3000 7934 MILLER CLERK 1300已选择14行。SQL&gt; spool off到D盘打开emp.txt如下：define命令该命令用来定义一个变量并赋值，基本语法如下：1def[ine] [variable] | [variable = text]比如：123SQL&gt; define vjob='SALESMAN'SQL&gt; define vjobDEFINE VJOB = "SALESMAN" (CHAR)show命令show命令用来显示SQLPlus系统变量的值，语法如下：1sho[w] optionoption表示要显示的系统选项，常用的值有：all，parameters [parameter_name]，sga，spool和user等。1234567891011121314SQL&gt; show parameters db_block_sizeNAME TYPE VALUE------------------------------------ ----------- ------------------------------db_block_size integer 8192SQL&gt; show sgaTotal System Global Area 3373858816 bytesFixed Size 2180424 bytesVariable Size 1862273720 bytesDatabase Buffers 1493172224 bytesRedo Buffers 16232448 bytesSQL&gt; show userUSER 为 "SYSTEM"save命令该命令将SQL缓冲区的最近一条SQL或PL/SQL块保存到指定的文件中，语法如下：1sav[e] [FILE] file_name[.ext] [CRE[ATE] | REP[LACE] | APP[END]]比如：1234567891011SQL&gt; select * from scott.dept; DEPTNO DNAME LOC---------- -------------- ------------- 10 ACCOUNTING NEW YORK 20 RESEARCH DALLAS 30 SALES CHICAGO 40 OPERATIONS BOSTONSQL&gt; save d:\dept.sql已创建 file d:\dept.sql如果不指定文件扩展名，默认为.sql。get命令该命令将一个SQL脚本文件的内容放进SQL的缓冲区，语法格式如下：1get [FILE] file_name[.ext] [LIST | NOLIST]其中list表示加载到缓冲区的时候显示文件的内容，nolist则表示不显示。比如加载d:\dept.sql到SQL缓冲区，并运行命令/执行该语句：12345678910SQL&gt; get d:\dept.sql list 1* select * from scott.deptSQL&gt; / DEPTNO DNAME LOC---------- -------------- ------------- 10 ACCOUNTING NEW YORK 20 RESEARCH DALLAS 30 SALES CHICAGO 40 OPERATIONS BOSTONstart和@两个命令都是用于执行一个sql脚本文件，比如：1234567891011121314151617SQL&gt; start d:\dept.sql DEPTNO DNAME LOC---------- -------------- ------------- 10 ACCOUNTING NEW YORK 20 RESEARCH DALLAS 30 SALES CHICAGO 40 OPERATIONS BOSTONSQL&gt; @ d:\dept.sql DEPTNO DNAME LOC---------- -------------- ------------- 10 ACCOUNTING NEW YORK 20 RESEARCH DALLAS 30 SALES CHICAGO 40 OPERATIONS BOSTON格式化查询结果column该命令可以实现格式化查询结果，设置列宽，设置列标题等。语法如下：1col[umn] [column_name|alias|option]column_name用于指定要设置的列的名称，alias用于指定列的别名，option用于指定列的显示格式，其值和说明如下表所示：option选项的值说明clear清除指定列所设置的格式，恢复默认值format格式化指定列heading指定列标题justify调整列标题的对齐方式，默认情况下：数值类型的右对齐，其他类型的左对齐null替换null值print/noprint显示列标题或隐藏列标题，默认为printon/off控制定义的显示属性状态，off表示定义的所有显示属性都不起作用wrapped当字符串的长度超过显示宽度时，将字符串的超出部分折叠到下一行显示word_wrapped表示从一个完整的字符处折叠truncated表示截取字符串尾部format选项使用format选项格式化scott.emp表中的sal列，格式为$999,999.00：123456789101112131415161718192021222324SQL&gt; column sal format $999,999.00SQL&gt; select empno,ename,sal from scott.emp; EMPNO ENAME SAL---------- ---------- ------------ 7369 SMITH $800.00 7499 ALLEN $1,600.00 7521 WARD $1,250.00 7566 JONES $2,975.00 7654 MARTIN $1,250.00 7698 BLAKE $2,850.00 7782 CLARK $2,450.00 7788 SCOTT $3,000.00 7839 KING $5,000.00 7844 TURNER $1,500.00 7876 ADAMS $1,100.00 EMPNO ENAME SAL---------- ---------- ------------ 7900 JAMES $950.00 7902 FORD $3,000.00 7934 MILLER $1,300.00已选择14行。heading选项使用heading选项将scott.emp表的empno，ename和sal三个列名转换为中文：1234567891011121314151617181920212223242526SQL&gt; column empno heading 员工编号SQL&gt; column ename heading 员工姓名SQL&gt; column sal heading 工资SQL&gt; select empno,ename,sal from scott.emp; 员工编号 员工姓名 工资---------- ---------- ------------ 7369 SMITH $800.00 7499 ALLEN $1,600.00 7521 WARD $1,250.00 7566 JONES $2,975.00 7654 MARTIN $1,250.00 7698 BLAKE $2,850.00 7782 CLARK $2,450.00 7788 SCOTT $3,000.00 7839 KING $5,000.00 7844 TURNER $1,500.00 7876 ADAMS $1,100.00 员工编号 员工姓名 工资---------- ---------- ------------ 7900 JAMES $950.00 7902 FORD $3,000.00 7934 MILLER $1,300.00已选择14行。null选项使用null选项将scott.emp表中comm列值为null显示成“空值”：1234567891011121314151617SQL&gt; column comm null '空值'SQL&gt; select empno,ename,comm from scott.emp where comm is null; 员工编号 员工姓名 COMM---------- ---------- ---------- 7369 SMITH 空值 7566 JONES 空值 7698 BLAKE 空值 7782 CLARK 空值 7788 SCOTT 空值 7839 KING 空值 7876 ADAMS 空值 7900 JAMES 空值 7902 FORD 空值 7934 MILLER 空值已选择10行。wrapped/word_wrapped选项使用wrapped选项实现按照指定长度折行：12345678910111213141516171819202122232425SQL&gt; create table test( 2 col1 varchar2(100) 3 );表已创建。SQL&gt; insert into test(col1) values ('HOW ARE YOU?');已创建 1 行。SQL&gt; select col1 from test;COL1--------------------------------------------------------------------------------HOW ARE YOU?SQL&gt; column col1 format a5SQL&gt; column col1 wrappedSQL&gt; select col1 from test;COL1-----HOW ARE YOU?使用word_wrapped选项按照完整字符串折行12345678SQL&gt; column col1 word_wrappedSQL&gt; select col1 from test;COL1-----HOWAREYOU?ttitle和btitle命令这两个命令分别用来设置打印时每页的页首和页脚标题，其中ttitle语法如下（btitle语法类似）：1tti[tle] [printspec [text|variable] ...] | [OFF|ON]printspec作为头标题的修饰性选项，其值和说明如下表所示：printspec选项的值说明col指定当前行的第几列打印头标题skip跳到从下一行开始的第几行，默认为1left在当前行中左对齐打印数据center在当前行中间打印数据right在当前行中右对齐打印数据bold以黑体打印数据比如：打印输出scott.salgrade数据表中的记录，并设置标题：1234567891011121314151617181920SQL&gt; set pagesize 8SQL&gt; ttitle left '销售情况排行表'SQL&gt; btitle left '打印日期2017年11月5日 打印人 MrBird'SQL&gt; select * from scott.salgrade;销售情况排行表 GRADE LOSAL HISAL---------- ---------- ---------- 1 700 1200 2 1201 1400 3 1401 2000打印日期2017年11月5日 打印人 MrBird销售情况排行表 GRADE LOSAL HISAL---------- ---------- ---------- 4 2001 3000 5 3001 9999打印日期2017年11月5日 打印人 MrBird]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
        <tag>Oracle 11g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx Rewrite]]></title>
    <url>%2Fblog%2FNginx-rewrite.html</url>
    <content type="text"><![CDATA[Nginx服务器提供了Rewrite功能，用于实现URL的重写。该功能由ngx_http_rewrite_module模块提供，该模块默认开启。Nginx服务器的Rewrite功能依赖于PCRE(Perl Compatible Regular Expressions，Perl兼容的正则表达式)，所以在编译安装Nginx的时候需要先安装PCRE库。Rewrite功能就是，使用Nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。Rewrite只能对域名后边的除去传递的参数外的字符串起作用，例如https://mrbird.cc/page/2/search?type=1&amp;value=nginx只对/page/2/search重写。if指令用于根据不同条件选择不同的Nginx配置，可在server和location块中配置。语法如下：1if (condition) &#123; &#125;condition为判断条件（true/false）：变量名。如果变量的值为空字符串或者以0开头的任意字符串，为false。其余为true；比较变量的内容时候，使用=或!=；使用正则表达式。~（大小写敏感），~*（大小写不敏感），!~和!~*。正则表达式一般不加双引号，除非包含}或者分号;字符；-f和!-f用来判断是否存在文件；-d和!-d用来判断是否存在目录；-e和!-e用来判断是否存在文件或目录；-x和!-x用来判断文件是否可执行。几个实例：123456789101112131415if ($request_method = POST) &#123; return 405; # 如果请求方法为POST，则直接返回405HTTP状态码。&#125;if ($slow) &#123; limit_rate 10k;&#125;if ($http_user_agent ~ MSIE) &#123; rewrite ^(.*)$ /msie/$1 break; # 如果UA包含"MSIE"，rewrite请求到/msid/目录下&#125;if ($http_cookie ~* "id=([^;]+)(?:;|$)") &#123; set $id $1; # 如果cookie匹配正则，设置变量$id等于正则引用部分&#125;if (!-f $request_filename)&#123; # 判断请求的文件是否不存在&#125;break指令该指令用于中断当前相同作用域的Nginx配置。Nginx遇到该指令时，回到上一层作用域继续向下读取配置。该指令可在server，location和if块中使用。语法如下：1break;比如：12345678location / &#123; if ($slow) &#123; set $id $1; break; # 跳出if作用域 limit_rate 10k; # 无效 &#125; ... # 继续读取&#125;return指令该指令用于完成对请求的处理，直接向客户端返回响应状态码，处于该指令后的所有Nginx配置都是无效的。语法结构如下：123return [text];return code URL;return URL;比如：123location = /404 &#123; return 404 "sorry page not found!\n"&#125;rewrite指令该指令通过正则表达式来改变URL，可以同时存在一个或多个指令，按照顺序依次对URL进行匹配处理。该指令可在server，location和if块中配置，语法如下：1rewrite regex replacement [flag];regex用于匹配URL的正则表达式，使用()标记要截取的内容。replacement匹配成功后用于替换URL中被截取的部分。默认情况下，如果replacement是由http://或者https://开头的字符串，则直接将重写后的URL返回客户端。flag标志位，其值有如下几种：last，Nginx遇到含有该标志位的rewrite命令时，停止向下处理，直接使用该rewrite返回的新的URL去和所有的location块重新匹配。break，将此处重写的URL作为一个新的URL，在本块中继续进行处理。该标志重写后的URL在当前location块中执行，不会转向到其他的location块。redirect将重写后的URL返回给客户端，状态码为302，表示临时重定向URL。permanent将重写后的URL返回给客户端，状态码为301，表示永久重定向URL。举些例子：1234location / &#123; rewrite ^(/myweb/.*)/media/(.*)\..*$ $1/mp3/$2.mp3 last; rewrite ^(/myweb/.*)/audio/(.*)\..*$ $1/mp4/$2.ra last; &#125;如果某个请求URL在第2行被匹配成功，Nginx不会继续使用第3行配置处理新的URL，而是让所有的location重新匹配新的URL。1234location /myweb/ &#123; rewrite ^(/myweb/.*)/media/(.*)\..*$ $1/mp3/$2.mp3 break; rewrite ^(/myweb/.*)/audio/(.*)\..*$ $1/mp4/$2.ra break; &#125;如果某个请求URL在第2行被匹配成功，Nginx服务器将新的URL继续使用本块中的第3行配置进行处理，不会将新的URL发送到其他location块。如果这里将break替换为last的话，新的URL包含/myweb/串，本location块可能继续捕获到该新的URL，这样便造成了死循环。Nginx在尝试10次循环之后，返回500 Internal Server Error错误。rewrite_log指令该指令配置是否开启重写URL日志的输出功能，语法如下：1rewrite_log on | off默认值为off。日志将以notice级别输出到error_log配置的日志文件中。set指令该指令用于设置一个新的变量，语法如下：1set variable value变量名称必须以$开头，且不能和Nginx服务器预设的全局变量同名，变量的作用域为全局。uninitialized_variable_warn指令该指令用于配置实用未初始化的变量时，是否记录警告日志，语法如下：1uninitialized_variable_warn on | off默认值为on。rewrite常用全局变量下表列出了在rewrite配置过程中可能会使用到的Nginx全局变量：变量说明$args请求URL中的请求参数串，如arg1=value1&amp;arg2=value2$content_length请求头中的Content-length字段$content_type请求头重的Content-type片段$document_root当前请求的根路径$document_uri当前请求的URI，比如https://mrbird.cc/page/2/search?type=1&amp;value=nginx中的/page/2/search$host当前URL的主机部分字段，比如https://mrbird.cc/page/2/search?type=1&amp;value=nginx中的mrbird.cc。如果为空，则为server块中server_name指令的配置值$http_user_agent客户端的代理信息$http_cookie客户端的cookie信息$limit_rateNginx服务器对网络连接速率的限制，即Nginx配置中的limit_rate指令的配置值$remote_addr客户端的IP地址$remote_port客户端的端口号$request_body_file发给后端服务器的本地文件资源名称$request_method客户端的请求方式，如get，post等$request_filename当前请求的文件路径，由root或alias指令与URI请求生成。$request_uri包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”$query_string和$args相同$schemeHTTP方法（如http，https，ftp）$server_protocol请求使用的协议，通常是HTTP/1.0或HTTP/1.1$server_addr服务器的地址$server_name服务器名称$server_port请求到达服务器的端口号$uri同$document_urirewrite实例域名跳转123456server &#123; listen 80; server_name jump.myweb.name; rewrite ^/ http://www.myweb.info/; ...&#125;比如客户端访问http://jump.myweb.name时，URL将被重写为http://jump.myweb.info。12345678server &#123; listen 80; server_name jump.myweb.name jump.myweb.info if ($host ~ myweb\.info) &#123; rewrite ^(.*) http://jump.myweb.name$1 permanent; &#125; ...&#125;当客户端访问http://jump.myweb.info/reqsource时，URL将被重写为http://jump.myweb.name/reqsource。123456789server &#123; listen 80; server_name jump1.myweb.name jump2.myweb.name; if ($http_host ~* ^(.*)\.myweb\.name$) &#123; rewrite ^(.*) http://jump.myweb.name$1; break; &#125; ...&#125;当客户端访问http://jump1.myweb.name/reponse或者http://jump2.myweb.name/reponse时，URL都将被Nginx重写为http://jump.myweb.name/reponse。目录合并123456789server &#123; listen 80; server_name www.myweb.name; location ^~ /server &#123; rewrite ^/server-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)\.htm$ /server/$1/$2/$3/$4/$5.html last; break; &#125;&#125;...此时如果客户端输入http://www.myweb.name/server-12-34-56-78-9.htm即可访问到http://www.myweb.name/server/12/34/56/78/9.html。这样做将多级目录下的资源文件请求转换为了目录计数少的资源请求，有利于SEO。防盗链防盗链的实现原理：通过HTTP协议中的请求头中的Referer头域，我们可以检测到访问目标资源的源地址，如果该地址不是自己站点的URL，就采取组织措施。Nginx配置中有一个指令valid_referers，如果Referer头域没有符合valid_referers配置的值，$invalid_referer变量的值将被赋值为1。valid_referers语法如下：1valid_referers none | blocked | server_names | string ...;none检测Referer头域不存在的情况。blocked检测Referer头域的值被防火墙或者代理服务器删除或伪装的情况。server_names设置URL。1234567891011server &#123; listen 80; server_name www.myweb.name; location ~* ^.+\.(gif|jpg|png|swf|flv|rar|zip)$ &#123; ... valid_referers none blocked server_names *.myweb.com; if ($invalid_referer) &#123; rewrite ^/ http://www.myweb.com/images/forbidden.png; &#125; &#125;...]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx upstream]]></title>
    <url>%2Fblog%2FNginx-upstream.html</url>
    <content type="text"><![CDATA[upstream指令用于配置Nginx后端服务器组。Nginx支持设置一组服务器作为后端服务器，由标准的HTTP模块ngx_http_upstream_module进行解析和处理。服务器组的设置涉及以下几个指令：upstream指令该指令为设置后端服务器组的主要指令，其他的指令都在该指令中进行配置，语法结构如下：1upstream name &#123; &#125;其中name为后端服务器组的名称，{}中包含服务器。某个服务器组收到请求后，按照权重的大小依次选择组内的服务器处理请求。如果出现错误，则顺次交给组内的下一个服务器进行处理，以此类推直到正常响应。如果都出错，则返回最后一个服务器处理的结果。server指令该指令用于设置组内的服务器，语法如下：1server address [parameters];address服务器的地址，支持IP，域名和unix地址；parameters设置更多的属性，包括：weight=number用于设置权重，权重高的优先处理。默认值为1。max_fails=number设置请求失败的次数。在fail_timeout时间范围内，服务器请求失败的次数超过该值时，则将该服务器置为down（无效）状态。fail_timeout=time除了用在max_fails外，该属性还用于设置某个down状态服务器的持续时间，在这个时间段内不再检查该服务器的状态，一直认为它是down状态。默认值为10s。backup设置服务器为备用服务器。当正常的服务器处于down或者busy状态时，该服务器才被用来处理请求。down将服务器标记为永久down状态。举个例子：12345upstream backend &#123; server www.example.com weight=5; server 127.0.0.1:8080 max_fails=3 fail_timeout=30s; server unix:/tmp/backend3;&#125;上述指令设置了一个名为backend的服务器组，包含三台服务器。第一台服务器是基于域名的，并且权重为5，将优先处理客户端请求；第二台服务器基于IP地址，并且设置如果30s内连续产生3次请求失败，则该服务器在之后的30s内被认为是down状态；第三台服务器基于unix地址。ip_hash指令该指令用于保障客户端和服务器建立稳定的会话。只有当该服务器处于down状态时，客户端请求才会被下一个服务器接收和处理。语法如下：1ip_hash;ip_hash指令不能和weight一起使用；Nginx服务器应为最前端的服务器。比如：12345upstream backend &#123; ip_hash; server myback1.proxy.com; server myback2.proxy.com;&#125;上述配置会使得客户端的请求都由第一台服务器处理（前提是没有出错），如果去掉ip_hash，则组内的两台服务器轮流响应请求。keep_alive指令该指令用于控制Nginx服务器的工作进程为服务器打开一定范围的网络连接，语法如下：1keepalive connections;connections用于限定该范围的上限值。如果超过该值，工作进程将采用LRU（最近最少使用）算法来关闭网络连接。least_conn指令该指令用于控制服务器组处理客户端请求时，除了考虑权重的大小之外，每次选择的服务器都是当前网络连接最少的那台。语法如下：1least_conn;]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx Gzip压缩]]></title>
    <url>%2Fblog%2FNginx-Gzip%E5%8E%8B%E7%BC%A9.html</url>
    <content type="text"><![CDATA[Nginx开启Gzip压缩可以将页面资源进行压缩后传输给浏览器，浏览器判断页面资源是否有进行压缩，如果有，则先进行解压然后再渲染页面。目前流行的浏览器都支持了该项技术（除了远古时代的IE6）。Gzip压缩可以降低网络带宽消耗，同时提升访问速度，使访问者拥有更好的用户体验。ngx_http_gzip_module该模块默认开启，主要负责Gzip功能的开启与设置，对响应数据进行在线实时压缩。涉及的指令主要有以下9个：gzip指令该指令用于开启或关闭Gzip功能，语法结构如下：1gzip on | off默认值为off。gzip_buffers指令该指令用于设置Gzip压缩文件使用缓存空间的大小，语法结构如下：1gzip_buffers number size;Nginx服务器在进行压缩时，需要向系统申请number*size大小的空间用于存储压缩数据。默认情况下number*size的值为128，size值为系统内存页一页的大小，为4K或8k，即：1gzip_buffers 32 4k | 16 8kgzip_comp_level指令用于设定Gzip压缩率。压缩率级别从1到9，其中1表示压缩率最低，压缩时间最短；9表示压缩率最高，压缩时间最长。语法结构如下：1gzip_comp_level level默认值为1。gzip_disable指令针对不同类型的客户端发起的请求，可以选择性的开启或关闭Gzip功能。比如IE6对Gzip的支持不好，所以如果发送请求的客户端为IE6，则关闭Gzip的功能。语法如下：1gzip_disable regex ...其中regex为浏览器的UA标志的正则表达式。比如：1gzip_disable MSIE [4-6]\.即UA字符串包括MSIE 4，MSIE 5，MSIE 6的浏览器发送的请求，Nginx将不进行Gzip压缩。gzip_http_version指令早期的HTTP客户端可能不支持Gzip的自解压，所以该指令用于限制开启Gzip压缩的最低HTTP协议版本，语法如下：1gzip_http_version 1.0 | 1.1默认值为1.1。目前来说大多数浏览器都支持Gzip自解压，所以采用默认值即可。gzip_min_length指令Gzip压缩功能对于size较大的文件压缩效果明显，而对于一些size很小的文件可能会出现数据量越压缩越大的情况。所以为了防止出现这种情况，可用该指令来限制压缩的最低数据量，语法如下：1gzip_min_length length默认值为20，为0时表示不进行限制。一般情况下设置为1kb即可。gzip_proxied指令该指令用于设置Nginx服务器是否对后端服务器返回的结果进行Gzip压缩。该指令在使用Nginx服务器的反向代理功能时有效。语法如下：1gzip_proxied off | expired | no-cache | no-store | private | no_last_modified | no_etag | auth | any ...off关闭Nginx服务器对后端服务器返回结果进行Gzip压缩，为默认值。expired当后端服务器响应页头部包含用于指示响应数据过期时间的expired头域时，开启Gzip压缩。no-cache当后端服务器响应页头部包含用于通知所有缓存机制是否缓存的Cache-control头域且其指令值为no-cache时，开启Gzip压缩。no-store当后端服务器响应页头部包含用于通知所有缓存机制是否缓存的Cache-control头域且其指令值为no-store时，开启Gzip压缩。private当后端服务器响应页头部包含用于通知所有缓存机制是否缓存的Cache-control头域且其指令值为private时，开启Gzip压缩。no_last_modified当后端服务器响应页头部不包含用于指明需要获取数据最后修改时间的Last-Modified头域时，开启Gzip压缩。no-etag当后端服务器响应页头部不包含用于标识被请求变量的实体值的ETag头域时，开启Gzip压缩。auth当后端服务器响应页头部包含用于标识HTTP授权证书的Authorization头域时，开启Gzip压缩。any无条件开启Gzip压缩。gzip_types指令根据响应页的MIME类型选择性的开启Gzip压缩。语法为：1gzip_types mime-types ...默认值为text/html，变量值还可以取*，表示对所有MIME类型的页面数据都进行Gzip压缩。gzip_vary指令该指令用于设置在使用了Gzip功能时是否发送带有“vary:Accept-Encoding”头域的响应头部。比如打开百度页面的控制台，可看到：其语法如下：1gzip_vary on | off默认值为off。ngx_http_gzip_static_module该模块主要负责搜索和发送经过Gzip功能预压缩的数据。如果客户端请求的数据在之前就被压缩过，则直接返回。和ngx_http_gzip_module主要的区别是，该模块使用的是静态压缩，在HTTP响应头部包含Content-Length头域来指明报文体的长度，用于服务器确定响应数据的长度。该模块默认关闭，如果需要使用，必须在Nginx程序配置时添加–with-http_gzip_static_module指令。与该模块有关的命令有如下几个：gzip_static、gzip_http_version、gzip-proxied、gzip_disable和gzip_vary等。gzip_static指令该指令用于开启或关闭Gzip静态压缩。语法如下：1gzip_static on | off | always其余指令和ngx_http_gzip_module类似。ngx_http_gunzip_module该模块用来针对不支持Gzip压缩数据处理的客户端浏览器，对压缩数据进行解压处理。有关的命令如下：gunzip、gunzip_buffers、gzip_http_version、gzip_proxied、gzip_disable和gzip_vary等。该模块默认关闭，如果需要使用，必须在Nginx程序配置时添加 –with-http_gunzip_module指令。gunzip指令该指令用于开启或关闭该模块的功能，语法如下：1gunzip_static on | off启用该功能后，如果客户端浏览器不支持Gzip数据处理时，Nginx只是在将数据返回给浏览器前进行了解压处理。当Nginx和后端服务器交互的数据或者本身存储的数据还是使用了Gzip压缩的。这样做是可以保证浏览器解析数据不出现问题，同时减少了和后端服务器之间的数据传输量，降低了本地的存储空间和缓存的使用率。其余指令和ngx_http_gzip_module模块类似。配置实例使用hexo生成的静态页面为例子，配置Nginx如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748worker_processes 1;error_log logs/error.log;events &#123; worker_connections 1024; use epoll;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; gzip on; gzip_min_length 1024; gzip_buffers 4 16k; gzip_comp_level 2; gzip_types text/plain application/x-javascript text/css applicaiton/xml; gzip_vary on; gzip_disable "MSIE [1-6]\."; server &#123; listen 80; server_name localhost; charset utf-8; location /index &#123; alias /home/mrbird/mrbirdcc; index index.html; &#125; &#125; server &#123; listen 8082; server_name 192.168.112.130; charset utf-8; gzip off; # 关闭Gzip压缩 location /index &#123; alias /home/mrbird/mrbirdcc; index index.html; &#125; &#125;&#125;启动Nginx，访问开启了Gzip压缩的location：http://localhost/index/，显示如下：可见开启Gzip压缩后，文件大小变小了，并且响应头部包含Content-Encoding: gzip。访问未开启Gzip压缩的location：http://192.168.112.130:8082/index/，显示如下：]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx的基本配置]]></title>
    <url>%2Fblog%2FNginx%20basic%20config.html</url>
    <content type="text"><![CDATA[Nginx配置文件主要分成四部分：main（全局设置）、http（HTTP的通用设置）、server（虚拟主机设置）、location（匹配URL路径）。还有一些其他的配置段，如event，upstream等。一个完整的Nginx配置如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374user www www; ## Default: nobodyworker_processes 5; ## Default: 1error_log logs/error.log;pid logs/nginx.pid;worker_rlimit_nofile 8192;events &#123; worker_connections 4096; ## Default: 1024 multi_accept on; use epoll;&#125;http &#123; include conf/mime.types; include /etc/nginx/proxy.conf; include /etc/nginx/fastcgi.conf; index index.html index.htm index.php; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] $status ' '"$request" $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"'; access_log logs/access.log main; sendfile on; tcp_nopush on; server_names_hash_bucket_size 128; # this seems to be required for some vhosts server &#123; # php/fastcgi listen 80; server_name domain1.com www.domain1.com; access_log logs/domain1.access.log main; root html; location ~ \.php$ &#123; fastcgi_pass 127.0.0.1:1025; &#125; &#125; server &#123; # simple reverse-proxy listen 80; server_name domain2.com www.domain2.com; access_log logs/domain2.access.log main; # serve static files location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123; root /var/www/virtual/big.server.com/htdocs; expires 30d; &#125; # pass requests for dynamic content to rails/turbogears/zope, et al location / &#123; proxy_pass http://127.0.0.1:8080; &#125; &#125; upstream big_server_com &#123; server 127.0.0.3:8000 weight=5; server 127.0.0.3:8001 weight=5; server 192.168.0.1:8000; server 192.168.0.1:8001; &#125; server &#123; # simple load balancing listen 80; server_name big.server.com; access_log logs/big.server.access.log main; location / &#123; proxy_pass http://big_server_com; &#125; &#125;&#125;Nginx基础配置指令user用于指定运行Nginx的用户和组：1user user [group]只有被设置的用户或者用户组成员才有权限启动Nginx服务。如果希望所有用户都可以启动Nginx，则只需将其注释掉或者指定为：1user nobody nobodyworker_processes指定Nginx的工作进程的个数，可以设置为与 CPU 数量相同，基本语法：1worker_processes number|auto设置为auto时，Nginx进程将自动检测。当worker_processes设置为1时：12345# sbin/nginx # ps -ef|grep nginxroot 5882 1326 0 13:07 ? 00:00:00 nginx: master process sbin/nginxnobody 5883 5882 0 13:07 ? 00:00:00 nginx: worker processroot 5885 5430 0 13:07 pts/1 00:00:00 grep --color=auto nginx将worker_processes设置为3时：123456# ps -ef|grep nginxroot 5919 1326 0 13:09 ? 00:00:00 nginx: master process sbin/nginxnobody 5920 5919 0 13:09 ? 00:00:00 nginx: worker processnobody 5921 5919 0 13:09 ? 00:00:00 nginx: worker processnobody 5922 5919 0 13:09 ? 00:00:00 nginx: worker processroot 5924 5430 0 13:09 pts/1 00:00:00 grep --color=auto nginxworker_processes进程数变成了3个。error_log用于配置错误日志的存放路径。http，server和location块也可配置error_log，区别在于级别不一样。基本语法：1error_log files|stderr [ debug | info | notice | warn | error | crit | alert | emerg ]debug级别最高，emerg级别最低。比如设置级别为warn后，warn，error，crit，alert和emerg级别的日志都会被记录。Nginx默认日志存放路径为：logs/error.log。pidpid指令用于指定存放Nginx主进程号存放文件的路径。默认的路径为：123# ./sbin/nginx # cat logs/nginx.pid 101106worker_rlimit_nofile设置毎个进程的最大文件打开数。如果不设的话上限就是系统的ulimit –n的数字（1024）。worker_connections设定一个worker进程的最大连接数。默认为512，按自己系统的硬件配置调整，不能超过worker_rlimit_nofile。includeinclude指令用于引入第三方配置文件，比如常见的MIME类型等。accept_mutex该条指令目的是为了解决“惊群”的问题。“惊群”大致意思是：当某个时刻只有一个网络连接时，多个进程会被同时唤醒，但最终实际上只有一个进程可以获得连接，由于唤醒了别的不必要的进程，造成了性能的浪费。accept_mutex语法如下：1accept_mutex on | off默认为开启（on）状态，只能在events块中进行设置。multi_accept用于设置是否允许worker_process同时接受多个网络连接。语法如下：1multi_accept on | off其默认为关闭（off）状态，也就是说每个worker_process一次只能接收一个新到达的网络连接。该指令只能在events模块中设置。useuse指令用于选择事件的驱动模型。语法如下：1use methodNginx提供了多种事件驱动模型来处理网络消息，method可选的内容有：select，poll，kqueue，epoll，rtsig，/dev/poll和eventport。该指令只能在events模块中设置。worker_connentions用于设置每个worker_process最大的连接数。语法如下：1worker_process number该指令只能在events模块中设置。指定MIME在配置文件中，可以看到如下两条配置：12include conf/mime.types;default_type application/octet-stream;include指令引入了mime.types文件，其中mime.types内容如下：123456789101112131415161718192021222324252627282930types &#123; text/html html htm shtml; text/css css; text/xml xml; image/gif gif; image/jpeg jpeg jpg; application/javascript js; application/atom+xml atom; application/rss+xml rss; text/mathml mml; text/plain txt; text/vnd.sun.j2me.app-descriptor jad; text/vnd.wap.wml wml; text/x-component htc; ... video/3gpp 3gpp 3gp; video/mp2t ts; video/mp4 mp4; video/mpeg mpeg mpg; video/quicktime mov; video/webm webm; video/x-flv flv; video/x-m4v m4v; video/x-mng mng; video/x-ms-asf asx asf; video/x-ms-wmv wmv; video/x-msvideo avi;&#125;default_type application/octet-stream指定了默认类型为二进制流。如果不指定的话，默认值为text/plain。该指令可以在http，server或location模块中设置。自定义服务日志error_log用于记录Nginx运行时的常规日志，而access_log（服务日志）是指Nginx服务器在响应各种前端请求的日志。包含两个指令：access_log和log_format。access_log的语法如下：1access_log ptah[format[buffer=size]]path用于指定该日志的存放路径，format为可选项，代指自定义服务日志的格式字符串。size为可选项，用于配置临时存放日志的内存缓存区大小。log_format的语法如下：1log_format name string ...name用于为该格式定义一个变量名，供access_log指令使用。string为格式字符串，比如：$remote_addr - $remote_user [$time_local] $status其中$remote_addr等为Nginx预设的一些变量，常用的变量有：参数说明示例$remote_addr客户端地址211.28.65.253$remote_user客户端用户名称–$time_local访问时间和时区18/Jul/2012:17:00:01 +0800$request请求的URI和HTTP协议“GET /article-10000.html HTTP/1.1”$http_host请求地址，即浏览器中你输入的地址（IP或域名）www.it300.com192.168.100.100$statusHTTP请求状态200$upstream_statusupstream状态200$body_bytes_sent发送给客户端文件内容大小1547$http_refererurl跳转来源https://www.baidu.com/$http_user_agent用户终端浏览器等信息“Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; SV1; GTB7.0; .NET4.0C;$ssl_protocolSSL协议版本TLSv1$ssl_cipher交换数据中的算法RC4-SHA$upstream_addr后台upstream的地址，即真正提供服务的主机地址10.10.10.100:80$request_time整个请求的总时间0.205$upstream_response_time请求过程中，upstream响应时间0.002该指令只能在http模块中设置。sendfile &amp; sendfile_max_chunksendfile用于开启或关闭使用sendfile()传输文件。语法如下：1sendfile on | off可以在http，server或location中进行配置。sendfile_max_chunk用于设置Nginx进程中的每个worker_process每次调用sendfile()传输的数据量的最大值。默认值为0，表示没有限制。比如：1sendfile_max_chunk 128k该指令可以在http，server或location块中配置。keepalive_timeout用于设置Nginx服务器与用户建立会话连接保持的时间，语法如下：1keepalive_timeout timeout[header_timeout]timeout用于设置服务器端保持连接的时间；header_timeout为可选项，用于配置应答报文头部的Keep-Alive域的值。该指令可以在http，server和location块中配置。keepalive_requests用于限制用户通过某一连接向服务器发送请求的次数，语法如下：1keepalive_requests number默认值为100，可以在http，server和location块中配置。listen该指令用于配置监听。配置方法主要有三种：1、配置监听的IP地址：1listen address[:port] [default_server] [setfib=number] [backlog=number] [rcvbuf=size] [sndbuf=size] [deferred] [accept_filter=filter] [bind] [ssl]2、配置监听端口1listen port [default_server] [setfib=number] [backlog=number] [rcvbuf=size] [sndbuf=size] [deferred] [accept_filter=filter] [bind] [ipv6only=on|off] [ssl]3、配置UNIX Domain Socket1listen unix:path [default_server] [setfib=number] [backlog=number] [rcvbuf=size] [sndbuf=size] [deferred] [accept_filter=filter] [bind] [ssl]address，IP地址，如果是IPv6的地址，需使用[]，比如[fe80 ::1]。port，端口号。path，socket文件路径，如/var/run/nginx.sock等。default_server，标识符，表示设置为默认主机。rcvbuf=size，设置监听socket接收缓存区大小。sndbuf=size，设置监听socket发送缓存区大小。deferred，标识符，将accept()设置为Deferred模式。accept_filter=filter，设置监听端口对请求的过滤 ，被过滤的内容不能被接收和处理。ssl，标识符，设置会话连接使用SSL模式进行。一些例子：1234listen *:80 | *:8080; #监听所有80端口和8080端口listen 192.168.1.10:8080; #监听具体IP和具体端口上的连接listen 8000; #监听所有IP地址的8000端口，等同于 listen *:8000listen 192.168.1.10 default_server; #设置192.168.1.10的连接请求默认由此虚拟主机处理server_nameNginx配置文件中的每个server块对于一个虚拟主机配置，server_name用于指定虚拟主机的名称，用户可通过这个名称来向此虚拟主机发送请求。server_name的配置分为名称和IP两种方式。基于名称的虚拟主机配置基于名称的虚拟主机配置时，server_name的语法如下：1server_name name ...name可以有一个或多个名称并列，用空格隔开。每个名称对应一个域名，由两段或者三段组成，之间由.隔开。比如：1server_name www.mrbird.cc mrbird.cc;1、在name中可以使用通配符*，通配符可用在三段式域名的头或尾，或两段式域名的尾部，比如：1server_name *.mrbird.cc mrbird.*;2、在name中还可以使用正则表达式。使用~作为正则表达式开始的标记，比如：1server_name ~^www\d+\.mrbird\.cc$;此时比如通过www1.mrbird.cc可以访问Nginx服务，而www.mrbird.cc不可以。name中的正则表达式支持字符串捕获功能，字符串捕获通过( )来拾取后面不紧跟其他的正则表达式的字符。一个正则表达式中可以存在多个不嵌套的小括号，这些内容会从左到右依次存放在变量$1、$2、$3……中。下文使用时就可直接使用这些变量，作用域为当前的server块。比如有如下的server_name配置：1server_name ~^www\.(.+)\.cc$;当通过www.mrbird.cc访问Nginx服务器时，将会被上面的正则表达式匹配成功，mrbird将会被捕获，并且赋值给$1。由于有两种匹配的方式，所以有可能出现两种情况都匹配的时候，这时候Nginx按照以下的优先级进行选择：准确匹配server_name。通配符在开始时匹配server_name成功。通配符在结束时匹配server_name成功。正则表达式匹配server_name成功。此外，如果server_name被处于同一优先级的匹配方式多次匹配成功，则以首先匹配成功的为主。基于IP的虚拟主机配置Linux操作系统支持IP别名的添加，配置基于IP的虚拟主机，即为Nginx服务器提供的每台虚拟主机配置一个不同的IP。查看当前网络配置：123456789101112131415161718# ifconfigens33 Link encap:Ethernet HWaddr 00:0c:29:25:f3:bb inet addr:192.168.112.128 Bcast:192.168.112.255 Mask:255.255.255.0 inet6 addr: fe80::4fe4:f0e0:9e9b:7ec/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:360100 errors:0 dropped:0 overruns:0 frame:0 TX packets:89081 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:504446360 (504.4 MB) TX bytes:7347923 (7.3 MB)lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:35127 errors:0 dropped:0 overruns:0 frame:0 TX packets:35127 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:2931450 (2.9 MB) TX byens33为正在使用的网卡，IP为192.168.112.128，给其添加两个IP别名192.168.112.130和192.168.112.131：12345678910111213141516171819202122232425262728# ifconfig ens33:0 192.168.112.130 Mask 255.255.255.0 up # ifconfig ens33:1 192.168.112.131 Mask 255.255.255.0 up # ifconfigens33 Link encap:Ethernet HWaddr 00:0c:29:25:f3:bb inet addr:192.168.112.128 Bcast:192.168.112.255 Mask:255.255.255.0 inet6 addr: fe80::4fe4:f0e0:9e9b:7ec/64 Scope:Link UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:360100 errors:0 dropped:0 overruns:0 frame:0 TX packets:89081 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:504446360 (504.4 MB) TX bytes:7347923 (7.3 MB)ens33:0 Link encap:Ethernet HWaddr 00:0c:29:25:f3:bb inet addr:192.168.112.130 Bcast:192.168.112.255 Mask:255.255.255.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1ens33:1 Link encap:Ethernet HWaddr 00:0c:29:25:f3:bb inet addr:192.168.112.131 Bcast:192.168.112.255 Mask:255.255.255.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1lo Link encap:Local Loopback inet addr:127.0.0.1 Mask:255.0.0.0 inet6 addr: ::1/128 Scope:Host UP LOOPBACK RUNNING MTU:65536 Metric:1 RX packets:221 errors:0 dropped:0 overruns:0 frame:0 TX packets:221 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1 RX bytes:16787 (16.7 KB) TX bytes:16787 (16.7 KB)关于给网卡添加多个IP别名可以参考http://www.cnblogs.com/biaopei/p/7730517.html这时候就可以在Nginx配置文件中配置两台基于IP配置的虚拟主机了：12345678910111213... http &#123; ... server &#123; listen: 80; server_name: 192.168.112.130; ... &#125; server &#123; listen: 80; server_name: 192.168.112.131; &#125; &#125;location块location语法如下：1location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;uri是待匹配的请求字符串，可以是标准uri（不含正则表达式）和正则uri。=用于标准uri前，要求请求字符串与uri严格匹配，如果成功，则停止搜索并立即处理此请求。~用于表示uri含正则表达式，区分大小写。~*用于表示uri包含正则表达式，不区分大小写。^~用于标准uri前，要求Nginx服务器找到和请求字符串匹配度最高的标准uri对应的location后，立即用此location处理请求，而不再使用location块中的正则uri和请求字符串做匹配。一个示例：1234567891011121314151617181920212223242526272829303132333435363738394041location = / &#123; # 精确匹配 / ，主机名后面不能带任何字符串 [ configuration A ]&#125;location / &#123; # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求 # 但是正则和最长字符串会优先匹配 [ configuration B ]&#125;location /documents/ &#123; # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索 # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条 [ configuration C ]&#125;location ~ /documents/Abc &#123; # 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索 # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条 [ configuration CC ]&#125;location ^~ /images/ &#123; # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。 [ configuration D ]&#125;location ~* \.(gif|jpg|jpeg)$ &#123; # 匹配所有以 gif,jpg或jpeg 结尾的请求 # 然而，所有请求 /images/ 下的图片会被 config D 处理，因为 ^~ 到达不了这一条正则 [ configuration E ]&#125;location /images/ &#123; # 字符匹配到 /images/，继续往下，会发现 ^~ 存在 [ configuration F ]&#125;location /images/abc &#123; # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在 # F与G的放置顺序是没有关系的 [ configuration G ]&#125;location ~ /images/abc/ &#123; # 只有去掉 config D 才有效：先最长匹配 config G 开头的地址，继续往下搜索，匹配到这一条正则，采用 [ configuration H ]&#125;匹配的优先级：(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)按照上面的location写法，以下的匹配示例成立：/ -&gt; config A 精确完全匹配，即使/index.html也匹配不了。/downloads/download.html -&gt; config B 匹配B以后，往下没有任何匹配，采用B。/images/1.gif -&gt; configuration D 匹配到F，往下匹配到D，停止往下。/images/abc/def -&gt; config D 最长匹配到G，往下匹配D，停止往下。 你可以看到 任何以/images/开头的都会匹配到D并停止，FG写在这里是没有任何意义的，H是永远轮不到的，这里只是为了说明匹配顺序/documents/document.html -&gt; config C 匹配到C，往下没有任何匹配，采用C。/documents/1.jpg -&gt; configuration E 匹配到C，往下正则匹配到E。/documents/Abc.jpg -&gt; config CC 最长匹配到C，往下正则顺序匹配到CC，不会往下到E。参考自： seanlook’s blogrootroot用于配置根目录，比如有如下location配置：123location /data/ &#123; root /locationtest1;&#125;当location块接收到/data/index.html的请求后，将在/locationtest1/data/目录下找到index.html。该指令可在http，server或location块中配置。aliasalias用于改变location接收到的URI请求路径。比如：123location ~ ^/data/(.+\.html)$ &#123; alias /locationtest1/other/$1;&#125;当location块接收到/data/index.html的请求后，通过alias，Nginx到/locationtest1/other/目录下搜寻index.html。相当于请求从/data/index.html更改为了/locationtest1/other/index.html。indexindex用于设置网站的默认首页。比如：123location ~ ^/data/(.+)/web/ $ &#123; index index.$1.html index.html myindex.html&#125;当请求为/data/locationtest1/web/时，Nginx依次搜寻index.locationtest1.html、index.html和myindex.html页面，先找到哪个就用哪个。error_page该指令用于设置网站的错误页面。语法如下：1error_page code ... [=[response]] uricode，要处理的HTTP错误码。response，可选项，将code指定的错误码转化为新的错误代码response。uri，错误页面的路径或者网站地址。比如：1error_page 404 /404.html;Nginx使用Nginx安装目录/html/404.html页面响应404错误。1error_page 403 http://somewebsite.com/forbidden.html;Nginx使用http://somewebsite.com/forbidden.html页面响应403错误。1error_page 410 =301 /empty.gif;Nginx服务器产生410的HTTP消息时，使用Nginx安装目录/html/empty.gif返回给用户，HTTP的状态码为301。加入想要改变Nginx安装目录/html/这个默认的路径，可以添加一个locaiton块：123location /404.html &#123; root /myserver/errorpages/;&#125;该指令可在http，server和location块中配置。基于IP配置Nginx访问权限allow指令用于配置允许访问Nginx的客户端IP，语法如下：1allow address | CIDR | alladdress，指定允许访问的IP，不支持多个值，如需要有多个IP设置，需要重复使用allow命令。CIDR，允许访问的客户端的CIDR地址。all，代表允许所有的客户端访问。deny指令用于配置禁止访问Nginx的客户端IP，语法如下：1deny address | CIDR | all这两个指令可在http，server和location块中配置。配置Nginx密码auth_basic指令用于开启或者关闭认证功能，语法如下：1auth_basic string | offstirng，开启认证功能，并配置了验证时的信息。off，关闭认证。auth_basic_user_file指令指定了包含用户名和密码的信息文件路径，语法结构为：1auth_basic_user_file file如，在nignx.conf里配置如下：生产htpasswd文件：123# printf "mrbird:$(openssl passwd -crypt 123456)\n" &gt;&gt;conf/htpasswd# cat conf/htpasswdmrbird:vdV.OwMSzfJrQ重启Nginx后，访问http://localhost/index.html，页面显示如下：配置实例将conf/nginx.conf配置成如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566worker_processes 1;error_log logs/error.log;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] "$request" ' '$status $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"'; sendfile on; keepalive_timeout 65; # 配置server1 server &#123; listen 8081; server_name localhost; charset utf-8; access_log /myweb/server1/log/access.log main; error_page 404 /myweb/error/404.html; # 配置/server1/location1/请求的location location /server1/location1 &#123; root /myweb; index index.html; &#125; # 配置/server1/location2请求的location location /server1/location2 &#123; root /myweb; index index.html; &#125; &#125; # 配置server2 server &#123; listen 8082; server_name 192.168.112.130; charset utf-8; access_log /myweb/server2/log/access.log main; error_page 404 /404.html; # 配置/server2/location1/请求的locaiton location /server2/location1 &#123; root /myweb; index index.html; &#125; # 配置/server2/location2/请求的location location /svr2/loc2 &#123; alias /myweb/server2/location2; # 对location的uri进行更改 index index.html; &#125; # 重定向404页面地址 location = /404.html &#123; root /myweb/error; index 404.html; &#125; &#125;&#125;构建一个静态网站，目录结构如下：1234567891011121314151617/myweb/├── error│ └── 404.html├── server1│ ├── location1│ │ └── index.html│ ├── location2│ │ └── index.html│ └── log│ └── access.log└── server2 ├── location1 │ └── index.html ├── location2 │ └── index.html └── log └── access.log启动Nginx服务：1234# /nginx/sbin/nginx -tnginx: the configuration file /nginx/conf/nginx.conf syntax is oknginx: configuration file /nginx/conf/nginx.conf test is successful# /nginx/sbin/nginx访问http://localhost:8081/server1/location1/：访问http://localhost:8081/server1/location2/：访问http://192.168.112.130:8082/server2/location1/：访问http://192.168.112.130:8082/svr2/loc2/：访问http://192.168.112.130:8082/svr2/loc3/：结果证明，上述配置正确。]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx安装与部署]]></title>
    <url>%2Fblog%2FNginx%20install%20deploy.html</url>
    <content type="text"><![CDATA[下载NginxNginx官网：http://nginx.org/en/download.html。网页提供了Nginx三种版本下载：开发版（Mainline Version）、稳定版（Stable Version）和过期版（Legacy Version）。Nignx提供Linux和Windows版本，这里使用的是Linux版本。此外，http://nginx.org/download/提供了所有版本的Nginx下载。Nginx源码的编译需要GCC编译器：12345# gcc --versiongcc (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609Copyright (C) 2015 Free Software Foundation, Inc.This is free software; see the source for copying conditions. There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.截止2017年10月15日，Nginx最新稳定版为1.12.2，下载并解压：1234567891011121314151617181920# mkdir nginx-download# cd nginx-download/# wget http://nginx.org/download/nginx-1.12.2.tar.gz# tar -zxvf nginx-1.12.2.tar.gz # cd nginx-1.12.2# lltotal 732drwxr-xr-x 8 1001 1001 4096 Oct 17 21:16 ./drwxr-xr-x 3 root root 4096 Oct 26 14:05 ../-rw-r--r-- 1 1001 1001 278202 Oct 17 21:16 CHANGES-rw-r--r-- 1 1001 1001 423948 Oct 17 21:16 CHANGES.ru-rw-r--r-- 1 1001 1001 1397 Oct 17 21:16 LICENSE-rw-r--r-- 1 1001 1001 49 Oct 17 21:16 READMEdrwxr-xr-x 6 1001 1001 4096 Oct 26 14:05 auto/drwxr-xr-x 2 1001 1001 4096 Oct 26 14:05 conf/-rwxr-xr-x 1 1001 1001 2481 Oct 17 21:16 configure*drwxr-xr-x 4 1001 1001 4096 Oct 26 14:05 contrib/drwxr-xr-x 2 1001 1001 4096 Oct 26 14:05 html/drwxr-xr-x 2 1001 1001 4096 Oct 26 14:05 man/drwxr-xr-x 9 1001 1001 4096 Oct 26 14:05 src/src目录下存放了Nginx的源代码；man目录下存放了Nginx的帮助文档；html目录存放了两个HTML文件，分别为Nginx欢迎页和异常页面；logs目录用于存放Nginx运行日志；auto目录存放了大量的脚本文件，和configure脚本有关；configure文件为Nginx的自动脚本程序。Nginx编译与安装在解压路径下，运行命令./configure --prefix=/nginx（configure脚本支持的选项可参考附录）配置Nginx的安装目录并生成Makefile文件：1234567891011121314151617181920# ./configure --prefix=/nginx...Configuration summary + using system PCRE library + OpenSSL library is not used + using system zlib library nginx path prefix: "/nginx" nginx binary file: "/nginx/sbin/nginx" nginx modules path: "/nginx/modules" nginx configuration prefix: "/nginx/conf" nginx configuration file: "/nginx/conf/nginx.conf" nginx pid file: "/nginx/logs/nginx.pid" nginx error log file: "/nginx/logs/error.log" nginx http access log file: "/nginx/logs/access.log" nginx http client request body temporary files: "client_body_temp" nginx http proxy temporary files: "proxy_temp" nginx http fastcgi temporary files: "fastcgi_temp" nginx http uwsgi temporary files: "uwsgi_temp" nginx http scgi temporary files: "scgi_temp"过程中可能出现一些依赖库缺失问题，可参考下面的常见问题。生成了Makefile文件后，使用make命令进行编译：12345678910111213141516171819# makemake -f objs/Makefilemake[1]: Entering directory '/temp/nginx-download/nginx-1.12.2'cc -c -pipe -O -W -Wall -Wpointer-arith -Wno-unused-parameter -Werror -g -I src/core -I src/event -I src/event/modules -I src/os/unix -I objs \ -o objs/src/core/nginx.o \ src/core/nginx.ccc -c -pipe -O -W -Wall -Wpointer-arith -Wno-unused-parameter -Werror -g -I src/core -I src/event -I src/event/modules -I src/os/unix -I objs \...objs/src/http/modules/ngx_http_upstream_keepalive_module.o \objs/src/http/modules/ngx_http_upstream_zone_module.o \objs/ngx_modules.o \-ldl -lpthread -lcrypt -lpcre -lz \-Wl,-Esed -e "s|%%PREFIX%%|/nginx|" \ -e "s|%%PID_PATH%%|/nginx/logs/nginx.pid|" \ -e "s|%%CONF_PATH%%|/nginx/conf/nginx.conf|" \ -e "s|%%ERROR_LOG_PATH%%|/nginx/logs/error.log|" \ &lt; man/nginx.8 &gt; objs/nginx.8make[1]: Leaving directory '/temp/nginx-download/nginx-1.12.2'编译顺利完成后，接着使用make install命令进行安装：12345678910# make installmake -f objs/Makefile installmake[1]: Entering directory '/temp/nginx-download/nginx-1.12.2'test -d '/nginx' || mkdir -p '/nginx'test -d '/nginx/sbin' \ || mkdir -p '/nginx/sbin'...test -d '/nginx/logs' \ || mkdir -p '/nginx/logs'make[1]: Leaving directory '/temp/nginx-download/nginx-1.12.2'将目录切换到/nginx下，并查看：123456789101112131415161718192021222324# cd /nginx/# lltotal 24drwxr-xr-x 6 root root 4096 Oct 26 14:30 ./drwxr-xr-x 26 root root 4096 Oct 26 14:30 ../drwxr-xr-x 2 root root 4096 Oct 26 14:30 conf/drwxr-xr-x 2 root root 4096 Oct 26 14:30 html/drwxr-xr-x 2 root root 4096 Oct 26 14:30 logs/drwxr-xr-x 2 root root 4096 Oct 26 14:30 sbin/# ls *conf:fastcgi.conf koi-win scgi_paramsfastcgi.conf.default mime.types scgi_params.defaultfastcgi_params mime.types.default uwsgi_paramsfastcgi_params.default nginx.conf uwsgi_params.defaultkoi-utf nginx.conf.default win-utfhtml:50x.html index.htmllogs:sbin:nginxNginx的启停Nginx常用命令nginx命令所支持的选项有：123456789101112131415# ./sbin/nginx -hnginx version: nginx/1.12.2Usage: nginx [-?hvVtTq] [-s signal] [-c filename] [-p prefix] [-g directives]Options: -?,-h : this help -v : show version and exit -V : show version and configure options then exit -t : test configuration and exit -T : test configuration, dump it and exit -q : suppress non-error messages during configuration testing -s signal : send signal to a master process: stop, quit, reopen, reload -p prefix : set prefix path (default: /nginx/) -c filename : set configuration file (default: conf/nginx.conf) -g directives : set global directives out of configuration file-v选项用来显示Nginx服务器的版本号，-V选项除了显示版本号，还显示其编译情况：123456# ./sbin/nginx -vnginx version: nginx/1.12.2# ./sbin/nginx -Vnginx version: nginx/1.12.2built by gcc 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.4) configure arguments: --prefix=/nginx-t选项用于检查Nginx服务器配置文件是否有语法错误：123# ./sbin/nginx -tnginx: the configuration file /nginx/conf/nginx.conf syntax is oknginx: configuration file /nginx/conf/nginx.conf test is successful等。Nginx启动启动Nginx服务器很简单，只需要运行sbin下的nginx脚本就行了：12345# ./sbin/nginx # ps -ef|grep nginxroot 74808 1308 0 14:47 ? 00:00:00 nginx: master process ./sbin/nginxnobody 74809 74808 0 14:47 ? 00:00:00 nginx: worker processroot 74811 71675 0 14:47 pts/4 00:00:00 grep --color=auto nginx可看到Nginx已经启动，包含了一个主进程（master process）和一个工作进程（worker process），主进程号为74808。启动Nginx服务后，也可以通过查看logs目录下的nginx.pid来查看主进程号：12# cat logs/nginx.pid 74808Nginx的默认端口号为80，在浏览器中输入localhost/index.html查看是否启动成功：Nginx停止停止Nginx服务可分为两种类型：1.快速停止：立即停止当前Nginx服务正在处理的所有网络请求，马上丢弃连接，停止工作。相关命令为：kill -TERM 进程号或者kill -INT 进程号；2.平缓停止：允许Nginx服务将当前的网络请求处理完毕，但不再接受新请求，之后关闭连接，停止工作。相关的命令为：kill -QUIT 进程号；停止Nginx服务，采用快速停止方式：123# kill -TERM 74808# ps -ef|grep nginxroot 74998 71675 0 15:03 pts/4 00:00:00 grep --color=auto nginxNginx重启Nginx重启采用平滑重启的方式。Nginx服务进程号接收到重启信号后，先读取新的Nginx配置文件，如果配置语法正确，则启动新的Nginx服务，然后平缓的关闭旧的服务。如果配置语法错误，则继续采用旧的Nginx进程提供服务。有两种方式进行平滑重启：1.检查配置文件是否正确，如果正确进行重启：1234# ./sbin/nginx -tnginx: the configuration file /nginx/conf/nginx.conf syntax is oknginx: configuration file /nginx/conf/nginx.conf test is successful# ./sbin/nginx -s reload2.kill -HUP 主进程号:123# cat logs/nginx.pid 75011# kill -HUP 75011常见问题缺少依赖库缺少PCRE依赖库./configure: error: the HTTP rewrite module requires the PCRE library. You can either disable the module by using –without-http_rewrite_module option, or install the PCRE library into the system, or build the PCRE library statically from the source with nginx by using –with-pcre=option.解决办法：1sudo apt-get install libpcre3 libpcre3-dev缺少zlib依赖库./configure: error: the HTTP gzip module requires the zlib library. You can either disable the module by using –without-http_gzip_module option, or install the zlib library into the system, or build the zlib library statically from the source with nginx by using –with-zlib=option.解决办法：1sudo apt-get install zlib1g-dev其他问题apt-get命令被占用E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?解决办法：找到占用进程，然后kill：123ps -A|grep apt 61213 ? 00:00:02 aptdkill -9 61213附录注：由于渲染原因–实际为 --，如–prefix=…实际为 --prefix=...configure开关选项选项&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用法&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;默认值–prefix=…指定安装Nginx的基础目录/usr/local/nginx, 注意：如果你在配置时使用了相对路径，则连接到基础目录。示例：指定–conf-path=conf/nginx.conf 则配置文件会在目录：/usr/local/nginx/conf/nginx.conf–sbin-path=…Nginx二进制文件安装的路径&lt;prefix&gt;/sbin/nginx–conf-path=…主要配置文件放置目录&lt;prefix&gt;/conf/nginx.conf–error-log-path=…错误日志存放的路径。错误日志在配置文件中须配置得非常正确，该路径只应用于你在配置文件中没有指定任何错误的日志指令时&lt;prefix&gt;/logs/error.log–pid-path=…指定Nginx的pid文件的路径。可以在配置文件中指定pid文件的路径，如果没有具体的指定，则使用在这里对该选项指定的该路径&lt;prefix&gt;/logs/nginx.pid注意：该pid文件是一个简单的文件文件，它包含进程的标识符。该文件应该放置在一个清晰可见的位置，以便其他应用程序能够很容易找到运行该程序的pid–lock-path=…锁文件（lock file）的存放路径。同样，该文件也可以在配置文件中指定，但是，如果在配置文件中没有指定，则使用该值&lt;prefix&gt;/logs/nginx.lock注意：锁文件允许其他应用程序确定是否一个程序在运行，就Nginx来说，它用于确定该进程没有被启动两次–with-perl_modules_path=…定义Perl模块的路径。如果需要包含另外的Perl模块，必须定义该参数–with-perl=…Perl二进制文件的路径。用于执行Perl脚本。如果想执行一个Perl脚本，必须设置该路径–http-log-path=…定义被访问文件的日志文件存放路径。该路径只用于在配置文件中没有定义访问日志的情况&lt;prefix&gt;/logs/access.log–http-client-body-temp-path=…该目录用于存储客户端请求产生的临时文件&lt;prefix&gt;/client_body_temp–http-proxy-temp-path=…该目录用于代理存储临时文件&lt;prefix&gt;/proxy_temp–http-fastcgi-temp-path=…指定用于HTTP FastCGI模块使用的临时文件的存放路径&lt;prefix&gt;/fastcgi_temp–builddir=…指定创建应用程序的位置configure先決条件选项编译选项–with-cc=…&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指定一个备用的C编译器的位置–with-cpp=…指定一个备用的C预处理器的位置–with-cc-opt=…定义额外的选项，然后在命令行传递给C编译器–with-ld-opt=…定义额外的选项，然后在命令行传递给C连接器–with-cpu-opt=…指定不同的目标处理器结构，可以是下列值：pentium，pentiumpro，pentium3，pentium4，athlon，opteron，sparc32，sparc64和ppc64PCRE选项–without-pcre不使用PCRE库。这个设置不推荐使用，因为它会移除对正则表达式的支持，从而使Rewrite模块失去作用。–with-pcre强制作用PCRE库–with-pcre=…允许指定PCRE库的源代码–with-pcre-opt=…用于建立PCRE库的另外的选项MD5选项–with-md5=…指定MD5库源代码的路径–with-md5-opt=…用于建立MD5库的另外选项–with-md5-asm为建MD5库使用汇编语言源代码SHA1选项–with-sha1=…指定SHA1库的源代码–with-sha1-opt=…用于建立SHA1库的另外选项–with-sha1-asm为建立SHA1库使用汇编语言源代码zlib选项–with-zlib=…指定zlib库的源代码–with-zlib-opt=…用于建立zlib库的另外的选项–with-zlib-asm=…使用汇编语言最大限度地优化下列目标结构：Pentium, pentiumproOpenSSL选项–with-openssl=…指定OpenSSL库的源代码路径–with-openssl-opt=…为建立OpenSSL库的另外的选项configure模块选项以下是Nginx默认开启的模块，可以使用表格中的命令来关闭相应模块：默认开启的模块&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;描述–without-http-charset_module禁用Charset模块，该模块用于对网页重新编码–without-http-gzip_module禁用Gzip压缩模块–without-http_ssi_module禁用服务器端包含模块–without-http_access_module禁用访问模块，对于指定的IP段，允许访问配置–without-http_userid_module禁用用户ID模块。该模块为用户通过cookie验证身份–without-http_auth_basic_module禁用基本的认证模块–without-http_autoindex_module禁用自动索引模块–without-http_geo_module禁用Geo模块，该模块允许你定义依赖于IP地址段的变量–without-http_map_module禁用Map模块，该模块允许你声明map区段–without-http_referer_module禁用Referer控制模块–without-http_rewrite_module禁用Rewrite模块–without-http_proxy_module禁用代理模块。该模块用于向其他服务器传输请求–without-http_fastcgi_module禁用FastCGI模块。该模块是用于与FastCGI进程配合工作–without-http_memcached_module&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;禁用Memcached模块。该模块是用于与memcached守护进程配合工作–without-http_limit_zone_module禁用Limit Zone模块。该模块是用于根据定义的zone来限制约束对资源的使用。–without-http_limit_req_module禁用Limit Requests模块。该模块允许你限制每个用户请求的总数–without-http_empty_gif_module禁用Empty Gif模块。该模块用于在内存中提供一个空白的GIF图像–without-http_browser_module禁用Browser模块。该模块用于解释用户代理字符串–without-http_upstream_ip_hash_module禁用Upstream模块。该模块用于配置负载均衡结构以下是Nginx默认关闭的模块，可以使用表格中的命令来开启相应模块：默认禁用的模块&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;描述–with-http_ssl_module开启SSL模块，支持使用HTTPS协议的网页–with-http_realip_module开启Real IP的支持，该模块用于从客户请求的头数据中读取real IP地址–with-http_addition_module开启Addition模块，该模块允许你追加或前置数据（prepend data）到响应的主体部分–with-http_xslt_module开启XSLT模块的支持，该模块实现XSLT转化为XML文档–with-http_image_filter_module开启Image Filter模块，该模块是让你修改图像。注意：如果想编译该模块，需要在系统中安装libgd库–with-http_geoip_module开启GeoIP模块，该模块通过使用MaxMind’s GeoI 二进制数据库来获取客户端在地理上的分布。注意：如果希望编译该模块，需要在系统中安装libgeoip库。–with-http_sub_module开启Substitution模块，该模块用于在网页中替换文本–with-http_dav_module开启WebDAV模块–with-http_flv_module开启FLV模块，该模块用于专门处理.flv(flash视频)文件–with-http_gzip_static_module开启Gzip静态模块，该模块用于发送预压缩的文件–with-http_random_index_module开启Random Index模块。该模块用于挑选一个随机的文件作为该目录的index–with-http_secure_link_module开启Secure Link模块，该模块用于在URL中检测关键字的存在–with-http_stub_status_module开启Stub Status模块，该模块会产生一个服务器状态和信息页–with-google_perftools_module&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;开启google性能工具模块其它configure选项邮件服务代理–with-mail开启邮件服务代理（mail server proxy）模块，支持POP3，IMAP4和SMTP。该功能默认禁用–with-mail_ssl_module开启邮件代理服务对SSL的支持。该功能默认禁用–without-mail_pop3_module在邮件代理下禁用POP3功能。在开启邮件代理模块后该功能默认启用–without-mail_imap_module对邮件代理服务器禁用IMAP4模块，在开启邮件代理模块后该功能默认启用–without-mail_smtp_module对于邮件代理服务器禁用SMTP模块，在开启邮件代理模块后该功能默认启用事件管理–with-rtsig_module开启rtsig模块，使用rtsig作为事件通知机制–with-select_module开启select模块，使用select作为事件通知机制。默认情况下，该模块是开启的，除非系统有一种更好的方式发现——kqueue, epoll, rtsig 或 poll–without-select_module禁用select模块–with-poll_module开启poll模块，该模块使用poll作为事件通知机制。默认情况下，如果有效，该模块是开启的，除非系统上有一种更好的方式发现——kqueue, epoll或rtsig–without-poll_module禁用poll模块用户和组选项–user=…指定启动Nginx进程的默认用户。这个设置仅用于在配置文件中省略user指令来指定用户的情况–group=…指定启动Nginx进程默认的用户组。这个设置仅用于在配置文件中省略使用group指令来指定用户的情况其它选项–with-ipv6开启对IPv6的支持–without-http禁用HTTP服务–without-http-cache禁用HTTP缓冲功能–add-module=PATH通过指定的路径编译添加第三方模块。如果希望编译多个模块，那么该选项可以无限次使用–with-debug开启记录额外的调试信息]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot中使用thymeleaf]]></title>
    <url>%2Fblog%2FSpring-Boot%E4%BD%BF%E7%94%A8thymeleaf.html</url>
    <content type="text"><![CDATA[Spring Boot支持FreeMarker、Groovy、Thymeleaf和Mustache四种模板解析引擎，官方推荐使用Thymeleaf。spring-boot-starter-thymeleaf在Spring Boot中使用Thymeleaf只需在pom中加入Thymeleaf的starter即可：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt;在Spring Boot 1.5.9.RELEASE版本中，默认的Thymeleaf版本为2.1.6.RELEASE版本，这里推荐使用3.0以上版本。在pom中将Thymeleaf的版本修改为3.0.2.RELEASE：1234&lt;properties&gt; &lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt; &lt;thymeleaf-layout-dialect.version&gt;2.0.1&lt;/thymeleaf-layout-dialect.version&gt;&lt;/properties&gt;在Spring Boot中，默认的html页面地址为src/main/resources/templates，默认的静态资源地址为src/main/resources/static。Thymeleaf默认配置在Spring Boot配置文件中可对Thymeleaf的默认配置进行修改：123456789101112131415161718192021222324#开启模板缓存（默认值：true）spring.thymeleaf.cache=true #Check that the template exists before rendering it.spring.thymeleaf.check-template=true #检查模板位置是否正确（默认值:true）spring.thymeleaf.check-template-location=true#Content-Type的值（默认值：text/html）spring.thymeleaf.content-type=text/html#开启MVC Thymeleaf视图解析（默认值：true）spring.thymeleaf.enabled=true#模板编码spring.thymeleaf.encoding=UTF-8#要被排除在解析之外的视图名称列表，用逗号分隔spring.thymeleaf.excluded-view-names=#要运用于模板之上的模板模式。另见StandardTemplate-ModeHandlers(默认值：HTML5)spring.thymeleaf.mode=HTML5#在构建URL时添加到视图名称前的前缀（默认值：classpath:/templates/）spring.thymeleaf.prefix=classpath:/templates/#在构建URL时添加到视图名称后的后缀（默认值：.html）spring.thymeleaf.suffix=.html#Thymeleaf模板解析器在解析器链中的顺序。默认情况下，它排第一位。顺序从1开始，只有在定义了额外的TemplateResolver Bean时才需要设置这个属性。spring.thymeleaf.template-resolver-order=#可解析的视图名称列表，用逗号分隔spring.thymeleaf.view-names=一般开发中将spring.thymeleaf.cache设置为false，其他保持默认值即可。简单示例编写一个简单的Controller：1234567891011121314@Controllerpublic class IndexController &#123; @RequestMapping("/account") public String index(Model m) &#123; List&lt;Account&gt; list = new ArrayList&lt;Account&gt;(); list.add(new Account("KangKang", "康康", "e10adc3949ba59abbe56e", "超级管理员", "17777777777")); list.add(new Account("Mike", "麦克", "e10adc3949ba59abbe56e", "管理员", "13444444444")); list.add(new Account("Jane","简","e10adc3949ba59abbe56e","运维人员","18666666666")); list.add(new Account("Maria", "玛利亚", "e10adc3949ba59abbe56e", "清算人员", "19999999999")); m.addAttribute("accountList",list); return "account"; &#125;&#125;编写account.html页面：12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt; &lt;title&gt;account&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt; &lt;link rel="stylesheet" th:href="@&#123;/css/style.css&#125;" type="text/css"&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;no&lt;/th&gt; &lt;th&gt;account&lt;/th&gt; &lt;th&gt;name&lt;/th&gt; &lt;th&gt;password&lt;/th&gt; &lt;th&gt;accountType&lt;/th&gt; &lt;th&gt;tel&lt;/th&gt; &lt;/tr&gt; &lt;tr th:each="list,stat : $&#123;accountList&#125;"&gt; &lt;td th:text="$&#123;stat.count&#125;"&gt;&lt;/td&gt; &lt;td th:text="$&#123;list.account&#125;"&gt;&lt;/td&gt; &lt;td th:text="$&#123;list.name&#125;"&gt;&lt;/td&gt; &lt;td th:text="$&#123;list.password&#125;"&gt;&lt;/td&gt; &lt;td th:text="$&#123;list.accountType&#125;"&gt;&lt;/td&gt; &lt;td th:text="$&#123;list.tel&#125;"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;最终项目目录如下所示：启动项目，访问http://localhost:8080/web/account：source code]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thymeleaf 局部变量]]></title>
    <url>%2Fblog%2FThymeleaf-%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F.html</url>
    <content type="text"><![CDATA[在Thymeleaf模板引擎中，使用 th:with属性来声明一个局部变量：123&lt;div th:with="firstPer=$&#123;persons[0]&#125;"&gt; &lt;p&gt;The name of the first person is &lt;span th:text="$&#123;firstPer.name&#125;"&gt;Julius Caesar&lt;/span&gt;.&lt;/p&gt;&lt;/div&gt;在上面div中，th:width属性声明了一个名为firstPer的局部变量，内容为${persons[0]}。该局部变量的作用域为整个div内。也可以一次性定义多个变量：123456789&lt;div th:with="firstPer=$&#123;persons[0]&#125;,secondPer=$&#123;persons[1]&#125;"&gt; &lt;p&gt; The name of the first person is &lt;span th:text="$&#123;firstPer.name&#125;"&gt;Julius Caesar&lt;/span&gt;. &lt;/p&gt; &lt;p&gt; But the name of the second person is &lt;span th:text="$&#123;secondPer.name&#125;"&gt;Marcus Antonius&lt;/span&gt;. &lt;/p&gt;&lt;/div&gt;th:with属性允许重用在同一个属性中定义的变量：1&lt;div th:with="company=$&#123;user.company + ' Co.'&#125;,account=$&#123;accounts[company]&#125;"&gt;...&lt;/div&gt;]]></content>
      <tags>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thymeleaf 模板布局]]></title>
    <url>%2Fblog%2FThymeleaf-%E6%A8%A1%E6%9D%BF%E5%B8%83%E5%B1%80.html</url>
    <content type="text"><![CDATA[th:include,th:insert和th:replace在模板的编写中，通常希望能够引入别的模板片段，比如通用的头部和页脚。Thymeleaf模板引擎的th:include，th:insert和th:replace属性可以轻松的实现该需求。不过从Thymeleaf 3.0版本后， 不再推荐使用th:include属性。在index.html页面路径下创建一个footer.html：12345678&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.thymeleaf.org"&gt; &lt;body&gt; &lt;footer th:fragment="copy"&gt; &amp;copy; 2016 - 2017 MrBird Powered by Hexo &lt;/footer&gt; &lt;/body&gt;&lt;/html&gt;在footer.html中，使用th:fragment属性定义了&lt;footer&gt;片段，然后在index.html中引用它：123&lt;div th:include="~&#123;footer :: copy&#125;"&gt;&lt;/div&gt; &lt;div th:insert="~&#123;footer :: copy&#125;"&gt;&lt;/div&gt; &lt;div th:replace="~&#123;footer :: copy&#125;"&gt;&lt;/div&gt;其中footer为被引用的模板名称（templatename），copy为th:fragment标记的片段名称（selector），~{...}称为片段表达式，由于其不是一个复杂的片段表达式，所以可以简写为：1&lt;div th:include="footer :: copy"&gt;&lt;/div&gt;页面显示如下：通过观察渲染出的源码可发现th:include，th:insert和th:replace的区别所在：1234567891011&lt;div&gt; &amp;copy; 2016 - 2017 MrBird Powered by Hexo&lt;/div&gt; &lt;div&gt; &lt;footer&gt; &amp;copy; 2016 - 2017 MrBird Powered by Hexo &lt;/footer&gt;&lt;/div&gt; &lt;footer&gt; &amp;copy; 2016 - 2017 MrBird Powered by Hexo&lt;/footer&gt;引用本页面的片段可以略去templatename，或者使用this来代替。引用没有th:fragment的片段如果片段不包含th:fragment属性，我们可以使用CSS选择器来选中该片段，如：123&lt;div id="copy-section"&gt; &amp;copy; 2011 The Good Thymes Virtual Grocery&lt;/div&gt;引用方式：1&lt;div th:insert="~&#123;footer :: #copy-section&#125;"&gt;&lt;/div&gt;在th:fragment中使用参数使用th:fragment定义的片段可以指定一组参数：123&lt;div th:fragment="frag (onevar,twovar)"&gt; &lt;p th:text="$&#123;onevar&#125; + ' - ' + $&#123;twovar&#125;"&gt;...&lt;/p&gt;&lt;/div&gt;然后在引用的时候给这两个参数赋值，有如下两种方式：12&lt;div th:replace="this :: frag ('value1','value2')"&gt;&lt;/div&gt;&lt;div th:replace="this :: frag (onevar='value_one',twovar='value_two')"&gt;&lt;/div&gt;对于第二种方式，onevar和twovar的顺序不重要，并且使用第二种方式引用片段时，片段可以简写为：123&lt;div th:fragment="frag"&gt; &lt;p th:text="$&#123;onevar&#125; + ' - ' + $&#123;twovar&#125;"&gt;...&lt;/p&gt;&lt;/div&gt;th:removeth:remove用于删除片段，支持的属性值有：all：删除标签及其所有子标签。body：不删除包含的标签，但删除其所有子代。tag：删除包含的标签，但不要删除其子标签。all-but-first：删除除第一个之外的所有包含标签的子标签。none。比如有如下片段：1234567891011121314151617&lt;table border="1"&gt; &lt;tr&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;th&gt;PRICE&lt;/th&gt; &lt;th&gt;IN STOCK&lt;/th&gt; &lt;th&gt;COMMENTS&lt;/th&gt; &lt;/tr&gt; &lt;tr th:remove="value"&gt; &lt;td&gt;Mild Cinnamon&lt;/td&gt; &lt;td&gt;1.99&lt;/td&gt; &lt;td&gt;yes&lt;/td&gt; &lt;td&gt; &lt;span&gt;3&lt;/span&gt; comment/s &lt;a href="comments.html"&gt;view&lt;/a&gt; &lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;当value为all时，页面渲染为：12345678&lt;table border="1"&gt; &lt;tr&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;th&gt;PRICE&lt;/th&gt; &lt;th&gt;IN STOCK&lt;/th&gt; &lt;th&gt;COMMENTS&lt;/th&gt; &lt;/tr&gt;&lt;/table&gt;当value为body时，页面渲染为：12345678910&lt;table border="1"&gt; &lt;tr&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;th&gt;PRICE&lt;/th&gt; &lt;th&gt;IN STOCK&lt;/th&gt; &lt;th&gt;COMMENTS&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;/tr&gt;&lt;/table&gt;当value为tag时，页面渲染为：123456789101112131415&lt;table border="1"&gt; &lt;tr&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;th&gt;PRICE&lt;/th&gt; &lt;th&gt;IN STOCK&lt;/th&gt; &lt;th&gt;COMMENTS&lt;/th&gt; &lt;/tr&gt; &lt;td&gt;Mild Cinnamon&lt;/td&gt; &lt;td&gt;1.99&lt;/td&gt; &lt;td&gt;yes&lt;/td&gt; &lt;td&gt; &lt;span&gt;3&lt;/span&gt; comment/s &lt;a href="comments.html"&gt;view&lt;/a&gt; &lt;/td&gt;&lt;/table&gt;当value为all-but-first时，页面渲染为：1234567891011&lt;table border="1"&gt; &lt;tr&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;th&gt;PRICE&lt;/th&gt; &lt;th&gt;IN STOCK&lt;/th&gt; &lt;th&gt;COMMENTS&lt;/th&gt; &lt;/tr&gt; &lt;tr th:remove="value"&gt; &lt;td&gt;Mild Cinnamon&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;]]></content>
      <tags>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thymeleaf 条件语句]]></title>
    <url>%2Fblog%2FThymeleaf%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5.html</url>
    <content type="text"><![CDATA[if 与 unless假如现在有一个商品列表，当商品有评论时，显示view按钮，否则不显示。这时候就可以使用Thymeleaf的th:if标签来实现:123&lt;a href="comments.html" th:href="@&#123;/product/comments(prodId=$&#123;prod.id&#125;)&#125;" th:if="$&#123;not #lists.isEmpty(prod.comments)&#125;"&gt;view&lt;/a&gt;当prod.comments不为空时，页面将渲染出该&lt;a&gt;标签。另外，th:if有一个反向属性th:unless，用于代替上面的not：123&lt;a href="comments.html" th:href="@&#123;/comments(prodId=$&#123;prod.id&#125;)&#125;" th:unless="$&#123;#lists.isEmpty(prod.comments)&#125;"&gt;view&lt;/a&gt;switchThymeleaf中的th:switch和其他语言的switch case语句差不多：1234&lt;div th:switch="$&#123;user.role&#125;"&gt; &lt;p th:case="'admin'"&gt;User is an administrator&lt;/p&gt; &lt;p th:case="'manager'"&gt;User is a manager&lt;/p&gt;&lt;/div&gt;th:case=&quot;*&quot;表示默认选项，相当于default：12345&lt;div th:switch="$&#123;user.role&#125;"&gt; &lt;p th:case="'admin'"&gt;User is an administrator&lt;/p&gt; &lt;p th:case="'manager'"&gt;User is a manager&lt;/p&gt; &lt;p th:case="*"&gt;User is some other thing&lt;/p&gt;&lt;/div&gt;]]></content>
      <tags>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thymeleaf 迭代]]></title>
    <url>%2Fblog%2FThymeleaf-%E8%BF%AD%E4%BB%A3.html</url>
    <content type="text"><![CDATA[在Thymeleaf中，使用th:each标签可对集合类型进行迭代，支持的类型有：1.任何实现了java.util.List的对象；2.任何实现了java.util.Iterable的对象；3.任何实现了java.util.Enumeration的对象；4.任何实现了java.util.Iterator的对象;5.任何实现了java.util.Map的对象。当迭代maps时，迭代变量是java.util.Map.Entry类型；6.任何数组。一个简单的例子：1234&lt;tr th:each="prod : $&#123;prods&#125;"&gt; &lt;td th:text="$&#123;prod.name&#125;"&gt;Onions&lt;/td&gt; &lt;td th:text="$&#123;prod.price&#125;"&gt;2.41&lt;/td&gt;&lt;/tr&gt;其中${prods}为迭代值，prod为迭代变量。除此之外，我们还可以通过状态变量获取迭代的状态信息，比如：1&lt;tr th:each="prod,stat : $&#123;prods&#125;"&gt; ...其中stat就是状态变量。默认为迭代变量加上Stat后缀，在本例中，不直接申明stat，则状态变量名称为prodStat。状态变量包含以下信息：1.index，当前迭代下标，从0开始；2.count，当前迭代位置，从1开始；3.size，迭代变量中的总计数量；4.current，每次迭代的迭代变量；5.even/odd，当前迭代是偶数还是奇数；6.first，当前迭代的是不是第一个；7.last，当前迭代的是不是最后一个；例子：12345678910&lt;div th:each="habbits,stat : $&#123;user.habbit&#125;"&gt; &lt;span th:text="$&#123;habbits&#125;"&gt;&lt;/span&gt; &lt;span th:text="$&#123;stat.index&#125;"&gt;&lt;/span&gt; &lt;span th:text="$&#123;stat.count&#125;"&gt;&lt;/span&gt; &lt;span th:text="$&#123;stat.size&#125;"&gt;&lt;/span&gt; &lt;span th:text="$&#123;stat.current&#125;"&gt;&lt;/span&gt; &lt;span th:text="$&#123;stat.even&#125;"&gt;&lt;/span&gt; &lt;span th:text="$&#123;stat.first&#125;"&gt;&lt;/span&gt; &lt;span th:text="$&#123;stat.last&#125;"&gt;&lt;/span&gt;&lt;/div&gt;页面显示如下：]]></content>
      <tags>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thymeleaf 表达式工具类]]></title>
    <url>%2Fblog%2FThymeleaf-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B7%A5%E5%85%B7%E7%B1%BB.html</url>
    <content type="text"><![CDATA[Thymeleaf默认提供了丰富的表达式工具类，这里列举一些常用的工具类。Objects工具类12345678/* * 当obj不为空时，返回obj，否则返回default默认值 * 其同样适用于数组、列表或集合 */$&#123;#objects.nullSafe(obj,default)&#125;$&#123;#objects.arrayNullSafe(objArray,default)&#125;$&#123;#objects.listNullSafe(objList,default)&#125;$&#123;#objects.setNullSafe(objSet,default)&#125;String工具类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122/* * Null-safe toString() */$&#123;#strings.toString(obj)&#125; // 也可以是 array*、list* 或 set*/* * 检查String是否为空(或null)。在检查之前执行trim()操作也同样适用于数组、列表或集合 */$&#123;#strings.isEmpty(name)&#125;$&#123;#strings.arrayIsEmpty(nameArr)&#125;$&#123;#strings.listIsEmpty(nameList)&#125;$&#123;#strings.setIsEmpty(nameSet)&#125;/* * 对字符串执行“isEmpty()”检查, 如果为false则返回它, 如果为true则默认为另一个指定的字符串。 * 也同样适用于数组、列表或集合 */$&#123;#strings.defaultString(text,default)&#125;$&#123;#strings.arrayDefaultString(textArr,default)&#125;$&#123;#strings.listDefaultString(textList,default)&#125;$&#123;#strings.setDefaultString(textSet,default)&#125;/* * 检查字符串中是否包含片段，比如 $&#123;#strings.containsIgnoreCase(user.name,'kang')&#125; * 也同样适用于数组、列表或集合 */$&#123;#strings.contains(name,'ez')&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.containsIgnoreCase(name,'ez')&#125; // 也可以是 array*、list* 或 set*/* * 检查字符串是否以片段开始或结束 * 也同样适用于数组、列表或集合 */$&#123;#strings.startsWith(name,'Don')&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.endsWith(name,endingFragment)&#125; // 也可以是 array*、list* 或 set*/* * 子串相关操作 * 也同样适用于数组、列表或集合 */$&#123;#strings.indexOf(name,frag)&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.substring(name,3,5)&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.substringAfter(name,prefix)&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.substringBefore(name,suffix)&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.replace(name,'las','ler')&#125; // 也可以是 array*、list* 或 set*/* * 附加和前置 * 也同样适用于数组、列表或集合 */$&#123;#strings.prepend(str,prefix)&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.append(str,suffix)&#125; // 也可以是 array*、list* 或 set*/* * 大小写转换 * 也同样适用于数组、列表或集合 */$&#123;#strings.toUpperCase(name)&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.toLowerCase(name)&#125; // 也可以是 array*、list* 或 set*/* * 拆分和拼接 */$&#123;#strings.arrayJoin(namesArray,',')&#125;$&#123;#strings.listJoin(namesList,',')&#125;$&#123;#strings.setJoin(namesSet,',')&#125;$&#123;#strings.arraySplit(namesStr,',')&#125; // 返回String []$&#123;#strings.listSplit(namesStr,',')&#125; // 返回List&lt;String&gt;$&#123;#strings.setSplit(namesStr,',')&#125; // 返回Set&lt;String&gt;/* * Trim * 也同样适用于数组、列表或集合 */$&#123;#strings.trim(str)&#125; // 也可以是 array*、list* 或 set*/* * 计算长度 * 也同样适用于数组、列表或集合 */$&#123;#strings.length(str)&#125; // 也可以是 array*、list* 或 set*/* * 缩写文本, 使其最大大小为n。如果文本较大, 它将被剪辑并在末尾附加“...” * 也同样适用于数组、列表或集合 */$&#123;#strings.abbreviate(str,10)&#125; // 也可以是 array*、list* 或 set*/* * 将第一个字符转换为大写(反之亦然) */$&#123;#strings.capitalize(str)&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.unCapitalize(str)&#125; // 也可以是 array*、list* 或 set*/* * 将每个单词的第一个字符转换为大写 */$&#123;#strings.capitalizeWords(str)&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.capitalizeWords(str,delimiters)&#125; // 也可以是 array*、list* 或 set*/* * 转义字符串 */$&#123;#strings.escapeXml(str)&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.escapeJava(str)&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.escapeJavaScript(str)&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.unescapeJava(str)&#125; // 也可以是 array*、list* 或 set*$&#123;#strings.unescapeJavaScript(str)&#125; // 也可以是 array*、list* 或 set*/* * 空安全比较和连接 */$&#123;#strings.equals(first, second)&#125;$&#123;#strings.equalsIgnoreCase(first, second)&#125;$&#123;#strings.concat(values...)&#125;$&#123;#strings.concatReplaceNulls(nullValue, values...)&#125;/* * 随机数 */$&#123;#strings.randomAlphanumeric(count)&#125;Dates工具类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/* * 使用标准区域设置格式格式化日期 * 也同样适用于数组、列表或集合 */$&#123;#dates.format(date)&#125;$&#123;#dates.arrayFormat(datesArray)&#125;$&#123;#dates.listFormat(datesList)&#125;$&#123;#dates.setFormat(datesSet)&#125;/* * 使用ISO8601格式格式化日期 * 也同样适用于数组、列表或集合 */$&#123;#dates.formatISO(date)&#125;$&#123;#dates.arrayFormatISO(datesArray)&#125;$&#123;#dates.listFormatISO(datesList)&#125;$&#123;#dates.setFormatISO(datesSet)&#125;/* * 使用指定的格式格式化日期，比如 $&#123;#dates.format(date,'yyyy-MM-dd HH:mm:ss')&#125; * 也同样适用于数组、列表或集合 */$&#123;#dates.format(date, 'dd/MMM/yyyy HH:mm')&#125;$&#123;#dates.arrayFormat(datesArray, 'dd/MMM/yyyy HH:mm')&#125;$&#123;#dates.listFormat(datesList, 'dd/MMM/yyyy HH:mm')&#125;$&#123;#dates.setFormat(datesSet, 'dd/MMM/yyyy HH:mm')&#125;/* * 获取日期属性 * 也同样适用于数组、列表或集合 */$&#123;#dates.day(date)&#125; // 也可以是 arrayDay(...), listDay(...)之类的$&#123;#dates.month(date)&#125; // 也可以是 arrayMonth(...), listMonth(...)之类的$&#123;#dates.monthName(date)&#125; // 也可以是 arrayMonthName(...), listMonthName(...)之类的$&#123;#dates.monthNameShort(date)&#125; // 也可以是 arrayMonthNameShort(...), listMonthNameShort(...)之类的$&#123;#dates.year(date)&#125; // 也可以是 arrayYear(...), listYear(...)之类的$&#123;#dates.dayOfWeek(date)&#125; // 也可以是 arrayDayOfWeek(...), listDayOfWeek(...)之类的$&#123;#dates.dayOfWeekName(date)&#125; // 也可以是 arrayDayOfWeekName(...), listDayOfWeekName(...)之类的$&#123;#dates.dayOfWeekNameShort(date)&#125; // 也可以是 arrayDayOfWeekNameShort(...), listDayOfWeekNameShort(...)之类的$&#123;#dates.hour(date)&#125; // 也可以是 arrayHour(...), listHour(...)之类的$&#123;#dates.minute(date)&#125; // 也可以是 arrayMinute(...), listMinute(...)之类的$&#123;#dates.second(date)&#125; // 也可以是 arraySecond(...), listSecond(...)之类的$&#123;#dates.millisecond(date)&#125; // 也可以是 arrayMillisecond(...), listMillisecond(...)之类的/* * 根据year,month,day创建日期(java.util.Date)对象，比如 $&#123;#dates.create('2008','08','08')&#125; */$&#123;#dates.create(year,month,day)&#125;$&#123;#dates.create(year,month,day,hour,minute)&#125;$&#123;#dates.create(year,month,day,hour,minute,second)&#125;$&#123;#dates.create(year,month,day,hour,minute,second,millisecond)&#125;/* * 创建当前日期和时间创建日期(java.util.Date)对象，比如 $&#123;#dates.format(#dates.createNow(),'yyyy-MM-dd HH:mm:ss')&#125; */$&#123;#dates.createNow()&#125;$&#123;#dates.createNowForTimeZone()&#125;/* * 创建当前日期创建一个日期(java.util.Date)对象(时间设置为00:00) */$&#123;#dates.createToday()&#125;$&#123;#dates.createTodayForTimeZone()&#125;Calendars工具类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970/* * 使用标准区域设置格式格式化日历 * 也同样适用于数组、列表或集合 */$&#123;#calendars.format(cal)&#125;$&#123;#calendars.arrayFormat(calArray)&#125;$&#123;#calendars.listFormat(calList)&#125;$&#123;#calendars.setFormat(calSet)&#125;/* * 使用ISO8601格式格式化日历 * 也同样适用于数组、列表或集合 */$&#123;#calendars.formatISO(cal)&#125;$&#123;#calendars.arrayFormatISO(calArray)&#125;$&#123;#calendars.listFormatISO(calList)&#125;$&#123;#calendars.setFormatISO(calSet)&#125;/* * 使用指定的格式格式化日历 * 也同样适用于数组、列表或集合 */$&#123;#calendars.format(cal, 'dd/MMM/yyyy HH:mm')&#125;$&#123;#calendars.arrayFormat(calArray, 'dd/MMM/yyyy HH:mm')&#125;$&#123;#calendars.listFormat(calList, 'dd/MMM/yyyy HH:mm')&#125;$&#123;#calendars.setFormat(calSet, 'dd/MMM/yyyy HH:mm')&#125;/* * 获取日历属性 * 也同样适用于数组、列表或集合 */$&#123;#calendars.day(date)&#125; // 也可以是 arrayDay(...), listDay(...)之类的$&#123;#calendars.month(date)&#125; // 也可以是 arrayMonth(...), listMonth(...)之类的$&#123;#calendars.monthName(date)&#125; // 也可以是 arrayMonthName(...), listMonthName(...)之类的$&#123;#calendars.monthNameShort(date)&#125; // 也可以是 arrayMonthNameShort(...), listMonthNameShort(...)之类的$&#123;#calendars.year(date)&#125; // 也可以是 arrayYear(...), listYear(...)之类的$&#123;#calendars.dayOfWeek(date)&#125; // 也可以是 arrayDayOfWeek(...), listDayOfWeek(...)之类的$&#123;#calendars.dayOfWeekName(date)&#125; // 也可以是 arrayDayOfWeekName(...), listDayOfWeekName(...)之类的$&#123;#calendars.dayOfWeekNameShort(date)&#125; // 也可以是 arrayDayOfWeekNameShort(...), listDayOfWeekNameShort(...)之类的$&#123;#calendars.hour(date)&#125; // 也可以是 arrayHour(...), listHour(...)之类的$&#123;#calendars.minute(date)&#125; // 也可以是 arrayMinute(...), listMinute(...)之类的$&#123;#calendars.second(date)&#125; // 也可以是 arraySecond(...), listSecond(...)之类的$&#123;#calendars.millisecond(date)&#125; // 也可以是 arrayMillisecond(...), listMillisecond(...)之类的/* * 从其组件创建日历(java.util.Calendar)对象 */$&#123;#calendars.create(year,month,day)&#125;$&#123;#calendars.create(year,month,day,hour,minute)&#125;$&#123;#calendars.create(year,month,day,hour,minute,second)&#125;$&#123;#calendars.create(year,month,day,hour,minute,second,millisecond)&#125;$&#123;#calendars.createForTimeZone(year,month,day,timeZone)&#125;$&#123;#calendars.createForTimeZone(year,month,day,hour,minute,timeZone)&#125;$&#123;#calendars.createForTimeZone(year,month,day,hour,minute,second,timeZone)&#125;$&#123;#calendars.createForTimeZone(year,month,day,hour,minute,second,millisecond,timeZone)&#125;/* * 为当前日期和时间创建一个日历(java.util.Calendar)对象 */$&#123;#calendars.createNow()&#125;$&#123;#calendars.createNowForTimeZone()&#125;/* * 为当前日期创建日历(java.util.Calendar)对象(时间设置为00:00) */$&#123;#calendars.createToday()&#125;$&#123;#calendars.createTodayForTimeZone()&#125;Numbers工具类1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071/* * ========================== * 格式化整数 * ========================== *//* * 设置最小整数位数。 * 也同样适用于数组、列表或集合 */$&#123;#numbers.formatInteger(num,3)&#125;$&#123;#numbers.arrayFormatInteger(numArray,3)&#125;$&#123;#numbers.listFormatInteger(numList,3)&#125;$&#123;#numbers.setFormatInteger(numSet,3)&#125;/* * 设置最小整数位数和千位分隔符： * 'POINT'、'COMMA'、'WHITESPACE'、'NONE' 或 'DEFAULT'(根据本地化)。 * 也同样适用于数组、列表或集合 */$&#123;#numbers.formatInteger(num,3,'POINT')&#125;$&#123;#numbers.arrayFormatInteger(numArray,3,'POINT')&#125;$&#123;#numbers.listFormatInteger(numList,3,'POINT')&#125;$&#123;#numbers.setFormatInteger(numSet,3,'POINT')&#125;/* * ========================== * 格式化十进制数 * ========================== *//* * 设置最小整数数字和(精确的)十进制数字。 * 也同样适用于数组、列表或集合 */$&#123;#numbers.formatDecimal(num,3,2)&#125;$&#123;#numbers.arrayFormatDecimal(numArray,3,2)&#125;$&#123;#numbers.listFormatDecimal(numList,3,2)&#125;$&#123;#numbers.setFormatDecimal(numSet,3,2)&#125;/* * 设置最小整数数字和(精确的)小数位数, 以及小数分隔符。 * 也同样适用于数组、列表或集合 */$&#123;#numbers.formatDecimal(num,3,2,'COMMA')&#125;$&#123;#numbers.arrayFormatDecimal(numArray,3,2,'COMMA')&#125;$&#123;#numbers.listFormatDecimal(numList,3,2,'COMMA')&#125;$&#123;#numbers.setFormatDecimal(numSet,3,2,'COMMA')&#125;/* * 设置最小整数数字和(精确的)十进制数字, 以及千位和十进制分隔符。 * 也同样适用于数组、列表或集合 */$&#123;#numbers.formatDecimal(num,3,'POINT',2,'COMMA')&#125;$&#123;#numbers.arrayFormatDecimal(numArray,3,'POINT',2,'COMMA')&#125;$&#123;#numbers.listFormatDecimal(numList,3,'POINT',2,'COMMA')&#125;$&#123;#numbers.setFormatDecimal(numSet,3,'POINT',2,'COMMA')&#125;/* * ========================== * 实用方法 * ========================== *//* * 创建一个从x到y的整数序列(数组) */$&#123;#numbers.sequence(from,to)&#125;$&#123;#numbers.sequence(from,to,step)&#125;比如：1234&lt;p th:utext="$&#123;#numbers.formatInteger(0.1024,3)&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;#numbers.formatInteger(1.024,3)&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;#numbers.formatInteger(10.24,3)&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;#numbers.formatInteger(102.4,3)&#125;"&gt;&lt;/p&gt;页面输出：1234567891011&lt;p th:utext="$&#123;#numbers.formatInteger(1.024,2,'POINT')&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;#numbers.formatInteger(1024,3,'POINT')&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;#numbers.formatInteger(1024,10,'POINT')&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;#numbers.formatInteger(1.024,2,'COMMA')&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;#numbers.formatInteger(1024,3,'COMMA')&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;#numbers.formatInteger(1024,10,'COMMA')&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;#numbers.formatInteger(1.024,2,'WHITESPACE')&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;#numbers.formatInteger(1024,3,'WHITESPACE')&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;#numbers.formatInteger(1024,10,'WHITESPACE')&#125;"&gt;&lt;/p&gt;页面输出：POINT指的是.，COMMA指的是,，WHITESPACE指的是空格。三个数位为一组，使用指定的分隔符分割。比如1.024并不是小数，而是使用了.分隔的1024。Booleans工具类123456789101112131415161718192021222324252627282930313233/* * 评估条件, 类似于 th:if 标签 * 也同样适用于数组、列表或集合 */$&#123;#bools.isTrue(obj)&#125;$&#123;#bools.arrayIsTrue(objArray)&#125;$&#123;#bools.listIsTrue(objList)&#125;$&#123;#bools.setIsTrue(objSet)&#125;/* * 用否定来评估条件 * 也同样适用于数组、列表或集合 */$&#123;#bools.isFalse(cond)&#125;$&#123;#bools.arrayIsFalse(condArray)&#125;$&#123;#bools.listIsFalse(condList)&#125;$&#123;#bools.setIsFalse(condSet)&#125;/* * 评估条件并执行与操作 * 接收数组、列表或集合作为参数 */$&#123;#bools.arrayAnd(condArray)&#125;$&#123;#bools.listAnd(condList)&#125;$&#123;#bools.setAnd(condSet)&#125;/* * 评估条件并执行或操作 * 接收数组、列表或集合作为参数 */$&#123;#bools.arrayOr(condArray)&#125;$&#123;#bools.listOr(condList)&#125;$&#123;#bools.setOr(condSet)&#125;Arrays工具类12345678910111213141516171819202122232425262728293031/* * 转换为数组, 试图推断数组组件类。注意, 如果结果数组为空, 或者目标对象的元素不是全部相同的类, 则 * 此方法将返回Object []。 */$&#123;#arrays.toArray(object)&#125;/* * 转换为指定组件类的数组。 */$&#123;#arrays.toStringArray(object)&#125;$&#123;#arrays.toIntegerArray(object)&#125;$&#123;#arrays.toLongArray(object)&#125;$&#123;#arrays.toDoubleArray(object)&#125;$&#123;#arrays.toFloatArray(object)&#125;$&#123;#arrays.toBooleanArray(object)&#125;/** 计算数组长度 */$&#123;#arrays.length(array)&#125;/* * 检查数组是否为空 */$&#123;#arrays.isEmpty(array)&#125;/* * 检查数组中是否包含元素或元素集合 */$&#123;#arrays.contains(array, element)&#125;$&#123;#arrays.containsAll(array, elements)&#125;Lists工具类1234567891011121314151617181920212223242526/* * 转化为 list */$&#123;#lists.toList(object)&#125;/* * 计算大小 */$&#123;#lists.size(list)&#125;/* */$&#123;#lists.isEmpty(list)&#125;/* * 检查list中是否包含元素或元素集合 */$&#123;#lists.contains(list, element)&#125;$&#123;#lists.containsAll(list, elements)&#125;/* * 排序给定列表的副本。列表的成员必须 * 实现comparable, 或者必须定义comparator。 */$&#123;#lists.sort(list)&#125;$&#123;#lists.sort(list, comparator)&#125;Sets工具类1234567891011121314151617181920/* * 转化为 to set */$&#123;#sets.toSet(object)&#125;/* * 计算大小 */$&#123;#sets.size(set)&#125;/* * 检查set是否为empty */$&#123;#sets.isEmpty(set)&#125;/* * 检查set中是否包含元素或元素集合 */$&#123;#sets.contains(set, element)&#125;$&#123;#sets.containsAll(set, elements)&#125;Maps工具类1234567891011121314151617/* * 计算大小 */$&#123;#maps.size(map)&#125;/* * 检查map是否为空 */$&#123;#maps.isEmpty(map)&#125;/* * 检查map中是否包含key/s或value/s */$&#123;#maps.containsKey(map, key)&#125;$&#123;#maps.containsAllKeys(map, keys)&#125;$&#123;#maps.containsValue(map, value)&#125;$&#123;#maps.containsAllValues(map, value)&#125;注意事项值得注意的是，在使用工具类对某个表达式进行处理时候，你可能会写成：1$&#123;#strings.isEmpty($&#123;session.user.name&#125;)&#125;。实际上这种写法是错误的，将抛出异常。正确的写法为：1$&#123;#strings.isEmpty(session.user.name)&#125;。]]></content>
      <tags>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Thymeleaf 标准表达式语法]]></title>
    <url>%2Fblog%2FThymeleaf-Standard-Expression-Syntax.html</url>
    <content type="text"><![CDATA[记录几个比较容易忘记的Thymeleaf标准表达式语法，例子基于Spring MVC。变量表达式${ }在控制器中往页面传递几个变量：1234567891011121314@Controllerpublic class IndexController &#123; @RequestMapping(value="/index",method=RequestMethod.GET) public String index(HttpSession session, Model model)&#123; User user = new User(); user.setName("KangKang"); user.setAge(25); user.setHabbit(new String[]&#123;"football","basketball","swim"&#125;); session.setAttribute("user", user); model.addAttribute(user); return "index"; &#125;&#125;在页面中使用变量表达式${}来获取它们：1234&lt;p th:utext="$&#123;user.name&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;session.user.getName()&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;session.user.upcaseName()&#125;"&gt;&lt;/p&gt;&lt;p th:utext="$&#123;user.habbit[0]&#125;"&gt;&lt;/p&gt;可以看到变量表达式不但可以获取变量的属性值，甚至还可以访问变量的方法（getName()和upcaseName()）。session代表HttpSession对象。选择表达式*{ }选择表达式的使用方法如下所示：12345&lt;div th:object="$&#123;session.user&#125;"&gt; &lt;p&gt;name: &lt;span th:text="*&#123;name&#125;"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;age: &lt;span th:text="*&#123;age&#125;"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;habbit: &lt;span th:text="*&#123;habbit[0]&#125;"&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;*{}代指th:object所指定的对象，即${session.user}。URL链接表达式@{ }URL链接表达式会给URL自动添加上下文的名字。比如：1&lt;a th:href="@&#123;/main&#125;"&gt;main&lt;/a&gt;解析后的href值为http://localhost:8080/thymeleaf/main。当需要在URL中传递参数时，比如这样http://localhost:8080/thymeleaf/main?name=KangKang，可以如下操作：1&lt;a th:href="@&#123;/main(name=$&#123;session.user.name&#125;)&#125;"&gt;main&lt;/a&gt;传递多个参数：1&lt;a th:href="@&#123;/main(name=$&#123;session.user.name&#125;,age=$&#123;session.user.age&#125;)&#125;"&gt;main&lt;/a&gt;路径变量的写法：1&lt;a th:href="@&#123;/main/&#123;name&#125;(name=$&#123;session.user.name&#125;)&#125;"&gt;main&lt;/a&gt;后端接受路径变量：12345@RequestMapping(value="main/&#123;name&#125;")public String main(@PathVariable String name)&#123; System.out.println("pathValue: "+name); return "main";&#125;字面量文本常量文本常量指的是单引号之间的字符串，比如：1&lt;p th:text="'Welcome KangKang'"&gt;&lt;/p&gt;数字常量12&lt;p&gt;The year is &lt;span th:text="2017"&gt;1492&lt;/span&gt;.&lt;/p&gt;&lt;p&gt;In two years, it will be &lt;span th:text="2017 + 2"&gt;1494&lt;/span&gt;.&lt;/p&gt;Boolean类型的常量Boolean类型的常量就是true和false。例如：1&lt;div th:if="$&#123;user.isAdmin()&#125; == false"&gt; ...Null常量1&lt;div th:if="$&#123;variable.something&#125; == null"&gt; ...字面量替换除了使用&#39;...&#39; + ${}来连接字面量和变量外，还可以使用|...|来代替，比如：1&lt;p th:utext="|hello,$&#123;session.user.name&#125;,your age is $&#123;session.user.age&#125;|"&gt;&lt;/p&gt;等价于：1&lt;p th:utext="'hello,'+$&#123;session.user.name&#125;+',your age is '+$&#123;session.user.age&#125;"&gt;&lt;/p&gt;在| ... |字面替换中只允许有变量表达式${...}条件表达式条件表达式实际上就是三目运算符。比如：123&lt;tr th:class="$&#123;row.even&#125;? 'even' : 'odd'"&gt; ...&lt;/tr&gt;条件表达式也可以使用括号嵌套：123&lt;tr th:class="$&#123;row.even&#125;? ($&#123;row.first&#125;? 'first' : 'even') : 'odd'"&gt; ...&lt;/tr&gt;else表达式也可以省略，在这种情况下，如果条件为false，则返回空值：123&lt;tr th:class="$&#123;row.even&#125;? 'even'"&gt; ...&lt;/tr&gt;默认表达式默认表达式是一种特殊类型的条件值，不带then部分。比如：1&lt;p th:utext="$&#123;session.user.sex&#125; ?: 'sex is unknown'"&gt;&lt;/p&gt;表示，当${session.user.sex}为null时，值为sex is unknown，否则为表达式的值。这就好像为表达式指定了一个默认值一样。其等价于：1&lt;p th:utext=&quot;$&#123;session.user.sex != null&#125; ? $&#123;session.user.sex&#125;: &apos;sex is unknown&apos;&quot;&gt;&lt;/p&gt;更详细的内容可参考官方文档：http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax]]></content>
      <tags>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义annotation]]></title>
    <url>%2Fblog%2F%E8%87%AA%E5%AE%9A%E4%B9%89annotation.html</url>
    <content type="text"><![CDATA[meta-annotationJava从JDK5.0开始便提供了四个meta-annotation用于自定义注解的时候使用，这四个注解为：@Target，@Retention，@Documented 和@Inherited。@Target：用于描述注解的使用范围（即：被描述的注解可以用在什么地方），其源码如下：1234567@Documented@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.ANNOTATION_TYPE)public @interface Target &#123; ElementType[] value();&#125;可见@Target 注解只有唯一成员value，类型为ElementType数组。查看ElementType的源码可以发现，ElementType可取的值有：CONSTRUCTOR：用于描述构造器；FIELD：用于描述成员变量；LOCAL_VARIABLE：用于描述局部变量；METHOD：用于描述方法；PACKAGE：用于描述包；PARAMETER：用于描述参数；TYPE：用于描述类、接口(包括注解类型) 或enum声明。@Retention：指定被描述的注解在什么范围内有效。源码如下：1234567@Documented@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.ANNOTATION_TYPE)public @interface Retention &#123; RetentionPolicy value();&#125;其中RetentionPolicy可取的值有：SOURCE：在源文件中有效（即源文件保留）；CLASS：在class文件中有效（即class保留）；RUNTIME：在运行时有效（即运行时保留）。@Documented：是一个标记注解，木有成员，用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，因此可以被例如javadoc此类的工具文档化。@Inherited：元注解是一个标记注解，@Inherited阐述了某个被标注的类型是被继承的。如果一个使用了@Inherited修饰的annotation类型被用于一个class，则这个annotation将被用于该class的子类。自定义annotation用@interface 自定义注解时，自动继承了java.lang.annotation.Annotation接口，由编译程序自动完成其他细节。在定义注解时，不能继承其他的注解或接口。@interface 用来声明一个注解，其中的每一个方法实际上是声明了一个成员。方法的名称就是成员的名称，返回值类型就是成员的类型。可以通过default来声明参数的默认值。自定义注解的基本格式为：123public @interface AnnotationName &#123; // ...&#125;Annotation的成员定义必须满足以下三点：成员只能用public或默认(default)这两个访问权修饰；成员的类型只能是基本类型，String，Enum，Class，Annotation以及它们的数组类型；如果只有一个成员，最好将其名称设为value。AnnotatedElement代表被注解的元素，其包含许多方法，如下图所示：…其中主要的几个方法有：1234&lt;T extends Annotation&gt; T getAnnotation(Class&lt;T&gt; annotationType) // 根据annotationType获取注解对象Annotation[] getAnnotations() // 获取所有注解boolean isAnnotationPresent(Class&lt;T&gt; annotationType) // 判断当前元素是否被annotationType注解Annotation[] getDeclareAnnotations() // 与getAnnotations() 类似，但是不包括父类中被Inherited修饰的注解实战假如现在有一个数据库表对应的POJO被一些自定义注解所标记，现在要根据这个POJO自动生成创建库表的SQL语句。其中POJO代码如下：1234567891011@Table(name = "Student")class Bean &#123; @Column(name = "age", length = 3) int age; @Column(name = "userName", length = 10) String name; @Column(name = "birthday", defaultValue = "sysdate") Date birthday;&#125;需要生成类似如下的SQL语句：1create table Student(age NUMBER(3),userName VARCHAR2(10),birthday DATE default sysdate)Bean类被@Table 注解所标记，所以需要定义一个ElementType.TYPE级别的注解：12345@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.TYPE)@interface Table &#123; String name(); // name用来设置表名&#125;而@Column 注解标注于Bean的成员变量，并且包含三个成员：1234567@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.FIELD)@interface Column &#123; String name() default ""; // name用来设置字段名 int length() default 0; // length用来设置字段长度 String defaultValue() default ""; // defaultValue用来设置默认值&#125;接下来定义两个方法getTableName(Class&lt;?&gt; bean)和getColumns(Class&lt;?&gt; bean)，分别用于获取@Table 注解中的表名和被@Column 注解标记的成员变量信息：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879private static String getTableName(Class&lt;?&gt; bean) &#123; String name = null; // 判断bean是否被@Table注解 if (bean.isAnnotationPresent(Table.class)) &#123; // 获取注解对象 Annotation tableAnnotation = bean.getAnnotation(Table.class); try &#123; // 获取@Table注解所对应的name Method method = Table.class.getMethod("name"); name = (String) method.invoke(tableAnnotation); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; return name;&#125;private static List&lt;ColumnBean&gt; getColumns(Class&lt;?&gt; bean) &#123; List&lt;ColumnBean&gt; columns = new ArrayList&lt;ColumnBean&gt;(); Field[] fields = bean.getDeclaredFields(); if (fields != null) &#123; // 表里所有成员变量（fields）,获取其注解信息 for (int i = 0; i &lt; fields.length; i++) &#123; Field field = fields[i]; // 判断是否被@Column注解标记 if (field.isAnnotationPresent(Column.class)) &#123; String name = null; int length = 0; String defaultValue = null; String type = null; // 分别获取@Column注解里成员的值 Annotation columnAnnotation = field.getAnnotation(Column.class); try &#123; Method nameMethod = Column.class.getMethod("name"); name = (String) nameMethod.invoke(columnAnnotation); Method rangeMethod = Column.class.getMethod("length"); length = (Integer) rangeMethod.invoke(columnAnnotation); Method defaultValueMethod = Column.class.getMethod("defaultValue"); defaultValue = (String) defaultValueMethod.invoke(columnAnnotation); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; // 判断类型，Java类型转换为数据库类型 if (int.class.isAssignableFrom(field.getType()) || Integer.class.isAssignableFrom(field.getType())) &#123; type = "NUMBER"; &#125; else if (String.class.isAssignableFrom(field.getType())) &#123; type = "VARCHAR2"; &#125; else if (Date.class.isAssignableFrom(field.getType()))&#123; type = "DATE"; &#125;else &#123; throw new RuntimeException("unspported type=" + field.getType().getSimpleName()); &#125; columns.add(new ColumnBean(type, name, length, defaultValue)); &#125; &#125; &#125; return columns;&#125;// 用于描述Columnprivate static class ColumnBean &#123; final String type; final String name; final int length; final String defaultValue; public ColumnBean(String type, String name, int length, String defaultValue) &#123; this.type = type; this.name = name; this.length = length; this.defaultValue = defaultValue; &#125;&#125;最后编写生成SQL的方法：123456789101112131415161718192021222324252627282930313233343536public static String createTable(Class&lt;?&gt; bean) &#123; String tableName = getTableName(bean); List&lt;ColumnBean&gt; columns = getColumns(bean); if (tableName != null &amp;&amp; !tableName.equals("") &amp;&amp; !columns.isEmpty()) &#123; StringBuilder createTableSql = new StringBuilder("create table "); // 拼接表名 createTableSql.append(tableName); createTableSql.append("("); //拼接字段信息 for (int i = 0; i &lt; columns.size(); i++) &#123; ColumnBean column = columns.get(i); createTableSql.append(column.name); createTableSql.append(" "); createTableSql.append(column.type); int length = column.length; if(length != 0)&#123; createTableSql.append("("); createTableSql.append(column.length); createTableSql.append(")"); &#125; String defaultValue = column.defaultValue; if(defaultValue != null &amp;&amp; defaultValue.length() != 0)&#123; createTableSql.append(" default "); createTableSql.append(defaultValue); &#125; if (i != columns.size() - 1) &#123; createTableSql.append(","); &#125; &#125; createTableSql.append(")"); return createTableSql.toString(); &#125;else &#123; throw new RuntimeException("table's name is null"); &#125;&#125;测试12345public class Test &#123; public static void main(String[] args) &#123; System.out.println(TestUtils.createTable(Bean.class)); &#125;&#125;生成的结果和预期一致总结上述的过程可归纳为以下几个步骤：判断AnnotatedElement是否被某注解所标记：AnnotatedElement.isAnnotationPresent(SomeAnnotation.class)；是的话，获取该注解对象：Annotation annotation = bean.getAnnotation(SomeAnnotation.class);；根据该注解对象获取某个成员参数（比如name）：Method method = SomeAnnotation.class.getMethod(&quot;name&quot;);；利用反射机制，获取该注解中的某成员的值：String name = (String) method.invoke(annotation);。Source Code]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSV读写]]></title>
    <url>%2Fblog%2FCSV%E8%AF%BB%E5%86%99.html</url>
    <content type="text"><![CDATA[CSV是以逗号间隔的文本文件。当导出的数据不涉及公式和复杂的表格样式的时候，可以考虑使用javacsv来代替POI，以便节省性能。引入javacsv依赖：123456&lt;!-- https://mvnrepository.com/artifact/net.sourceforge.javacsv/javacsv --&gt;&lt;dependency&gt; &lt;groupId&gt;net.sourceforge.javacsv&lt;/groupId&gt; &lt;artifactId&gt;javacsv&lt;/artifactId&gt; &lt;version&gt;2.0&lt;/version&gt;&lt;/dependency&gt;CsvWriter12345678910111213141516171819202122232425import java.nio.charset.Charset;import com.csvreader.CsvWriter;public class CsvWrite &#123; public static void csvWrite()&#123; String csvFilePath = "D://test.csv"; try &#123; CsvWriter csvWriter = new CsvWriter(csvFilePath, ',', Charset.forName("UTF-8")); // 表头 String[] csvHeaders = &#123; "编号", "姓名", "年龄" &#125;; csvWriter.writeRecord(csvHeaders); // 内容 for (int i = 0; i &lt; 5; i++) &#123; String[] csvContent = &#123; i + "", "userName", "1" + i &#125;; csvWriter.writeRecord(csvContent); &#125; csvWriter.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public static void main(String[] args) &#123; CsvWrite.csvWrite(); &#125;&#125;生成文件如下：CsvReader12345678910111213141516171819202122232425262728293031323334353637import java.io.IOException;import java.nio.charset.Charset;import java.util.ArrayList;import com.csvreader.CsvReader;public class CsvRead &#123; public static void readCSV() &#123; ArrayList&lt;String[]&gt; csvFileList = new ArrayList&lt;String[]&gt;(); String csvFilePath = "D://test.csv"; try &#123; CsvReader reader = new CsvReader(csvFilePath, ',', Charset.forName("UTF-8")); // 跳过表头 reader.readHeaders(); // 逐行读入除表头的数据 while (reader.readRecord()) &#123; System.out.println(reader.getRawRecord()); csvFileList.add(reader.getValues()); &#125; reader.close(); // 遍历读取CSV每行每列 for (int row = 0; row &lt; csvFileList.size(); row++) &#123; String[] cells = csvFileList.get(row); for(String str : cells)&#123; System.out.print(str+" "); &#125; System.out.println(); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; public static void main(String[] args) &#123; CsvRead.readCSV(); &#125;&#125;输出：123456789100,userName,101,userName,112,userName,123,userName,134,userName,140 userName 10 1 userName 11 2 userName 12 3 userName 13 4 userName 14javacsv API：http://javacsv.sourceforge.net/]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot AOP记录用户操作日志]]></title>
    <url>%2Fblog%2FSpring-Boot-AOP%20log.html</url>
    <content type="text"><![CDATA[在Spring框架中，使用AOP配合自定义注解可以方便的实现用户操作的监控。首先搭建一个基本的Spring Boot Web环境开启Spring Boot，然后引入必要依赖：123456789101112131415161718192021222324&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- aop依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- oracle驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.oracle&lt;/groupId&gt; &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt; &lt;version&gt;6.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- druid数据源驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.6&lt;/version&gt;&lt;/dependency&gt;自定义注解定义一个方法级别的@Log注解，用于标注需要监控的方法：12345@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface Log &#123; String value() default "";&#125;创建库表和实体在数据库中创建一张sys_log表，用于保存用户的操作日志，数据库采用oracle 11g：1234567891011121314151617181920CREATE TABLE "SCOTT"."SYS_LOG" ( "ID" NUMBER(20) NOT NULL , "USERNAME" VARCHAR2(50 BYTE) NULL , "OPERATION" VARCHAR2(50 BYTE) NULL , "TIME" NUMBER(11) NULL , "METHOD" VARCHAR2(200 BYTE) NULL , "PARAMS" VARCHAR2(500 BYTE) NULL , "IP" VARCHAR2(64 BYTE) NULL , "CREATE_TIME" DATE NULL );COMMENT ON COLUMN "SCOTT"."SYS_LOG"."USERNAME" IS '用户名';COMMENT ON COLUMN "SCOTT"."SYS_LOG"."OPERATION" IS '用户操作';COMMENT ON COLUMN "SCOTT"."SYS_LOG"."TIME" IS '响应时间';COMMENT ON COLUMN "SCOTT"."SYS_LOG"."METHOD" IS '请求方法';COMMENT ON COLUMN "SCOTT"."SYS_LOG"."PARAMS" IS '请求参数';COMMENT ON COLUMN "SCOTT"."SYS_LOG"."IP" IS 'IP地址';COMMENT ON COLUMN "SCOTT"."SYS_LOG"."CREATE_TIME" IS '创建时间';CREATE SEQUENCE seq_sys_log START WITH 1 INCREMENT BY 1;库表对应的实体：1234567891011121314public class SysLog implements Serializable&#123; private static final long serialVersionUID = -6309732882044872298L; private Integer id; private String username; private String operation; private Integer time; private String method; private String params; private String ip; private Date createTime; // get,set略&#125;保存日志的方法为了方便，这里直接使用Spring JdbcTemplate来操作数据库。定义一个SysLogDao接口，包含一个保存操作日志的抽象方法：123public interface SysLogDao &#123; void saveSysLog(SysLog syslog);&#125;其实现方法：1234567891011121314151617@Repositorypublic class SysLogDaoImp implements SysLogDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Override public void saveSysLog(SysLog syslog) &#123; StringBuffer sql = new StringBuffer("insert into sys_log "); sql.append("(id,username,operation,time,method,params,ip,create_time) "); sql.append("values(seq_sys_log.nextval,:username,:operation,:time,:method,"); sql.append(":params,:ip,:createTime)"); NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(this.jdbcTemplate.getDataSource()); npjt.update(sql.toString(), new BeanPropertySqlParameterSource(syslog)); &#125;&#125;切面和切点定义一个LogAspect类，使用@Aspect标注让其成为一个切面，切点为使用@Log注解标注的方法，使用@Around环绕通知：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364@Aspect@Componentpublic class LogAspect &#123; @Autowired private SysLogDao sysLogDao; @Pointcut("@annotation(com.springboot.annotation.Log)") public void pointcut() &#123; &#125; @Around("pointcut()") public Object around(ProceedingJoinPoint point) &#123; Object result = null; long beginTime = System.currentTimeMillis(); try &#123; // 执行方法 result = point.proceed(); &#125; catch (Throwable e) &#123; e.printStackTrace(); &#125; // 执行时长(毫秒) long time = System.currentTimeMillis() - beginTime; // 保存日志 saveLog(point, time); return result; &#125; private void saveLog(ProceedingJoinPoint joinPoint, long time) &#123; MethodSignature signature = (MethodSignature) joinPoint.getSignature(); Method method = signature.getMethod(); SysLog sysLog = new SysLog(); Log logAnnotation = method.getAnnotation(Log.class); if (logAnnotation != null) &#123; // 注解上的描述 sysLog.setOperation(logAnnotation.value()); &#125; // 请求的方法名 String className = joinPoint.getTarget().getClass().getName(); String methodName = signature.getName(); sysLog.setMethod(className + "." + methodName + "()"); // 请求的方法参数值 Object[] args = joinPoint.getArgs(); // 请求的方法参数名称 LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer(); String[] paramNames = u.getParameterNames(method); if (args != null &amp;&amp; paramNames != null) &#123; String params = ""; for (int i = 0; i &lt; args.length; i++) &#123; params += " " + paramNames[i] + ": " + args[i]; &#125; sysLog.setParams(params); &#125; // 获取request HttpServletRequest request = HttpContextUtils.getHttpServletRequest(); // 设置IP地址 sysLog.setIp(IPUtils.getIpAddr(request)); // 模拟一个用户名 sysLog.setUsername("mrbird"); sysLog.setTime((int) time); sysLog.setCreateTime(new Date()); // 保存系统日志 sysLogDao.saveSysLog(sysLog); &#125;&#125;测试TestController：1234567891011121314151617@RestControllerpublic class TestController &#123; @Log("执行方法一") @GetMapping("/one") public void methodOne(String name) &#123; &#125; @Log("执行方法二") @GetMapping("/two") public void methodTwo() throws InterruptedException &#123; Thread.sleep(2000); &#125; @Log("执行方法三") @GetMapping("/three") public void methodThree(String name, String age) &#123; &#125;&#125;最终项目目录如下图所示：启动项目，分别访问：http://localhost:8080/web/one?name=KangKanghttp://localhost:8080/web/twohttp://localhost:8080/web/three?name=Mike&amp;age=25查询数据库：123456789101112SQL&gt; select * from sys_log order by id; ID USERNAME OPERATION TIME METHOD PARAMS IP CREATE_TIME---------- ---------- ---------- ---------- ------------------------------ ------------------------------ ---------- -------------- 11 mrbird 执行方法一 6 com.springboot.controller.Test name: KangKang 127.0.0.1 08-12月-17 Controller.methodOne() 12 mrbird 执行方法二 2000 com.springboot.controller.Test 127.0.0.1 08-12月-17 Controller.methodTwo() 13 mrbird 执行方法三 0 com.springboot.controller.Test name: Mike age: 25 127.0.0.1 08-12月-17 Controller.methodThree()source code]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[美团外卖开发总结]]></title>
    <url>%2Fblog%2Fmeituan%20waimai.html</url>
    <content type="text"><![CDATA[准备工作首先需要申请开发者账号，地址：http://developer.meituan.com/home。通过之后可以得到developerId:10**16和SignKey:s9bvk***mjm9xms以及测试门店信息。开发者可使用美团外卖app端，修改定位到： 墨脱县–搜索色金拉–搜索测试门店名称测试下单。门店管理可以使用美团外卖商家版APP进行管理。对接可以使用美团开发平台SDK或者UISDK。开发平台SDK下载地址：https://drive.google.com/open?id=14RkrayTt_MKb2d38FhN8aHop-shEv9nJ绑定与解绑美团外卖商家绑定地址为：https://open-erp.meituan.com/login?developerId=101416&amp;businessId=2&amp;ePoiId=123324214214&amp;signKey=s9bvktibcmjm9xms。除了developerId和SignKey之外，还需传入businessId（2表示外卖业务）和ePoiId（该商户在ERP厂商上的唯一标识码）。绑定成功后，美团会返回一个appAuthToken（绑定门店成功后开放平台生产的token）。在回调方法中（下面会说到）将该token保存到数据库，用于后续调用接口。美团外卖商家解绑地址为：https://open-erp.meituan.com/releasebinding?signKey=s9bvktibcmjm9xms&amp;businessId=2&amp;appAuthToken=35be4d3e63270abd28b9a320611bbdb616b1bd6ac7e11fce132e11196a4e6c89558b10f5d651d355a135bf7c49da75c2其中appAuthToken为门店绑定的时候生成的token。回调美团开发平台为外卖各个流程状态提供了回调URL，如下图所示： 回调URL对应为项目中方法的请求地址，比如订单推送URL对应项目中的：1234567891011121314151617/** * 美团外卖订单推送回调 * @param order * @return */@ResponseBody@RequestMapping(value="/plugpay/mtOrderPush.php",produces=&#123;"application/json;charset=UTF-8"&#125;)public Map&lt;String,String&gt; mtOrderPush(String order)&#123; synchronized (this) &#123; Map&lt;String, String&gt; result = new HashMap&lt;String, String&gt;(); System.out.println(order); System.out.println("您有新的美团外卖订单，请及时处理"); // 保存订单到数据库... result.put("data", "OK"); return result; &#125; &#125;订单推送回调方法需要返回{&quot;data&quot;: &quot;OK&quot;}JSON数据，代表推送成功，否则开发平台会间隔时间连续推送。其中关于回调返回的字段可参考美团开发平台回调API：http://developer.meituan.com/openapi#7.5.1。除了订单回调，美团开发平台还提供了门店绑定和解绑的回调，和订单类似，配置好回调URL即可。比如门店绑定回调方法：123456789101112131415161718192021/** * 门店绑定成功回调 * @param appAuthToken * @param businessId * @param ePoiId * @param timestamp * @return */@ResponseBody@RequestMapping(value="/plugpay/mtOauth.php",produces=&#123;"application/json;charset=UTF-8"&#125;)public JSONObject saveLogin(String appAuthToken, String businessId, String ePoiId, String timestamp)&#123; synchronized (this) &#123; JSONObject jsonObject = new JSONObject(); System.out.println("appAuthToken: "+appAuthToken+"businessId: "+businessId+"ePoiId: "+ePoiId+ "timestamp: "+timestamp); System.out.println("商户绑定成功"); // 保存token... jsonObject.element("data","success"); return jsonObject; &#125;&#125;除此之外，还有一个比较特殊的回调：心跳是用来检测餐饮商户设备是否正常工作的定时机制，其中餐饮商户的设备包括所使用的ERP系统的云端、pos等各类设备。心跳由ERP厂商负责上报，聚宝盆开放平台负责收集，并将收集到的结果应用于外卖、点餐等业务线。回调方法很简单：12345678910111213/** * 心跳 * @param request * @return */@ResponseBody@RequestMapping(value="/plugpay/heartbeat.php",method=&#123;RequestMethod.GET&#125;)public Map&lt;String,String&gt; mtHeartbeatBack(HttpServletRequest request)&#123; Map&lt;String, String&gt; result = new HashMap&lt;String, String&gt;(); result.put("data", "OK"); System.out.println("mtHeartbeat "+System.currentTimeMillis()); return result;&#125;使用SDK操作订单SDK中各个API对应的封装类按如下规则命名：通用前缀 + 业务类型前缀 + 业务二级前缀 + 具体操作 + 通用后缀。比如确认外卖订单请求的URL为：http://api.open.cater.meituan.com/waimai/order/confirm。接口对应完整类为：CipCater + Takeout + Order + Confirm + Request = CipCaterTakeoutOrderConfirmRequest。返回结果为JSON字符串。具体例子如下：123456789101112131415161718192021222324252627JSONObject result_json = new JSONObject();// 声明公共参数，RequestSysParams构造方法接收两个参数，第一个为signkey，第二个为appAuthTokenRequestSysParams requestSysParams = new RequestSysParams("yourSecret", "yourToken");// 声明所需request，此Request对象为根据url在表中查询获得CipCaterTakeoutOrderConfirmRequest request = new CipCaterTakeoutOrderConfirmRequest();// 设置公共参数request.setRequestSysParams(requestSysParams);// 设置业务级参数request.setOrderId(orderId);// 准备接收返回JsonString resultJson = "";try &#123; // 发送请求，接收Json，所有Request都有doRequest方法直接调用即可 result_json = JSONObject.fromObject(request.doRequest());&#125; catch (IOException e) &#123; // 处理io异常&#125; catch (URISyntaxException e) &#123; // 处理URI语法异常 &#125;String data = getJsonValueString(result_json, "data");if("OK".equalsIgnoreCase(data))&#123; // 成功&#125;else&#123; JSONObject error = JSONObject.fromObject(getJsonValueString(result_json, "error")); String message = getJsonValueString(error, "message"); //失败&#125;其中getJsonValueString方法作用为根据字段名从JSON中获取值：123456789101112131415161718192021222324/** * 根据名称获取Json里的值 * @param json * @param name * @return */public String getJsonValueString(JSONObject json,String name) &#123; return json.has(name)?json.getString(name):"";&#125;public int getJsonValueInt(JSONObject json,String name) &#123; return json.has(name)?json.getInt(name):0;&#125;public double getJsonValueDouble(JSONObject json,String name) &#123; return json.has(name)?json.getDouble(name):0.0;&#125;public boolean getJsonValueBoolean(JSONObject json,String name) &#123; return json.has(name)?json.getBoolean(name):false;&#125;public JSONArray getJsonValueArray(JSONObject json,String name) &#123; return json.has(name)?json.getJSONArray(name):new JSONArray();&#125;public JSONObject getJsonValueObj(JSONObject json,String name) &#123; return json.has(name)?json.getJSONObject(name):new JSONObject();&#125;使用的JSON包为net.sf.json。其他接口的使用以此类推。]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot MyBatis配置Druid多数据源]]></title>
    <url>%2Fblog%2FSpring-Boot-MyBatis%20Druid.html</url>
    <content type="text"><![CDATA[回顾在Spring中配置MyBatis SqlSessionFactory的配置：12345&lt;!-- mybatis 的SqlSessionFactory --&gt;&lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" scope="prototype"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;property name="configLocation" value="classpath:mybatis-config.xml"/&gt;&lt;/bean&gt;所以实际上在Spring Boot中配置MyBatis多数据源的关键在于创建SqlSessionFactory的时候为其分配不同的数据源。引入依赖先根据https://mrbird.cc/%E5%BC%80%E5%90%AFSpring-Boot.html开启一个最简单的Spring Boot应用，然后引入如下依赖：12345678910111213141516171819202122232425&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- oracle驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.oracle&lt;/groupId&gt; &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt; &lt;version&gt;6.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- mysql驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- druid数据源驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.6&lt;/version&gt;&lt;/dependency&gt;多数据源配置在Spring Boot配置文件application.yml中配置多数据源和Spring Boot JdbcTemplate配置Druid多数据源一致。然后根据application.yml创建两个数据源配置类MysqlDatasourceConfig和OracleDatasourceConfig：MysqlDatasourceConfig：12345678910111213141516171819202122232425262728293031323334@Configuration@MapperScan(basePackages = MysqlDatasourceConfig.PACKAGE, sqlSessionFactoryRef = "mysqlSqlSessionFactory")public class MysqlDatasourceConfig &#123; // mysqldao扫描路径 static final String PACKAGE = "com.springboot.mysqldao"; // mybatis mapper扫描路径 static final String MAPPER_LOCATION = "classpath:mapper/mysql/*.xml"; @Primary @Bean(name = "mysqldatasource") @ConfigurationProperties("spring.datasource.druid.mysql") public DataSource mysqlDataSource() &#123; return DruidDataSourceBuilder.create().build(); &#125; @Bean(name = "mysqlTransactionManager") @Primary public DataSourceTransactionManager mysqlTransactionManager() &#123; return new DataSourceTransactionManager(mysqlDataSource()); &#125; @Bean(name = "mysqlSqlSessionFactory") @Primary public SqlSessionFactory mysqlSqlSessionFactory(@Qualifier("mysqldatasource") DataSource dataSource) throws Exception &#123; final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean(); sessionFactory.setDataSource(dataSource); //如果不使用xml的方式配置mapper，则可以省去下面这行mapper location的配置。 sessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver() .getResources(MysqlDatasourceConfig.MAPPER_LOCATION)); return sessionFactory.getObject(); &#125;&#125;上面代码配置了一个名为mysqldatasource的数据源，对应application.yml中spring.datasource.druid.mysql前缀配置的数据库。然后创建了一个名为mysqlSqlSessionFactory的Bean，并且注入了mysqldatasource。与此同时，还分别定了两个扫描路径PACKAGE和MAPPER_LOCATION，前者为Mysql数据库对应的mapper接口地址，后者为对应的mapper xml文件路径。@Primary标志这个Bean如果在多个同类Bean候选时，该Bean优先被考虑。多数据源配置的时候，必须要有一个主数据源，用@Primary标志该Bean。同理，接着配置Oracle数据库对应的配置类：OracleDatasourceConfig：1234567891011121314151617181920212223242526272829303132@Configuration@MapperScan(basePackages = OracleDatasourceConfig.PACKAGE, sqlSessionFactoryRef = "oracleSqlSessionFactory")public class OracleDatasourceConfig &#123; // oracledao扫描路径 static final String PACKAGE = "com.springboot.oracledao"; // mybatis mapper扫描路径 static final String MAPPER_LOCATION = "classpath:mapper/oracle/*.xml"; @Bean(name = "oracledatasource") @ConfigurationProperties("spring.datasource.druid.oracle") public DataSource oracleDataSource() &#123; return DruidDataSourceBuilder.create().build(); &#125; @Bean(name = "oracleTransactionManager") public DataSourceTransactionManager oracleTransactionManager() &#123; return new DataSourceTransactionManager(oracleDataSource()); &#125; @Bean(name = "oracleSqlSessionFactory") public SqlSessionFactory oracleSqlSessionFactory(@Qualifier("oracledatasource") DataSource dataSource) throws Exception &#123; final SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean(); sessionFactory.setDataSource(dataSource); //如果不使用xml的方式配置mapper，则可以省去下面这行mapper location的配置。 sessionFactory.setMapperLocations(new PathMatchingResourcePatternResolver() .getResources(OracleDatasourceConfig.MAPPER_LOCATION)); return sessionFactory.getObject(); &#125;&#125;测试配置完多数据源，接下来分别在com.springboot.mysqldao路径和com.springboot.oracledao路径下创建两个mapper接口：MysqlStudentMapper：12345678910package com.springboot.mysqldao;import java.util.List;import java.util.Map;import org.apache.ibatis.annotations.Mapper;@Mapperpublic interface MysqlStudentMapper &#123; List&lt;Map&lt;String, Object&gt;&gt; getAllStudents();&#125;OracleStudentMapper：12345678910package com.springboot.oracledao;import java.util.List;import java.util.Map;import org.apache.ibatis.annotations.Mapper;@Mapperpublic interface OracleStudentMapper &#123; List&lt;Map&lt;String, Object&gt;&gt; getAllStudents();&#125;接着创建mapper接口对应的实现：在src/main/resource/mapper/mysql/路径下创建MysqlStudentMapper.xml：12345678&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="com.springboot.mysqldao.MysqlStudentMapper"&gt; &lt;select id="getAllStudents" resultType="java.util.Map"&gt; select * from student &lt;/select&gt;&lt;/mapper&gt;在src/main/resource/mapper/oracle/路径下创建OracleStudentMapper.xml：12345678&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="com.springboot.oracledao.OracleStudentMapper"&gt; &lt;select id="getAllStudents" resultType="java.util.Map"&gt; select * from student &lt;/select&gt;&lt;/mapper&gt;Service，Controller以及测试数据同Spring Boot JdbcTemplate配置Druid多数据源，这里不再赘述。最终项目目录如下图所示：启动项目，访问：http://localhost:8080/web/querystudentsfrommysql：http://localhost:8080/web/querystudentsfromoracle：source code]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>MyBatis</tag>
        <tag>Spring Boot</tag>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot JdbcTemplate配置Druid多数据源]]></title>
    <url>%2Fblog%2FSpring-Boot-JdbcTemplate%20Druid.html</url>
    <content type="text"><![CDATA[JdbcTemplate配置Druid多数据源的核心在于创建JdbcTemplate时候为其分配不同的数据源，然后在需要访问不同数据库的时候使用对应的JdbcTemplate即可。这里介绍在Spring Boot中基于Oracle和Mysql配置Druid多数据源。引入依赖先根据https://mrbird.cc/%E5%BC%80%E5%90%AFSpring-Boot.html开启一个最简单的Spring Boot应用，然后引入如下依赖：123456789101112131415161718192021222324&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- oracle驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.oracle&lt;/groupId&gt; &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt; &lt;version&gt;6.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- mysql驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- druid数据源驱动 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.6&lt;/version&gt;&lt;/dependency&gt;多数据源配置接着在Spring Boot配置文件application.yml中配置多数据源：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273server: context-path: /webspring: datasource: druid: # 数据库访问配置, 使用druid数据源 # 数据源1 mysql mysql: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;rewriteBatchedStatements=true&amp;autoReconnect=true&amp;failOverReadOnly=false&amp;zeroDateTimeBehavior=convertToNull username: root password: 123456 # 数据源2 oracle oracle: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: oracle.jdbc.driver.OracleDriver url: jdbc:oracle:thin:@localhost:1521:ORCL username: scott password: 123456 # 连接池配置 initial-size: 5 min-idle: 5 max-active: 20 # 连接等待超时时间 max-wait: 30000 # 配置检测可以关闭的空闲连接间隔时间 time-between-eviction-runs-millis: 60000 # 配置连接在池中的最小生存时间 min-evictable-idle-time-millis: 300000 validation-query: select '1' from dual test-while-idle: true test-on-borrow: false test-on-return: false # 打开PSCache，并且指定每个连接上PSCache的大小 pool-prepared-statements: true max-open-prepared-statements: 20 max-pool-prepared-statement-per-connection-size: 20 # 配置监控统计拦截的filters, 去掉后监控界面sql无法统计, 'wall'用于防火墙 filters: stat,wall # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔 aop-patterns: com.springboot.servie.* # WebStatFilter配置 web-stat-filter: enabled: true # 添加过滤规则 url-pattern: /* # 忽略过滤的格式 exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*' # StatViewServlet配置 stat-view-servlet: enabled: true # 访问路径为/druid时，跳转到StatViewServlet url-pattern: /druid/* # 是否能够重置数据 reset-enable: false # 需要账号密码才能访问控制台 login-username: druid login-password: druid123 # IP白名单 # allow: 127.0.0.1 # IP黑名单（共同存在时，deny优先于allow） # deny: 192.168.1.218 # 配置StatFilter filter: stat: log-slow-sql: true然后创建一个多数据源配置类，根据application.yml分别配置一个Mysql和Oracle的数据源，并且将这两个数据源注入到两个不同的JdbcTemplate中：123456789101112131415161718192021222324252627@Configurationpublic class DataSourceConfig &#123; @Primary @Bean(name = "mysqldatasource") @ConfigurationProperties("spring.datasource.druid.mysql") public DataSource dataSourceOne()&#123; return DruidDataSourceBuilder.create().build(); &#125; @Bean(name = "oracledatasource") @ConfigurationProperties("spring.datasource.druid.oracle") public DataSource dataSourceTwo()&#123; return DruidDataSourceBuilder.create().build(); &#125; @Bean(name = "mysqlJdbcTemplate") public JdbcTemplate primaryJdbcTemplate( @Qualifier("mysqldatasource") DataSource dataSource) &#123; return new JdbcTemplate(dataSource); &#125; @Bean(name = "oracleJdbcTemplate") public JdbcTemplate secondaryJdbcTemplate( @Qualifier("oracledatasource") DataSource dataSource) &#123; return new JdbcTemplate(dataSource); &#125;&#125;上述代码根据application.yml创建了mysqldatasource和oracledatasource数据源，其中mysqldatasource用@Primary标注为主数据源，接着根据这两个数据源创建了mysqlJdbcTemplate和oracleJdbcTemplate。@Primary标志这个Bean如果在多个同类Bean候选时，该Bean优先被考虑。多数据源配置的时候，必须要有一个主数据源，用@Primary标志该Bean。数据源创建完毕，接下来开始进行测试代码编写。测试首先往Mysql和Oracle中创建测试表，并插入一些测试数据：Mysql：12345678910DROP TABLE IF EXISTS `student`;CREATE TABLE `student` ( `sno` varchar(3) NOT NULL, `sname` varchar(9) NOT NULL, `ssex` char(2) NOT NULL, `database` varchar(10) DEFAULT NULL) DEFAULT CHARSET=utf8;INSERT INTO `student` VALUES ('001', '康康', 'M', 'mysql');INSERT INTO `student` VALUES ('002', '麦克', 'M', 'mysql');Oracle：123456789101112DROP TABLE "SCOTT"."STUDENT";CREATE TABLE "SCOTT"."STUDENT" ( "SNO" VARCHAR2(3 BYTE) NOT NULL , "SNAME" VARCHAR2(9 BYTE) NOT NULL , "SSEX" CHAR(2 BYTE) NOT NULL , "database" VARCHAR2(10 BYTE) NULL );INSERT INTO "SCOTT"."STUDENT" VALUES ('001', 'KangKang', 'M ', 'oracle');INSERT INTO "SCOTT"."STUDENT" VALUES ('002', 'Mike', 'M ', 'oracle');INSERT INTO "SCOTT"."STUDENT" VALUES ('003', 'Jane', 'F ', 'oracle');INSERT INTO "SCOTT"."STUDENT" VALUES ('004', 'Maria', 'F ', 'oracle');接着创建两个Dao及其实现类，分别用于从Mysql和Oracle中获取数据：MysqlStudentDao接口：123public interface MysqlStudentDao &#123; List&lt;Map&lt;String, Object&gt;&gt; getAllStudents();&#125;MysqlStudentDao实现；1234567891011@Repositorypublic class MysqlStudentDaoImp implements MysqlStudentDao&#123; @Autowired @Qualifier("mysqlJdbcTemplate") private JdbcTemplate jdbcTemplate; @Override public List&lt;Map&lt;String, Object&gt;&gt; getAllStudents() &#123; return this.jdbcTemplate.queryForList("select * from student"); &#125;&#125;可看到，在MysqlStudentDaoImp中注入的是mysqlJdbcTemplate。OracleStudentDao接口：123public interface OracleStudentDao &#123; List&lt;Map&lt;String, Object&gt;&gt; getAllStudents();&#125;OracleStudentDao实现：1234567891011@Repositorypublic class OracleStudentDaoImp implements OracleStudentDao&#123; @Autowired @Qualifier("oracleJdbcTemplate") private JdbcTemplate jdbcTemplate; @Override public List&lt;Map&lt;String, Object&gt;&gt; getAllStudents() &#123; return this.jdbcTemplate.queryForList("select * from student"); &#125;&#125;在OracleStudentDaoImp中注入的是oracleJdbcTemplate。随后编写Service层：StudentService接口：1234public interface StudentService &#123; List&lt;Map&lt;String, Object&gt;&gt; getAllStudentsFromOralce(); List&lt;Map&lt;String, Object&gt;&gt; getAllStudentsFromMysql();&#125;StudentService实现：1234567891011121314151617@Service("studentService")public class StudentServiceImp implements StudentService&#123; @Autowired private OracleStudentDao oracleStudentDao; @Autowired private MysqlStudentDao mysqlStudentDao; @Override public List&lt;Map&lt;String, Object&gt;&gt; getAllStudentsFromOralce() &#123; return this.oracleStudentDao.getAllStudents(); &#125; @Override public List&lt;Map&lt;String, Object&gt;&gt; getAllStudentsFromMysql() &#123; return this.mysqlStudentDao.getAllStudents(); &#125;&#125;最后编写一个Controller：123456789101112131415@RestControllerpublic class StudentController &#123; @Autowired private StudentService studentService; @RequestMapping("querystudentsfromoracle") public List&lt;Map&lt;String, Object&gt;&gt; queryStudentsFromOracle()&#123; return this.studentService.getAllStudentsFromOralce(); &#125; @RequestMapping("querystudentsfrommysql") public List&lt;Map&lt;String, Object&gt;&gt; queryStudentsFromMysql()&#123; return this.studentService.getAllStudentsFromMysql(); &#125;&#125;最终项目目录如下图所示：启动项目，访问：http://localhost:8080/web/querystudentsfrommysql：http://localhost:8080/web/querystudentsfromoracle：source code]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot中使用JdbcTemplate]]></title>
    <url>%2Fblog%2FSpring-Boot%20JdbcTemplate.html</url>
    <content type="text"><![CDATA[个人觉得JdbcTemplate相较于MyBaits，Hibernate等数据库框架更容易上手，对SQL的操作也更为直观方便，所以在项目中也是一个不错的选择。在Spring Boot开启JdbcTemplate很简单，只需要引入spring-boot-starter-jdbc依赖即可。JdbcTemplate封装了许多SQL操作，具体可查阅官方文档https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html。引入依赖spring-boot-starter-jdbc：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;数据库驱动为ojdbc6，数据源采用Druid。具体可参考https://mrbird.cc/Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Mybatis.html。代码编写数据准备：123456789CREATE TABLE "SCOTT"."STUDENT" ( "SNO" VARCHAR2(3 BYTE) NOT NULL , "SNAME" VARCHAR2(9 BYTE) NOT NULL , "SSEX" CHAR(2 BYTE) NOT NULL );INSERT INTO "SCOTT"."STUDENT" VALUES ('001', 'KangKang', 'M ');INSERT INTO "SCOTT"."STUDENT" VALUES ('002', 'Mike', 'M ');INSERT INTO "SCOTT"."STUDENT" VALUES ('003', 'Jane', 'F ');这里主要演示在Dao的实现类里使用JdbcTemplate，所以其它模块代码的编写就不展示了，具体可参考文末的源码。StudentDaoImp类代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152@Repository("studentDao")public class StudentDaoImp implements StudentDao &#123; @Autowired private JdbcTemplate jdbcTemplate; @Override public int add(Student student) &#123; // String sql = "insert into student(sno,sname,ssex) values(?,?,?)"; // Object[] args = &#123; student.getSno(), student.getName(), student.getSex() &#125;; // int[] argTypes = &#123; Types.VARCHAR, Types.VARCHAR, Types.VARCHAR &#125;; // return this.jdbcTemplate.update(sql, args, argTypes); String sql = "insert into student(sno,sname,ssex) values(:sno,:name,:sex)"; NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(this.jdbcTemplate.getDataSource()); return npjt.update(sql, new BeanPropertySqlParameterSource(student)); &#125; @Override public int update(Student student) &#123; String sql = "update student set sname = ?,ssex = ? where sno = ?"; Object[] args = &#123; student.getName(), student.getSex(), student.getSno() &#125;; int[] argTypes = &#123; Types.VARCHAR, Types.VARCHAR, Types.VARCHAR &#125;; return this.jdbcTemplate.update(sql, args, argTypes); &#125; @Override public int deleteBysno(String sno) &#123; String sql = "delete from student where sno = ?"; Object[] args = &#123; sno &#125;; int[] argTypes = &#123; Types.VARCHAR &#125;; return this.jdbcTemplate.update(sql, args, argTypes); &#125; @Override public List&lt;Map&lt;String, Object&gt;&gt; queryStudentsListMap() &#123; String sql = "select * from student"; return this.jdbcTemplate.queryForList(sql); &#125; @Override public Student queryStudentBySno(String sno) &#123; String sql = "select * from student where sno = ?"; Object[] args = &#123; sno &#125;; int[] argTypes = &#123; Types.VARCHAR &#125;; List&lt;Student&gt; studentList = this.jdbcTemplate.query(sql, args, argTypes, new StudentMapper()); if (studentList != null &amp;&amp; studentList.size() &gt; 0) &#123; return studentList.get(0); &#125; else &#123; return null; &#125; &#125;&#125;在引入spring-boot-starter-jdbc驱动后，可直接在类中注入JdbcTemplate。由上面代码可发现，对于保存操作有两种不同的方法，当插入的表字段较多的情况下，推荐使用NamedParameterJdbcTemplate。对于返回结果，可以直接使用List&lt;Map&lt;String, Object&gt;&gt;来接收，这也是个人比较推荐使用的方式，毕竟比较简单方便；也可以使用库表对应的实体对象来接收，不过这时候我们就需要手动创建一个实现了org.springframework.jdbc.core.RowMapper的对象，用于将实体对象属性和库表字段一一对应：12345678910public class StudentMapper implements RowMapper&lt;Student&gt;&#123; @Override public Student mapRow(ResultSet rs, int rowNum) throws SQLException &#123; Student student = new Student(); student.setSno(rs.getString("sno")); student.setName(rs.getString("sname")); student.setSex(rs.getString("ssex")); return student; &#125;&#125;测试最终项目目录如下图所示：启动项目，测试插入数据http://localhost:8080/web/addstudent?sno=004&amp;name=Maria&amp;sex=F：查询所有学生数据http://localhost:8080/web/queryallstudent:测试删除http://localhost:8080/web/deletestudent?sno=004：source code]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot中使用MyBatis]]></title>
    <url>%2Fblog%2FSpring-Boot%20Mybatis.html</url>
    <content type="text"><![CDATA[整合MyBatis之前，先搭建一个基本的Spring Boot项目开启Spring Boot。然后引入mybatis-spring-boot-starter和数据库连接驱动（这里使用关系型数据库Oracle 11g）。mybatis-spring-boot-starter在pom中引入：12345&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt;不同版本的Spring Boot和MyBatis版本对应不一样，具体可查看官方文档：http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/。通过dependency:tree命令查看mybatis-spring-boot-starter都有哪些隐性依赖：123456789+- org.mybatis.spring.boot:mybatis-spring-boot-starter:jar:1.3.1:compile| +- org.springframework.boot:spring-boot-starter-jdbc:jar:1.5.9.RELEASE:compile| | +- org.apache.tomcat:tomcat-jdbc:jar:8.5.23:compile| | | \- org.apache.tomcat:tomcat-juli:jar:8.5.23:compile| | \- org.springframework:spring-jdbc:jar:4.3.13.RELEASE:compile| | \- org.springframework:spring-tx:jar:4.3.13.RELEASE:compile| +- org.mybatis.spring.boot:mybatis-spring-boot-autoconfigure:jar:1.3.1:compile| +- org.mybatis:mybatis:jar:3.4.5:compile| \- org.mybatis:mybatis-spring:jar:1.3.1:compile可发现其包含了spring-boot-starter-jdbc依赖，默认使用tomcat-jdbc数据源。引入ojdbc6由于版权的原因，我们需要将ojdbc6.jar依赖安装到本地的maven仓库，然后才可以在pom中进行配置。下载ojdbc6.jar文件后，将其放到比较好找的目录下，比如D盘根目录。然后运行以下命令：123456789101112131415C:\Users\Administrator&gt;mvn install:install-file -Dfile=D:/ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=6.0 -Dpackaging=jar -DgeneratePom=true...[INFO] --- maven-install-plugin:2.4:install-file (default-cli) @ standalone-pom ---[INFO] Installing D:\ojdbc6.jar to D:\m2\repository\com\oracle\ojdbc6\6.0\ojdbc6-6.0.jar[INFO] Installing C:\Users\ADMINI~1\AppData\Local\Temp\mvninstall9103688544010617483.pom to D:\m2\repository\com\oracle\ojdbc6\6.0\ojdbc6-6.0.pom[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 0.940 s[INFO] Finished at: 2017-08-13T15:06:38+08:00[INFO] Final Memory: 6M/145M[INFO] ------------------------------------------------------------------------接着在pom中引入：12345&lt;dependency&gt; &lt;groupId&gt;com.oracle&lt;/groupId&gt; &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt; &lt;version&gt;6.0&lt;/version&gt;&lt;/dependency&gt;这里的groupid就是你之前安装时指定的-Dgroupid的值，artifactid就是你安装时指定的-Dartifactid的值，version也一样。Druid数据源Druid是一个关系型数据库连接池，是阿里巴巴的一个开源项目，地址：https://github.com/alibaba/druid。Druid不但提供连接池的功能，还提供监控功能，可以实时查看数据库连接池和SQL查询的工作情况。配置Druid依赖Druid为Spring Boot项目提供了对应的starter：12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.6&lt;/version&gt;&lt;/dependency&gt;Druid数据源配置上面通过查看mybatis starter的隐性依赖发现，Spring Boot的数据源配置的默认类型是org.apache.tomcat.jdbc.pool.Datasource，为了使用Druid连接池，需要在application.yml下配置：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263server: context-path: /webspring: datasource: druid: # 数据库访问配置, 使用druid数据源 type: com.alibaba.druid.pool.DruidDataSource driver-class-name: oracle.jdbc.driver.OracleDriver url: jdbc:oracle:thin:@localhost:1521:ORCL username: scott password: 123456 # 连接池配置 initial-size: 5 min-idle: 5 max-active: 20 # 连接等待超时时间 max-wait: 30000 # 配置检测可以关闭的空闲连接间隔时间 time-between-eviction-runs-millis: 60000 # 配置连接在池中的最小生存时间 min-evictable-idle-time-millis: 300000 validation-query: select '1' from dual test-while-idle: true test-on-borrow: false test-on-return: false # 打开PSCache，并且指定每个连接上PSCache的大小 pool-prepared-statements: true max-open-prepared-statements: 20 max-pool-prepared-statement-per-connection-size: 20 # 配置监控统计拦截的filters, 去掉后监控界面sql无法统计, 'wall'用于防火墙 filters: stat,wall # Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔 aop-patterns: com.springboot.servie.* # WebStatFilter配置 web-stat-filter: enabled: true # 添加过滤规则 url-pattern: /* # 忽略过滤的格式 exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*' # StatViewServlet配置 stat-view-servlet: enabled: true # 访问路径为/druid时，跳转到StatViewServlet url-pattern: /druid/* # 是否能够重置数据 reset-enable: false # 需要账号密码才能访问控制台 login-username: druid login-password: druid123 # IP白名单 # allow: 127.0.0.1 # IP黑名单（共同存在时，deny优先于allow） # deny: 192.168.1.218 # 配置StatFilter filter: stat: log-slow-sql: true上述配置不但配置了Druid作为连接池，而且还开启了Druid的监控功能。 其他配置可参考官方wiki——https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter此时，运行项目，访问http://localhost:8080/web/druid：输入账号密码即可看到Druid监控后台：关于Druid的更多说明，可查看官方wiki——https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98使用MyBatis使用的库表：123456789CREATE TABLE "SCOTT"."STUDENT" ( "SNO" VARCHAR2(3 BYTE) NOT NULL , "SNAME" VARCHAR2(9 BYTE) NOT NULL , "SSEX" CHAR(2 BYTE) NOT NULL );INSERT INTO "SCOTT"."STUDENT" VALUES ('001', 'KangKang', 'M ');INSERT INTO "SCOTT"."STUDENT" VALUES ('002', 'Mike', 'M ');INSERT INTO "SCOTT"."STUDENT" VALUES ('003', 'Jane', 'F ');创建对应实体：1234567public class Student implements Serializable&#123; private static final long serialVersionUID = -339516038496531943L; private String sno; private String name; private String sex; // get,set略&#125;创建一个包含基本CRUD的StudentMapper：123456public interface StudentMapper &#123; int add(Student student); int update(Student student); int deleteByIds(String sno); Student queryStudentById(Long id);&#125;StudentMapper的实现可以基于xml也可以基于注解。使用注解方式继续编辑StudentMapper：12345678910111213141516171819@Component@Mapperpublic interface StudentMapper &#123; @Insert("insert into student(sno,sname,ssex) values(#&#123;sno&#125;,#&#123;name&#125;,#&#123;sex&#125;)") int add(Student student); @Update("update student set sname=#&#123;name&#125;,ssex=#&#123;sex&#125; where sno=#&#123;sno&#125;") int update(Student student); @Delete("delete from student where sno=#&#123;sno&#125;") int deleteBysno(String sno); @Select("select * from student where sno=#&#123;sno&#125;") @Results(id = "student",value= &#123; @Result(property = "sno", column = "sno", javaType = String.class), @Result(property = "name", column = "sname", javaType = String.class), @Result(property = "sex", column = "ssex", javaType = String.class) &#125;) Student queryStudentBySno(String sno);简单的语句只需要使用@Insert、@Update、@Delete、@Select这4个注解即可，动态SQL语句需要使用@InsertProvider、@UpdateProvider、@DeleteProvider、@SelectProvider等注解。具体可参考MyBatis官方文档：http://www.mybatis.org/mybatis-3/zh/java-api.html。使用xml方式使用xml方式需要在application.yml中进行一些额外的配置：1234567mybatis: # type-aliases扫描路径 # type-aliases-package: # mapper xml实现扫描路径 mapper-locations: classpath:mapper/*.xml property: order: BEFORE测试接下来编写Service：123456public interface StudentService &#123; int add(Student student); int update(Student student); int deleteBysno(String sno); Student queryStudentBySno(String sno);&#125;实现类：12345678910111213141516171819202122232425@Service("studentService")public class StudentServiceImp implements StudentService&#123; @Autowired private StudentMapper studentMapper; @Override public int add(Student student) &#123; return this.studentMapper.add(student); &#125; @Override public int update(Student student) &#123; return this.studentMapper.update(student); &#125; @Override public int deleteBysno(String sno) &#123; return this.studentMapper.deleteBysno(sno); &#125; @Override public Student queryStudentBySno(String sno) &#123; return this.studentMapper.queryStudentBySno(sno); &#125;&#125;编写controller：1234567891011@RestControllerpublic class TestController &#123; @Autowired private StudentService studentService; @RequestMapping( value = "/querystudent", method = RequestMethod.GET) public Student queryStudentBySno(String sno) &#123; return this.studentService.queryStudentBySno(sno); &#125;&#125;完整的项目目录如下图所示：启动项目访问：http://localhost:8080/web/querystudent?sno=001：查看SQL监控情况：可看到其记录的就是刚刚访问/querystudent得到的SQL。source code]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>MyBatis</tag>
        <tag>Spring Boot</tag>
        <tag>Druid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Boot一些基础配置]]></title>
    <url>%2Fblog%2FSpring-Boot%20basic%20config.html</url>
    <content type="text"><![CDATA[定制BannerSpring Boot项目在启动的时候会有一个默认的启动图案：1234567 . ____ _ __ _ _ /\\ / ___&apos;_ __ _ _(_)_ __ __ _ \ \ \ \( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \ \\/ ___)| |_)| | | | | || (_| | ) ) ) ) &apos; |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot :: (v1.5.9.RELEASE)我们可以把这个图案修改为自己想要的。在src/main/resources目录下新建banner.txt文件，然后将自己的图案黏贴进去即可。ASCII图案可通过网站http://www.network-science.de/ascii/一键生成，比如输入mrbird生成图案后复制到banner.txt，启动项目，eclipse控制台输出如下：12345678 _ _ _ _ _ _ / \ / \ / \ / \ / \ / \ ( m | r | b | i | r | d ) \_/ \_/ \_/ \_/ \_/ \_/ ...2017-08-12 10:11:25.952 INFO 7160 --- [main] o.s.j.e.a.AnnotationMBeanExporter : Registering beans for JMX exposure on startup2017-08-12 10:11:26.057 INFO 7160 --- [main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)2017-08-12 10:11:26.064 INFO 7160 --- [main] com.springboot.demo.DemoApplication : Started DemoApplication in 3.933 seconds (JVM running for 4.241)banner也可以关闭，在main方法中：12345public static void main(String[] args) &#123; SpringApplication app = new SpringApplication(DemoApplication.class); app.setBannerMode(Mode.OFF); app.run(args);&#125;全局配置文件在src/main/resources目录下，Spring Boot提供了一个名为application.properties的全局配置文件，可对一些默认配置的配置值进行修改。附：application.properties中可配置所有官方属性自定义属性值Spring Boot允许我们在application.properties下自定义一些属性，比如：12mrbird.blog.name=mrbird's blogmrbird.blog.title=Spring Boot定义一个BlogProperties Bean，通过@Value(&quot;${属性名}&quot;)来加载配置文件中的属性值：1234567891011@Componentpublic class BlogProperties &#123; @Value("$&#123;mrbird.blog.name&#125;") private String name; @Value("$&#123;mrbird.blog.title&#125;") private String title; // get,set略 &#125;编写IndexController，注入该Bean：12345678910@RestControllerpublic class IndexController &#123; @Autowired private BlogProperties blogProperties; @RequestMapping("/") String index() &#123; return blogProperties.getName()+"——"+blogProperties.getTitle(); &#125;&#125;启动项目，访问http://localhost:8080，页面显示如下：在属性非常多的情况下，也可以定义一个和配置文件对应的Bean：123456@ConfigurationProperties(prefix="mrbird.blog")public class ConfigBean &#123; private String name; private String title; // get,set略&#125;通过注解@ConfigurationProperties(prefix=&quot;mrbird.blog&quot;)指明了属性的通用前缀，通用前缀加属性名和配置文件的属性名一一对应。除此之外还需在Spring Boot入口类加上注解@EnableConfigurationProperties({ConfigBean.class})来启用该配置：12345678@SpringBootApplication@EnableConfigurationProperties(&#123;ConfigBean.class&#125;)public class Application &#123; public static void main(String[] args) &#123; SpringApplication.run(Application.class, args); &#125;&#125;之后便可在IndexController中注入该Bean，并使用了：12345678910@RestControllerpublic class IndexController &#123; @Autowired private ConfigBean configBean; @RequestMapping("/") String index() &#123; return configBean.getName()+"——"+configBean.getTitle(); &#125;&#125;属性间的引用在application.properties配置文件中，各个属性可以相互引用，如下：123mrbird.blog.name=mrbird&apos;s blogmrbird.blog.title=Spring Bootmrbird.blog.wholeTitle=$&#123;mrbird.blog.name&#125;--$&#123;mrbird.blog.title&#125;自定义配置文件除了可以在application.properties里配置属性，我们还可以自定义一个配置文件。在src/main/resources目录下新建一个test.properties:12test.name=KangKangtest.age=25定义一个对应该配置文件的Bean：123456789@Configuration@ConfigurationProperties(prefix="test")@PropertySource("classpath:test.properties")@Componentpublic class TestConfigBean &#123; private String name; private int age; // get,set略&#125;注解@PropertySource(&quot;classpath:test.properties&quot;)指明了使用哪个配置文件。要使用该配置Bean，同样也需要在入口类里使用注解@EnableConfigurationProperties({TestConfigBean.class})来启用该配置。通过命令行设置属性值在运行Spring Boot jar文件时，可以使用命令java -jar xxx.jar --server.port=8081来改变端口的值。这条命令等价于我们手动到application.properties中修改（如果没有这条属性的话就添加）server.port属性的值为8081。如果不想项目的配置被命令行修改，可以在入口文件的main方法中进行如下设置：12345public static void main(String[] args) &#123; SpringApplication app = new SpringApplication(Application.class); app.setAddCommandLineProperties(false); app.run(args);&#125;使用xml配置虽然Spring Boot并不推荐我们继续使用xml配置，但如果出现不得不使用xml配置的情况，Spring Boot允许我们在入口类里通过注解@ImportResource({&quot;classpath:some-application.xml&quot;})来引入xml配置文件。Profile配置Profile用来针对不同的环境下使用不同的配置文件，多环境配置文件必须以application-{profile}.properties的格式命，其中{profile}为环境标识。比如定义两个配置文件：application-dev.properties：开发环境1server.port=8080application-prod.properties：生产环境1server.port=8081至于哪个具体的配置文件会被加载，需要在application.properties文件中通过spring.profiles.active属性来设置，其值对应{profile}值。如：spring.profiles.active=dev就会加载application-dev.properties配置文件内容。可以在运行jar文件的时候使用命令java -jar xxx.jar --spring.profiles.active={profile}切换不同的环境配置。source code]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开启Spring Boot]]></title>
    <url>%2Fblog%2F%E5%BC%80%E5%90%AFSpring-Boot.html</url>
    <content type="text"><![CDATA[Spring Boot是在Spring框架上创建的一个全新的框架，其设计目的是简化Spring应用的搭建和开发过程。开启Spring Boot有许多种方法可供选择，这里仅介绍使用http://start.spring.io/来构建一个简单的Spring Boot项目。生成项目文件访问http://start.spring.io/，页面显示如下：这里选择以Maven构建，语言选择Java，Spring Boot版本为1.5.9。然后点击Switch to the full version，可看到更多的配置以及依赖选择：在项目信息里选择以jar包的方式部署，Java版本为7。在页面的下方还可以选择诸多的依赖，这里仅选择web进行演示：最后点击页面的generate project按钮生成项目文件。文件下载后是一个压缩包，进行解压然后使用eclipse以Maven项目的形式导入。导入后eclipse会自动编译项目并下载相应的依赖，项目目录如下所示：简单演示项目根目录下生成了一个artifactId+Application命名规则的入口类，为了演示简单，不再新建控制器，直接在入口类中编写代码：1234567891011121314151617181920package com.springboot.demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;@RestController@SpringBootApplicationpublic class DemoApplication &#123; @RequestMapping("/") String index() &#123; return "hello spring boot"; &#125; public static void main(String[] args) &#123; SpringApplication.run(DemoApplication.class, args); &#125;&#125;然后右键点击DemoAppliction，选择run as → Java Application：访问http://localhost:8080，页面显示如下：打包发布在eclipse中右击项目，选择run as → Maven build…，如下图所示：在Goals中输入clean package命令，然后点击下方的run就将项目打包成jar包（初次打包会自动下载一些依赖）。打包完毕后可看到项目目录target文件夹下生成了一个jar文件：生成jar包后，cd到target目录下，执行以下命令：访问http://localhost:8080，效果如上。聊聊pom.xml打开pom.xml可看到配置如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.springboot&lt;/groupId&gt; &lt;artifactId&gt;demo&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;demo&lt;/name&gt; &lt;description&gt;Demo project for Spring Boot&lt;/description&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.9.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt; &lt;java.version&gt;1.7&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt;spring-boot-starter-parentspring-boot-starter-parent指定了当前项目为一个Spring Boot项目，它提供了诸多的默认Maven依赖，具体可查看目录D:\m2\repository\org\springframework\boot\spring-boot-dependencies\1.5.9.RELEASE下的spring-boot-dependencies-1.5.9.RELEASE.pom文件，这里仅截取一小部分：1234567891011121314151617181920212223&lt;properties&gt;... &lt;spring-security.version&gt;4.2.3.RELEASE&lt;/spring-security.version&gt; &lt;spring-security-jwt.version&gt;1.0.8.RELEASE&lt;/spring-security-jwt.version&gt; &lt;spring-security-oauth.version&gt;2.0.14.RELEASE&lt;/spring-security-oauth.version&gt; &lt;spring-session.version&gt;1.3.1.RELEASE&lt;/spring-session.version&gt; &lt;spring-social.version&gt;1.1.4.RELEASE&lt;/spring-social.version&gt; &lt;spring-social-facebook.version&gt;2.0.3.RELEASE&lt;/spring-social-facebook.version&gt; &lt;spring-social-linkedin.version&gt;1.0.2.RELEASE&lt;/spring-social-linkedin.version&gt; &lt;spring-social-twitter.version&gt;1.1.2.RELEASE&lt;/spring-social-twitter.version&gt; &lt;spring-ws.version&gt;2.4.2.RELEASE&lt;/spring-ws.version&gt; &lt;sqlite-jdbc.version&gt;3.15.1&lt;/sqlite-jdbc.version&gt; &lt;statsd-client.version&gt;3.1.0&lt;/statsd-client.version&gt; &lt;sun-mail.version&gt;$&#123;javax-mail.version&#125;&lt;/sun-mail.version&gt; &lt;thymeleaf.version&gt;2.1.6.RELEASE&lt;/thymeleaf.version&gt; &lt;thymeleaf-extras-springsecurity4.version&gt;2.1.3.RELEASE&lt;/thymeleaf-extras-springsecurity4.version&gt; &lt;thymeleaf-extras-conditionalcomments.version&gt;2.1.2.RELEASE&lt;/thymeleaf-extras-conditionalcomments.version&gt; &lt;thymeleaf-layout-dialect.version&gt;1.4.0&lt;/thymeleaf-layout-dialect.version&gt; &lt;thymeleaf-extras-data-attribute.version&gt;1.3&lt;/thymeleaf-extras-data-attribute.version&gt; &lt;thymeleaf-extras-java8time.version&gt;2.1.0.RELEASE&lt;/thymeleaf-extras-java8time.version&gt; &lt;tomcat.version&gt;8.5.23&lt;/tomcat.version&gt;... &lt;/properties&gt;需要说明的是，并非所有在&lt;properties&gt;标签中配置了版本号的依赖都有被启用，其启用与否取决于您是否配置了相应的starter。比如tomcat这个依赖就是spring-boot-starter-web的传递性依赖（下面将会描述到）。当然，我们可以手动改变这些依赖的版本。比如我想把thymeleaf的版本改为3.0.0.RELEASE，我们可以在pom.xml中进行如下配置：123&lt;properties&gt; &lt;thymeleaf.version&gt;3.0.0.RELEASE&lt;/thymeleaf.version&gt;&lt;/properties&gt;spring-boot-starter-webSpring Boot提供了许多开箱即用的依赖模块，这些模块都是以spring-boot-starter-XX命名的。比如要开启Spring Boot的web功能，只需要在pom.xml中配置spring-boot-starter-web即可：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;因为其依赖于spring-boot-starter-parent，所以这里可以不用配置version。保存后Maven会自动帮我们下载spring-boot-starter-web模块所包含的jar文件。如果需要具体查看spring-boot-starter-web包含了哪些依赖，我们可以右键项目选择run as → Maven Build…，在Goals中输入命令dependency:tree，然后点击run即可在eclipse控制台查看到如下信息：1234567891011121314151617181920212223242526272829[INFO] +- org.springframework.boot:spring-boot-starter-web:jar:1.5.9.RELEASE:compile[INFO] | +- org.springframework.boot:spring-boot-starter:jar:1.5.9.RELEASE:compile[INFO] | | +- org.springframework.boot:spring-boot:jar:1.5.9.RELEASE:compile[INFO] | | +- org.springframework.boot:spring-boot-autoconfigure:jar:1.5.9.RELEASE:compile[INFO] | | +- org.springframework.boot:spring-boot-starter-logging:jar:1.5.9.RELEASE:compile[INFO] | | | +- ch.qos.logback:logback-classic:jar:1.1.11:compile[INFO] | | | | \- ch.qos.logback:logback-core:jar:1.1.11:compile[INFO] | | | +- org.slf4j:jcl-over-slf4j:jar:1.7.25:compile[INFO] | | | +- org.slf4j:jul-to-slf4j:jar:1.7.25:compile[INFO] | | | \- org.slf4j:log4j-over-slf4j:jar:1.7.25:compile[INFO] | | \- org.yaml:snakeyaml:jar:1.17:runtime[INFO] | +- org.springframework.boot:spring-boot-starter-tomcat:jar:1.5.9.RELEASE:compile[INFO] | | +- org.apache.tomcat.embed:tomcat-embed-core:jar:8.5.23:compile[INFO] | | | \- org.apache.tomcat:tomcat-annotations-api:jar:8.5.23:compile[INFO] | | +- org.apache.tomcat.embed:tomcat-embed-el:jar:8.5.23:compile[INFO] | | \- org.apache.tomcat.embed:tomcat-embed-websocket:jar:8.5.23:compile[INFO] | +- org.hibernate:hibernate-validator:jar:5.3.6.Final:compile[INFO] | | +- javax.validation:validation-api:jar:1.1.0.Final:compile[INFO] | | +- org.jboss.logging:jboss-logging:jar:3.3.1.Final:compile[INFO] | | \- com.fasterxml:classmate:jar:1.3.4:compile[INFO] | +- com.fasterxml.jackson.core:jackson-databind:jar:2.8.10:compile[INFO] | | +- com.fasterxml.jackson.core:jackson-annotations:jar:2.8.0:compile[INFO] | | \- com.fasterxml.jackson.core:jackson-core:jar:2.8.10:compile[INFO] | +- org.springframework:spring-web:jar:4.3.13.RELEASE:compile[INFO] | | +- org.springframework:spring-aop:jar:4.3.13.RELEASE:compile[INFO] | | +- org.springframework:spring-beans:jar:4.3.13.RELEASE:compile[INFO] | | \- org.springframework:spring-context:jar:4.3.13.RELEASE:compile[INFO] | \- org.springframework:spring-webmvc:jar:4.3.13.RELEASE:compile[INFO] | \- org.springframework:spring-expression:jar:4.3.13.RELEASE:compile上述这些依赖都是隐式依赖于spring-boot-starter-web，我们也可以手动排除一些我们不需要的依赖。比如spring-boot-starter-web默认集成了tomcat，假如我们想把它换为jetty，可以在pom.xml中spring-boot-starter-web下排除tomcat依赖，然后手动引入jetty依赖：1234567891011121314151617&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;tips：依赖的坐标可以到上述的spring-boot-dependencies-1.5.9.RELEASE.pom文件里查找。再次运行dependency:tree：123456789101112131415161718192021222324252627282930[INFO] +- org.springframework.boot:spring-boot-starter-web:jar:1.5.9.RELEASE:compile...[INFO] +- org.springframework.boot:spring-boot-starter-jetty:jar:1.5.9.RELEASE:compile[INFO] | +- org.eclipse.jetty:jetty-servlets:jar:9.4.7.v20170914:compile[INFO] | | +- org.eclipse.jetty:jetty-continuation:jar:9.4.7.v20170914:compile[INFO] | | +- org.eclipse.jetty:jetty-http:jar:9.4.7.v20170914:compile[INFO] | | +- org.eclipse.jetty:jetty-util:jar:9.4.7.v20170914:compile[INFO] | | \- org.eclipse.jetty:jetty-io:jar:9.4.7.v20170914:compile[INFO] | +- org.eclipse.jetty:jetty-webapp:jar:9.4.7.v20170914:compile[INFO] | | +- org.eclipse.jetty:jetty-xml:jar:9.4.7.v20170914:compile[INFO] | | \- org.eclipse.jetty:jetty-servlet:jar:9.4.7.v20170914:compile[INFO] | | \- org.eclipse.jetty:jetty-security:jar:9.4.7.v20170914:compile[INFO] | | \- org.eclipse.jetty:jetty-server:jar:9.4.7.v20170914:compile[INFO] | +- org.eclipse.jetty.websocket:websocket-server:jar:9.4.7.v20170914:compile[INFO] | | +- org.eclipse.jetty.websocket:websocket-common:jar:9.4.7.v20170914:compile[INFO] | | | \- org.eclipse.jetty.websocket:websocket-api:jar:9.4.7.v20170914:compile[INFO] | | +- org.eclipse.jetty.websocket:websocket-client:jar:9.4.7.v20170914:compile[INFO] | | | \- org.eclipse.jetty:jetty-client:jar:9.4.7.v20170914:compile[INFO] | | \- org.eclipse.jetty.websocket:websocket-servlet:jar:9.4.7.v20170914:compile[INFO] | | \- javax.servlet:javax.servlet-api:jar:3.1.0:compile[INFO] | +- org.eclipse.jetty.websocket:javax-websocket-server-impl:jar:9.4.7.v20170914:compile[INFO] | | +- org.eclipse.jetty:jetty-annotations:jar:9.4.7.v20170914:compile[INFO] | | | +- org.eclipse.jetty:jetty-plus:jar:9.4.7.v20170914:compile[INFO] | | | +- javax.annotation:javax.annotation-api:jar:1.2:compile[INFO] | | | +- org.ow2.asm:asm:jar:5.1:compile[INFO] | | | \- org.ow2.asm:asm-commons:jar:5.1:compile[INFO] | | | \- org.ow2.asm:asm-tree:jar:5.1:compile[INFO] | | +- org.eclipse.jetty.websocket:javax-websocket-client-impl:jar:9.4.7.v20170914:compile[INFO] | | \- javax.websocket:javax.websocket-api:jar:1.0:compile[INFO] | \- org.mortbay.jasper:apache-el:jar:8.0.33:compile可看到tomcat已被替换为了jetty。spring-boot-maven-pluginspring-boot-maven-plugin为Spring Boot Maven插件，提供了：把项目打包成一个可执行的超级JAR（uber-JAR）,包括把应用程序的所有依赖打入JAR文件内，并为JAR添加一个描述文件，其中的内容能让你用java -jar来运行应用程序。搜索public static void main()方法来标记为可运行类。]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring+Thymeleaf3国际化]]></title>
    <url>%2Fblog%2FSpring-Tymeleaf3%E5%9B%BD%E9%99%85%E5%8C%96.html</url>
    <content type="text"><![CDATA[Spring+Thymeleaf3国际化配置国际化过程很简单，只需要在src/main/resources路径下定义不同语言环境的配置文件就好了，配置文件需以message开头，加上语言缩写后缀。比如定义一个英文配置：src/main/resources/message_en.properties；中文环境：src/main/resources/message_zh_CN.properties；默认配置（就是都没匹配上的时候采用）：src/main/resources/message.properties。定义一个简单的HTML页面用于测试：12345678910&lt;!DOCTYPE html&gt;&lt;html xmlns:th="http://www.thymeleaf.org"&gt;&lt;head&gt; &lt;title&gt;home&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;&lt;/head&gt;&lt;body&gt; &lt;p data-th-utext="#&#123;home.welcome&#125;"&gt;home&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;其中message_en.properties配置如下：1home.welcome=This is &lt;b&gt;home&lt;/b&gt; page.中文环境配置message_zh_CN.properties：1home.welcome=\u4F60\u597D\uFF0C\u8FD9\u662F&lt;b&gt;\u4E3B\u9875&lt;/b&gt;启动项目，访问该页面：将浏览器的语言环境设置为英文：刷新页面如下：有些版本可能需要手动配置MessageConfiguration：1234567891011121314151617import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.support.ResourceBundleMessageSource;@Configurationpublic class I18nConfiguration &#123; @Bean public ResourceBundleMessageSource messageSource()&#123; ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource(); messageSource.setUseCodeAsDefaultMessage(true); messageSource.setFallbackToSystemLocale(false); messageSource.setBasenames("message"); messageSource.setDefaultEncoding("UTF-8"); messageSource.setCacheSeconds(2); return messageSource; &#125;&#125;我们还可以在properties文件中使用占位符：1home.welcome=hello,&#123;0&#125;页面：1&lt;p data-th-utext="#&#123;home.welcome($&#123;user.name&#125;)&#125;"&gt;home&lt;/p&gt;]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring4中配置Thymeleaf3视图]]></title>
    <url>%2Fblog%2FSpring4%E4%B8%AD%E9%85%8D%E7%BD%AEThymeleaf3%E8%A7%86%E5%9B%BE.html</url>
    <content type="text"><![CDATA[引入必要的依赖文件：123456&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.thymeleaf&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf-spring4&lt;/artifactId&gt; &lt;version&gt;3.0.6.RELEASE&lt;/version&gt;&lt;/dependency&gt;配置Thymeleaf试图解析器：1234567891011121314151617&lt;!-- Thymeleaf视图解析器 --&gt;&lt;bean id="viewResolver" class="org.thymeleaf.spring4.view.ThymeleafViewResolver" p:templateEngine-ref="templateEngine" p:characterEncoding="UTF-8" /&gt;&lt;!-- 模板引擎 --&gt;&lt;bean id="templateEngine" class="org.thymeleaf.spring4.SpringTemplateEngine" p:templateResolver-ref="templateResolver" /&gt;&lt;!-- 模板解析器 --&gt; &lt;bean id="templateResolver" class="org.thymeleaf.templateresolver.ServletContextTemplateResolver" p:prefix="/WEB-INF/templates/" p:suffix=".html" p:templateMode="HTML5" p:cacheable="false" p:characterEncoding="UTF-8"/&gt;]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Thymeleaf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring4配置多数据源]]></title>
    <url>%2Fblog%2FSpring4%E9%85%8D%E7%BD%AE%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90.html</url>
    <content type="text"><![CDATA[Spring在每次操作数据库的时候都会通过AbstractRoutingDataSource类中的determineTargetDataSource()方法获取当前数据源，所以可以通过继承AbstractRoutingDataSource并重写determineTargetDataSource()方法来实现多数据源的配置。定义一个DynamicDataSource类，继承AbstractRoutingDataSource：123456789package cc.mrbird.datasource;import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;public class DynamicDataSource extends AbstractRoutingDataSource &#123; @Override protected Object determineCurrentLookupKey() &#123; return DatabaseContextHolder.getCustomerType(); &#125; &#125;其中DatabaseContextHolder用于保存当前使用的数据库名称：1234567891011121314151617package cc.mrbird.datasource;public class DatabaseContextHolder &#123; private static final ThreadLocal&lt;String&gt; contextHolder = new ThreadLocal&lt;String&gt;(); public static void setCustomerType(String customerType) &#123; contextHolder.set(customerType); &#125; public static String getCustomerType() &#123; return contextHolder.get(); &#125; public static void clearCustomerType() &#123; contextHolder.remove(); &#125; &#125;定义一个数据库名常量类：1234567package cc.mrbird.datasource;public class DataSourceConst &#123; public static final String DB1 = "dataSource1"; public static final String DB2 = "dataSource2"; &#125;dataSource1和dataSource2为在Spring上下文配置文件applicationContext.xml中配置的两个数据源：123456789101112131415161718192021222324252627&lt;bean id="dataSource1" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt; &lt;property name="driverClass" value="oracle.jdbc.driver.OracleDriver" /&gt; &lt;property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.140.139:1521:orcl"&gt;&lt;/property&gt; &lt;property name="user" value="test"&gt;&lt;/property&gt; &lt;property name="password" value="test_123"&gt;&lt;/property&gt; &lt;property name="maxPoolSize" value="150" /&gt; &lt;property name="minPoolSize" value="5" /&gt; &lt;property name="initialPoolSize" value="10" /&gt; &lt;property name="maxIdleTime" value="60" /&gt; &lt;property name="acquireIncrement" value="3" /&gt; &lt;property name="maxStatements" value="0" /&gt; &lt;property name="idleConnectionTestPeriod" value="60" /&gt;&lt;/bean&gt; &lt;bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt; &lt;property name="driverClass" value="oracle.jdbc.driver.OracleDriver" /&gt; &lt;property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.140.148:1521:PISDATA"&gt;&lt;/property&gt; &lt;property name="user" value="test"&gt;&lt;/property&gt; &lt;property name="password" value="test_456"&gt;&lt;/property&gt; &lt;property name="maxPoolSize" value="150" /&gt; &lt;property name="minPoolSize" value="5" /&gt; &lt;property name="initialPoolSize" value="10" /&gt; &lt;property name="maxIdleTime" value="60" /&gt; &lt;property name="acquireIncrement" value="3" /&gt; &lt;property name="maxStatements" value="0" /&gt; &lt;property name="idleConnectionTestPeriod" value="60" /&gt;&lt;/bean&gt;接着配置动态数据源，类型为上面定义的DynamicDataSource类：123456789&lt;bean id="dynamicDataSource" class="cc.mrbird.datasource.DynamicDataSource"&gt; &lt;property name="targetDataSources"&gt; &lt;map key-type="java.lang.String"&gt; &lt;entry value-ref="dataSource1" key="dataSource1"&gt;&lt;/entry&gt; &lt;entry value-ref="dataSource2" key="dataSource2"&gt;&lt;/entry&gt; &lt;/map&gt; &lt;/property&gt; &lt;property name="defaultTargetDataSource" ref="dataSource1" /&gt; &lt;/bean&gt;默认的数据源为dataSource1。测试使用Spring提供的jdbcTemplate进行测试，完整的applicationContext.xml配置如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd" default-autowire="byName" &gt; &lt;!-- 开启组件扫描 --&gt; &lt;context:component-scan base-package="cc.mrbird"/&gt; &lt;bean id="dataSource1" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt; &lt;property name="driverClass" value="oracle.jdbc.driver.OracleDriver" /&gt; &lt;property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.140.139:1521:orcl"&gt;&lt;/property&gt; &lt;property name="user" value="test"&gt;&lt;/property&gt; &lt;property name="password" value="test_123"&gt;&lt;/property&gt; &lt;property name="maxPoolSize" value="150" /&gt; &lt;property name="minPoolSize" value="5" /&gt; &lt;property name="initialPoolSize" value="10" /&gt; &lt;property name="maxIdleTime" value="60" /&gt; &lt;property name="acquireIncrement" value="3" /&gt; &lt;property name="maxStatements" value="0" /&gt; &lt;property name="idleConnectionTestPeriod" value="60" /&gt; &lt;/bean&gt; &lt;bean id="dataSource2" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt; &lt;property name="driverClass" value="oracle.jdbc.driver.OracleDriver" /&gt; &lt;property name="jdbcUrl" value="jdbc:oracle:thin:@192.168.140.148:1521:PISDATA"&gt;&lt;/property&gt; &lt;property name="user" value="test"&gt;&lt;/property&gt; &lt;property name="password" value="test_456"&gt;&lt;/property&gt; &lt;property name="maxPoolSize" value="150" /&gt; &lt;property name="minPoolSize" value="5" /&gt; &lt;property name="initialPoolSize" value="10" /&gt; &lt;property name="maxIdleTime" value="60" /&gt; &lt;property name="acquireIncrement" value="3" /&gt; &lt;property name="maxStatements" value="0" /&gt; &lt;property name="idleConnectionTestPeriod" value="60" /&gt; &lt;/bean&gt; &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" abstract="false" lazy-init="false" autowire="default"&gt; &lt;property name="dataSource"&gt; &lt;ref bean="dynamicDataSource" /&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id="dynamicDataSource" class="cc.mrbird.datasource.DynamicDataSource"&gt; &lt;property name="targetDataSources"&gt; &lt;map key-type="java.lang.String"&gt; &lt;entry value-ref="dataSource1" key="dataSource1"&gt;&lt;/entry&gt; &lt;entry value-ref="dataSource2" key="dataSource2"&gt;&lt;/entry&gt; &lt;/map&gt; &lt;/property&gt; &lt;property name="defaultTargetDataSource" ref="dataSource1"/&gt; &lt;/bean&gt; &lt;!-- 事物注解开启 --&gt; &lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dynamicDataSource" /&gt; &lt;/bean&gt; &lt;tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/&gt;&lt;/beans&gt;编写TestDynamicDataSourceDao接口：123456package cc.mrbird.dao;public interface TestDynamicDataSourceDao &#123; String getDataSource1Name(); String getDataSource2Name();&#125;其实现类：123456789101112131415161718192021222324252627282930313233343536373839package cc.mrbird.dao.impl;import org.springframework.jdbc.core.support.JdbcDaoSupport;import org.springframework.stereotype.Repository;import cc.mrbird.dao.TestDynamicDataSourceDao;import cc.mrbird.datasource.DataSourceConst;import cc.mrbird.datasource.DatabaseContextHolder;@Repository("testDynamicDataSourceDao")public class TestDynamicDataSourceDaoImpl extends JdbcDaoSupport implements TestDynamicDataSourceDao&#123; public String getDataSource1Name() &#123; String sql = ""; try &#123; sql = "select SYS_CONTEXT('USERENV','INSTANCE_NAME') from dual"; return this.getJdbcTemplate().queryForObject(sql, String.class); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125; public String getDataSource2Name() &#123; String sql = ""; try &#123; // 切换到数据源datasource2 DatabaseContextHolder.setCustomerType(DataSourceConst.DB2); sql = "select SYS_CONTEXT('USERENV','INSTANCE_NAME') from dual"; return this.getJdbcTemplate().queryForObject(sql, String.class); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; // 恢复到默认数据源datasource1 DatabaseContextHolder.clearCustomerType(); &#125; return null; &#125;&#125;编写Service接口及其实现类：1234567package cc.mrbird.service;public interface TestDynamicDataSourceService &#123; String getDataSource1Name(); String getDataSource2Name();&#125;12345678910111213141516171819202122package cc.mrbird.service.impl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import cc.mrbird.dao.TestDynamicDataSourceDao;import cc.mrbird.service.TestDynamicDataSourceService;@Service("testDynamicDataSourceService")public class TestDynamicDataSourceServiceImpl implements TestDynamicDataSourceService&#123; @Autowired private TestDynamicDataSourceDao dao; public String getDataSource1Name() &#123; return dao.getDataSource1Name(); &#125; public String getDataSource2Name() &#123; return dao.getDataSource2Name(); &#125;&#125;在控制器中测试：123456789101112131415161718192021222324package cc.mrbird.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import cc.mrbird.service.TestDynamicDataSourceService;@Controllerpublic class IndexController &#123; @Autowired private TestDynamicDataSourceService service; @RequestMapping("/test") public void test()&#123; String dataSource1Name = service.getDataSource1Name(); String dataSource2Name = service.getDataSource2Name(); System.out.println(dataSource1Name); System.out.println(dataSource2Name); &#125;&#125;页面访问/test路径，控制台输出：12orclpisdata总结配置JdbcTemplate多数据源的核心在于初始化JdbcTemplate的时候数据源配置为动态数据源，就如xml配置的那样：123456&lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" abstract="false" lazy-init="false" autowire="default"&gt; &lt;property name="dataSource"&gt; &lt;ref bean="dynamicDataSource" /&gt; &lt;/property&gt;&lt;/bean&gt;假如使用的是MyBatis，则只需要在配置sqlSessionFactory的时候指定数据源为动态数据源即可：1234&lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" scope="prototype"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;property name="configLocation" value="classpath:mybatis-config.xml"/&gt;&lt;/bean&gt;]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring中使用@Scheduled注解任务调度]]></title>
    <url>%2Fblog%2FSpring%E4%B8%AD%E4%BD%BF%E7%94%A8-Scheduled%E6%B3%A8%E8%A7%A3%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6.html</url>
    <content type="text"><![CDATA[spring-context包里提供的@Scheduled注解可以很方便的实现定时任务，在引入spring-context依赖后，在Spring xmlns中加入：1xmlns:task="http://www.springframework.org/schema/task"然后在xsi:schemaLocation中加入：12http://www.springframework.org/schema/taskhttp://www.springframework.org/schema/task/spring-task-4.3.xsd定义一个类，包含定时执行的方法：12345678910111213141516package cc.mrbird.timer;import java.text.SimpleDateFormat;import java.util.Date;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.stereotype.Component;@Componentpublic class Timer &#123; @Scheduled(cron="0/5 * * * * ?") public void test()&#123; System.out.println("SimpleJob,triggered is "+ new SimpleDateFormat("HH:mm:ss").format((new Date()))); &#125;&#125;Timer类用@Component注解标注，以纳入Spring容器中。定时调用的方法使用@Scheduled标志，并用cron表达式定义了定时执行的规则。 接下来在Spring上下文配置中启动扫描，加载定时器：1234&lt;!-- 开启组件扫描 --&gt;&lt;context:component-scan base-package="cc.mrbird"/&gt;&lt;!-- spring 定时器 加载 --&gt;&lt;task:annotation-driven /&gt;启动项目，输出：12345678910111213SimpleJob,triggered is 14:33:10SimpleJob,triggered is 14:33:15SimpleJob,triggered is 14:33:20SimpleJob,triggered is 14:33:25SimpleJob,triggered is 14:33:30SimpleJob,triggered is 14:33:35SimpleJob,triggered is 14:33:40SimpleJob,triggered is 14:33:45SimpleJob,triggered is 14:33:50SimpleJob,triggered is 14:33:55SimpleJob,triggered is 14:34:00SimpleJob,triggered is 14:34:05...]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring4中使用Quartz]]></title>
    <url>%2Fblog%2FSpring4%E4%B8%AD%E4%BD%BF%E7%94%A8Quartz.html</url>
    <content type="text"><![CDATA[Spring提供了几个类用于简化在Spring中使用Quartz任务调度。这里使用的Spring版本为4.3.5，Quartz版本为2.2.1。除了搭建Spring MVC的几个依赖外，还需引入：123456789101112131415&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;4.3.5.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;4.3.5.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt; &lt;artifactId&gt;quartz&lt;/artifactId&gt; &lt;version&gt;2.2.1&lt;/version&gt;&lt;/dependency&gt;在Quartz Scheduler中配置Job新建一个quartz-context.xml，用于配置Job，触发器等信息。通常使用MethodInvokingJobDetailFactoryBean来配置Job：1234&lt;bean id="simpleJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"&gt; &lt;property name="targetObject" ref="simpleJob" /&gt; &lt;property name="targetMethod" value="printMessage" /&gt;&lt;/bean&gt;targetObject制定调用的Bean，targetMethod指定调用的方法。simpleJob Bean如下：123456789101112import java.text.SimpleDateFormat;import java.util.Date;import org.springframework.stereotype.Component;@Component("simpleJob")public class SimpleJob &#123; public void printMessage() &#123; System.out.println("SimpleJob,triggered is "+ new SimpleDateFormat("HH:mm:ss").format((new Date()))); &#125;&#125;在Quartz Scheduler中配置触发规则两种方式配置触发规则：SimpleTrigger12345&lt;bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"&gt; &lt;property name="jobDetail" ref="simpleJobDetail" /&gt; &lt;property name="startDelay" value="1000" /&gt; &lt;property name="repeatInterval" value="2000" /&gt;&lt;/bean&gt;CronTrigger1234&lt;bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"&gt; &lt;property name="jobDetail" ref="simpleJobDetail" /&gt; &lt;property name="cronExpression" value="0/5 * * * * ?" /&gt;&lt;/bean&gt;配置SchedulerFactoryBean使用SchedulerFactoryBean将jobDetails和triggers配置在一起：12345678910111213&lt;bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"&gt; &lt;property name="jobDetails"&gt; &lt;list&gt; &lt;ref bean="simpleJobDetail" /&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name="triggers"&gt; &lt;list&gt; &lt;ref bean="simpleTrigger" /&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt;完整的quartz-context.xml配置如下：123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"&gt; &lt;context:component-scan base-package="cc.mrbird.scheduling" /&gt; &lt;bean id="simpleJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"&gt; &lt;property name="targetObject" ref="simpleJob" /&gt; &lt;property name="targetMethod" value="printMessage" /&gt; &lt;/bean&gt; &lt;!-- &lt;bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean"&gt; --&gt;&lt;!-- &lt;property name="jobDetail" ref="simpleJobDetail" /&gt; --&gt;&lt;!-- &lt;property name="startDelay" value="1000" /&gt; --&gt;&lt;!-- &lt;property name="repeatInterval" value="2000" /&gt; --&gt;&lt;!-- &lt;/bean&gt; --&gt; &lt;bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"&gt; &lt;property name="jobDetail" ref="simpleJobDetail" /&gt; &lt;property name="cronExpression" value="0/5 * * * * ?" /&gt; &lt;/bean&gt; &lt;bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"&gt; &lt;property name="jobDetails"&gt; &lt;list&gt; &lt;ref bean="simpleJobDetail" /&gt; &lt;/list&gt; &lt;/property&gt; &lt;property name="triggers"&gt; &lt;list&gt; &lt;ref bean="cronTrigger" /&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/beans&gt;在web.xml中加入quartz-context.xml启动项：123456...&lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml,classpath:quartz-context.xml&lt;/param-value&gt;&lt;/init-param&gt;...部署项目，启动后控制台输出：123456789101112131415SimpleJob,triggered is 17:43:35SimpleJob,triggered is 17:43:40SimpleJob,triggered is 17:43:45SimpleJob,triggered is 17:43:50SimpleJob,triggered is 17:43:55SimpleJob,triggered is 17:44:00SimpleJob,triggered is 17:44:05SimpleJob,triggered is 17:44:10SimpleJob,triggered is 17:44:15SimpleJob,triggered is 17:44:20SimpleJob,triggered is 17:44:25SimpleJob,triggered is 17:44:30SimpleJob,triggered is 17:44:35SimpleJob,triggered is 17:44:40...参考自http://websystique.com/spring/spring-4-quartz-scheduler-integration-example/]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Quartz guide]]></title>
    <url>%2Fblog%2FQuartz-guide.html</url>
    <content type="text"><![CDATA[Quartz是一款开源的任务调度框架，对任务调度过程进行了高度的抽象，包含调度器（Scheduler），任务（Job）和触发器（Trigger）。Quartz在org.quartz.*中通过接口和类对这三个概念进行了描述（这里使用的Quartz版本为1.8.6）：Job：一个简单的接口，只包含一个void execute(JobExecutionContext context)抽象方法。实际开发中，通过实现该接口来定义需要执行的任务。JobExecutionContext提供了调度上下文信息。1234public interface Job &#123; void execute(JobExecutionContext context) throws JobExecutionException;&#125;JobDetail：包含多个构造函数，最常用的为JobDetail(String name, String group, Class jobClass)jobClass为实现了Job接口的类，name为任务在Scheduler中的名称，group为任务在Scheduler中的组名。组名默认为Scheduler.DEFAULT_GROUP。Trigger：一个类，用于描述触发Job执行的时间规则。包含：SimpleTrigger: 一次或者固定时间间隔周期的触发规则。CronTrigger：通过cron表达式描述出更为复杂的触发规则。Calendar：Quartz提供的日历类。一个Trigger可以和多个Calendar关联，以此来排除一些特殊的日期。Scheduler：代表一个Quartz的独立运行容器，Trigger和JobDetail被注册到Scheduler中，二者在Scheduler中拥有各自的名称（name）和组名（group）。Trigger和JobDetail的名称和组名的组合必须唯一，但是Trigger的名称和组名的组合可以和JobDetail的相同，因为它们类型不同。一个Job可以绑定多个Trigger，反之不然。Job还有一个子接口：StatefulJob，其是一个没有方法的标签接口，代表有状态的任务。无状态任务：拥有JobDataMap复制，所以可以并发运行；有状态任务：共享一份JobDataMap，每次对JobDataMap的修改会被保存下来。所以前次的StatefulJob会阻塞下一次的StatefulJob。SimpleTriggerSimpleTrigger包含多个重载的构造器，可根据实际需求来选择。这里使用SimpleTrigger来演示触发一个JobDetail。首先定义一个简单的Job实现类，代表我们需要进行调度的任务：123456789101112131415import java.text.SimpleDateFormat;import java.util.Date;import org.quartz.Job;import org.quartz.JobExecutionContext;import org.quartz.JobExecutionException;public class SimpleJob implements Job&#123; @Override public void execute(JobExecutionContext context) throws JobExecutionException &#123; System.out.println("TriggerName: "+context.getTrigger().getName()+ " Triggered time is: "+new SimpleDateFormat("HH:mm:ss").format((new Date()))); &#125;&#125;下面通过SimpleTrigger对SimpleJob进行调度：12345678910111213141516171819202122232425262728import java.util.Date;import org.quartz.JobDetail;import org.quartz.Scheduler;import org.quartz.SimpleTrigger;import org.quartz.impl.StdSchedulerFactory;public class SimpleTriggerRunner &#123; public static void main(String[] args) &#123; try &#123; JobDetail jobDetail = new JobDetail("job1","job_group1",SimpleJob.class); SimpleTrigger simpleTrigger = new SimpleTrigger("trigger1","trigger_group1"); simpleTrigger.setStartTime(new Date()); simpleTrigger.setRepeatInterval(2000); simpleTrigger.setRepeatCount(10); Scheduler scheduler = new StdSchedulerFactory().getScheduler(); scheduler.scheduleJob(jobDetail, simpleTrigger); scheduler.start(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125;上面代码中做的事情主要有：通过JobDetail封装SimpleJob，同时指定其名称为job1，组名为job_group1；创建一个SimpleTrigger，并指定其名称为trigger1，组名为trigger_group1，触发启动时间为马上触发，时间间隔为2000毫秒，重复10次；接着创建了一个Scheduler实例，并且将JobDetail和Trigger实例注册到Scheduler中。运行代码，观察输出：1234567891011TriggerName: trigger1 Triggered time is: 16:27:07TriggerName: trigger1 Triggered time is: 16:27:09TriggerName: trigger1 Triggered time is: 16:27:11TriggerName: trigger1 Triggered time is: 16:27:13TriggerName: trigger1 Triggered time is: 16:27:15TriggerName: trigger1 Triggered time is: 16:27:17TriggerName: trigger1 Triggered time is: 16:27:19TriggerName: trigger1 Triggered time is: 16:27:21TriggerName: trigger1 Triggered time is: 16:27:23TriggerName: trigger1 Triggered time is: 16:27:25TriggerName: trigger1 Triggered time is: 16:27:27CronTriggerCronTrigger的调度规则基于Cron表达式。Cron表达式由6个或7个由空格分隔的时间字段：位置时间域名允许值允许的特殊字符1秒0-59, - * /2分钟0-59, - * /3小时0-23, - * /4日期1-31, - * ? / L W C5月份1-12, - * /6星期1-7, - * ? / L C #7年(可选)空值1970-2099, - * /其中特殊字符的含义如下：星号（*）：可用在所有字段中，表示对应时间域的每一个时刻。例如，*在分钟字段时，表示“每分钟”；问号（?）：该字符只在日期和星期字段中使用，它通常指定为“无意义的值”，相当于点位符；减号（-）：表达一个范围，如在小时字段中使用“10-12”，则表示从10到12点，即10,11,12；逗号（,）：表示一个列表值，如在星期字段中使用“MON,WED,FRI”，则表示星期一，星期三和星期五；斜杠（/）：x/y表达一个等步长序列，x为起始值，y为增量步长值。如在分钟字段中使用0/15，则表示为0,15,30和45秒，而5/15在分钟字段中表示5,20,35,50，你也可以使用*/y，它等同于0/y；L：该字符只在日期和星期字段中使用，代表“Last”的意思，但它在两个字段中意思不同。L在日期字段中，表示这个月份的最后一天，如一月的31号，非闰年二月的28号；如果L用在星期中，则表示一个星期的最后一天（也就是星期六，国外星期第一天为周天）。但是，如果L出现在星期字段里，而且在前面有一个数值X，则表示“这个月的最后一个星期X-1”，例如，6L表示该月的最后一个星期五，5L表示该月的最后一个星期四，以此类推。W：该字符只能出现在日期字段里，是对前导日期的修饰，表示离该日期最近的工作日。例如15W表示离该月15号最近的工作日，如果该月15号是星期六，则匹配14号星期五；如果15日是星期日，则匹配16号星期一；如果15号是星期二，那结果就是15号星期二。但必须注意关联的匹配日期不能够跨月，如你指定1W，如果1号是星期六，结果匹配的是3号星期一，而非上个月最后的那天；LW组合：在日期字段可以组合使用LW，它的意思是当月的最后一个工作日；井号（#）：该字符只能在星期字段中使用，表示当月某个工作日。如6#3表示当月的第三个星期五（6表示星期五，#3表示当前的第三个），而4#5表示当月的第五个星期三，假设当月没有第五个星期三，忽略不触发；C：该字符只在日期和星期字段中使用，代表“Calendar”的意思。它的意思是计划所关联的日期，如果日期没有被关联，则相当于日历中所有日期。例如5C在日期字段中就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天。Cron表达式对特殊字符的大小写不敏感，对代表星期的缩写英文大小写也不敏感。下面给出一些完整的Cron表示式的实例：表示式说明“0 0 12 * * ? “每天12点运行“0 15 10 ? * *“每天10:15运行“0 15 10 * * ?”每天10:15运行“0 15 10 * * ? *“每天10:15运行“0 15 10 * * ? 2008”在2008年的每天10：15运行“0 * 14 * * ?”每天14点到15点之间每分钟运行一次，开始于14:00，结束于14:59。“0 0/5 14 * * ?”每天14点到15点每5分钟运行一次，开始于14:00，结束于14:55。“0 0/5 14,18 * * ?”每天14点到15点每5分钟运行一次，此外每天18点到19点每5钟也运行一次。“0 0-5 14 * * ?”每天14:00点到14:05，每分钟运行一次。“0 10,44 14 ? 3 WED”3月每周三的14:10分到14:44，每分钟运行一次。“0 15 10 ? * MON-FRI”每周一，二，三，四，五的10:15分运行。“0 15 10 15 * ?”每月15日10:15分运行。“0 15 10 L * ?”每月最后一天10:15分运行。“0 15 10 ? * 6L”每月最后一个星期五10:15分运行。“0 15 10 ? * 6L 2014-2016”在2014,2015,2016年每个月的最后一个星期五的10:15分运行。“0 15 10 ? * 6#3”每月第三个星期五的10:15分运行。附：在线Cron表达式生成器CronTrigger实例使用CronTrigger对simpleJob进行调度，使用Cron表达式制定调度规则，让其每5秒运行一次：123456789101112131415161718192021222324import org.quartz.CronExpression;import org.quartz.CronTrigger;import org.quartz.JobDetail;import org.quartz.Scheduler;import org.quartz.impl.StdSchedulerFactory;public class CronTriggerRunner &#123; public static void main(String[] args) &#123; try &#123; JobDetail jobDetail = new JobDetail("job2","job_group2",SimpleJob.class); CronTrigger cronTrigger = new CronTrigger("trigger2","trigger_group2"); CronExpression ce = new CronExpression("0/5 * * * * ?"); cronTrigger.setCronExpression(ce); Scheduler scheduler = new StdSchedulerFactory().getScheduler(); scheduler.scheduleJob(jobDetail, cronTrigger); scheduler.start(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125;运行，观察输出：123456789101112131415TriggerName: trigger2 Triggered time is: 09:38:00TriggerName: trigger2 Triggered time is: 09:38:05TriggerName: trigger2 Triggered time is: 09:38:10TriggerName: trigger2 Triggered time is: 09:38:15TriggerName: trigger2 Triggered time is: 09:38:20TriggerName: trigger2 Triggered time is: 09:38:25TriggerName: trigger2 Triggered time is: 09:38:30TriggerName: trigger2 Triggered time is: 09:38:35TriggerName: trigger2 Triggered time is: 09:38:40TriggerName: trigger2 Triggered time is: 09:38:45TriggerName: trigger2 Triggered time is: 09:38:50TriggerName: trigger2 Triggered time is: 09:38:55TriggerName: trigger2 Triggered time is: 09:39:00TriggerName: trigger2 Triggered time is: 09:39:05...Calendar略。]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Flex布局]]></title>
    <url>%2Fblog%2F%E5%88%9D%E8%AF%86Flex%E5%B8%83%E5%B1%80.html</url>
    <content type="text"><![CDATA[传统的CSS布局方法中，一般使用float属性和display:table来实现布局，但在使用的过程中总有种无法随心所欲的感觉，元素的位置摆放总是显得不是那么的直观，而Flexbox很好的解决了这个问题。Flexbox俗称弹性盒子模型，在开始使用Flexbox之前，首先要声明一个Flex容器（Flex Container）。而Flex容器中的元素称为Flex项目（Flex Item）。声明一个Flex容器：1234567div &#123; display: flex;&#125;// 对于行内元素：div &#123; display: inline-flex;&#125;对于一个Flex容器，其存在两个轴。水平方向的称为主轴（main axis），竖直方向的称为交叉轴（cross axis）。如下图所示：FlexBox主要包含12个属性，其中Flex容器6个，Flex项目6个。Flex容器属性flex-directionflex-direction属性决定了项目的排列方向，语法如下：1flex-direction: row | row-reverse | column | column-reverse;可取的值有：row（默认值）：项目水平方向排列，起点在左端。row-reverse：项目水平方向排列，起点在右端。column：项目竖直方向排列，起点在上沿。column-reverse：项目竖直方向排列，起点在下沿。默认情况下，flex-direction的取值为row：See the Pen xrvQqe by wuyouzhuguli (@mrbird) on CodePen.当flex-direction属性的值为row-reverse时，项目的起点在右端：See the Pen yoLJYb by wuyouzhuguli (@mrbird) on CodePen.当flex-direction属性的值为column时，项目垂直排列，起点在上沿：See the Pen yoLJOX by wuyouzhuguli (@mrbird) on CodePen.当flex-direction属性的值为column-reverse时，项目垂直排列，起点在下沿：See the Pen OjJXXV by wuyouzhuguli (@mrbird) on CodePen.flex-wrapflex-wrap属性规定了项目在一条轴线上排不下时，是否换行。语法如下：1flex-wrap: nowrap | wrap | wrap-reverse;属性可取的值有：nowrap（默认）：不换行。wrap：换行，第一行在上方。wrap-reverse：换行，第一行在下方。flex-wrap默认取值为nowrap，即不换行，如果项目排列方向为水平方向，则项目宽度自动收缩（因为项目的flex-shrink属性值默认为1，即如果空间不足，该项目宽度将缩小。）：See the Pen KvKMNm by wuyouzhuguli (@mrbird) on CodePen.将flex-wrap属性值设置为warp时：See the Pen zdYBoj by wuyouzhuguli (@mrbird) on CodePen.将flex-wrap属性值设置为wrap-reverse时：See the Pen eEYzgV by wuyouzhuguli (@mrbird) on CodePen.当项目排列方向为竖直方向，如果一列排不下并且flex-wrap属性值为no-wrap时，项目将会超出容器的高度，项目并不会收缩。flex-flowflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。justify-contentjustify-content属性定义了项目在主轴上的对齐方式。语法如下：1justify-content: flex-start | flex-end | center | space-between | space-around;属性可取的值有：flex-start（默认值）：左对齐。flex-end：右对齐。center： 居中。space-between：两端对齐，项目之间的间隔都相等。space-around：每个项目两侧的间隔相等。项目之间的间隔比项目与边框的间隔大一倍。默认情况下为左对齐，当justify-content属性值设为flex-end时：See the Pen vJYKgo by wuyouzhuguli (@mrbird) on CodePen.当justify-content属性值为center时：See the Pen probdW by wuyouzhuguli (@mrbird) on CodePen.当justify-content属性值为space-between时：See the Pen dzyXZB by wuyouzhuguli (@mrbird) on CodePen.当justify-content属性值为space-around时：See the Pen QMWEag by wuyouzhuguli (@mrbird) on CodePen.align-itemsalign-items属性定义项目在交叉轴上如何对齐。语法如下：1align-items: flex-start | flex-end | center | baseline | stretch;属性可取的值有：flex-start：交叉轴的起点对齐。flex-end：交叉轴的终点对齐。center：交叉轴的中点对齐。baseline: 项目的第一行文字的基线对齐。stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。当align-items属性值为flex-start时（将第2，4个项目高度设置为120px，以更好的区分各属性的效果）：See the Pen NvWrYp by wuyouzhuguli (@mrbird) on CodePen.当align-items属性值为flex-end时：See the Pen jLOrpG by wuyouzhuguli (@mrbird) on CodePen.当align-items属性值为center时：See the Pen XaWKvO by wuyouzhuguli (@mrbird) on CodePen.当align-items属性值为baseline时，项目沿着第一行文字的基线对齐：See the Pen YxzWMy by wuyouzhuguli (@mrbird) on CodePen.当align-items属性值为stretch（默认值）时，如果项目未设置高度或设为auto，将占满整个容器的高度。See the Pen aybZjX by wuyouzhuguli (@mrbird) on CodePen.align-contentalign-content属性定义了多根轴线（多行）的对齐方式。如果项目只有一根轴线，该属性不起作用。语法如下：1align-content: flex-start | flex-end | center | space-between | space-around | stretch;属性可取的值有：flex-start：与交叉轴的起点对齐。flex-end：与交叉轴的终点对齐。center：与交叉轴的中点对齐。space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。stretch（默认值）：轴线占满整个交叉轴。当align-content属性值为flex-start时，项目交叉轴的起点对齐：See the Pen oeNzZx by wuyouzhuguli (@mrbird) on CodePen.当align-content属性值为flex-end时，项目交叉轴的终点对齐：See the Pen PKoGmJ by wuyouzhuguli (@mrbird) on CodePen.当align-content属性值为center时，项目交叉轴的中点对齐：See the Pen proEPQ by wuyouzhuguli (@mrbird) on CodePen.当align-content属性值为space-between时：See the Pen XaWjRL by wuyouzhuguli (@mrbird) on CodePen.当align-content属性值为space-around时：See the Pen oeNzwx by wuyouzhuguli (@mrbird) on CodePen.当align-content属性值为stretch（默认值），项目高度为auto时，项目将占满整个交叉轴：See the Pen vJYXZg by wuyouzhuguli (@mrbird) on CodePen.项目属性orderorder属性定义项目的排列顺序。数值越小，排列越靠前，默认为0，它可以接受一个正值，也可以接受一个负值。语法如下：1order: &lt;integer&gt;;默认情况下，因为项目的order属性都为0，所以排列顺序按照HTML源码进行排列，比如：123456&lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt;&lt;/ul&gt;在FlexBox布局里，li默认按1，2，3，4的顺序排列，现在不改变HTML源码的情况下，将序号为1的li移到最末尾：See the Pen proRge by wuyouzhuguli (@mrbird) on CodePen.这里只需将第一个li的order属性值设为大于0的数即可。flex-growflex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。语法如下：1flex-grow: &lt;number&gt;如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）：See the Pen NvWdRr by wuyouzhuguli (@mrbird) on CodePen.从结果可以看到，这三个li的宽度都变大了，等分了外层ul的剩余空间。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍：See the Pen EvxZNR by wuyouzhuguli (@mrbird) on CodePen.flex-shrinkflex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。语法如下：1flex-shrink: &lt;number&gt;;如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效：See the Pen vJYgxo by wuyouzhuguli (@mrbird) on CodePen.flex-basisflex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。基本语法如下：1flex-basis: &lt;length&gt; | auto;flex-basis可以手动的设置为一个合法的px值，这样项目原本的width将失效。比如，第一个li的宽度为70px，在将其flex-basis属性设置为140px之后：See the Pen YxzNEm by wuyouzhuguli (@mrbird) on CodePen.flexflex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。align-selfalign-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。语法如下：1align-self: auto | flex-start | flex-end | center | baseline | stretch;比如，将第二个li的aligh-self属性值设置为flex-end：See the Pen MvWJGV by wuyouzhuguli (@mrbird) on CodePen.]]></content>
      <tags>
        <tag>CSS3</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3滤镜filter]]></title>
    <url>%2Fblog%2FCSS%E6%BB%A4%E9%95%9Cfilter.html</url>
    <content type="text"><![CDATA[CSS滤镜（filter）用于定义滤镜效果，也就是改变元素的透明度、对比度、亮度和模糊度等效果。其包含一系列的函数来实现各种滤镜效果，也可以将这些函数组合起来，以此达到更复杂的滤镜效果。blur()给图像设置高斯模糊的效果。默认值为0，接受css长度值，不能为百分数。比如给下面的背景图设置不同的模糊度，并对比结果：See the Pen gRNgzX by wuyouzhuguli (@mrbird) on CodePen.可见，长度值越大，效果越模糊。brightness()用于给图像设置亮暗程度，值为0%时，图像全黑；值为100%时，图像没有任何变化。比如给下面的背景图设置不同的亮度，并对比结果：See the Pen rwEyNO by wuyouzhuguli (@mrbird) on CodePen.contrast()调整图像的对比度。值是0%的话，图像会全黑。值是100%，图像不变。值可以超过100%，意味着会运用更低的对比。若没有设置值，默认是1。比如给下面的背景图设置不同的对比度，并对比结果：See the Pen EXBWVg by wuyouzhuguli (@mrbird) on CodePen.grayscale()将图像转换为灰度图像。值定义转换的比例。值为100%则完全转为灰度图像，值为0%图像无变化。值在0%到100%之间，则是效果的线性乘子。若未设置，值默认是0。比如给下面的背景图设置不同的灰度值，并对比结果：See the Pen NgZpYK by wuyouzhuguli (@mrbird) on CodePen.hue-rotate()给图像应用色相旋转。angle值设定图像会被调整的色环角度值。值为0deg，则图像无变化。若值未设置，默认值是0deg。该值虽然没有最大值，超过360deg的值相当于又绕一圈。比如给下面的背景图设置不同的色相旋转值，并对比结果：See the Pen LLKWJd by wuyouzhuguli (@mrbird) on CodePen.invert()反转图像。值定义转换的比例。100%的价值是完全反转。值为0%则图像无变化。若值未设置，值默认是0。比如给下面的背景图设置不同的反转值，并对比结果：See the Pen rwEyQm by wuyouzhuguli (@mrbird) on CodePen.opacity()转化图像的透明程度。值定义转换的比例。值为0%则是完全透明，值为100%则图像无变化。若值未设置，值默认是1。该函数与已有的opacity属性很相似，不同之处在于通过filter，一些浏览器为了提升性能会提供硬件加速。比如给下面的背景图设置不同的透明度，并对比结果：See the Pen EXBWrb by wuyouzhuguli (@mrbird) on CodePen.saturate()转换图像饱和度。值定义转换的比例。值为0%则是完全不饱和，值为100%则图像无变化。超过100%的值是允许的，则有更高的饱和度。若值未设置，值默认是1。比如给下面的背景图设置不同的饱和度，并对比结果：See the Pen XgLMQa by wuyouzhuguli (@mrbird) on CodePen.sepia()将图像转换为深褐色。值定义转换的比例。值为100%则完全是深褐色的，值为0%图像无变化。若未设置，值默认是0。比如给下面的背景图设置不同的褐色值，并对比结果：See the Pen owrZrP by wuyouzhuguli (@mrbird) on CodePen.drop-shadow()给图像设置一个阴影效果。该函数与已有的box-shadow属性很相似。不同之处在于，通过滤镜，一些浏览器为了更好的性能会提供硬件加速。参数类型和box-shadow一致，这里就不演示啦。url()URL函数接受一个XML文件，该文件设置了 一个SVG滤镜，且可以包含一个锚点来指定一个具体的滤镜元素。比如通过url函数引入一个svg滤镜资源：1.effect &#123; filter: url(commonfilters.xml#large-blur) &#125;]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS媒体查询]]></title>
    <url>%2Fblog%2FCSS%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2.html</url>
    <content type="text"><![CDATA[一个媒体查询由一个可选的媒体类型和零个或多个使用媒体功能限制样式表范围的表达式组成, 例如宽度，高度和颜色等。这些表达式描述了媒体特征，最终会被解析为true或false。如果媒体查询中指定的媒体类型匹配展示文档所使用的设备类型，并且所有的表达式的值都是true，那么该媒体查询的结果为true。举个简单的例子：1234567891011&lt;!-- link元素中的CSS媒体查询 --&gt;&lt;link rel="stylesheet" media="(max-width: 800px)" href="example.css" /&gt;&lt;!-- 样式表中的CSS媒体查询 --&gt;&lt;style&gt;@media (max-width: 600px) &#123; .facet_sidebar &#123; display: none; &#125;&#125;&lt;/style&gt;当媒体查询结果为true时，相应的样式就会被应用。需要注意的是，即使媒体查询结果为false，link还是会加载相应的css文件，只不过这份样式文件不会被应用罢了。媒体查询中，默认的媒体类型是all。常见的媒体类型有：媒体类型描述all用于所有的媒体设备。aural用于语音和音频合成器。braille用于盲人用点字法触觉回馈设备。embossed用于分页的盲人用点字法打印机。handheld用于小的手持的设备。print用于打印机。projection用于方案展示，比如幻灯片。screen用于电脑显示器。tty用于使用固定密度字母栅格的媒体，比如电传打字机和终端。tv用于电视机类型的设备。逻辑操作符媒体查询操作符包括and，not，only和or（也可以是逗号“，”）。andand操作符只有当各个查询都为true时，才返回true。比如，下面的媒体查询仅在可视区域宽度不小于700像素并且在横屏时有效：1@media (min-width: 700px) and (orientation: landscape) &#123; ... &#125;这里媒体类型默认为all，如果要将媒体类型限制为电脑屏幕，则改写媒体查询为：1@media tv and (min-width: 700px) and (orientation: landscape) &#123; ... &#125;notnot关键字应用于整个媒体查询，在媒体查询为假时返回真。比如下面的媒体查询在屏幕宽度大于700px并且非横屏时有效：1@media not (min-width: 700px) and (orientation: landscape) &#123; ... &#125;其等价于：1@media not ((min-width: 700px) and (orientation: landscape)) &#123; ... &#125;逗号分隔列表媒体查询中使用逗号分隔效果等同于 or 逻辑操作符。当使用逗号分隔的媒体查询时，如果任何一个媒体查询返回真，样式就是有效的。例如，如果你想在最小宽度为700像素或是横屏的手持设备上应用一组样式，你可以这样写：1@media (min-width: 700px), handheld and (orientation: landscape) &#123; ... &#125;onlyonly 关键字防止老旧的浏览器不支持带媒体属性的查询而应用到给定的样式：1&lt;link rel="stylesheet" media="only screen and (color)" href="example.css" /&gt;常用媒体属性向所有能显示颜色的设备应用样式表：1@media all and (color) &#123; ... &#125;向所有黑白设备应用样式表：1@media all and (monochrome) &#123; ... &#125;向竖屏设备应用样式表：1@media all and (orientation: portrait) &#123; ... &#125;向横屏设备应用样式表：1@media all and (orientation: landscape) &#123; ... &#125;向最小像素密度为300dpi的设备应用样式表：1@media all and (min-resolution: 300dpi) &#123; ... &#125;宽度和高度属性上面例子中有出现，不再赘述。]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3 animation]]></title>
    <url>%2Fblog%2FCSS3-animation.html</url>
    <content type="text"><![CDATA[CSS3的animation属性可以绘制各种复杂的动画，animation属性由以下8种属性的简写形式： animation-name，animation-duration，animation-timing-function，animation-delay，animation-iteration-count，animation-direction 和 animation-fill-mode。下面一一介绍这八种属性。animation-nameCSS3中使用@keyframes定义动画的名称以及具体动画的关键帧。而animation-name属性则是用于指定使用哪个动画，比如使用@keyframes定义一个简单的动画：1234@-webkit-keyframes demo&#123; from &#123; left: 0; &#125; to &#123; left: 400px ;&#125;&#125;也可以使用百分比来定义关键帧位置：12345@-webkit-keyframes demo&#123; 0% &#123; left: 0; &#125; 50% &#123; left: 200px; &#125; 100% &#123; left: 400px; &#125;&#125;然后使用animation-name属性指定使用demo动画：123div &#123; -webkit-animation-name: demo;&#125;animation-durationanimation-duration指定对象动画的持续时间。属性值为正数，单位可以是秒(s)或者毫秒(ms)。默认值为0，表明动画不执行。比如：See the Pen QgRQgM by wuyouzhuguli (@mrbird) on CodePen.animation-timing-function设置对象动画的过渡类型，如果提供多个属性值，以逗号进行分隔。类似于transition-timing-function。语法如下：1animation-timing-function: linear | ease | ease-in | ease-out | ease-in-out | step-start | step-end | steps(&lt;number&gt;[, [ start | end ] ]?) | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) [, linear | ease | ease-in | ease-out | ease-in-out | step-start | step-end | steps(&lt;number&gt;[, [ start | end ] ]?) | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) ]*;属性可取的值有：ease：缓解效果，等同于cubic-bezier(0.25,0.1,0.25,1.0)函数，既立方贝塞尔。linear：线性效果，等同于cubic-bezier(0.0,0.0,1.0,1.0)函数。ease-in：渐显效果，等同于cubic-bezier(0.42,0,1.0,1.0)函数。ease-out：渐隐效果，等同于cubic-bezier(0,0,0.58,1.0)函数。ease-in-out：渐显渐隐效果，等同于cubic-bezier(0.42,0,0.58,1.0)函数。step-start：马上转跳到动画结束状态。step-end：保持动画开始状态，直到动画执行时间结束，马上转跳到动画结束状态。steps(&lt;number&gt;[, [ start | end ] ]?)：第一个参数number为指定的间隔数，即把动画分为n步阶段性展示，第二个参数默认为end，设置最后一步的状态，start为结束时的状态，end为开始时的状态，若设置与animation-fill-mode的效果冲突，而以animation-fill-mode的设置为动画结束的状态。cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)：特殊的立方贝塞尔曲线效果。各种效果对比：See the Pen WOBzLm by wuyouzhuguli (@mrbird) on CodePen.animation-delay设置动画延迟执行的时间。默认值0表示立即执行，正数为动画延迟一定时间，负数为截断一定时间内的动画。单位为秒(s)或毫秒(s)。具体实例：See the Pen zzQjOK by wuyouzhuguli (@mrbird) on CodePen.animation-iteration-count指定对象动画循环播放的次数。语法如下：1animation-iteration-count: &lt;number&gt;|infinite;值为number：自定义动画执行次数，设置值可为0或正整数。infinite：无限循环。See the Pen dREeoJ by wuyouzhuguli (@mrbird) on CodePen.animation-direction置对象动画循环播放次数大于1次时，动画是否反向运动。语法如下：1animation-direction: normal | reverse | alternate | alternate-reverse [, normal | reverse | alternate | alternate-reverse ]*;属性可取的值有：normal：正常方向。reverse：动画反向运行,方向始终与normal相反。（FF14.0.1以下不支持）。alternate：动画会循环正反方向交替运动，奇数次（1、3、5……）会正常运动，偶数次（2、4、6……）会反向运动，即所有相关联的值都会反向。alternate-reverse：动画从反向开始，再正反方向交替运动，运动方向始终与alternate定义的相反。（FF14.0.1以下不支持）。各个效果对比：See the Pen QgRrEL by wuyouzhuguli (@mrbird) on CodePen.animation-fill-mode设置对象动画时间之外的状态。语法如下：1animation-fill-mode: none | forwards | backwards | both;属性可取的值有：none：默认值。不设置对象动画之外的状态。forwards：结束后保持动画结束时的状态，但当animation-direction为0，则动画不执行，持续保持动画开始时的状态。backwards：结束后返回动画开始时的状态。both：结束后可遵循forwards和backwards两个规则。See the Pen KqLRap by wuyouzhuguli (@mrbird) on CodePen.animation-play-state设置对象动画的状态，语法如下：1animation-play-state: running | paused其中running为默认值，表示运行动画中；paused表示暂停动画。例如：See the Pen owRdwd by wuyouzhuguli (@mrbird) on CodePen.参考自http://isux.tencent.com/css3]]></content>
      <tags>
        <tag>CSS3</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3 transition]]></title>
    <url>%2Fblog%2FCSS3-transition.html</url>
    <content type="text"><![CDATA[transform呈现的是一种变形结果，而Transation呈现的是一种过渡，通俗点说就是一种动画转换过程，如渐显、渐弱、动画快慢等。transition可以和Transform同时使用。transition是一个复合属性，可以同时定义transition-property、transition-duration、transition-timing-function、transition-delay子属性值。transition-propertytransition-property设置要以动画方式变换的CSS属性。默认值all表示变换所有的属性，如果只针对单个或者多个CSS属性进行变换，就可以用这个属性来进行单独设置。语法如下：1transition-property: all | none | &lt;property&gt;[ ,&lt;property&gt; ]*例如：See the Pen ModvYa by wuyouzhuguli (@mrbird) on CodePen.transition-durationtransition-duration用来定义转换动画的时间长度，即从旧属性换到新属性花费的时间，单位为秒。默认情况下动画过渡时间为0秒。语法如下：1transition-duration:&lt;time&gt;[ ,&lt;time&gt;]*;例如：See the Pen OgYjXq by wuyouzhuguli (@mrbird) on CodePen.transition-delaytransition-delay可以设置动画延迟执行的时间，默认值0表示立即执行，时间可以是正数也可以是负数，负数表示截断规定时间内的动画。单位是秒，也可以是毫秒。语法如下：1transition-delay:&lt;time&gt;[ ,&lt;time&gt;]*;time的取值：0：不延迟，直接执行。正数：按照设置的时间延迟。负数：设置时间前的动画将被截断。See the Pen dREzWK by wuyouzhuguli (@mrbird) on CodePen.transition-timing-functiontransition-timing-function可以设置动画的过渡效果，默认值ease。语法如下：1transition-timing-function: linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;)[ ,linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(&lt;number&gt;, &lt;number&gt;, &lt;number&gt;, &lt;number&gt;) ]* ;属性可取的值如下：ease：缓解效果，等同于cubic-bezier(0.25,0.1,0.25,1.0)函数，既立方贝塞尔。linear：线性效果，等同于cubic-bezier(0.0,0.0,1.0,1.0)函数。ease-in：渐显效果，等同于cubic-bezier(0.42,0,1.0,1.0)函数。ease-out：渐隐效果，等同于cubic-bezier(0,0,0.58,1.0)函数。ease-in-out：渐显渐隐效果，等同于cubic-bezier(0.42,0,0.58,1.0)函数。cubic-bezier：特殊的立方贝塞尔曲线效果。各种效果对比：See the Pen LLojdr by wuyouzhuguli (@mrbird) on CodePen.多个值的运用CSS3里头的动画属性可以对应多个值，也就是说可以对进行动画的不同的属性来设置不一样的值。举个例子说明：See the Pen ZyNXxj by wuyouzhuguli (@mrbird) on CodePen.可以看出第一个元素所有的属性都是在同样的时间内完成了动画，而第二个元素的left,top,background是在不同的时间内完成动画，这就是对变换时间设置了多个值的效果，每个进行动画的属性对应了相应的变换时间。参考自http://isux.tencent.com/css3]]></content>
      <tags>
        <tag>CSS3</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3 transform]]></title>
    <url>%2Fblog%2FCSS3-transform.html</url>
    <content type="text"><![CDATA[transform属性能对元素对象进行变形操作，主要包括以下几种：旋转rotate、缩放scale、移动translate、倾斜skew以及矩阵变形matrix。基本语法：1transform: none | &lt;transform-function&gt;[&lt;transform-function&gt;]*none表示不进行变换；&lt;transform-function&gt;表示一个或多个变换函数，以空格分开，因此可以同时对一个元素进行transform的多种属性操作。包括：rotate(&lt;angle&gt;)：旋转元素。scale(&lt;number&gt;[, &lt;number&gt;])：缩放元素。translate(&lt;translation-value&gt;[, &lt;translation-value&gt;])：移动元素。skew(&lt;angle&gt; [,&lt;angle&gt;])：倾斜元素。matrix(&lt;number&gt;,&lt;number&gt;,&lt;number&gt;,&lt;number&gt;,&lt;number&gt;,&lt;number&gt;)：矩阵变形。perspective(length)：透视。rotate()rotate()函数能够旋转元素，它主要是在二维空间内进行操作，通过一个角度参数值，来设定旋转的幅度。如果对元素本身或者元素设置了perspective值，那么rotate3d()函数可以实现一个3维空间内的旋转。基本语法：1transform:rotate(&lt;angle&gt;);取值如下：rotate(&lt;angle&gt;)：&lt;angle&gt;为一个角度值，单位deg，可以为正数或者负数，正数是顺时针旋转，负数是逆时针旋转。rotateX(angele)：相当于rotate3d(1,0,0,angle)指定在3维空间内的X轴旋转。rotateY(angele)：相当于rotate3d(0,1,0,angle)指定在3维空间内的Y轴旋转。rotateZ(angele)：相当于rotate3d(0,0,1,angle)指定在3维空间内的Z轴旋转。具体示例如下：See the Pen JJqbzj by wuyouzhuguli (@mrbird) on CodePen.关于perspective见下文介绍。scale()scale()函数能够缩放元素。语法如下：1transform:scale(&lt;number&gt;[, &lt;number&gt;]);取值如下：scale(&lt;number&gt;[, &lt;number&gt;])表示使元素在X轴和Y轴同时缩放。&lt;number&gt;表示缩放倍数，可以是正数，负数和小数。负数是先翻转元素然后再缩放，X值为负，绕Y轴旋转；Y值为负，绕X轴旋转。包含两个参数，如果缺少第二个参数，那么第二个参数的值等于第一个参数。scaleX(&lt;number&gt;)表示只在X轴(水平方向)缩放元素。scaleY(&lt;number&gt;)表示只在Y轴(垂直方向)缩放元素。scaleZ(&lt;number&gt;)表示只在Z轴缩放元素。前提是元素本身或者元素的父元素设定了透视值。具体示例如下：See the Pen yXWgLG by wuyouzhuguli (@mrbird) on CodePen.translate()translate()函数能够移动元素。语法如下：1transform:translate(&lt;translation-value&gt;[, &lt;translation-value&gt;]);取值如下：translate(&lt;translation-value&gt;[, &lt;translation-value&gt;])表示使元素在X轴和Y轴同时移动，&lt;translation-value&gt;表示位移量。包含两个参数，如果省略了第二个参数则第二个参数为0；如果参数为负，则表示往相反的方向移动。translateX(&lt;translation-value&gt;)表示只在X轴(水平方向)移动元素。translateY(&lt;translation-value&gt;)表示只在Y轴(垂直方向)移动元素。translateZ(&lt;translation-value&gt;)表示只在Z轴移动元素，前提是元素本身或者元素的父元素设定了透视值。具体示例如下：See the Pen mwYRPw by wuyouzhuguli (@mrbird) on CodePen.skew()skew()函数能够让元素倾斜显示。语法如下：1transform:skew(&lt;angle&gt; [,&lt;angle&gt;]);取值如下：skew(&lt;angle&gt; [, &lt;angle&gt;])包含两个参数值，分别表示X轴和Y轴倾斜的角度，如果第二个参数为空，则默认为0，参数为负表示向相反方向倾斜。skewX(&lt;angle&gt;)表示只在X轴(水平方向)倾斜。skewY(&lt;angle&gt;)表示只在Y轴(垂直方向)倾斜。See the Pen GEarWO by wuyouzhuguli (@mrbird) on CodePen.perspectiveperspective为透视的意思，用于设定查看元素的位置，营造一种3D的空间感，值越大，感觉上离得越远；值越小，感觉是离得越近。这对3D变换的元素来说是必须的属性。写法有两种：单独作为一个属性：div { perspective: 100px}。配合transform：div { transform: perspective(100px) rotateX(60deg) }。对比具有perspective值及没有perspective值的区别：See the Pen webgNR by wuyouzhuguli (@mrbird) on CodePen.对比persepctive值的大小对3D效果的影响：See the Pen vZwgwR by wuyouzhuguli (@mrbird) on CodePen.上面结果印证了：值越大，感觉上离得越远；值越小，感觉是离得越近的结论。transform-origintransform的参照点默认为元素的中心点，如果要改变这个参照点，可以是用transform-origin属性进行自定义。该属性提供2个参数值，第一个用于横坐标，第二个用于纵坐标；如果只提供一个，该值将用于横坐标，纵坐标将默认为50%：percentage：用百分比指定坐标值。可以为负值。length：用长度值指定坐标值。可以为负值。left center right是水平方向取值，而top center bottom是垂直方向的取值。查看设置不同中心点的旋转效果：See the Pen OgYpJd by wuyouzhuguli (@mrbird) on CodePen.backface-visibilitybackface-visibility属性可用于隐藏内容的背面。默认情况下，背面可见，这意味着即使在翻转后，变换的内容仍然可见。但当backface-visibility设置为 hidden 时，旋转后内容将隐藏，因为旋转后正面将不再可见。See the Pen OgYpyq by wuyouzhuguli (@mrbird) on CodePen.transform-style设置内嵌的元素在 3D 空间如何呈现。有两个值：flat：所有子元素在 2D 平面呈现。preserve-3d：保留3D空间。比如：See the Pen ZyNeJL by wuyouzhuguli (@mrbird) on CodePen.参考自http://isux.tencent.com/css3/]]></content>
      <tags>
        <tag>CSS3</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3背景属性]]></title>
    <url>%2Fblog%2FCSS3%E8%83%8C%E6%99%AF%E5%B1%9E%E6%80%A7.html</url>
    <content type="text"><![CDATA[background-sizebackground-size属性用来控制背景图片的大小。参数的值可以是数值也可以是百分数，还可以是cover和contain。如果只有一个参数，此值用来规定背景图片的宽度，这个时候背景图片的高度是按照宽度进行等比例缩放；如果有两个参数，第一个参数用来规定背景图片的宽度，第二个参数用来规定背景图片的高度。数值或百分比例如：See the Pen pwBKrV by wuyouzhuguli (@mrbird) on CodePen.当设置background-size为120%时，尺寸超过容器，图片将会被裁切。cover属性值设置为cover之后，背景图像会等比缩放到完全覆盖容器，背景图像有可能超出容器，不过超出的部分将会被裁切。例如：See the Pen PjgaEp by wuyouzhuguli (@mrbird) on CodePen.containcontain与cover的区别是，contain只挑横向或者纵向任意一个方位将容器填充满：See the Pen yXrEER by wuyouzhuguli (@mrbird) on CodePen.background-originbackground-origin属性用于指定背景图片从什么地方开始绘制，但并不限制绘制区域。默认值为padding-box语法如下：1background-origin:border-box|padding-box|content-boxborder-box此属性值规定背景图片从border区域开始绘制（包括border）。比如：See the Pen gRyKQR by wuyouzhuguli (@mrbird) on CodePen.可以看出背景图片是从边框开始渲染的，包括边框区域。padding-box规定背景图片是从padding开始绘制的，包括padding区域，例如：See the Pen JJVZzd by wuyouzhuguli (@mrbird) on CodePen.可见背景图片是从padding区域开始绘制的。content-box此属性值规定，背景图片是从内容区域开始绘制的，所谓内容区域就是出去border和padding区域，比如：See the Pen WOWyWy by wuyouzhuguli (@mrbird) on CodePen.可见，背景图片是从内容区域开始绘制的。但右下角padding和border区域都有背景图片的显示，因为background-origin属性从名字可以看出，它只规定图片的起源位置，而并不关心图片的结束位置。要限制图片的结束位置，可以使用background-clip属性。background-clipbackground-clip属性规定背景图片在哪些区域可以显示。语法如下：1background-clip:border-box|padding-box|content-box|text|no-clipborder-boxborder-box属性值规定，背景图片可以在边框范围内显示，例如：See the Pen zzXLOY by wuyouzhuguli (@mrbird) on CodePen.可看到，虽然规定背景图可在边框内显示，但左上区域边框下却没有背景图，因为background-origin属性的默认值为padding-box！padding-boxpadding-box属性值规定，背景图片可以在padding范围内显示，不能在border区域显示，例如：See the Pen LLvBYZ by wuyouzhuguli (@mrbird) on CodePen.content-boxcontent-box属性值规定背景图片可以在content区域，也就是除去padding和border的区域内显示，例如：See the Pen XgQBJr by wuyouzhuguli (@mrbird) on CodePen.可以看出，背景图片这个时候只能够在content范围内显示了。text从前景内容的形状（比如文字）作为裁剪区域向外裁剪，也就是说只有前景内容的形状内显示背景图片，例如只有文字内显示背景。比如：See the Pen PjgBqQ by wuyouzhuguli (@mrbird) on CodePen.参考自：http://www.softwhy.com/]]></content>
      <tags>
        <tag>CSS3</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3边框相关属性]]></title>
    <url>%2Fblog%2FCSS3%E8%BE%B9%E6%A1%86%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7.html</url>
    <content type="text"><![CDATA[CSS3标准发布之前，对边框的样式的设定是非常单调的。CSS3标准发布之后，我们可以使用图片来定制边框，可以设置元素的阴影以及选择使用哪种盒子模型等。border-imageborder-image属性可以用图片作为边框样式。border-image属性可以拆分为5个属性：12345border-image-source // 边框图片源border-image-slice // 边框图片切割尺寸border-image-width // 边框图片宽度border-image-outset // 边框图片区域超出元素边框的尺寸border-image-repeat // 边框图片中间部分在元素对应部分的存在方式border-image-source设置边框图片的源，用url()方式规定图片路径，相对和绝对路径都可。语法如下：1border-image-source : none | &lt;url&gt;border-image-sliceborder-image-slice用来规定图片的切割位置。语法如下：1border-image-slice: [ &lt;number&gt; | &lt;percentage&gt;]&#123;1,4&#125;属性值可以为number，也可以是percentage。如果是percentage方式，则是相对于图片的尺寸。比如有如下一个边框图片：每一个小方块的尺寸是27px，那么此图片的长宽尺寸是(27*3)像素。使用如下代码进行切割：1border-image-slice:27px 27px 27px 27px;结果如下图所示：图片被切割后，会被划分为九个区域，这个九个区域会与元素的九个区域是一一对应的。border-image-widthborder-image-width用来规定边框图片宽度，语法如下：1border-image-width : [ &lt;length&gt; | &lt;percentage&gt; | &lt;number&gt; | auto ]&#123;1,4&#125;此属性可以省略，此时边框图片区域与元素的border宽度是一致的。此属性可以有1-4值，取值方式和border-width类似，同时也遵循上右下左方式。border-image-outsetborder-image-outset此属性用来规定边框图片区域超出元素边框的尺寸，语法如下：1border-image-outset : [ &lt;length&gt; | &lt;number&gt; ]&#123;1,4&#125;border-image-repeatborder-image-repeat用来规定，切割后的边框图片中间部分（演示图片中的黄色部分）在元素对应部分的存在方式。语法如下：1border-image-repeat: [ stretch | repeat | round ]&#123;1,2&#125;三种值的含义如下：stretch：图片以延展方式来填充该区域。repeat：图片以重复平铺方式来填充该区域。round：图片以重复平铺方式来填充该区域。如果没有以整数的倍数来填充该区域，图片会进行缩放以便于整数性倍数的平铺填充。一般都是采用round。具体实例示例1：See the Pen border-image-one by wuyouzhuguli (@mrbird) on CodePen.以上代码中，border-image-slice设置为27，由于没有规定border-image-width，那么将以边框的尺寸为标准，又由于没有规定border-image-repeat属性，则默认采用stretch方式，也就是拉伸被切割的中间区域（也即是演示图中的黄色区域）。示例2：See the Pen border-image-two by wuyouzhuguli (@mrbird) on CodePen.边框设置为54px，边框图片将会自适应。示例3：See the Pen border-image-three by wuyouzhuguli (@mrbird) on CodePen.round方式可以自动调整切割后边框图片中间部分（演示图黄色部分）尺寸方式实现重复平铺效果，所以不会出现repeat那样的残缺现象。box-shadowbox-shadow用来设置元素的投影效果。语法如下：1box-shadow:h-shadow v-shadow blur spread color inset;每个参数的具体意义：h-shadow：必需，设置元素阴影水平偏移量，可以为负值，单位是像素。v-shadow：必需，设置元素阴影垂直偏移量，可以为负值，单位是像素。blur：可选，阴影模糊半径，只能够为正值，如果为0，表示不具有模糊效果，单位像素。spread：可选，阴影的扩展半径尺寸，可以为负值，单位是像素。color：可选，设置阴影的颜色；省略此参数，浏览器选取默认颜色，各个浏览器的默认可能不同，有的为透明。inset：可选，可以将外部阴影改为内部阴影。具体实例示例1，只设置水平和垂直的偏移量：See the Pen box-shadow-one by wuyouzhuguli (@mrbird) on CodePen.示例2，新增模糊半径和阴影颜色：See the Pen box-shadow-two by wuyouzhuguli (@mrbird) on CodePen.示例3，设置多个阴影：See the Pen box-shadow-three by wuyouzhuguli (@mrbird) on CodePen.box-sizingbox-sizing属性用于指定元素采用哪种盒子模型。语法如下：1box-sizing ：content-box || border-box || inherit如果属性值是content-box，那么将采用标准盒模型；如果属性值是border-box，那么将采用怪异模式盒模型；如果属性值是inherit，那么将采用继承方式。盒子模型目前安装W3C的标准可以分为两种：标准盒子模型和怪异盒子模型。标准盒子模型，最常见的盒子模型，在这种盒子模型下，元素实际占宽为：width+padding+border+margin；实际占高为：height+padding+border+margin。怪异盒子模型，实际占宽：width+margin；实际占高：height+margin。其中width和height包含content，padding，border。标准盒子模型下元素的width和height构成了元素的内容区域，而这个区域对应着怪异盒子模型下content。具体实例See the Pen box-sizing by wuyouzhuguli (@mrbird) on CodePen.以上代码中，有一个box容器和两个子div，由于精确设定了左右两个子div的宽度，恰好和box容器宽度相同，且采用浮动，所以两个子div可以水平排列。现在给浮动的两个元素添加padding属性值，观察结果：See the Pen box-sizing-two by wuyouzhuguli (@mrbird) on CodePen.由于默认采用标准盒子模型，给元素添加了padding属性后，元素实际占宽度改变了（比如宽度为width+padding+border+margin，因为增加了padding，所以总体的值变大了），并且大于父元素的宽度，所以导致了换行。我们可以采用怪异盒子模型来解决这个问题：See the Pen RgOMaL by wuyouzhuguli (@mrbird) on CodePen.怪异盒子模型下，元素的width没有改变，所以实际占宽没变（width+margin）。而width在怪异盒子模型下的值为：content+padding+border，因为总体的值没变，border不变，padding变大，所以使得content变小。参考自：http://www.softwhy.com/]]></content>
      <tags>
        <tag>CSS3</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BootstrapValidator指南]]></title>
    <url>%2Fblog%2FBootstrapValidator%E6%8C%87%E5%8D%97.html</url>
    <content type="text"><![CDATA[BootstrapValidator是一款基于jQuery的Bootstrap表单校验插件，提供了非常丰富的校验规则。准备工作要使用BootstrapValidator，需要先引入必要的文件：12345&lt;link rel="stylesheet" type="text/css" href="bootstrap/css/bootstrap-3.0.3.min.css"/&gt;&lt;link rel="stylesheet" type="text/css" href="bootstrap/css/bootstrapValidator-0.5.2.min.css"/&gt;&lt;script type="text/javascript" src="js/jquery-1.11.1.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="bootstrap/js/bootstrap-3.0.3.min.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="bootstrap/js/bootstrapValidator-0.5.2.min.js"&gt;&lt;/script&gt;其中需要注意的是jQuery版本必须大于1.9.1。文件下载地址：https://drive.google.com/open?id=1FVhZT899gewytpLVTwD-4x2uR1tSXFkN。需要校验的表单必须由&lt;form&gt;&lt;/form&gt;标签包裹，并且需要验证的字段由&lt;div class=&quot;form-group&quot;&gt;&lt;/div&gt;包裹，并且有name属性。比如：123456&lt;form&gt; &lt;div class="form-group"&gt; &lt;label&gt;labelName&lt;/label&gt; &lt;input type="text" class="form-control" name="fieldName"/&gt; &lt;/div&gt;&lt;/form&gt;绑定校验规则对form元素绑定校验规则：1234567891011121314151617181920212223242526272829303132333435363738$("form").bootstrapValidator(&#123; // 指定不验证的情况 // 值可设置为以下三种类型： // 1、String ':disabled, :hidden, :not(:visible)' // 2、Array 默认值 [':disabled', ':hidden', ':not(:visible)'] // 3、带回调函数 // [':disabled', ':hidden', function($field, validator) &#123; // $field 当前验证字段dom节点 // validator 验证实例对象 // 可以再次自定义不要验证的规则 // 必须要return，return true or false; return !$field.is(':visible'); &#125;] // excluded: [':disabled', ':hidden', ':not(:visible)'], // 生效规则 // enabled:字段值发生变化就触发验证 // disabled/submitted:点击提交时触发验证 live: 'disabled', // 图标 feedbackIcons: &#123; valid: 'glyphicon glyphicon-ok', invalid: 'glyphicon glyphicon-remove', validating: 'glyphicon glyphicon-refresh' &#125;, fields: &#123; field1: &#123; // 字段名 validators: &#123; // ... &#125; &#125;, field2: &#123; validators: &#123; // ... &#125; &#125; &#125;&#125;);下面具体介绍各种校验规则。非空校验非空校验是最常见的一种校验之一，比如对name属性为userName的字段进行非空校验：1234567userName: &#123; // name属性值 validators: &#123; notEmpty: &#123; // 非空校验 message: '用户名不能为空!' &#125; &#125;&#125;,文本长度校验比如对userName的长度进行控制：123456789userName: &#123; validators: &#123; stringLength: &#123; // 长度校验 min: 3, max: 10, message: '用户名长度%s~%s个字符！' &#125; &#125;&#125;,这里userName的长度被限制为3~10个字符（包含3和10）。%s分别表示3和10。正则校验BootstrapValidator支持正则表达式校验，比如：12345678userName: &#123; validators: &#123; regexp: &#123; //正则校验 regexp: /^[a-zA-Z0-9_]+$/, message:'用户名仅支数字，字母和下划线的组合' &#125;, &#125;&#125;,远程校验远程校验使用Ajax异步请求从服务端进行校验，比如校验userName的值是否已经存在。如：1234567891011121314userName: &#123; validators: &#123; remote: &#123; url: "user/confirmUserName.do", message: "用户名已存在", type: "get", data: function()&#123; // 额外的数据，默认为当前校验字段,不需要的话去掉即可 return &#123; "name": $("input[name='userName']").val().trim() &#125;; &#125; &#125; &#125;&#125;,假如userName字段填写的值为123，则参数格式为：userName=123&amp;name=123，所以如果无需额外参数的话，data属性可以略去。服务端：123456789101112@RequestMapping("user/confirmUserName")@ResponseBodypublic Map&lt;String,Boolean&gt; confirmUserName(String name) &#123; Map&lt;String,Boolean&gt; map = new HashMap&lt;String, Boolean&gt;(); map.put("valid", true); // 模拟数据库中已经存在“Mike” if(name.equals("Mike"))&#123; // 设置校验不通过 map.put("valid", false); &#125; return map;&#125;当valid为true的时候，表示Mike用户名可用；当valid为false的时候，表示Mike已被注册。邮箱校验BootstrapValidator提供了邮箱校验的方法，可以不用手动编写邮箱的正则表达式：1234567email: &#123; validators: &#123; emailAddress: &#123; // 可以不用自己写正则 message: '邮箱格式不正确' &#125; &#125;&#125;,对比校验对比校验就是指当前字段的值和别的字段的值相比较，产生校验结果。常用于密码字段，比如有如下form表单：12345678910&lt;form&gt; &lt;div class="form-group"&gt; &lt;label&gt;请输入密码&lt;/label&gt; &lt;input type="text" class="form-control" name="password"/&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;label&gt;请再次输入密码&lt;/label&gt; &lt;input type="text" class="form-control" name="confirmPassword"/&gt; &lt;/div&gt;&lt;/form&gt;常用的校验规则如下：12345678910111213141516171819202122password: &#123; validators: &#123; notEmpty: &#123; message: '请输入密码' &#125;, different: &#123; // 比较是否不同，否的话校验不通过 field: 'userName', // 和userName字段比较 message: '密码不能与用户名相同！' &#125; &#125;&#125;,confirmPassword: &#123; validators: &#123; notEmpty: &#123; message: '请再次确认密码！' &#125;, identical: &#123; // 比较是否相同，否的话校验不通过 field: 'password', // 和password字段比较 message: '两次密码输入不一致' &#125; &#125;&#125;,复选框校验复选框校验用于控制复选框的选中个数：1234567891011121314151617181920212223&lt;div class="form-group"&gt; &lt;label&gt;兴趣爱好&lt;/label&gt; &lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox" name="hobbies" value="swimming" /&gt; 游泳 &lt;/label&gt; &lt;/div&gt; &lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox" name="hobbies" value="fitness" /&gt; 健身 &lt;/label&gt; &lt;/div&gt; &lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox" name="hobbies" value="football" /&gt; 足球 &lt;/label&gt; &lt;/div&gt; &lt;div class="checkbox"&gt; &lt;label&gt; &lt;input type="checkbox" name="hobbies" value="sleep" /&gt; 睡觉 &lt;/label&gt; &lt;/div&gt;&lt;/div&gt;校验规则：123456789hobbies: &#123; validators: &#123; choice: &#123; min: 1, max: 3, message: '请选择1~3项兴趣爱好' &#125; &#125;&#125;,数字范围校验数字范围校验类似与文本长度校验，不过其一般用于数字类型的长度校验，比如限制年龄范围为1~150：123456789age: &#123; validators: &#123; between: &#123; min: 0, max: 150, message: '请输入正常的年龄,范围为%s到%s', &#125; &#125;&#125;,除了使用between外，还可以使用lessThan和greaterThan来实现和between类似的效果：1234567891011121314age: &#123; validators: &#123; lessThan: &#123; value: 150, inclusive: true, // 是否包含150，true为包含 message: '年龄必须小于等于%s' &#125;, greaterThan: &#123; value: 0, inclusive: false, 不包含0 message: '年龄必须大于%s' &#125; &#125;&#125;,文件校验文件校验用于对上传的附件类型，大小等进行限制，常用的规则如下：12345678910files: &#123; validators: &#123; file: &#123; maxSize: 1024*1024, // 文件大小，单位为b，这里为1mb extension: 'jpg,png', // 格式 type: 'image/jpeg,image/png', // 对应的MIME type message: '文件不合法，必须小于1MB，并且格式为jpg或png' &#125; &#125;&#125;,更详细的校验规则如下表所示：选项HTML属性类型描述extensiondata-fv-file-extensionString允许的扩展名，用逗号分隔maxFilesdata-fv-file-maxfilesNumber最大文件数maxSizedata-fv-file-maxsizeNumber最大文件大小（以字节为单位）maxTotalSizedata-fv-file-maxtotalsizeNumber所有文件的最大大小（以字节为单位）minFilesdata-fv-file-minfilesNumber文件的最小数量minSizedata-fv-file-minsizeNumber最小文件大小（以字节为单位）minTotalSizedata-fv-file-mintotalsizeNumber所有文件的最小大小（以字节为单位）messagedata-fv-file-messageString错误消息typedata-fv-file-typeString允许的MIME类型，以逗号分隔。例如：设置image/jpeg,image/png,application/pdf只允许上传JPEG，PNG图像和PDF文档。下表显示了常见的MIME类型。对于其他MIME类型，可以参考https://www.sitepoint.com/mime-types-complete-list/。MIME类型文件扩展名application/msworddocapplication/pdfpdfapplication/rtfrtfapplication/vnd.ms-excelxlsapplication/vnd.ms-powerpointpptapplication/x-rar-compressedrarapplication/x-shockwave-flashswfapplication/zipzipaudio/midimid midi karaudio/mpeg,audio/mp3mp3audio/oggoggaudio/x-m4am4aaudio/x-realaudioraimage/gifgifimage/jpegjpeg jpgimage/pngpngimage/tifftif tiffimage/vnd.wap.wbmpwbmpimage/x-iconicoimage/x-jngjngimage/x-ms-bmpbmpimage/svg+xmlsvg svgzimage/webpwebptext/csscsstext/htmlhtml htm shtmltext/plaintxttext/xmlxmlvideo/3gpp3gpp 3gpvideo/mp4mp4video/mpegmpeg mpgvideo/quicktimemovvideo/webmwebmvideo/x-flvflvvideo/x-m4vm4vvideo/x-ms-wmvwmvvideo/x-msvideoavicallback验证callback用于校验验证码等类型，比如要实现下面这样的效果：HTML代码：1234&lt;div class="form-group"&gt; &lt;label id="question"&gt;&lt;/label&gt; &lt;input type="text" class="form-control" name="answer" /&gt;&lt;/div&gt;生成数学算式：1234function randomNumber(min, max) &#123; return Math.floor(Math.random() * (max - min + 1) + min);&#125;;$('#question').html([randomNumber(1, 100), '+', randomNumber(1, 200), '='].join(' '));校验规则：123456789101112answer: &#123; validators: &#123; callback: &#123; message: "答案不正确！", callback: function(value, validator)&#123; // 验证答案是否正确，value为用户输入的值 var items = $('#question').html().split(' '); var sum = parseInt(items[0]) + parseInt(items[2]); return value == sum; &#125; &#125; &#125;&#125;实际中，可以将上面的校验规则组合在一起，实现更复杂的校验。常用事件手动触发校验手动触发校验包含触发单个字段和触发整个表单：1234// 整个表单$("form").bootstrapValidator('validate');// 单个字段$("form").data('bootstrapValidator').validateField('fieldName');获取当前表单校验结果获取当前表单校验状态，校验通过返回true，否则返回false：1234var bootstrapValidators = $("form").data('bootstrapValidator');if(bootstrapValidators.isValid()) &#123; // todo&#125;重置校验12$('form').data('bootstrapValidator').resetForm(true); // 重置校验$('form')[0].reset();// 表单清空]]></content>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript中的块级作用域]]></title>
    <url>%2Fblog%2FJavaScript%E4%B8%AD%E7%9A%84%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F.html</url>
    <content type="text"><![CDATA[所谓的块级作用域通俗的讲就是使用{}创造一个代码块，然后在这之中声明的变量在代码块之外都是不可访问的。在ES6标准发布之前，JavaScript表面上并没有的块级作用域的概念，但其实际包含一些隐式的块级作用域：函数作用域和try/catch。ES6中新增了let关键字，也可以显式的创造块级作用域。JavaScript中，for循环和if等语句都可以创建“块”，但其并不是块级作用域：123456789101112// for for (var i = 0; i &lt;= 3; i++) &#123; var a = 5;&#125;console.log(i); // 4console.log(a); // 5// ifif (true) &#123; var b = 6;&#125;console.log(b); // 6可见在块里面声明的变量都被泄漏到外部作用域中了。函数作用域函数作用域实际上就是一个块级作用域：1234function foo() &#123; var a = 3;&#125;console.log(a); // ReferenceError: a is not defined在函数外部对a的RHS查询失败，所以抛出ReferenceError异常。try/catchES3 规范中规定try/catch的catch分句会创建一个块作用域，其中声明的变量仅在catch内部有效。123456try &#123; throw 2;&#125; catch (a) &#123; console.log(a); // 2&#125;console.log(a); // ReferenceError: a is not definedletES6引入的let关键字配合{}可以显示地创建块级作用域：12345&#123; let a = 3; console.log(a); // 3&#125;console.log(a); // ReferenceError: a is not definedconst关键字也可以创建块级作用域，只不过const用于声明常量罢了。]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript中的提升]]></title>
    <url>%2Fblog%2FJavaScript%E6%8F%90%E5%8D%87.html</url>
    <content type="text"><![CDATA[对于var a = 3我们一般认为这是一个声明，但实际上JavaScript引擎并不这么认为。它将var a和a = 2当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的最顶端，这个过程被称为提升。 考虑如下代码段：123a = 3;var a;console.log(a);可能你会觉得上述代码将输出undefined，但其实际上它能够如愿的输出3。因为上述代码在经过JavaScript引擎编译之后，变成了这样：123var a;a = 3;console.log(a);这种对变量的声明被拉到其作用域的最顶端的过程就是提升。再如有如下代码段：12console.log(a);var a = 3;上述代码将输出undefined，而非ReferenceError异常，如上所述，在经过JavaScript引擎编译之后，var a被提升到了作用于顶部：123var a;console.log(a);a = 3;所以对a的RHS查询并不会失败，只不过a为undefined罢了。函数的声明也可以被提升，比如：12345foo(); // 3function foo() &#123; var a = 3; console.log(a);&#125;实际上为：12345function foo() &#123; var a = 3; console.log(a);&#125;foo(); // 3函数声明的提升需要注意一点：函数优先原则：函数声明和变量声明都会被提升。但函数声明将先被提升：123456789foo(); // 4var foo = function() &#123; var a = 3; console.log(a);&#125;function foo() &#123; var a = 4; console.log(a);&#125;经过JavaScript引擎编译之后，代码变成：123456789function foo() &#123; var a = 4; console.log(a);&#125;foo();foo = function() &#123; var a = 3; console.log(a);&#125;其中var foo这个重复的声明已经被略去。《你不知道的JavaScript上卷》读书笔记]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript中的IIFE]]></title>
    <url>%2Fblog%2FJavaScript%E4%B8%AD%E7%9A%84IIFE.html</url>
    <content type="text"><![CDATA[IIFE(Immediately Invoked Function Expression)指的是立即执行函数表达式，常见的形式有两种：(function(){ .. })()和(function(){ .. }())。IIFE的存在一般是为了减少命名污染的问题。考虑如下代码：12345function foo() &#123; var a = 3; console.log(a);&#125;foo(); // 3假如函数foo()只执行一次，我们更加关注的是函数所实现的功能而并不在意函数叫什么（因为并不需要在别的地方被调用），这时候建议使用IIFE来代替：1234(function() &#123; var a = 3; console.log(a); // 3&#125;)();或者1234(function()&#123; var a = 3; console.log(a); // 3&#125;());为了提高函数的可读性，你可能会给这个匿名函数表达式加上一个名称，比如：1234(function foo()&#123; var a = 3; console.log(a); // 3&#125;());对IIFE的具名并不会污染其外部的词法作用域，你可以继续在外部声明一个名称为foo的函数，比如：123456789function foo() &#123; var a = 4; console.log(a); &#125;(function foo()&#123; var a = 3; console.log(a); // 3&#125;());foo(); // 4IIFE还被常用于JS模块化设计，比如：123456789101112131415161718192021var modules = (function() &#123; // 私有变量 var msg = "hello world"; var msgArr = ['h', 'e', 'l', 'l', 'o']; function helloWorld() &#123; console.log(msg); &#125; function sayHello() &#123; console.log(msgArr.join('')); &#125; // 暴露方法 return &#123; helloWorld: helloWorld, sayHello: sayHello &#125;&#125;)();modules.helloWorld(); // hello worldmodules.sayHello(); // helloconsole.log(modules.msg); // undefined可见在外部无法访问模块化内部参数，这避免了内部参数被私自篡改以及变量污染等问题。]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3渐变]]></title>
    <url>%2Fblog%2FCSS3%E6%B8%90%E5%8F%98.html</url>
    <content type="text"><![CDATA[在CSS3标准发布之前，网页上的渐变效果一般都是设计师使用图形化设计软件生成图片，然后作为页面背景实现的。在CSS3标准发布之后，我们可以直接编写CSS代码来轻松实现渐变效果。渐变主要包含线性渐变和径向渐变。线性渐变线性渐变（Linear Gradients）包含向下/向上/向左/向右/对角方向的颜色渐变。基本语法：1background: linear-gradient(direction, color-stop1, color-stop2, ...); ​direction为渐变方向，color-stop1为渐变起始颜色，color-stop2为渐变结束颜色。从上到下（默认情况下）默认情况下，线性渐变方向就是从左到右，所以这个时候direction属性可以略去。例如：See the Pen liner-graident by wuyouzhuguli (@mrbird) on CodePen.为了兼容webkit内核浏览器，实际的代码应该为：123456div &#123; height: 200px; width: 200px; background: linear-gradient(#FFFFCC,#FF6666); background: -webkit-gradient(linear,left top, left bottom,from(#FFFFCC),to(#FF6666));&#125;关于CSS3属性兼容性前缀，可以使用sublime text 3的Autoprefixer插件来自动生成。除此之外，还可以指定起止颜色的起始位置，比如下面这个例子：See the Pen linear-gradient(location) by wuyouzhuguli (@mrbird) on CodePen.从渐变方向10%长度开始到渐变方向60%长度之间，颜色从#FFC渐变到#F66。小于10%部分背景颜色完全为#FFC，大于60%部分背景颜色完全为#F66。从左到右从左到右只需将direction属性值设为to right，例如：See the Pen liner-gradient(to right) by wuyouzhuguli (@mrbird) on CodePen.对角方向可以通过指定水平和垂直的起始位置来制作一个对角渐变。例如从左上角到右下角方向渐变：See the Pen liner-gradient(对角) by wuyouzhuguli (@mrbird) on CodePen.使用任意角度如果想要在渐变的方向上做更多的控制，你可以定义一个角度，而不用预定义方向（to bottom、to top、to right、to left、to bottom right，等等）。语法：1background: linear-gradient(angle, color-stop1, color-stop2); ​angle指水平线和渐变线之间的角度，逆时针方向计算。换句话说，0deg将创建一个从下到上的渐变，90deg将创建一个从左到右的渐变。但是，请注意很多浏览器(Chrome,Safari,firefox等)的使用了旧的标准，即 0deg 将创建一个从左到右的渐变，90deg 将创建一个从下到上的渐变。换算公式 90 - x = y 其中 x 为标准角度，y为非标准角度。下面的实例演示了如何在线性渐变上使用角度：See the Pen liner-gradient(use angle) by wuyouzhuguli (@mrbird) on CodePen.使用多个颜色结点除了设置一组起始颜色和结束颜色外，我们还可以设置多组渐变颜色。比如：See the Pen liner-gradient(repeat) by wuyouzhuguli (@mrbird) on CodePen.使用透明度CSS3 渐变也支持透明度（transparency），可用于创建减弱变淡的效果。为了添加透明度，我们使用 rgba() 函数来定义颜色结点。比如：See the Pen liner-gradient(opacity) by wuyouzhuguli (@mrbird) on CodePen.重复的线性渐变repeating-linear-gradient()函数用于重复线性渐变，语法和linear-gradient()相同，例如：See the Pen repeating-linear-gradient by wuyouzhuguli (@mrbird) on CodePen.上面例子中，有一个白色条纹从0到.25em线性渐变，接着一条#FF6颜色条纹从.25em到.75em。（#FF6颜色条纹宽度 = .75em - .25em = .5em = 白色条纹宽度的两倍 ＝ .25em * 2）。径向渐变径向渐变指的是从圆心向外扩散的渐变，为了创建一个径向渐变，必须至少定义两种颜色结点。颜色结点即你想要呈现平稳过渡的颜色。同时，你也可以指定渐变的中心、形状（原型或椭圆形）、大小。默认情况下，渐变的中心是 center（表示在中心点），渐变的形状是 ellipse（表示椭圆形），渐变的大小是 farthest-corner（表示到最远的角落）。颜色结点均匀分布（默认情况下）如下所示：See the Pen radial-gradient by wuyouzhuguli (@mrbird) on CodePen.颜色结点不均匀分布如下所示：See the Pen radial-gradient1 by wuyouzhuguli (@mrbird) on CodePen.重复的径向渐变如下所示：See the Pen repeating-dadial-gradient by wuyouzhuguli (@mrbird) on CodePen.]]></content>
      <tags>
        <tag>CSS3</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[调教Sublime Text 3]]></title>
    <url>%2Fblog%2F%E8%B0%83%E6%95%99sublime-text3.html</url>
    <content type="text"><![CDATA[Sublime Text 3 是一款编辑器软件，自带语法高亮，代码提示，自动补全等让开发者爱不释手的功能。并且启动速度极快，支持自定义主题和安装第三方插件。不过刚下载的Sublime Text不仅图标巨丑，主题还难看，建议对其进行一番调教。调教包括配置主题，安装插件，了解快捷键和配置云同步等。调教之前需要安装Package Control。使用快捷键Ctrl+Shift+P呼出Command Palette，然后输入install Package Control，然后Enter即可安装。官方Package Control市场：https://packagecontrol.io/。安装主题Sublime Text包含很多优秀的第三方主题，不过个人还是比较喜欢Boxy Theme。在Command Palette中输入install，选择Package Control: install Package：点击Enter呼出Package Control后输入Boxy Theme后点击Enter即可安装。控制台提示安装成功后，使用快捷键Ctrl+Shift+P呼出Command Palette，输入boxy，选择Boxy Theme:Activation即可在Boxy Theme自带的几款主题中进行切换：个人比较喜欢Yesterday这款主题：Yesterday相关配置（Preferences→settings）：12345678910111213141516171819202122232425&#123; "color_scheme": "Packages/Boxy Theme/schemes/Boxy Yesterday.tmTheme", "font_size": 11, "ignored_packages": [ "Vintage" ], "theme": "Boxy Yesterday.sublime-theme", // Settings "theme_accent_sky": true, "theme_button_rounded": true, "theme_find_panel_close_hidden": true, "theme_find_panel_size_xs": true, "theme_grid_border_size_lg": true, "theme_icon_button_highlighted": true, "theme_icons_atomized": true, "theme_popup_border_visible": true, "theme_quick_panel_size_md": true, "theme_scrollbar_rounded": true, "theme_sidebar_disclosure": true, "theme_sidebar_indent_top_level_disabled": true, "theme_statusbar_size_md": true, "theme_tab_rounded": true, "theme_tab_selected_prelined": true&#125;还可以安装与该主题配套的Mono File Icons插件，用于美化不同格式文件的图标样式。安装方法同上，不再赘述。效果如下：图标替换可以在Dribbble中搜索Sublime Text，然后下载喜欢的图标。不过大多数素材都是Mac的icns格式的，可以在https://iconverticons.com/online/网站中在线转换为windows中的ico格式。安装插件推荐几款常用的插件：Autoprefixer在编写CSS代码的时候，经常需要为了兼容不同内核的浏览器而在属性前编写-webkit-，-ms-,-moz-等前缀。使用这款插件可以替代我们自动完成这件事。 插件地址https://packagecontrol.io/packages/Autoprefixer。安装方式和主题的安装一致，不再赘述，下面插件将不再描述安装方法。安装完成后，可以配置快捷键（Preferences→key Bindings）：123456[ &#123; "keys": ["alt+shift+p"], "command": "autoprefixer" &#125;]或者直接在Command Palette中输入auto，选择第一项：效果如下：QuoteHTMLQuoteHTML可将HTML片段转换为字符串片段，在操作DOM的时候非常方便，省去了自己手动拼接的时间。比如有如下HTML片段：1234567&lt;select class="form-control" id="typeSel" style="width:260px;padding: 0px 6px;"&gt; &lt;option value="1"&gt;option_1&lt;/option&gt; &lt;option value="2"&gt;option_2&lt;/option&gt; &lt;option value="3"&gt;option_3&lt;/option&gt; &lt;option value="4"&gt;option_4&lt;/option&gt; &lt;option value="5"&gt;option_5&lt;/option&gt;&lt;/select&gt;在Command Palette中输入q：可根据实际需求自由选择，这里选择第二项然后敲击Enter，效果如下：真是极其方便的说！也可以自己设置快捷键。JsFormatJsFormat插件可以将压缩后的JS代码格式化，默认绑定快捷键Ctrl+Alt+F,也可以自己设置快捷键：123456789&#123; "keys": ["ctrl+alt+f"], "command": "js_format", "context": [&#123; "key": "selector", "operator": "equal", "operand": "source.javascript" &#125;]&#125;或者在Command Palette中输入format：值得一提的是，它也可以格式化JSON数据。CSSFormat和JsFormat类似的是，CSSFormat用于格式化压缩后的CSS代码。安装完成后，右键选择CSS Format可看到对应的几个选项，不同选项格式化的样式不一样，可自行体验。也可以在Command Palette中输入format css并按下Enter来格式化CSS代码：HTML-CSS-JS PrettifyHTML-CSS-JS Prettify是一款基于node.js的HTML/CSS/JS 代码美化插件。因为是基于node.js，所以安装前需要配置好node.js环境。安装好后，需要在插件设置里配置本地node.js的安装路径，右键选择HTML/CSS/JS Prettify → Plugin Options - Default：现有如下一段格式混乱的js代码：右键选择HTML/CSS/JS Prettify → Prettify Code：效果如下所示：MinifyMinify是一款可以压缩Js，CSS，HTML，JSON，SVG等格式文件的插件。安装完插件后打开cmd输入下面命令安装：1npm install -g clean-css uglifycss js-beautify html-minifier uglify-js minjson svgo如果你已经安装过其中的一些的话可以用下面命令更新：1npm update -g clean-css uglifycss js-beautify html-minifier uglify-js minjson svgo然后右键中就有Minify的选项了：Color​HelperColorHelper提供CSS颜色预览，提供颜色转换，并允许在调色板中存储和访问喜爱的颜色。安装该插件后，CSS中颜色属性值前会出现一个相应颜色的小方块，如下图所示：点击小方块，可以进行颜色格式的转换，如16进制转RGB,RGBA,HSL和HSLA：也可以在调色板中获取自己喜欢的颜色，并插入：Better Completion相比Sublime Text 3自带的代码补全功能，Better Completion可以提供更好自动补全功能，支持JavaScript，jQuery，Lodash，Underscore，HTML5，CSS3和Bootstrap等。安装完后在Command Palette输入sbc，然后按下Enter键：在弹出的文件中输入如下配置，并且将那些需要开启自动补全功能语言的选项后的false改为true：123456789101112131415161718192021222324252627282930313233343536&#123; // `true` means enable it. // `false` means disable it. "completion_active_list": &#123; // build-in completions "css-properties": true, "gruntjs-plugins": false, "html": true, "lodash": false, "javascript": true, "jquery": true, "jquery-sq": false, // Single Quote "php": false, "phpci": false, "sql": true, "twitter-bootstrap": true, "twitter-bootstrap-less-variables": true, "twitter-bootstrap3": true, "twitter-bootstrap3-sass-variables": false, "underscorejs": false, "react": false, // Your own completions? // ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/sbc-api-my-angularjs.sublime-settings "my-angularjs": false, // ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/sbc-api-my-glossary.sublime-settings "my-glossary": false, // ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/sbc-api-my-html.sublime-settings "my-html": false, // ~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/sbc-api-my-javascript.sublime-settings "my-javascript": false &#125;&#125;jQuery自动补全的效果图如下：ModificModific突出显示行自上次提交以来的更改情况（支持Git，SVN等版本控制工具）。安装完后，如果在版本控制管理目录下修改了文件行，新增的部分以三角标显示，修改的部分以菱形显示，如下图所示：WakaTimeWakaTime插件用于在Dashboard中显示你这周的编程时间，编写代码种类占比等信息。安装完插件后，在Sublime Text编辑器下方会要求您输入密匙并按下Enter即可，密匙获取地址：https://wakatime.com/settings/account#apikey：在编写一段时间后，就可以去https://wakatime.com/dashboard中查看你的编码情况啦：常用快捷键这里只列出了Sublime Text在window中一些比较常用的自带快捷键：12345678910111213141516171819202122232425262728293031323334353637Alt+R : 开启正则表达式功能Alt+Enter: 找到匹配目标后全部选择Ctrl+R：前往 methodCtrl+M：跳转到对应括号按Ctrl+Shift+上下键，可替换行Ctrl+D：选择单词，重复可增加选择下一个相同的单词Ctrl+L：选择行，重复可依次增加选择下一行Ctrl+Shift+P：打开命令面板Ctrl+G：跳转到第几行Ctrl+W：关闭当前打开文件Ctrl+KK：删除当前行光标后的所有内容Ctrl+Shift+W：关闭所有打开文件Ctrl+Shift+V：粘贴并格式化Ctrl+Shift+L：选择多行Ctrl+Shift+Enter：在当前行前插入新行Ctrl+Shift+K：删除当前行Ctrl+U：软撤销，撤销光标位置Ctrl+J：选择标签内容Ctrl+F：查找内容Ctrl+Shift+F：查找并替换Ctrl+H：替换Ctrl+N：新建窗口Ctrl+K+B：开关侧栏Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身Ctrl+F2：设置/删除标记Ctrl+/：注释当前行Ctrl+Shift+/：当前位置插入注释Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的Ctrl+Shift+A：选择当前标签前后，修改标签用的F11：全屏Shift+F11：全屏免打扰模式，只编辑当前文件Alt+F3：选择所有相同的词Alt+.：闭合标签Alt+Shift+数字：分屏显示Alt+数字：切换打开第N个文件Ctrl+shift+D: 备份多个当前行Ctrl+shift+T: 恢复已经关闭的标签在不同设备下同步个人配置可以使用Git同步Packages/User/文件夹（可以在Preferences→Browse Packages…打开）下的内容，此文件夹包含Package Control.sublime-settings文件，其中包含所有已安装软件包的列表。使用Git同步到另一台机器，下次启动Sublime Text时，Package Control 将安装任何丢失的软件包的正确版本。有些插件安装后需要重启Sublime Text才能生效。插件安装多了，可能引起快捷键的冲突，需要引起注意。]]></content>
      <tags>
        <tag>Sublime Text</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git分支管理]]></title>
    <url>%2Fblog%2FGit%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86.html</url>
    <content type="text"><![CDATA[git branch命令不仅仅能创建和删除分支，如果不加任何参数，它会给出当前所有分支的清单：1234$ git branch develop* master test带*表示当前所在分支。使用命令git branch -v则可以查看各个分支最后一个提交对象的信息：1234$ git branch -v develop ef993bc update About.html* master 0986092 [ahead 26] update index.html test 19fffc0 add test file使用命令git branch --merged可以查看哪些分支与当前分支进行了合并操作：123$ git branch --merged develop* master与之相反的命令为git branch --no-merged:12$ git branch --no-merged testtest分支中还包含着尚未合并进来的工作成果，所以简单地用git branch -d删除该分支会提示错误，因为那样做会丢失数据：123$ git branch -d testerror: The branch 'test' is not fully merged.If you are sure you want to delete it, run 'git branch -D test'.Git提示可以用大写的删除选项 -D 强制执行。]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git分支的创建与合并]]></title>
    <url>%2Fblog%2FGit%E5%88%86%E6%94%AF%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6.html</url>
    <content type="text"><![CDATA[假设目前正在开发公司网站，并且使用Git管理项目代码，常见的流程大体如下:1.开发公司网站。2.为了开发某个新功能新建一个分支（假如叫develop），并在该分支上进行开发。3.接到测试组的Bug反馈，返回主分支，新建一个新的分支（bugFix），在该分支上修复Bug，然后与主分支master合并。4.将分支切换回develop，继续开发新功能，结束后和主分支master合并。分支的新建与切换假如公司网站项目已经开发了一段时间，并且使用Git提交了几次更新，提交历史如下图所示： 为了开发新功能，新建分支develop并切换到该分支：1234$ git branch develop$ git checkout developSwitched to branch 'develop'也可以使用命令git checkout -b直接新建并切换：12$ git checkout -b developSwitched to a new branch 'develop'执行上述命令后，仓库历史大致如下所示： Git新建了一个分支指针develop，然后将HEAD指向develop。接下来在该分支上开心的开发新功能，比如新建了公司网站About页面，添加了内容然后提交了此次修改：12345678$ vim About.html$ git add About.html$ git commit -a -m "add About.html page"[develop b462691] add About.html page 1 file changed, 12 insertions(+) create mode 100644 About.html此时，仓库历史如下图所示： 这时候接到测试组公司网站主页index.html的Bug反馈，于是将分支切换回主分支master，然后新建分支bugFix，修复Bug，并提交该修复：1234567891011$ git checkout masterSwitched to branch 'master'$ git checkout -b "bugFix"Switched to a new branch 'bugFix'$ vim index.html$ git commit -a -m "update index.html page"[bugFix 11a3074] update index.html page 1 file changed, 2 insertions(+), 2 deletions(-)此时，仓库历史如下图所示： 假如确定Bug修复后，可以切换回master分支，然后将bugFix和master分支合并：12345$ git merge bugFixUpdating e7ad858..11a3074Fast-forward index.html | 4 ++-- 1 file changed, 2 insertions(+), 2 deletions(-)合并时出现了“Fast forward”的提示。如果顺着一个分支走下去可以到达另一个分支的话，那么Git在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast forward）。此时bugFix分支已经完成了历史使命，可以使用命令git branch -d将其删除：12$ git branch -d bugFixDeleted branch bugFix (was 11a3074).合并master与bugFix，并删除bugFix分支后，仓库历史如下图所示： Bug修复后，切换回develop分支继续开发新的功能，并且提交：12345678$ git checkout developSwitched to branch &apos;develop&apos;$ vim About.html$ git commit -a -m &quot;add copyright&quot;[develop df8d879] add copyright 1 file changed, 1 insertion(+)此时，仓库历史如下图所示： 分支合并和合并master分支与bugFix分支那样，合并master与develop分支过程也差不多：1234567$ git checkout masterSwitched to branch 'master'$ git merge developMerge made by the 'recursive' strategy. About.html | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)由于master指向的C4并不是develop指向C5的直接祖先C2，所以合并方式不是“Fast forward”，Git 会用两个分支的末端（C4 和 C5）以及它们的共同祖先（C2）进行一次简单的三方合并计算。合并master和develop后，仓库历史如下图所示： 解决合并冲突假如在不同分支中都对同一个文件进行了修改，那么合并的时候就会发生冲突。比如在master分支和develop分支上都修改了About.html页面，然后进行分支合并：1234$ git merge developAuto-merging About.htmlCONFLICT (content): Merge conflict in About.htmlAutomatic merge failed; fix conflicts and then commit the result.Git作了合并，但没有提交，它会停下来等你解决冲突。可是使用命令git status查看哪些文件存在冲突：123456789101112$ git statusOn branch masterYou have unmerged paths. (fix conflicts and run "git commit") (use "git merge --abort" to abort the merge)Unmerged paths: (use "git add &lt;file&gt;..." to mark resolution) both modified: About.htmlno changes added to commit (use "git add" and/or "git commit -a")任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出。编辑About.html页面，可看到文件包含类似下面部分的内容：123456&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD &lt;footer&gt;2016~2017 All Rights Reserved&lt;/footer&gt;======= &lt;footer&gt;&amp;copy;2016~2017&lt;/footer&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop可以看到 ======= 隔开的上半部分，是HEAD（即 master 分支，在运行merge命令时所切换到的分支）中的内容，下半部分是在develop分支中的内容。解决冲突的办法无非是二者选其一或者由你亲自整合到一起。1&lt;footer&gt;&amp;copy; 2016~2017 All Rights Reserved&lt;/footer&gt;《pro git》学习笔记]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git撤销操作]]></title>
    <url>%2Fblog%2FGit%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[修改最后一次提交如果提交后发现想要修改提交信息，可以直接使用 git commit --amend 命令，使用该命令后，Git会启动文本编辑器，然后可看到上次提交时的说明，编辑它确认没问题后保存退出，就会使用新的提交说明覆盖刚才的提交信息：1$ git commit --amend如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 --amend 提交：12$ git add forgotten_file$ git commit --amend取消已经暂存的文件123456789$ git statusOn branch masterYour branch is ahead of 'origin/master' by 8 commits. (use "git push" to publish your local commits)Changes to be committed: (use "git reset HEAD &lt;file&gt;..." to unstage) modified: README.config modified: README.md使用命令 git reset HEAD README.config 将README.config移出暂存区：123456789101112131415161718$ git reset HEAD README.configUnstaged changes after reset:M README.config$ git statusOn branch masterYour branch is ahead of 'origin/master' by 8 commits. (use "git push" to publish your local commits)Changes to be committed: (use "git reset HEAD &lt;file&gt;..." to unstage) modified: README.mdChanges not staged for commit: (use "git add &lt;file&gt;..." to update what will be committed) (use "git checkout -- &lt;file&gt;..." to discard changes in working directory) modified: README.config可看到，README.config已经为Changes not staged for commit状态。取消对文件的修改将README.config移出暂存区后，可以进一步使用命令 git checkout -- README.config 取消对README.config的修改。123456789101112131415$ cat README.confighello$ git checkout -- README.config$ git statusOn branch masterYour branch is ahead of 'origin/master' by 8 commits. (use "git push" to publish your local commits)Changes to be committed: (use "git reset HEAD &lt;file&gt;..." to unstage) modified: README.md$ cat README.config《pro git》学习笔记]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git远程仓库]]></title>
    <url>%2Fblog%2FGit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93.html</url>
    <content type="text"><![CDATA[远程仓库是指托管在网络上的项目仓库，可能会有好多个，其中有些你只能读，另外有些可以写。同他人协作开发某个项目时，需要管理这些远程仓库，以便推送或拉取数据，分享各自的工作进展。 管理远程仓库的工作，包括添加远程库，移除废弃的远程库，管理各式远程库分支，定义是否跟踪这些分支，等等。查看当前的远程库使用 git remote 命令，它会列出每个远程库的简短名字。在克隆完某个项目后，至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库：1234567891011$ git clone git://github.com/schacon/ticgit.gitCloning into 'ticgit'...remote: Counting objects: 1857, done.remote: Total 1857 (delta 0), reused 0 (delta 0), pack-reused 1857Receiving objects: 100% (1857/1857), 331.41 KiB | 89.00 KiB/s, done.Resolving deltas: 100% (837/837), done.$ cd ticgit$ git remoteorigin使用 git remote -v 命令可以显示出远程仓库的地址：123$ git remote -vorigin git://github.com/schacon/ticgit.git (fetch)origin git://github.com/schacon/ticgit.git (push)添加远程仓库要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行 git remote add [shortname] [url]：12345$ git remote add paul git://github.com/paulboone/ticgit.git$ git remoteoriginpaul从远程仓库抓取数据1.抓取并但不合并分支，使用命令 git fetch [remote-name] [branch-name]。1234567$ git fetch paul masterremote: Counting objects: 19, done.remote: Total 19 (delta 11), reused 11 (delta 11), pack-reused 8Unpacking objects: 100% (19/19), done.From git://github.com/paulboone/ticgit * branch master -&gt; FETCH_HEAD * [new branch] master -&gt; paul/master2.抓取并且自动合并分支，使用命令 git pull [remote-name] [branch-name]。1234$ git pull origin masterFrom git://github.com/schacon/ticgit * branch master -&gt; FETCH_HEADAlready up-to-date.推送数据到远程仓库使用命令 git push [remote-name] [branch-name] 把本地的 master 分支推送到 origin 服务器上 :1$ git push origin master符合下面两种情况才能成功推送：拥有远程仓库写的权限。在符合1的情况下，如果其他人已经向远程仓库推送了更新，必须先更新抓取到本地，合并到自己的项目中，然后才可以再次推送。查看远程仓库信息123456789101112$ git remote show origin* remote origin Fetch URL: git://github.com/schacon/ticgit.git Push URL: git://github.com/schacon/ticgit.git HEAD branch: master Remote branches: master tracked ticgit tracked Local branch configured for 'git pull': master merges with remote master Local ref configured for 'git push': master pushes to master (up to date)远程仓库的删除和重命名使用 git remote rename 命令修改某个远程仓库在本地的简称，比如想把 paul 改成 paulboone：12345$ git remote rename paul paulboone$ git remoteoriginpaulboone对远程仓库的重命名，也会使对应的分支名称发生变化，原来的 paul/master 分支现在成了 paulboone/master使用命令 git remote rm 删除在本地的远程仓库地址：1234$ git remote rm paulboone$ git remoteorigin《Pro Git》学习笔记]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git版本回退]]></title>
    <url>%2Fblog%2FGit%E7%89%88%E6%9C%AC%E5%9B%9E%E9%80%80.html</url>
    <content type="text"><![CDATA[Git中，每次commit提交都会生成一个历史纪录。使用 git log 查看commit历史：12345678910$ git log --oneline ec88247 modifyed bar.html,foo.txt add new.txt47384c8 modify bar.html in clone again31e1f6f modify foo.txt in original again8747b24 Merge branch 'master' of /home/mrbird/projects/first-project27b76ec modify foo.txt in original796e40d modify bar.html in clone8e1b132 modify foo.txt,add 'hello msg'94418b1 add bar.html,modify foo.txt,delete bar.txtc2e4810 add foo.txt bar.txt每个记录都有一个与之对应的commit id，所以可以使用命令git reset --hard commit_id来回退到相应的版本。除此之卡，在Git中，使用HEAD来代表当前版本，如需回退到前一个版本，可以使用命令git reset --hard HEAD^，前两个版本则用HEAD~2表示，以此类推。当前版本id为ec88247…比如，现要回退到commit_id为47384c8…的版本，可以使用如下命令：12$ git reset --hard 47384c8HEAD is now at 47384c8again modify bar.html in clone或：12$ git reset --hard HEAD^HEAD is now at 47384c8 modify bar.html in clone again再次查看commit历史：123456789$ git log --oneline 47384c8 modify bar.html in clone again31e1f6f modify foo.txt in original again8747b24 Merge branch 'master' of /home/mrbird/projects/first-project27b76ec modify foo.txt in original796e40d modify bar.html in clone8e1b132 modify foo.txt,add 'hello msg'94418b1 add bar.html,modify foo.txt,delete bar.txtc2e4810 add foo.txt bar.txt可发现，commit_id为ec88247…的记录已经不见了，如果要回退到这个版本，又忘记了与之对应的commit_id该怎么办呢。这时候可以使用git reflog命令来查看操作历史：1234$ git reflog47384c8 HEAD@&#123;0&#125;: reset: moving to 47384c8ec88247 HEAD@&#123;1&#125;: reset: moving to ec88247...可看到，回退到commit_id为47384c8…的上一个版本的commit_id为ec88247…，所以，使用如下命令即可回到一开始回退前的版本：12$ git reset --hard ec88247HEAD is now at ec88247 modifyed bar.html,foo.txt add new.txt]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git状态跟踪]]></title>
    <url>%2Fblog%2FGit%E7%8A%B6%E6%80%81%E8%B7%9F%E8%B8%AA.html</url>
    <content type="text"><![CDATA[对于任何一个文件，在 Git 内都只有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。1.已提交：表示该文件已经被安全地保存在版本库中了。2.已修改：表示修改了某个文件，但还没有提交到暂存区。3.已暂存：表示把已修改的文件已经放到暂存区了，下次提交时一并被保存到版本库中。检查当前文件状态要确定哪些文件当前处于什么状态，可以用 git status 命令。1234$ git statusOn branch masterYour branch is up-to-date with 'origin/master'.nothing to commit, working tree clean说明现在的工作目录相当干净，并且当前所在分支为master。在当前目录下创建一个README文件，然后运行 git status 会看到该文件出现在未跟踪文件列表中：123456789$ git statusOn branch masterYour branch is up-to-date with 'origin/master'.Untracked files: (use "git add &lt;file&gt;..." to include in what will be committed) READMEnothing added to commit but untracked files present (use "git add" to track)未跟踪的文件意味着Git在之前的快照（提交）中没有这些文件。跟踪新文件使用命令 git add 开始跟踪文件README：1$ git add README再运行 git status 命令，会看到 README 文件已被跟踪，并处于暂存状态：1234567$ git statusOn branch masterYour branch is up-to-date with 'origin/master'.Changes to be committed: (use "git reset HEAD &lt;file&gt;..." to unstage) new file: README只要在 “Changes to be committed” 这行下面的，就说明是已暂存状态。git add 后面可以指明要跟踪的文件或目录路径。如果是目录的话，就说明要递归跟踪该目录下的所有文件。暂存已修改文件修改已跟踪过的文件 README，然后再次运行 git status 命令：12345678910111213$ git statusOn branch masterYour branch is up-to-date with 'origin/master'.Changes to be committed: (use "git reset HEAD &lt;file&gt;..." to unstage) new file: READMEChanges not staged for commit: (use "git add &lt;file&gt;..." to update what will be committed) (use "git checkout -- &lt;file&gt;..." to discard changes in working directory) modified: READMEREADME文件出现了两次，一次是未暂存，一次是一暂存。如果现在提交的话，那么提交的将是已暂存的README，对README的修改并不会被提交。重新运行 git add 把最新版本README重新暂存起来：12345678$ git add README$ git statusOn branch masterYour branch is up-to-date with 'origin/master'.Changes to be committed: (use "git reset HEAD &lt;file&gt;..." to unstage) new file: README忽略某些文件如日志文件，编译缓存文件等没必要纳入Git管理的文件，我们可以创建一个.gitignore文件来将这些文件排除在外。比如：123$ cat .gitignore*.[oa]*~第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。第二行告诉 Git 忽略所有以波浪符（~）结尾的文件。文件 .gitignore 的格式规范如下：所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。可以使用标准的 glob 模式匹配（glob指shell简化后的正则表达式）。匹配模式最后跟反斜杠（/）说明要忽略的是目录。要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。看一个 .gitignore 文件的例子：12345678910111213# 此为注释 – 将被 Git 忽略# 忽略所有 .a 结尾的文件*.a# 但 lib.a 除外!lib.a# 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO/TODO# 忽略 build/ 目录下的所有文件build/# 会忽略 doc/notes.txt 但不包括 doc/server/arch.txtdoc/*.txt# ignore all .txt files in the doc/ directorydoc/**/*.txt查看已暂存和未暂存的更新再次修改README文件，但不添加到暂存区。现在README已经修改了两次，第一次添加内容“hello git”并且使用 git add 添加到了暂存区。第二次添加内容“hello world”，但并未添加到暂存区。若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff --staged命令：12345678$ git diff --stageddiff --git a/README b/READMEnew file mode 100644index 0000000..8d0e412--- /dev/null+++ b/README@@ -0,0 +1 @@+hello git直接使用 git diff 命令查看已暂存和未暂存文件之间的差异：12345678$ git diffdiff --git a/README b/READMEindex 8d0e412..05fe86c 100644--- a/README+++ b/README@@ -1 +1,2 @@ hello git+hello world可看到，对于README文件来说，未暂存和已暂存文件相比，添加了一行“hello world”。提交更新使用 git commit -m 命令来提交更新：1234$ git commit -m '创建README文件，内容为hello git'[master 1f9882d] 创建README文件，内容为hello git 1 file changed, 1 insertion(+) create mode 100644 README跳过暂存区假如你觉得 git add 过程繁琐，可以使用 git commit -a 命令来跳过添加文件到暂存区的步骤，直接提交。比如，对于README的第二次修改，我们还未将其添加到暂存区，所以第一次使用 git commit 命令只是提交了对README文件的第一次修改：1234567891011$ git statusOn branch masterYour branch is ahead of 'origin/master' by 1 commit. (use "git push" to publish your local commits)Changes not staged for commit: (use "git add &lt;file&gt;..." to update what will be committed) (use "git checkout -- &lt;file&gt;..." to discard changes in working directory) modified: READMEno changes added to commit (use "git add" and/or "git commit -a")使用 git commit -a 命令直接将README文件的第二次修改提交到版本库：123$ git commit -a -m "添加hello world"[master db06721] 添加hello world 1 file changed, 1 insertion(+)移除文件移除文件分为两种情况：从版本库和本地工作目录中移除；仅从版本库移除。1.从版本库和本地工作目录中移除。使用 git rm 命令来移除README:123456$ git rm READMErm 'README'$ git commit -m '删除README'[master 99a0462] 删除README 1 file changed, 3 deletions(-) delete mode 100644 README到本地工作目录下查看，会发现README文件已经不存在了。这里有种情况，假如README文件还在暂存区并未提交，使用 git rm 命令将会出错：1234$ git rm READMEerror: the following file has changes staged in the index: README(use --cached to keep the file, or -f to force removal)Git提示我们使用 git rm -f 命令来删除。12$ git rm -f temp.logrm 'temp.log'2.仅从版本库移除。比如现在不小心将temp.log文件添加并提交到版本库中了：12345$ git add temp.log$ git commit -m "add temp.log"[master fa31ea5] add temp.log 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 temp.log现在想将其从版本库中删除，但并不删除本地文件，而是随后将其添加到.gitignore文件中，可以使用命令git rm --cached：1234567$ git rm --cached temp.logrm 'temp.log'$ git commit -m "delete temp.log"[master e512a82] delete temp.log 1 file changed, 0 insertions(+), 0 deletions(-) delete mode 100644 temp.log移动文件（重命名）git mv 命令用来重命名文件，比如将REAME文件重命名为README.config：123456789$ git mv README README.config$ git statusOn branch masterYour branch is ahead of 'origin/master' by 7 commits. (use "git push" to publish your local commits)Changes to be committed: (use "git reset HEAD &lt;file&gt;..." to unstage) renamed: README -&gt; README.config其过程类似于：123$ mv README README.config$ git rm README$ git add README.config《Pro Git》学习笔记]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[父子页面元素的获取与方法的调用[转]]]></title>
    <url>%2Fblog%2F%E7%88%B6%E5%AD%90%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E7%9A%84%E8%8E%B7%E5%8F%96%E4%B8%8E%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8.html</url>
    <content type="text"><![CDATA[javaScript子页面调用父页面方法：格式：parent.父页面方法实例：parent.pClick(); // pClick 为父页面 js 方法子页面获取父页面元素：格式：window.parent.document.getElementById(“父窗口元素ID”);实例：window.parent.document.getElementById(“pBtnOk”);// pBtnOk为父页面标签 idjQuery父页面获取子页面元素：格式：$(“#iframe的ID”).contents().find(“#iframe中的控件ID”).click();实例：$(“#ifm”).contents().find(“#iBtnOk”).click(); // ifm 为 &lt;iframe&gt; 标签 id; iBtnOk 为子页面按钮 id父页面调用子页面方法：格式：$(“#iframe的ID”)[0].contentWindow.iframe方法();实例：$(“#ifm”)[0].contentWindow().iClick(); // ifm 为 &lt;iframe&gt; 标签 id; iClick为子页面 js 方法子页面获取父页面元素：格式：$(“#父页面元素id” , parent.document);实例：$(“#pBtnOk” , parent.document).click(); // pBtnOk 为父页面标签 id转自http://www.cnblogs.com/it-xcn/p/5896231.html]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3颜色属性]]></title>
    <url>%2Fblog%2FCSS3%E9%A2%9C%E8%89%B2%E5%B1%9E%E6%80%A7.html</url>
    <content type="text"><![CDATA[opacityopacity用来设置元素的透明度。取值范围为0~1，0表示完全透明，1表示不透明。RGBARGBA是在RGB基础上增加了控制alpha透明度的参数。基本语法如下：1rgba(R,G,B,A)参数解析:（1）R(red)：红色值。正整数 | 百分数。（2）G(green)：绿色值。正整数 | 百分数。（3）B(blue)：蓝色值。正整数 | 百分数。（4）A(Alpha)：Alpha透明度，取值0~1之间。R、G、B三个参数的正整数取值是0-255，百分比取值是0.0% - 100.0%。需要特别注意的是，并非所有的浏览器都支持百分数参数值。简单示例如下：See the Pen rgba by wuyouzhuguli (@mrbird) on CodePen.HSL()HSL就是色调(Hue)、饱和度(Saturation)和亮度(Lightness)的缩写。通过三个颜色通道的叠加实现调节颜色的功能。H：0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360。S：取值为：0.0% - 100.0%；0% 意味着灰色，而 100% 是全彩。L：取值为：0.0% - 100.0%；0% 是黑色，100% 是白色。HSLA()HSLA()在HSL()基础上增加了一个透明度效果。currentColor此属性代表当前元素被应用上的color颜色值，也可以说当前元素的文本颜色值。例如：See the Pen currentColor by wuyouzhuguli (@mrbird) on CodePen.参考自蚂蚁部落]]></content>
      <tags>
        <tag>CSS3</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3文本属性]]></title>
    <url>%2Fblog%2FCSS3%E6%96%87%E6%9C%AC%E5%B1%9E%E6%80%A7.html</url>
    <content type="text"><![CDATA[text-shadow该属性用于设置文字阴影效果，基本语法如下：1text-shadow:[颜色 x轴 y轴 模糊半径],[颜色 x轴 y轴 模糊半径]...语法注释:（1）颜色：表示阴影的颜色值。（2）x轴：水平方向的偏移量，单位是像素。（3）y轴：垂直方向的偏移量，单位是像素。（4）模糊半径：阴影的影响范围，不能为负值，值越大越模糊。代码实例：x轴偏移量演示：See the Pen text-shadow by wuyouzhuguli (@mrbird) on CodePen.多层阴影:所谓多层引用，就是给文字施加多个阴影样式即可，之间用逗号分隔。text-stroketext-stroke属性可以设置文字的描边效果。语法如下：1text-stroke：[ text-stroke-width ] || [ text-stroke-color ]语法注释：（1）text-stroke-width：设置元素中文本的描边厚度。（2）text-stroke-color：设置元素中文本的描边颜色。代码实例：See the Pen text-stroke by wuyouzhuguli (@mrbird) on CodePen.text-stroke是一个复合属性，也可以将它们拆开单独设置：See the Pen text-stroke1 by wuyouzhuguli (@mrbird) on CodePen.text-overflow该属性用于控制文本溢出样式，基本语法如下：1text-overflow：clip | ellipsis语法注释：（1）clip：此属性值表示直接裁切，并不显示省略标记(…)。（2）ellipsis：此属性可以设置当文本溢出时将显示省略标记(…)。需要与overflow:hidden和white-space:nowrap配合使用才能够生效。代码实例：See the Pen text-overflow by wuyouzhuguli (@mrbird) on CodePen.text-fill-color设置文字的填充颜色，同时设置text-fill-color和color，text-fill-color将会覆盖color属性。代码实例：使用text-fill-color和text-stroke属性来制造镂空文字效果：See the Pen text-fill-color by wuyouzhuguli (@mrbird) on CodePen.word-wrap该属性提供换行的功能，基本语法：1word-wrap: normal | break-word语法注释：（1）normal：默认值，保持浏览器的默认处理，只在允许的断字点换行，也就是非连续的英文字符数字或者汉字可以进行换行。（2）break-word：此属性值可以实现内容换行，也就是可以实现在边界内换行，不能够超出边界。代码实例：See the Pen word-wrap by wuyouzhuguli (@mrbird) on CodePen.@font-face该属性用于引入网络中的字体，基本语法：123456@font-face &#123; font-family: &lt;YourWebFontName&gt;; src: &lt;source&gt; [&lt;format&gt;][,&lt;source&gt; [&lt;format&gt;]]*; [font-weight: &lt;weight&gt;]; [font-style: &lt;style&gt;];&#125;语法注释：（1）YourWebFontName：必需，自定义字体的名称。（2）source：必需，规定自定义字体的路径，可以是相对路径也可以是绝对路径。（3）format：可选，规定自定义字体的格式，用来帮助浏览器识别，主要类型:truetype(.ttf)，opentype(.otf)，truetype-aat，embedded-opentype(.eot)，svg(.svg)等。（4）font-weight：可选，规定字体是否为粗体。（5）font-style：可选，规定字体的样式，比如斜体。代码实例：12345678@font-face &#123; font-family: 'MyWebFont'; src: url('webfont.eot'); /* IE9 Compat Modes */ src: url('webfont.eot?#iefix') format('embedded-opentype'), /* IE6-IE8 */ url('webfont.woff') format('woff'), /* Modern Browsers */ url('webfont.ttf') format('truetype'), /* Safari, Android, iOS */ url('webfont.svg#svgFontName') format('svg'); /* Legacy iOS */&#125;参考自蚂蚁部落]]></content>
      <tags>
        <tag>CSS3</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leanote博客添加过渡动画]]></title>
    <url>%2Fblog%2FLeanote%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB.html</url>
    <content type="text"><![CDATA[为了提高博客用户体验，我们可以为其添加一些动画效果。这篇博文主要介绍如何添加页面切换动画以及页面加载动画。需要用到的插件：Animsition.js：http://git.blivesta.com/animsition/Loader.css：https://connoratherton.com/loaders页面切换动画首先从https://github.com/blivesta/animsition上下载插件包，解压后在博客主题中引入animsition.css和animsition.js：12&lt;script src="&#123;&#123;$.themeBaseUrl&#125;&#125;/animsition.js"&gt;&lt;/script&gt;&lt;link href="&#123;&#123;$.themeBaseUrl&#125;&#125;/animsition.css" rel="stylesheet"&gt;这里不引入压缩版的原因是为了方便待会修改源码。 然后找到博客主题中的body标签，添加 class=&quot;animsition&quot;：1&lt;body class="animsition"&gt;接着找到博客主题中所有的a标签，添加class=&quot;animsition-link&quot;。 最后调用Animsition动画：123456789101112131415161718192021$(document).ready(function() &#123; $(".animsition").animsition(&#123; inClass: 'fade-in', outClass: 'fade-out', inDuration: 400, outDuration: 400, linkElement: '.animsition-link', loading: true, loadingParentElement: 'html', loadingClass: 'line-scale-pulse-out-rapid', loadingInner: '', timeout: false, timeoutCountdown: 5000, onLoadEvent: true, browser: [ 'animation-duration', '-webkit-animation-duration'], overlay : false, overlayClass : 'animsition-overlay-slide', overlayParentElement : 'html', transition: function(url)&#123; window.location.href = url; &#125; &#125;); &#125;inClass和outClass指定了页面载入和离开时候所展示的动画，这里使用淡入淡出的效果。Animsition提供了许多动画效果，可根据自己的喜好更换。inDuration和outDuration指定了动画的持续时间，单位为毫秒。linkElement指定超链接元素，这里是我们上面添加了class=&quot;animsition-link&quot;的a标签。页面加载动画Loader.css是一个纯CSS加载动画插件。Animsition插件自带的加载动画不太美观，所以使用该插件替换。 首先从https://github.com/ConnorAtherton/loaders.css上下载插件包，解压后打开loaders.css-master/demo/demo.html可看到许多美观的加载动画。选择一个自己喜欢的动画，然后F12查看其HTML源代码，比如：从源码中可知道，这个动画对应的class名称为line-scale-pulse-out-rapid然后修改一开始引入的animsition.js，找到并修改addLoading函数：12345addLoading: function(n) &#123; var html = '&lt;div class="' + n.loadingClass + '"&gt;'; html += '&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;'; t(n.loadingParentElement).append(html);&#125;,这里loadingClass属性名称是在 $(&quot;.animsition&quot;).animsition({})函数中指定的，细心的你可能会发现，我已经在上面的例子中将loadingClass属性值指定为line-scale-pulse-out-rapid了。接下来修改animsition.css，找到和.animsition-loading有关的代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253/* loading option */.animsition-loading,.animsition-loading:after &#123; width: 32px; height: 32px; position: fixed; top: 50%; left: 50%; margin-top: -16px; margin-left: -16px; border-radius: 50%; z-index: 100;&#125; .animsition-loading &#123; background-color: transparent; border-top: 5px solid rgba(0, 0, 0, 0.2); border-right: 5px solid rgba(0, 0, 0, 0.2); border-bottom: 5px solid rgba(0, 0, 0, 0.2); border-left: 5px solid #eee; -webkit-transform: translateZ(0); transform: translateZ(0); -webkit-animation-iteration-count:infinite; animation-iteration-count:infinite; -webkit-animation-timing-function: linear; animation-timing-function: linear; -webkit-animation-duration: .8s; animation-duration: .8s; -webkit-animation-name: animsition-loading; animation-name: animsition-loading;&#125; @-webkit-keyframes animsition-loading &#123; 0% &#123; -webkit-transform: rotate(0deg); transform: rotate(0deg); &#125; 100% &#123; -webkit-transform: rotate(360deg); transform: rotate(360deg); &#125;&#125; @keyframes animsition-loading &#123; 0% &#123; -webkit-transform: rotate(0deg); transform: rotate(0deg); &#125; 100% &#123; -webkit-transform: rotate(360deg); transform: rotate(360deg); &#125;&#125;这段代码是Animsition插件自带的加载动画，将其删除。然后从loaders.css-master/loader.css中找到和.line-scale-pulse-out-rapid有关的CSS代码：12345678910111213141516171819202122232425262728293031323334353637383940@-webkit-keyframes line-scale-pulse-out-rapid &#123; 0% &#123; -webkit-transform: scaley(1); transform: scaley(1); &#125; 80% &#123; -webkit-transform: scaley(0.3); transform: scaley(0.3); &#125; 90% &#123; -webkit-transform: scaley(1); transform: scaley(1); &#125; &#125; @keyframes line-scale-pulse-out-rapid &#123; 0% &#123; -webkit-transform: scaley(1); transform: scaley(1); &#125; 80% &#123; -webkit-transform: scaley(0.3); transform: scaley(0.3); &#125; 90% &#123; -webkit-transform: scaley(1); transform: scaley(1); &#125; &#125; .line-scale-pulse-out-rapid &gt; div &#123; background-color: #fff; width: 4px; height: 35px; border-radius: 2px; margin: 2px; -webkit-animation-fill-mode: both; animation-fill-mode: both; display: inline-block; vertical-align: middle; -webkit-animation: line-scale-pulse-out-rapid 0.9s -0.5s infinite cubic-bezier(0.11, 0.49, 0.38, 0.78); animation: line-scale-pulse-out-rapid 0.9s -0.5s infinite cubic-bezier(0.11, 0.49, 0.38, 0.78); &#125;.line-scale-pulse-out-rapid &gt; div:nth-child(2), .line-scale-pulse-out-rapid &gt; div:nth-child(4) &#123; -webkit-animation-delay: -0.25s !important; animation-delay: -0.25s !important; &#125;.line-scale-pulse-out-rapid &gt; div:nth-child(1), .line-scale-pulse-out-rapid &gt; div:nth-child(5) &#123; -webkit-animation-delay: 0s !important; animation-delay: 0s !important; &#125;将这段代码添加到animsition.css中。这里.line-scale-pulse-out-rapid &gt; div 的背景色是白色的（background-color: #fff），所以我们要将其修改为自己需要的颜色，比如博主将其替换为浅绿色：1234.line-scale-pulse-out-rapid &gt; div &#123; background-color: rgba(66,185,131,.6); ...&#125;最后一步，我们需要修改加载动画模块div的定位方式为固定定位并且居中：12345.line-scale-pulse-out-rapid &#123; position: fixed; top: 50%; left: 50%&#125;将上面的步骤依次做完后，在加载包含较多图片的博客或者网络不佳的情况下，我们可以看到如下的加载动画：Animsition插件还有添加覆盖物overlay功能，博主没有使用这个功能，所以不再介绍，具体可查阅官方API。]]></content>
      <tags>
        <tag>Leanote</tag>
        <tag>theme</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git使用入门]]></title>
    <url>%2Fblog%2FGit%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8.html</url>
    <content type="text"><![CDATA[准备Git环境首先在ubuntu中查看是否安装了Git：123$ gitThe program 'git' is currently not installed. You can install it by typing:sudo apt install gitlinux提示尚未安装Git，并提供了安装的指令：sudo apt install git。第一次使用Git需要设置个人信息，如用户名邮箱等：12$ git config --global user.name "mrbird"$ git config --global user.email "mrbird@leanote.com"创建Git项目首先创建一个projects目录，然后在projects下创建first-project项目，包含foo.txt和bar.txt两个文件：12345678910111213$ mkdir projects$ cd projects/$ mkdir first-project$ cd first-project/$ vi foo.txt$ vi bar.txt$ tree -A projects/projects/└── first-project ├── bar.txt └── foo.txt 1 directory, 2 files创建版本库首先，我们需要在first-project下创建一个Git版本库，用于存储项目本身及其历史。对于一个带有版本库的项目目录，一般称之为工作区。123$ cd first-project/$ git initInitialized empty Git repository in /home/mrbird/projects/first-project/.git/再次使用tree命令就可以看到，在first-project目录下多了个.git隐藏目录，该目录就是Git用于跟踪并管理版本库用的：1234567$ tree -aA projects/projects/└── first-project ├── bar.txt ├── foo.txt └── .git...首次提交接下来，需要将foo.txt和bar.txt添加到版本库中去。在Git中，通常将项目的一个版本称之为一次提交。提交分为两个步骤：使用git add命令来确定下次提交前应该包含的文件；使用git commit命令将这些文件传送到版本库中，并生成散列值以标识这次更新。123456$ git add foo.txt bar.txt $ git commit -m "add foo.txt bar.txt"[master (root-commit) c2e4810] add foo.txt bar.txt 2 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 bar.txt create mode 100644 foo.txt检查状态现在将first-project目录下的bar.txt文件删除，添加bar.html文件，修改foo.txt文件内容。然后使用git status命令查看状态：123456789101112131415$ git statusOn branch masterChanges not staged for commit: (use "git add/rm &lt;file&gt;..." to update what will be committed) (use "git checkout -- &lt;file&gt;..." to discard changes in working directory) deleted: bar.txt modified: foo.txt Untracked files: (use "git add &lt;file&gt;..." to include in what will be committed) bar.html no changes added to commit (use "git add" and/or "git commit -a")因为还没有使用git add命令将bar.html添加到版本库，所以显示为未跟踪状态（Untracked）。 我们也可以使用git diff命令来查看被修改的文件具体修改了啥：1234567$ git diff foo.txtdiff --git a/foo.txt b/foo.txtindex e69de29..3f9a7b1 100644--- a/foo.txt+++ b/foo.txt@@ -0,0 +1 @@+foo file可以看出，foo.txt文件添加了一行内容：foo file。提交修改将上述的修改归档成一次新的提交，即添加foo.txt和新文件bar.html，删除bar.txt：123$ git add foo.txt bar.html $ git rm bar.txt rm 'bar.txt'再次使用git status命令查看当前状态：12345678$ git statusOn branch masterChanges to be committed: (use "git reset HEAD &lt;file&gt;..." to unstage) new file: bar.html deleted: bar.txt modified: foo.txt这时候我们就可以放心的使用git commit来提交这些修改：12345$ git commit -m "add bar.html,modify foo.txt,delete bar.txt"[master 94418b1] add bar.html,modify foo.txt,delete bar.txt 3 files changed, 2 insertions(+) create mode 100644 bar.html delete mode 100644 bar.txt显示历史使用git log命令可以查看所有提交的历史，并按时间顺序倒序排列：123456789101112$ git logcommit 94418b10e64f46bc4f48049037fadcb12efc5d10Author: mrbird &lt;mrbird@leanote.com&gt;Date: Sat May 27 14:09:51 2017 +0800 add bar.html,modify foo.txt,delete bar.txt commit c2e48100c4f2fc8afaed2b1cac90deaf6a7e34ecAuthor: mrbird &lt;mrbird@leanote.com&gt;Date: Sat May 27 11:08:29 2017 +0800 add foo.txt bar.txtGit协作功能假如现在还有另外一位开发者也参与开发first-project这个项目，为了方便实验，现在在projects目录下开辟另外一个工作区first-project-clone，供第二位开发者使用。克隆版本库现使用git clone来克隆first-project，该版本库副本包含了所有原始信息和整个项目的历史信息：123$ git clone projects/first-project/ projects/first-project-cloneCloning into 'projects/first-project-clone'...done.克隆后，观察项目结构：123456789101112$ tree -aA projects/projects/├── first-project│ ├── bar.html│ ├── foo.txt│ └── .git│ ├── ...└── first-project-clone ├── bar.html ├── foo.txt └── .git ├── ...从另一个版本库中获取修改现在，在first-project/foo.txt文件中插入一行信息”hello world,hello git”，并且提交修改：123456$ cd projects/first-project$ vi foo.txt $ git add foo.txt $ git commit -m "modify foo.txt in original"[master 8e1b132] modify foo.txt in original 1 file changed, 1 insertion(+)同时修改克隆版本库first-project-clone中的bar.html，并且提交修改：1234$ git add bar.html$ git commit -m "modify bar.html in clone"[master 796e40d] modify bar.html in clone 1 file changed, 1 insertion(+)现在，新的提交已经被存入到了first-project版本库中，但是其克隆版本库first-project-clone并没有取得这次修改（即foo.txt还是保持原样）。如果克隆版本库也要获取原版本库中的修改，我们可以使用git pull命令来获取：12345678910111213141516$ cd ../first-project-clone/$ cat foo.txt foo file$ git pullremote: Counting objects: 3, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From /home/mrbird/projects/first-project 8e1b132..27b76ec master -&gt; origin/masterMerge made by the 'recursive' strategy. foo.txt | 1 + 1 file changed, 1 insertion(+)$ cat foo.txt foo filehello world,hello git由于在创建克隆版本库的时候，原版本库的路径就已经被存储到克隆版本库中了。所以在克隆版本库中使用git pull命令，不带路径的话，默认就是从原版本库中取回修改。 从结果中可以看出，Git从原版本库中取回了修改，与克隆体中的修改进行了比对，并且合并了这些修改。这个过程称为合并（merge）。在pull过程中，如果发生了冲突，比如两位开发者同时对foo.txt文件进行了修改，Git不会自动去处理这些冲突，必须手动去做修改。在pull取回修改，并且merge合并之后，可以使用git log --graph命令来查看图形化日志：12345678 $ git log --graph --oneline * 8747b24 Merge branch 'master' of /home/mrbird/projects/first-project|\ | * 27b76ec modify foo.txt in original* | 796e40d modify bar.html in clone|/ * 94418b1 add bar.html,modify foo.txt,delete bar.txt* c2e4810 add foo.txt bar.txt从上面可以清晰的看出，分支合并的情况。从任意版本库中取回修改git pull带上仓库路径的话就可以从任意一个版本库中取回修改了，现在在原版本库first-project中取回其克隆版本库first-project-clone对bar.html的修改：1234567891011$ git pull ../first-project-clone/remote: Counting objects: 5, done.remote: Compressing objects: 100% (4/4), done.remote: Total 5 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (5/5), done.From ../first-project-clone * branch HEAD -&gt; FETCH_HEADUpdating 27b76ec..8747b24Fast-forward bar.html | 1 + 1 file changed, 1 insertion(+)创建共享版本库除了使用git pull命令从别的版本库取回修改外，我们还可以使用git push命令将本地修改传送给其他版本库。 不过，git push命令只适用于那些没有开发者在上面具体工作的版本库。通常的做法是创建一个没有工作区的版本库，也称之为裸版本库。裸版本库就是单纯用于存放各个开发这提交（push）的修改，方便别的开发者取回（pull）这些修改。现使用git clone --bare命令来创建裸版本库：123$ git clone --bare first-project first-project-bareCloning into bare repository 'first-project-bare'...done.使用push向裸版本库提交修改再次修改原版本库first-project中的foo.txt文件，并且提交修改：1234$ git add foo.txt $ git commit -m "modify foo.txt in original again"[master 31e1f6f] modify foo.txt in original again 1 file changed, 1 insertion(+), 1 deletion(-)现在使用git push向裸版本库提交这次修改，push需要指定目标版本库路径以及其分支。1234567$ git push ../first-project-bare/ masterCounting objects: 3, done.Compressing objects: 100% (2/2), done.Writing objects: 100% (3/3), 316 bytes | 0 bytes/s, done.Total 3 (delta 0), reused 0 (delta 0)To ../first-project-bare/ 8747b24..31e1f6f master -&gt; master如果另一位开发者在我们之前就已经push了修改，那此次的push操作将会被拒绝，必须先pull回修改，才能push我们的修改。使用pull从裸版本库取回修改123456789101112$ cd ../first-project$ git pull ../first-project-bare/ masterremote: Counting objects: 3, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), done.From ../first-project-bare * branch master -&gt; FETCH_HEADUpdating 8747b24..31e1f6fFast-forward foo.txt | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery中的Deferred和Promise]]></title>
    <url>%2Fblog%2FjQuery%E4%B8%AD%E7%9A%84Deferred%E5%92%8CPromise.html</url>
    <content type="text"><![CDATA[jQuery中的Deferred和Promise有助于我们处理Ajax这样的异步过程，以jQuery中的\$.ajax()为例，当嵌套多个\$.ajax()异步函数时，代码就成了下面这样：12345678910111213141516171819202122$.ajax(&#123; url: "myUrl1.do", success:function()&#123; $.ajax(&#123; url: "myUrl2.do", success:function()&#123; $.ajax(&#123; url: "myUrl3.do", success:function()&#123; $.ajax(&#123; url: "myUrl4.do", success:function(r)&#123; console.log("假如你愿意一层一层剥开我的心...") console.log(r); &#125; &#125;); &#125; &#125;); &#125; &#125;); &#125;&#125;);这种“金字塔”式的代码就是所谓的“回调地狱”。这种风格的代码使得调试变得很困难，使用jQuery中Promise对象可以很好的处理这个问题。使用Promise改写\$.ajax()回调实际上，$.ajax()返回的就是Promise对象，如：12345678910var promise = $.ajax(&#123;url:'myUrl.do'&#125;);promise.done(function()&#123; // 成功时，执行该函数&#125;)promise.fail(function()&#123; // 失败时，执行该函数&#125;)promise.always(function()&#123; // 无论成功或失败，都执行该函数&#125;)我们也可以用then()方法把done()和fail()合并到一起。12345promise.then(function()&#123; // done&#125;, function()&#123; // fail&#125;)第一个参数表示done方法，第二个方法表示fail方法；如果只传递一个参数的话，就表示done方法。所以，现在来改写一下上面的“金字塔”代码：1234567891011var promise1 = $.ajax(&#123;url:"myUrl1.do"&#125;);var promise2 = promise1.then(function()&#123; return $.ajax(&#123;url:"myUrl2.do"&#125;);&#125;);var promise3 = promise2.then(function()&#123; return $.ajax(&#123;url:"myUrl3.do"&#125;);&#125;);var promise4 = promise3.then(function()&#123; return $.ajax(&#123;url:"myUrl4.do"&#125;);&#125;);promise4.then(function(r)&#123;console.log(r);&#125;);是不是好了很多？jQuery中的$.when()当多个Ajax请求都成功的时候，执行某个回调函数，这时候就可以使用$.when()方法。如：123456789$.when( $.ajax(&#123;url:'myUrl1.do'&#125;), $.ajax(&#123;url:'myUrl2.do'&#125;)).done(function(result1, result2)&#123; console.log(result1); console.log(result2);&#125;).fail(function(r)&#123; console.log("error");&#125;)在这个例子中，只有当两个Ajax请求都成功时，才会调用done方法。否则就调用fail方法。$.Deferred()$.Deferred().promise()方法可以返回一个Promise对象。$.Deferred()包含了三种状态：pending：等待状态resolved：成功（解决）状态rejected：失败（拒绝）状态默认的状态为pending，可以使用resolve和reject方法来改变状态：12345var deferred = $.Deferred();console.log(deferred.state()); //pendingdeferred.reject();console.log(deferred.state()); //rejected或者：12345var deferred = $.Deferred();console.log(deferred.state()); //pendingdeferred.resolve();console.log(deferred.state()); //resolved当状态为rejected时，执行fail方法。当状态为resolved时，执行done方法。而always方法无论成功与失败都会执行。例如，下面这个例子三秒后弹出success：See the Pen deferred by wuyouzhuguli (@mrbird) on CodePen.]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery函数attr()和prop()的区别 [转]]]></title>
    <url>%2Fblog%2FjQuery%E5%87%BD%E6%95%B0attr-%E5%92%8Cprop-%E7%9A%84%E5%8C%BA%E5%88%AB-%E8%BD%AC.html</url>
    <content type="text"><![CDATA[在jQuery中，attr()函数和prop()函数都用于设置或获取指定的属性，它们的参数和用法也几乎完全相同。 但不得不说的是，这两个函数的用处却并不相同。下面我们来详细介绍这两个函数之间的区别。操作对象不同很明显，attr和prop分别是单词attribute和property的缩写，并且它们均表示”属性”的意思。不过，在jQuery中，attribute和property却是两个不同的概念。attribute表示HTML文档节点的属性，property表示JS对象的属性。1234567 &lt;!-- 这里的id、class、data_id均是该元素文档节点的attribute --&gt;&lt;div id="message" class="test" data_id="123"&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt;// 这里的name、age、url均是obj的propertyvar obj = &#123; name: "CodePlayer", age: 18, url: "http://www.365mini.com/" &#125;;&lt;/script&gt;在jQuery中，prop()函数的设计目标是用于设置或获取指定DOM元素（指的是JS对象，Element类型）上的属性property；attr()函数的设计目标是用于设置或获取指定DOM元素所对应的文档节点上的属性attribute。12345678&lt;!-- attr()函数针对的是该文档节点的attribute --&gt;&lt;div id="message" class="test" data_id="123"&gt;&lt;/div&gt; &lt;script type="text/javascript"&gt;// prop()函数针对的是该DOM元素(msg)自身的propertyvar msg = document.getElementById("message");var $msg = $(msg);&lt;/script&gt;当然，在jQuery的底层实现中，函数attr()和prop()的功能都是通过JS原生的Element对象（如上述代码中的msg）实现的。attr()函数主要依赖的是Element对象的getAttribute()和setAttribute()两个方法。prop()函数主要依赖的则是JS中原生的对象属性获取和设置方式。1234567891011121314151617181920212223&lt;div id="message" class="test" data_id="123"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;var msg = document.getElementById("message");var $msg = $(msg); /* attr()依赖的是Element对象的element.getAttribute( attribute ) * 和 element.setAttribute( attribute, value ) */ // 相当于 msg.setAttribute("data_id", 145);$msg.attr("data_id", 145);// 相当于 msg.getAttribute("data_id");var dataId = $msg.attr("data_id"); // 145 /* prop()依赖的是JS原生的 element[property] * 和 element[property] = value; */ // 相当于 msg["pid"] = "pid值";$msg.prop("pid", "pid值");// 相当于 msg["pid"];var testProp = $msg.prop("pid"); // pid值&lt;/script&gt;当然，jQuery对这些操作方式进行了封装，使我们操作起来更加方便(比如以对象形式同时设置多个属性)，并且实现了跨浏览器兼容。此外，虽然prop()针对的是DOM元素的property，而不是元素节点的attribute。不过DOM元素某些属性的更改也会影响到元素节点上对应的属性。例如，property的id对应attribute的id，property的className对应attribute的class。12345678910&lt;div id="message" class="test" data_id="123"&gt;&lt;/div&gt;&lt;script type="text/javascript"&gt;var msg = document.getElementById("message");var $msg = $(msg); console.log( $msg.attr("class") ); // test$msg.prop("className", "newTest");// 修改className(property)导致class(attitude)也随之更改console.log( $msg.attr("class") ); // newTest&lt;/script&gt;应用版本不同attr()是jQuery 1.0版本就有的函数，prop()是jQuery 1.6版本新增的函数。毫无疑问，在1.6之前，你只能使用attr()函数；1.6及以后版本，你可以根据实际需要选择对应的函数。用于设置的属性值类型不同由于attr()函数操作的是文档节点的属性，因此设置的属性值只能是字符串类型，如果不是字符串类型，也会调用其toString()方法，将其转为字符串类型。 prop()函数操作的是JS对象的属性，因此设置的属性值可以为包括数组和对象在内的任意类型。123456789101112&lt;input id="uid" type="checkbox" checked="true" value="1"&gt;&lt;script type="text/javascript"&gt;// 当前jQuery版本为1.11.1var uid = document.getElementById("uid");var $uid = $(uid); console.log($uid.attr("checked")); // checkedconsole.log(typeof $uid.attr("checked")); // string console.log($uid.prop("checked")); // trueconsole.log(typeof $uid.prop("checked")); //boolean&lt;/script&gt;其他细节问题在jQuery 1.6之前，只有attr()函数可用，该函数不仅承担了attribute的设置和获取工作，还同时承担了property的设置和获取工作。例如：在jQuery 1.6之前，attr()也可以设置或获取tagName、className、nodeName、nodeType等DOM元素的property。直到jQuery 1.6新增prop()函数，并用来承担property的设置或获取工作之后，attr()才只用来负责attribute的设置和获取工作。此外，对于表单元素的checked、selected、disabled等属性，在jQuery 1.6之前，attr()获取这些属性的返回值为Boolean类型：如果被选中（或禁用）就返回true，否则返回false。但是从1.6开始，使用attr()获取这些属性的返回值为String类型，如果被选中（或禁用）就返回checked、selected或disabled，否则（即元素节点没有该属性）返回undefined。并且，在某些版本中，这些属性值表示文档加载时的初始状态值，即使之后更改了这些元素的选中（或禁用）状态，对应的属性值也不会发生改变。因为jQuery认为：attribute的checked、selected、disabled就是表示该属性初始状态的值，property的checked、selected、disabled才表示该属性实时状态的值（值为true或false）。因此，在jQuery 1.6及以后版本中，请使用prop()函数来设置或获取checked、selected、disabled等属性。对于其它能够用prop()实现的操作，也尽量使用prop()函数。12345678910111213141516171819&lt;input id="uid" type="checkbox" checked="checked" value="1"&gt; &lt;script type="text/javascript"&gt;// 当前jQuery版本为1.11.1var uid = document.getElementById("uid");var $uid = $(uid); console.log( $uid.attr("checked") ); // checkedconsole.log( $uid.prop("checked") ); // true // 取消复选框uid的选中(将其设为false即可)// 相当于 uid.checked = false;$uid.prop("checked", false); // attr()获取的是初始状态的值，即使取消了选中，也不会改变console.log( $uid.attr("checked") ); // checked// prop()获取的值已经发生变化console.log( $uid.prop("checked") ); // false&lt;/script&gt;转自CodePlayer]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vi编辑器的三种模式]]></title>
    <url>%2Fblog%2Fvi%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F.html</url>
    <content type="text"><![CDATA[通常来说，vi编辑器有三种模式，分别是一般指令模式、编辑模式与指令行命令模式。 这三种模式的作用分别是：一般指令模式（command mode）以 vi 打开一个文件就直接进入一般指令模式了（这是默认的模式，也简称为一般模式）。在这个模式中， 你可以使用上下左右按键来移动光标，你可以使用删除字符或删除整行来处理文件内容， 也可以使用复制、黏贴来处理你的文件数据。编辑模式（insert mode）编辑模式可以对内容进行编辑，按下i, I, o, O, a, A, r, R等任何一个字母之后即可进入编辑模式。如果要回到一般指令模式时， 则必须要按下Esc这个按键即可退出编辑模式。命令行模式（command-line mode）在一般模式当中，输入:, /, ? 三个中的任何一个按钮，就可以将光标移动到最底下那一行。在这个模式当中， 可以提供你搜寻资料的动作，而读取、存盘、大量取代字符、离开 vi 、显示行号等等的动作则是在此模式中达成的！ 总之，三者的关系可以用下图来概况：各模式下的快捷键一般指令模式移动光标的方法h 或 向左箭头键(←)光标向左移动一个字符j 或 向下箭头键(↓)光标向下移动一个字符k 或 向上箭头键(↑)光标向上移动一个字符l 或 向右箭头键(→)光标向右移动一个字符hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以 使用 “30j” 或 “30↓” 的组合按键，亦即加上想要进行的次数（数字）后，按下动作即可！[Ctrl] + [f]屏幕向下移动一页，相当于 [Page Down]按键[Ctrl] + [b]屏幕向上移动一页，相当于 [Page Up] 按键&nbsp;[Ctrl] + [d]&nbsp;屏幕向下移动半页[Ctrl] + [u]&nbsp;屏幕向上移动半页n&lt;space&gt;n 表示数字，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个 字符。例如 20 则光标会向后面移动 20 个字符距离。0 或功能键[Home]移动到这一行的最前面字符处$ 或功能键[End]&nbsp;移动到这一行的最后面字符处H &nbsp;&nbsp;光标移动到这个屏幕的最上方那一行的第一个字符M&nbsp;光标移动到这个屏幕的中央那一行的第一个字符L&nbsp;光标移动到这个屏幕的最下方那一行的第一个字符G移动到这个文件的最后一行nGn 为数字。移动到这个文件的第 n 行。例如 20G 则会移动到这个文件的第 20 行gg &nbsp;移动到这个文件的第一行n&lt;Enter&gt;&nbsp;n 为数字。光标向下移动 n 行搜索与替换/word&nbsp;向光标之下寻找一个名称为 word 的字符串?word&nbsp;向光标之上寻找一个字符串名称为 word 的字符串n&nbsp;重复前一个搜寻的动作N&nbsp;与 n 刚好相反，为反向进行前一个搜寻动作。 例如 /word 后，按下 N 则表示 ?word:n1,n2s/word1/word2/gn1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代 为 word2 ， 比如：在 100 到 200 行之间搜寻 null并取代为 NULL&nbsp;则 :100,200s/null/NULL/g:1,$s/word1/word2/g&nbsp;从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2&nbsp;:1,$s/word1/word2/gc&nbsp;从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 。且在取代前显示提示字符 给用户确认 (confirm) 是否需要取代删除，复制与黏贴x, X&nbsp;在一行字当中，x 为向后删除一个字符， X 为向前删除一个字符nx&nbsp;n为数字，连续向后删除 n 个字符dd&nbsp;删除游标所在的那一整行ndd&nbsp;n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行d1G&nbsp;删除光标所在到第一行的所有数据dG删除光标所在到最后一行的所有数据d$&nbsp;删除游标所在处，到该行的最后一个字符d0&nbsp;删除游标所在处，到该行的第一个字符yy&nbsp;复制游标所在的那一行nyy&nbsp;n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行y1G&nbsp;复制光标所在行到第一行的所有数据yG&nbsp;复制光标所在行到最后一行的所有数据y0&nbsp;复制光标所在的那个字符到该行行首的所有数据y$&nbsp;复制光标所在的那个字符到该行行尾的所有数据p, P&nbsp;p 为将已复制的数据黏贴到光标下一行，P 则为黏贴到上一行J&nbsp;将光标所在行与下一行的数据结合成同一行u&nbsp;回退，类似于Ctrl+z[Ctrl]+r&nbsp;前进，类似于Ctrl+y.重复前一个动作。 如果你想要重复删除、重复黏贴等动作，按下小数点.就好了一般指令模式切换到编辑模式的可用的快捷键进入INSERT或REPLACE模式i, I &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;进入插入模式(Insert mode)： i 为从目前光标所在处插入，I 为在目前所在行的第一个非空格符处开始插入a, A&nbsp;进入插入模式(Insert mode)： a 为从目前光标所在的下一个字符处开始插入， A 为从光标所在行的最后一个字符处开始插入o, O&nbsp;进入插入模式(Insert mode)： o 为在目前光标所在的下一行处插入新的一行； O 为在目前光标所在处的上一行插入新的一行r, R&nbsp;进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R 会一直取代光标所在的文字，直到按下 ESC 为止[Esc]&nbsp;退出编辑模式，回到一般指令模式中一般指令模式切换到命令行模式可用的快捷键命令行模式的存储，离开等指令:w &nbsp; &nbsp;&nbsp;将编辑的数据写入硬盘文件中（保存）:w!&nbsp;若文件属性为只读时，强制写入该文件。不过，到底能不能写入，还是跟你对该文件的文件权限有关:q &nbsp;离开 vi:q!&nbsp;若曾修改过文件，又不想储存，使用 ! 为强制离开不储存文件:wq&nbsp;储存后离开，若为 :wq! 则为强制储存后离开ZZ&nbsp;若文件没有更动，则不储存离开，若文件已经被更动过，则储存后离开！:w filename将编辑的数据储存成另一个文件:r filename在编辑的数据中，读入另一个文件的数据。亦即将filename这个文件内容加到游标所在行后面:n1,n2 w filename&nbsp;将 n1 到 n2 的内容储存成 filename 这个文件:! command&nbsp;暂时离开 vi 到指令行模式下执行 command 的显示结果。例如 :! ls /home即可在 vi 当中察看 /home 底下以 ls 输出的文件信息vim 环境的变更:set nu&nbsp;显示行号，设定之后，会在每一行的前缀显示该行的行号:set nonu&nbsp;与:set nu 相反，为取消行号《鸟哥的Linux私房菜》读书笔记]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery效果函数]]></title>
    <url>%2Fblog%2FjQuery%E6%95%88%E6%9E%9C%E5%87%BD%E6%95%B0.html</url>
    <content type="text"><![CDATA[基本show()用于显示所有匹配的元素。此外，你还可以指定元素显示的过渡动画效果。 如果元素本身是可见的，则不对其作任何改变。如果元素是隐藏的，则使其可见。 常用语法：jQueryObject.show( [ duration ] [, easing ] [, complete ] )。参数描述duration可选/String/Number类型指定过渡动画运行多长时间（毫秒数），默认值为400。该参数也可以为字符串”fast”（=200）或”slow”（=600）。easing可选/String类型指定使用何种动画效果，默认为”swing”，还可以设为”linear”或其他自定义的动画样式的函数名称。complete可选/Function类型元素显示完毕后需要执行的函数。函数内的 this指向当前DOM元素。 比如显示p元素，过渡动画为600ms：12$("p").show(600); // 或者 $("p").show("slow"); $("p").show( &#123; duration: 1000 &#125; );显示p元素，过度动画为200ms，动画效果为linear：1$("p").show(600,"linear");显示p元素，并添加回调函数：1$("p").show(function()&#123; alert('显示完毕') &#125;);hide()用于隐藏所有匹配的元素。作用和show()相反，语法一样，这里不再赘述。 例如隐藏p元素，动画速度为fast，并添加回调：1$("p").hide("fast",function()&#123; alert('隐藏完毕') &#125;);滑动slideDown()用于显示所有匹配的元素，并带有向下滑动的过渡动画效果。 向下滑动的动画效果，即元素可见区域的高度从0逐渐增大到其原有高度(向下逐渐展开)。 如果元素本身是可见的，则不对其作任何改变。如果元素是隐藏的，则使其可见。 语法和show()一致，不再赘述。slideUp()效果和slideUp()相反，语法一致，不再赘述。slideToggle()用于切换所有匹配的元素，并带有滑动的过渡动画效果。 所谓”切换”，也就是如果元素当前是可见的，则将其隐藏（向上滑动）；如果元素当前是隐藏的，则使其显示（向下滑动）。 语法和show()一致，不再赘述。 例如，向上或向下滑动下拉框div元素，并添加回调：12345678$("div").slideToggle(function()&#123; var $this = $(this); if($this.is(":visible"))&#123; alert("向下滑动展开"); &#125;else&#123; alert("向上滑动隐藏"); &#125;&#125;);淡入淡出fadeIn()用于显示所有匹配的元素，并带有淡入的过渡动画效果。 淡入的动画效果，即元素的不透明度的比例从0%逐渐增加到100%。 如果元素本身是可见的，则不对其作任何改变。如果元素是隐藏的，则使其可见。 语法和show()一致，不再赘述。fadeOut()用于隐藏所有匹配的元素，并带有淡出的过渡动画效果。效果和fadeIn()相反，语法和show()一致，不再赘述。fadeTo()以渐进的方式把元素从当前透明的过渡到指定的透明度。可以指定过渡时长，目标透明度，回调函数等。 常用语法：fadeTo(duration,opacity [,complete])。 例如，将p元素的透明的调整为.5，时长200ms，并添加回调：123$( "p" ).fadeTo( "slow" , 0.5, function() &#123; // Animation complete.&#125;);fadeToggle()用于切换所有匹配的元素，并带有淡入/淡出的过渡动画效果。 所谓”切换”，即如果元素当前是可见的，则将其隐藏（淡出）；如果元素当前是隐藏的，则使其显示（淡入）。语法和show()一致，不再赘述。自定义animate()用于执行一个基于css属性的自定义动画。 你可以为匹配的元素设置css样式，animate()函数将会执行一个从当前样式到指定的css样式的一个过渡动画。 常用语法：jQueryObject.animate( cssProperties [, duration ] [, easing ] [, complete ] )。参数描述cssPropertiesObject类型一个或多个css属性的键值对所构成的Object对象。duration可选/String/Number类型指定动画运行多长时间（毫秒数），默认值为400。该参数也可以为字符串”fast”（=200）或”slow”（=600）。easing可选/String类型指定使用何种动画效果，默认为”swing”，还可以设为 “linear”或其他自定义的动画样式函数。complete可选/Function类型元素显示完毕后需要执行的函数。函数内的this指向当前DOM元素。大多数非数值的css属性都无法用来执行动画。例如：width、height、left、top都可用于动画，但color、background-color无法用于动画（除非使用jQuery.Color()插件）。除非你为属性值指定了单位（例如：px、em、%），否则默认的数值单位为像素（px）。速写的css属性可能无法获得完整全面的支持，例如：border、margin等，因此不推荐使用。你还可以将css属性值设为一些特定的字符串，例如：”show”、”hide”、”toggle”，则jQuery会调用该属性默认的动画形式。此外，css属性值也可以是相对的，你可以为属性值加上前缀”+=”或”-=”，以便于在原来的属性值上增加或减少指定的数值。例如：{ &quot;height&quot;: &quot;+=100px&quot; }，表示在原有高度的基础上增加100px。例如，给div高度调整为300px，宽度调整为400px，动画时长为slow：1$("div").animate( &#123; width: "400px", height: "300px" &#125;, "slow" );根据div高度切换显示/隐藏，显示时高度从0增加到原高度，隐藏时高度从原高度减小到0：1$("div").animate( &#123; height: "toggle" &#125;);stop()用于停止当前匹配元素上正在运行的动画。比如div绑定了三个animate动画函数：123var $myDiv = $("div");$myDiv.animate( &#123; height: "+=300px" &#125;, 2000 ); // 动画1$myDiv.animate( &#123; width: "50%" &#125;, 1000 ); // 动画2假设当前div元素正在执行第一个动画，此时执行以下stop()函数时，效果为：1234$myDiv.stop( ); // 马上停止动画1，继续按顺序执行动画2和动画3$myDiv.stop( true ); // 马上停止动画1，并且不再执行动画2和动画3$myDiv.stop( "fx", true ); // 效果和$myDiv.stop( true );一样$myDiv.stop( true, true ); // 立刻马上执行完动画1，并不再执行动画2和动画3delay()用于延迟队列中下一项的执行。delay()可以将队列中等待执行的下一个动画延迟指定的时间后才执行。它常用在队列中的两个jQuery效果函数之间，从而在上一个动画效果执行后延迟下一个动画效果的执行时间。 如果下一项不是效果动画（比如show()就不是效果动画），则它不会被加入效果队列中，因此该函数不会对它进行延迟调用。 比如：123var $myDiv = $("div");$myDiv.slideUp( 1000 ).delay( 5000 ).slideDown( 1500 );//先执行slideUp()，然后等待5s，在执行slideDown()finish()停止当前正在运行的动画，删除所有队列中的动画，直接显示最终动画执行完毕的效果。比如div绑定了三个animate动画函数：1234var $myDiv = $("div");$myDiv.animate( &#123; height: "+=300px" &#125;, 2000 ); // 动画1$myDiv.animate( &#123; width: "50%" &#125;, 1000 ); // 动画2$myDiv.animate( &#123; width: "200px", height: "100px" &#125;, 1000 ); // 动画3假设当前div元素正在执行第一个动画，此时执行finish()函数时，立刻停止当前动画，并且div直接变为最终状态（width: &quot;200px&quot;, height: &quot;100px&quot;）。设置jQuery.fx.interval用于设置jQuery动画每隔多少毫秒绘制一帧图像，该值越小，则动画的触发次数越多，动画效果也更明显、更平滑，当然也就越耗费性能，默认值为13。设置帧数为5：1$.fx.interval = 5;jQuery.fx.off关闭页面上所有的动画。把这个属性设置为true可以立即关闭所有动画（所有效果会立即执行完毕）。 有些情况下可能需要这样，比如你在配置比较低的电脑上使用jQuery。当把这个属性设成false之后，可以重新开启所有动画。 禁用动画效果：1$.fx.off = true; // 禁用动画效果参考网站：http://www.365mini.com/http://caibaojian.com/jquery/]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery工具函数]]></title>
    <url>%2Fblog%2FjQuery%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0.html</url>
    <content type="text"><![CDATA[数组和对象操作$.each()用于遍历对象或数组：jQuery.each(array,callback)或jQuery.each(object,callback)。 例如，遍历数组：123$.each([ 27, 41 ], function( index, value ) &#123; console.log( index + ": " + value );&#125;);遍历对象：1234567var obj = &#123; "name": "mrbird", "age": "24"&#125;;$.each( obj, function( key, value ) &#123; console.log( key + ": " + value );&#125;)$.extend()将一个或多个对象的内容合并到第一个对象中。有两种构造函数：jQuery.extend( target [, object1 ] [, objectN... ] )和jQuery.extend( [ deep ], target , object1 [, objectN... ] )。如果多个对象具有相同的属性，则后者会覆盖前者的属性值。参数描述deep可选Boolean类型 指示是否深度合并对象，默认为false，不能明写false。如果该值为true，且多个对象的某个同名属性也都是对象，则该”属性对象”的属性也将进行合并。targetObject类型目标对象，其他对象的成员属性将被复制到该对象上。object1可选/Object类型第一个被合并的对象。objectN可选/Object类型第N个被合并的对象。例如，合并两个对象，修改第一个对象：123456789101112var object1 = &#123; apple: 0, banana: &#123; weight: 52, price: 100 &#125;, cherry: 97&#125;;var object2 = &#123; banana: &#123; price: 200 &#125;, durian: 100&#125;;$.extend( object1, object2 );console.log(JSON.stringify( object1 )); // &#123;"apple":0,"banana":&#123;"price":200&#125;,"cherry":97,"durian":100&#125;递归合并两个对象，修改第一个对象：12$.extend( true, object1, object2 );// &#123;"apple":0,"banana":&#123;"weight":52,"price":200&#125;,"cherry":97,"durian":100&#125;$.grep()函数用于使用指定的函数过滤数组中的元素，并返回过滤后的数组。 源数组不会受到影响，过滤结果只反映在返回的结果数组中。语法如下：1jQuery.grep( array, function [, invert ] )参数描述arrayArray类型 将被过滤的数组。functionFunction类型 指定的过滤函数。invert可选/Boolean类型 默认值为 false 。指定是否反转过滤结果。例如：12345678$.grep( [ 0, 1, 2 ], function( n, i ) &#123; return n &gt; 0;&#125;);// [1, 2]$.grep( [ 0, 1, 2 ], function( n, i ) &#123; return n &gt; 0;&#125;,true);// [0]$.makeArray()将一个类数组对象转换为真正的数组对象。例如：1234var obj = &#123; 0: "mrbird", 1: "blog", 2: true &#125;;console.log(obj instanceof Array); // falsevar arr = $.makeArray(obj);console.log(arr instanceof Array); // true$.map()用于处理数组中的每个元素(或对象的每个属性)，并将处理结果封装为新的数组返回。例如：将数组中的每个值+4，并返回：1234var arr = $.map( [ 0, 1, 2 ], function( n ) &#123; return n + 4;&#125;);console.log(arr); // [4, 5, 6]数组中大于0的值+1，小于0的删除：1234var arr = $.map( [ -3, 0, 1, 5 ], function( n ) &#123; return n &gt; 0 ? n + 1 : null;&#125;);console.log(arr); // [2, 6]将原始数组映射到新的数组，每个元素都加上其原始值和值加1：1234var arr = $.map( [ 0, 1, 2 ], function( n ) &#123; return [ n, n + 1 ];&#125;);console.log(arr); // [ 0, 1, 1, 2, 2, 3 ]将对象的键映射到数组：12345var obj = &#123; width: 10, height: 15, length: 20 &#125;;var keys = $.map( obj, function( value, key ) &#123; return key;&#125;);console.log(obj); // [ "width", "height", "length" ]$.inArray()用于在数组中搜索指定的值，并返回其索引值。如果数组中不存在该值，则返回 -1。1234var arr = [ 4, "Pete", 8, "John" ];console.log($.inArray( "John", arr )); // 3console.log($.inArray( 4, arr )); // 0console.log($.inArray( "mrbird", arr )); // -1$merge()将两个数组的内容合并到第一个数组中。例如：12var arr = $.merge( [ 0, 1, 2 ], [ 2, 3, 4 ] )console.log(arr); // [0, 1, 2, 2, 3, 4]函数操作$.noop()函数为一个空函数，什么也不做。其源码为：1noop: function() &#123;&#125;$.proxy()用于改变函数的上下文。你可以将指定函数传入该函数，该函数将返回一个新的函数，其执行代码不变，但函数内部的上下文this已经被更改为指定值。 例如：12345678function test()&#123; console.log(this); &#125;test(); // Window var object = &#123; name : "mrbird", age : 100 &#125;var proxy = $.proxy(test,object);proxy(); // Object测试操作$.contains()用于判断指定元素内是否包含另一个元素。 简而言之，该函数用于判断另一个DOM元素是否是指定DOM元素的后代。jQuery.contains()仅用于比较两个DOM元素，不能用于比较nodeList或者jQuery对象。例如：123456&lt;div id="n1"&gt; &lt;p id="n2"&gt; &lt;span id="n3"&gt;leanote&lt;/span&gt; &lt;/p&gt;&lt;/div&gt;&lt;p id="n4"&gt;mrbird's blog&lt;/p&gt;12345678var $n1 = $("#n1")[0];var $n2 = $("#n2")[0];var $n3 = $("#n3")[0];var $n4 = $("#n4")[0]; console.log( $.contains( $n1, $n2 ) ); // trueconsole.log( $.contains( $n1, $n3 ) ); // trueconsole.log( $.contains( $n1, $n4 ) ); // false$.type()用于确定JavaScript内置对象的类型，并返回小写形式的类型名称。JavaScript也自带有一个typeof运算符，可以确定数据的类型。不过对于绝大多数对象而言，typeof运算符都返回Object，无法区分具体的类型。$.type()可以更加精确地确定JS内置对象的类型。123456789101112131415161718192021console.log( $.type( undefined ) ); // undefinedconsole.log( $.type( null ) ); // nullconsole.log( $.type( true ) ); // booleanconsole.log( $.type( new Boolean(false) ) ); // booleanconsole.log( $.type( 3 ) ); // numberconsole.log( $.type( new Number(3) ) ); // numberconsole.log( $.type( "test" ) ); // stringconsole.log( $.type( new String("test") ) ); // stringconsole.log( $.type( function()&#123;&#125; ) ); // functionconsole.log( $.type( new Function() ) ); // functionconsole.log( $.type( [] ) ); // arrayconsole.log( $.type( new Array() ) ); // arrayconsole.log( $.type( new Date() ) ); // dateconsole.log( $.type( new Error() ) ); // errorconsole.log( $.type( /test/ ) ); // regexpconsole.log( $.type( new RegExp("\\d+") ) ); // regexp /* 除上述类型的对象外，其他对象一律返回"object" */console.log( $.type( &#123;&#125; ) ); // objectfunction User() &#123; &#125;console.log( $.type( new User() ) ); // object$.isArray()用于判断指定参数是否是一个数组。$.isFunction()用于判断指定参数是否是一个函数。$.isEmptyObject()用于判断指定参数是否是一个空对象。123console.log( $.isEmptyObject( &#123; &#125; ) ); // trueconsole.log( $.isEmptyObject( new Object() ) ); // trueconsole.log( $.isEmptyObject( new Function() ) ); // true$.isPlainObject()用于判断指定参数是否是一个纯粹的对象。 所谓“纯粹的对象”，就是该对象是通过{}或new Object创建的。123456console.log( $.isPlainObject( &#123; &#125; ) ); // trueconsole.log( $.isPlainObject( new Object() ) ); // trueconsole.log( $.isPlainObject( &#123; name: "CodePlayer"&#125; ) ); // trueconsole.log( $.isPlainObject( &#123; sayHi: function()&#123;&#125; &#125; ) ); // true console.log( $.isPlainObject( new Function() ) ); // false$.isWindow()判断当前对象是否为浏览器内置的Window对象。12console.log( $.isWindow( this ) ); // trueconsole.log( $.isWindow( window ) ); // true$.isNumeric()用于判断指定参数是否是一个数字值。字符串操作$.trim()该函数可以去除字符串开始和末尾两端的空白字符(直到遇到第一个非空白字符串为止)。它会清除包括换行符、空格、制表符等常见的空白字符。如果参数str不是字符串类型，该函数将自动将其转为字符串（一般调用其toString()方法）。如果参数str为null或undefined，则返回空字符串。URL$.param()用于将一个JS数组或纯粹的对象序列化为字符串值，以便用于URL查询字符串或AJAX请求。如果传入的不是数组或“纯粹的对象”，则返回空字符串；如果传入的是null、undefined等无法访问属性的值，则直接报错。所谓“纯粹的对象”，就是通过{}或new Object()自行创建的对象。JS内置的Boolean、Number、String、Date、RegExp、Function、Window等类型的对象都不算是“纯粹的对象”。返回的字符串已经过URL编码处理（采用的字符集为UTF-8）。看一些例子：123// 字符串将被看作一个字符数组console.log( $.param( "mrbird" )); // 0=m&amp;1=r&amp;2=b&amp;3=i&amp;4=r&amp;5=dconsole.log( $.param( &#123; name:"mrbird", job:"Coder" &#125; )); // name=mrbird&amp;job=Coder如果参数是一个数组Array，那么它的每个元素都必须是一个包含name属性和value属性的对象，其他属性不会被处理（value属性可以没有，默认其值为undefined，将被转换为空字符串）。例如：123456var array = [ &#123; name: "name", value: "mrbird" &#125;, &#123; name: "age", value: 100, extra: "ignore" &#125;, &#123; name: "grade" &#125;];console.log( $.param( array )); // name=mrbird&amp;age=100&amp;grade=编写插件$.error()用于为每个匹配元素的error事件绑定处理函数。例如图片加载失败时，弹出框提醒：123$("img").error( function()&#123; alert( "图片加载失败!" );&#125; );我们还可以为事件处理函数传递一些附加的数据，并用Event对象获取：123456var newImageURL = "../img/test.png"; $("img").error( newImageURL, function(event)&#123; this.src = event.data; console.log(event.data); // ../img/test.png&#125; );$.fn.jquery用于返回当前jQuery库的版本号。1console.log($.fn.jquery); // 1.11.1或者使用任意jQuery对象的jquery属性访问：1console.log($("body").jquery); // 1.11.1参考网站：http://www.365mini.com/http://jquery.com/http://caibaojian.com/jquery/]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leanote博客主题Summer]]></title>
    <url>%2Fblog%2FLeanote%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98Summer.html</url>
    <content type="text"><![CDATA[夏天到了，所以主题名字就叫Summer吧。主题参考自https://cn.vuejs.org/v2/api/。emoji作者ColinXu。由于每个人单页的迥异，所以我把自定义的单页去掉了。单页样式自定义可以参考下面的思路：123456&#123;&#123;if eq $.single.Title "Friends"&#125;&#125; &#123;&#123;template "friends.html" $&#125;&#125;&#123;&#123;end&#125;&#125;&#123;&#123;if eq $.single.Title "Music"&#125;&#125; &#123;&#123;template "music.html" $&#125;&#125;&#123;&#123;end&#125;&#125;关于警告框，在笔记编辑器里选中文字加下划线就可以了。主题已上架主题市场，有什么问题欢迎留言。最新地址：github]]></content>
      <tags>
        <tag>Leanote</tag>
        <tag>theme</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery筛选操作]]></title>
    <url>%2Fblog%2FjQuery%E7%AD%9B%E9%80%89%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[jQuery提供了一系列的筛选函数来对jQuery选择器选择的结果进行筛选。筛选函数大致可分为三个类别：过滤，查找和串联。过滤eq(index)获取第N个元素。index为元素位置，为正数时表示从第一个元素开始，从0算起；为负数时表示从最后一个元素开始，从-1开始。例如，获取匹配的第二个元素：12&lt;p&gt; This is just a test.&lt;/p&gt;&lt;p&gt; So is this&lt;/p&gt;1$("p").eq(1); // &lt;p&gt; So is this&lt;/p&gt; ​获取倒数第二个元素：1$("p").eq(-2); //&lt;p&gt; This is just a test.&lt;/p&gt;first()获取第一个元素。例如，获取ul的第一个li：1234567&lt;ul&gt; &lt;li&gt;list item 1&lt;/li&gt; &lt;li&gt;list item 2&lt;/li&gt; &lt;li&gt;list item 3&lt;/li&gt; &lt;li&gt;list item 4&lt;/li&gt; &lt;li&gt;list item 5&lt;/li&gt;&lt;/ul&gt;1$('ul&gt;li').first(); // &lt;li&gt;list item 1&lt;/li&gt;last()和first()相反，获取最后一个元素。hasClass(class)hasClass()方法检查被选元素是否包含指定的class。例如，判断选中元素是否含有happy类：1&lt;div class="happy"&gt;&lt;/div&gt;1var a = $("div").hasClass("happy"); //truefilter(selector,[fn])filter()方法将匹配元素集合缩减为匹配指定选择器的元素。selector：字符串值，包含供匹配当前元素集合的选择器表达式。fn：回调函数，可选。例如，保留带有select类的元素：123&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;Hello Again&lt;/p&gt;&lt;p class="selected"&gt;And Again&lt;/p&gt;1$("p").filter(".selected"); //&lt;p class="selected"&gt;And Again&lt;/p&gt;使用回调函数实现：123$("p").filter(function(index)&#123; return $(this).hasClass('selected'); &#125;);this指当前遍历的元素，返回true的元素将被保留。保留第一个或带有select类的元素：1$("p").filter(".selected,:first"); // &lt;p&gt;Hello&lt;/p&gt;, &lt;p class="selected"&gt;And Again&lt;/p&gt;is(selector,[fn])is()根据选择器、元素或 jQuery 对象来检测匹配元素集合，如果这些元素中至少有一个元素匹配给定的参数，则返回 true。fn：回调函数，可选。例如，判断input的父元素是否为form：123&lt;form&gt; &lt;input type="checkbox" /&gt;&lt;/form&gt;1$("input[type='checkbox']").parent().is("form") //true使用回调函数实现：123$("input[type='checkbox']").parent().is(function()&#123; return $(this)[0].nodeName == 'FORM'; &#125;);map(callback(index,domElement))map()把每个元素通过函数传递到当前匹配集合中，生成包含返回值的新的 jQuery 对象。例如，有如下表单，要获取以逗号分隔的复选框列表ID：1234567891011121314151617181920&lt;form method="post" action=""&gt; &lt;fieldset&gt; &lt;div&gt; &lt;label for="two"&gt;2&lt;/label&gt; &lt;input type="checkbox" value="2" id="two" name="number[]"&gt; &lt;/div&gt; &lt;div&gt; &lt;label for="four"&gt;4&lt;/label&gt; &lt;input type="checkbox" value="4" id="four" name="number[]"&gt; &lt;/div&gt; &lt;div&gt; &lt;label for="six"&gt;6&lt;/label&gt; &lt;input type="checkbox" value="6" id="six" name="number[]"&gt; &lt;/div&gt; &lt;div&gt; &lt;label for="eight"&gt;8&lt;/label&gt; &lt;input type="checkbox" value="8" id="eight" name="number[]"&gt; &lt;/div&gt; &lt;/fieldset&gt;&lt;/form&gt;123$(':checkbox').map(function() &#123; return this.id;&#125;).get().join(','); //"two,four,six,eight"has(selector)has()将匹配元素集合缩减为拥有匹配指定选择器或 DOM 元素的后代的子集。例如，有如下嵌套的列表：1234567891011&lt;ul&gt; &lt;li&gt;list item 1&lt;/li&gt; &lt;li&gt;list item 2 &lt;ul&gt; &lt;li&gt;list item 2-a&lt;/li&gt; &lt;li&gt;list item 2-b&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;list item 3&lt;/li&gt; &lt;li&gt;list item 4&lt;/li&gt;&lt;/ul&gt;现在给包含ul的li添加红色背景色：1$( "li" ).has( "ul" ).css( "background-color", "red" );not()not()从匹配元素集合中删除元素。例如有如下列表：1234567&lt;ul&gt; &lt;li&gt;list item 1&lt;/li&gt; &lt;li&gt;list item 2&lt;/li&gt; &lt;li id="notli"&gt;list item 3&lt;/li&gt; &lt;li&gt;list item 4&lt;/li&gt; &lt;li&gt;list item 5&lt;/li&gt;&lt;/ul&gt;给除了list item 3外的li添加红色背景色：1$( "li" ).not("#notli").css( "background-color", "red" );slice(selector,end) ​slice()把匹配元素集合缩减为指定的指数范围的子集。参数描述selector基于 0 的整数值，指示开始选取元素的位置；如果是负数，则指示从集合末端开始的偏移量。end基于 0 的整数值，指示结束选取元素的位置；如果是负数，则指示从集合末端开始的偏移量。 如果省略，则选取范围会在集合末端结束。例如，给第一第二个p元素加粗：123456&lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;p&gt;This is a paragraph.&lt;/p&gt;1$("p").slice(0, 2).wrapInner("&lt;b&gt;&lt;/b&gt;");给倒数第二个p元素加粗：1$("p").slice(-2, -1).wrapInner("&lt;b&gt;&lt;/b&gt;");给第三个及其以后的p元素加粗：1$("p").slice(2).wrapInner("&lt;b&gt;&lt;/b&gt;");查找children()返回匹配元素集合中每个元素的子元素，添加可选参数可通过选择器进行过滤。例如：找到div的所有包含selected类的子元素，然后将其置为蓝色：123456&lt;div&gt; &lt;span&gt;Hello&lt;/span&gt; &lt;p class="selected"&gt;Hello Again&lt;/p&gt; &lt;div class="selected"&gt;And Again&lt;/div&gt; &lt;p&gt;And One Last Time&lt;/p&gt;&lt;/div&gt;1$( "div" ).children( ".selected" ).css( "color", "blue" );closest(selector)closest()方法获得匹配选择器的第一个祖先元素，从当前元素开始沿 DOM 树向上。例如，当列表被点击的时候添加背景色，其余的移除背景色：123$( document ).bind("click", function( e ) &#123; $( e.target ).closest("li").addClass("hilight").siblings().removeClass("hilight");&#125;);find(selector)find()方法获得当前元素集合中每个元素的后代，通过选择器、jQuery 对象或元素来筛选。例如：搜索所有段落中的后代 span 元素，并将其颜色设置为红色：1$("p").find("span").css('color','red');next(selector)next()获得匹配元素集合中每个元素紧邻的同胞元素。如果提供选择器，则取回匹配该选择器的下一个同胞元素。例如，有如下简单列表：1234567&lt;ul&gt; &lt;li&gt;list item 1&lt;/li&gt; &lt;li&gt;list item 2&lt;/li&gt; &lt;li class="third-item"&gt;list item 3&lt;/li&gt; &lt;li&gt;list item 4&lt;/li&gt; &lt;li&gt;list item 5&lt;/li&gt;&lt;/ul&gt;将list item 4添加红色背景色：1$('li.third-item').next().css('background-color', 'red');将list item 3添加红色背景色：1$('li').next('.third-item').css('background-color', 'red');等价于：1$('ul').find('.third-item').css('background-color', 'red');nextAll(selector)查找当前元素之后所有的同辈元素。还是上面的例子，给list item 3之后的所有同级li添加红色背景色：1$('li.third-item').nextAll().css('background-color', 'red');选择器用法，给含有red类的li添加红色背景色：12345678910&lt;ul&gt; &lt;li&gt;list item 1&lt;/li&gt; &lt;li&gt;list item 2&lt;/li&gt; &lt;li class="red"&gt;list item 3&lt;/li&gt; &lt;li&gt;list item 4&lt;/li&gt; &lt;li class="red"&gt;list item 5&lt;/li&gt;&lt;/ul&gt;&lt;script&gt; $('li').nextAll('.red').css('background-color', 'red');&lt;/script&gt;nextUntil()查找当前元素之后所有的同辈元素，直到遇到匹配的那个元素为止。例如，有如下列表：1234567891011121314&lt;dl&gt; &lt;dt id="term-1"&gt;term 1&lt;/dt&gt; &lt;dd&gt;definition 1-a&lt;/dd&gt; &lt;dd&gt;definition 1-b&lt;/dd&gt; &lt;dd&gt;definition 1-c&lt;/dd&gt; &lt;dd&gt;definition 1-d&lt;/dd&gt; &lt;dt id="term-2"&gt;term 2&lt;/dt&gt; &lt;dd&gt;definition 2-a&lt;/dd&gt; &lt;dd&gt;definition 2-b&lt;/dd&gt; &lt;dd&gt;definition 2-c&lt;/dd&gt; &lt;dt id="term-3"&gt;term 3&lt;/dt&gt; &lt;dd&gt;definition 3-a&lt;/dd&gt; &lt;dd&gt;definition 3-b&lt;/dd&gt;&lt;/dl&gt;找到跟随 &lt;dt id=&quot;term-1&quot;&gt; 的同胞元素，直到 &lt;dt id=&quot;term-3&quot;&gt;，并为它们设置蓝色文本颜色：1$("#term-1").nextUntil("#term-3").css("color", "blue");效果如图：找到跟随 &lt;dt id=&quot;term-1&quot;&gt; 的&lt;dd&gt;同胞元素，直到 &lt;dt id=&quot;term-3&quot;&gt;，并为它们设置蓝色文本颜色：1$("#term-1").nextUntil("#term-3",'dd').css("color", "blue"); 获得被定位的最近祖先元素。这些定位包括relative，absolute或fixed。例如，有如下html：1234567891011121314151617&lt;ul class="level-1"&gt; &lt;li class="item-i"&gt;I&lt;/li&gt; &lt;li class="item-ii" style="position: relative;"&gt;II &lt;ul class="level-2"&gt; &lt;li class="item-a"&gt;A&lt;/li&gt; &lt;li class="item-b"&gt;B &lt;ul class="level-3"&gt; &lt;li class="item-1"&gt;1&lt;/li&gt; &lt;li class="item-2"&gt;2&lt;/li&gt; &lt;li class="item-3"&gt;3&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class="item-c"&gt;C&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li class="item-iii"&gt;III&lt;/li&gt;&lt;/ul&gt;给&lt;li class=&quot;item-a&quot;&gt;最近的被定位父元素，即&lt;li class=&quot;item-ii&quot; style=&quot;position: relative;&quot;&gt;添加红色背景色：1$('li.item-a').offsetParent().css('background-color', 'red');parent(selector)获取匹配元素最近的父元素。接着上面的例子，给&lt;li class=&quot;item-a&quot;&gt;的父元素，即&lt;ul class=&quot;level-2&quot;&gt;添加红色背景色：1$('li.item-a').parent().css('background-color', 'red'); ​再如有如下html：12&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;&lt;div class="selected"&gt;&lt;p&gt;Hello Again&lt;/p&gt;&lt;/div&gt;1$("p").parent(".selected").css("background", "yellow");结果只有Hello Again拥有黄色背景色。parents(selector)获取匹配元素的符合筛选器selector所有层级的父元素。有如下html：1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;p&gt; &lt;span&gt; &lt;b&gt;&lt;/b&gt; &lt;/span&gt; &lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;12345678var a = $("b").parents().map(function()&#123; return this.nodeName;&#125;).get().join(',');console.log(a); //SPAN,P,DIV,BODY,HTMLvar b = $("b").parents("p").map(function()&#123; return this.nodeName;&#125;).get().join(',');console.log(b); //PparentsUntil(selector)查找当前元素的所有的父辈元素，直到遇到匹配的那个元素为止。接着上面的html，有如下js代码：1234var parentEls = $("b").parentsUntil('div').map(function()&#123; return this.nodeName;&#125;).get().join(',');console.log(parentEls); // SPAN,Pprev(selector)和next(selector)相反。prevAll(selector)和nextAll(selector)相反。prevUntil(selector)和nextUntil()相反。siblings(selector)匹配集合中每个元素的同胞。串联add()add() 方法将元素添加到匹配元素的集合中。例如，查找所有div并添加边框。然后将所有p添加到jQuery对象中并将其背景设置为黄色。1$( "div" ).css( "border", "2px solid red" ).add( "p" ).css( "background", "yellow" );这里只有div添加了边框！给所有p和span添加黄色背景色：1$( "p" ).add( "span" ).css( "background", "yellow" );addBack()该函数用于替代1.8版本之前的andSelf()函数。通过一个例子来洞察其作用：1234567&lt;ul&gt; &lt;li&gt;list item 1&lt;/li&gt; &lt;li&gt;list item 2&lt;/li&gt; &lt;li class="third-item"&gt;list item 3&lt;/li&gt; &lt;li&gt;list item 4&lt;/li&gt; &lt;li&gt;list item 5&lt;/li&gt;&lt;/ul&gt;12345678var a = $('li.third-item').nextAll().map(function()&#123; return this.innerHTML&#125;).get().join(',');var b = $('li.third-item').nextAll().addBack().map(function()&#123; return this.innerHTML&#125;).get().join(',');console.log(a); // list item 4,list item 5console.log(b); // list item 3,list item 4,list item 5contents()contents()方法获得匹配元素集合中每个元素的子节点，包括文本和注释节点。例如：找到p中的所有文本节点，并用粗体标签包装它们：1$("p").contents().filter(function()&#123; return this.nodeType != 1; &#125;).wrap("&lt;b/&gt;");下表为html中nodeType的取值：节点类型描述1Element代表元素2Attr代表属性3Text代表元素或属性中的文本内容。4CDATASection代表文档中的 CDATA 部分（不会由解析器解析的文本）。5EntityReference代表实体引用。6Entity代表实体。7ProcessingInstruction代表处理指令。8Comment代表注释。9Document代表整个文档（DOM 树的根节点）。10DocumentType向为文档定义的实体提供接口11DocumentFragment代表轻量级的 Document 对象，能够容纳文档的某个部分12Notation代表 DTD 中声明的符号。end()end()方法结束当前链条中的最近的筛选操作，并将匹配元素集还原为一开始的状态。例如，现有如下html：12345&lt;ul class="first"&gt; &lt;li class="foo"&gt;list item 1&lt;/li&gt; &lt;li&gt;list item 2&lt;/li&gt; &lt;li class="bar"&gt;list item 3&lt;/li&gt;&lt;/ul&gt; ​12$('ul.first').find('.foo').css('background-color', 'red') .end().find('.bar').css('background-color', 'green');这条链式的jQuery操作代码首先选取了类名为first的ul，然后使用find(&#39;.foo&#39;)找到&lt;li class=&quot;foo&quot;&gt;list item 1&lt;/li&gt;，给其添加了红色背景色。随后，end()方法将jQuery对象还原为一开始的状态，即(&#39;ul.first&#39;)，再使用find(&#39;.bar&#39;)找到&lt;li class=&quot;bar&quot;&gt;list item 3&lt;/li&gt;，给其添加绿色背景色。效果如下图所示：如果去除end()函数，会因找不到&lt;li class=&quot;bar&quot;&gt;list item 3&lt;/li&gt;，添加绿色背景色失败。去除end()效果如下：一般为了视觉上的对称，上面的代码末端也加上end()：12345$('ul.first').find('.foo') .css('background-color', 'red') .end().find('.bar') .css('background-color', 'green') .end();参考网站http://api.jquery.com/http://www.w3school.com.cn/jqueryhttp://caibaojian.com/jquery]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery操作文档新姿势]]></title>
    <url>%2Fblog%2FjQuery%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3%E6%96%B0%E5%A7%BF%E5%8A%BF.html</url>
    <content type="text"><![CDATA[现要在body下插入一张包含一些属性的图片，使用jQuery操作document传统的做法是：12345678var html = ' &lt;img src="../images/little.bear.png" alt="Little Bear"'+ ' title="I woof in your general direction" '+ ' onclick="showTitle($(this));"&gt;&lt;img/&gt;'$(html).appendTo('body');function showTitle(val)&#123; var $this = val; alert($this.attr('title'));&#125;现使用更优雅的方法来实现这个操作：123456789$('&lt;img&gt;',&#123; src: '../images/little.bear.png', alt: 'Little Bear', title:'I woof in your general direction', click: function() &#123; alert($(this).attr('title')); &#125;&#125;).appendTo('body');注：$(&#39;&lt;img&gt;&#39;)等同于$(&#39;&lt;img&gt;&lt;/img&gt;&#39;)或$(&#39;&lt;img/&gt;&#39;)《jQuery实战 第三版》读书笔记]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义jQuery选择器]]></title>
    <url>%2Fblog%2F%E8%87%AA%E5%AE%9A%E4%B9%89jQuery%E9%80%89%E6%8B%A9%E5%99%A8.html</url>
    <content type="text"><![CDATA[jQuery自身提供了许多选择器，除此之外其还允许我们自定义选择器。下面这种自定义选择器的方法仅适用于1.8及其以后的版本。考虑有如下html片段：123456&lt;ul class="levels"&gt; &lt;li data-level="1" data-points="1" data-technologies="javascript node grunt"&gt;Level 1&lt;/li&gt; &lt;li data-level="2" data-points="10" data-technologies="jquery requirejs"&gt;Level 2&lt;/li&gt; &lt;li data-level="3" data-points="100" data-technologies="php composer"&gt;Level 3&lt;/li&gt; &lt;li data-level="4" data-points="1000" data-technologies="javascript jquery"&gt;Level 4&lt;/li&gt;&lt;/ul&gt;假如我们需要选择出data-level属性值大于2，data-points大于100并且data-technologies属性包含”jquery”的li，传统的做法是：12345678910111213//先筛选出data-technologies属性包含"jquery"的livar $levels = $('.levels li[data-technologies~="jquery"]');var matchedLevels = [];//循环遍历$levels，将符合条件的li塞到matchedLevels数组里for (var i = 0; i &lt; $levels.length; i++) &#123; if ($levels[i].getAttribute('data-level') &gt; 2 &amp;&amp; $levels[i].getAttribute('data-points') &gt; 100) &#123; matchedLevels.push($levels[i]); &#125;&#125;console.log(matchedLevels.length); // 1如果需要多次使用，我们可以创建自定义选择器，让代码更优雅：1234567$.expr[':'].requiredLevel = $.expr.createPseudo(function (filterParam) &#123; return function (element, context, isXml) &#123; return element.getAttribute('data-level') &gt; 2 &amp;&amp; element.getAttribute('data-points') &gt; 100 &amp;&amp; element.getAttribute('data-technologies').indexOf('jquery') &gt;= 0; &#125;;&#125;);createPseudo方法用于创造自定义选择器，可向其传递参数filterParam，参数名可以另起其名，这里需求固定，所以不必传参。element表示当前处理的元素，isXML用于指定是否为XML文本，默认为false。context默认为整个document，可以指定范围来增强性能：比如查找div内的p元素：12$("div p") 或$("p","div")结果一致，第二种写法效率更高。言归正传，使用上述定义的选择器来查询满足条件的li：123var $requiredLevels = $('li:requiredLevel','.levels ');console.log($requiredLevels.length); // 1console.log($requiredLevels.html()); // Level 4传递参数假如将需求改为，查找出data-points大于某个整数值的li，要怎么做呢？这时候就可以用上filterParam了：1234567$.expr[':'].pointsHigherThan = $.expr.createPseudo(function (filterParam) &#123; // 缓存参数，以供闭包使用 var points = parseInt(filterParam, 10); return function (element, context, isXml) &#123; return element.getAttribute('data-points') &gt; points; &#125;;&#125;);测试：12var $higherPointsLevels = $('li:pointsHigherThan(50)','.levels ');console.log($higherPointsLevels.length); // 2《jQuery实战 第三版》读书笔记]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[canvas与渐变色]]></title>
    <url>%2Fblog%2Fcanvas%E4%B8%8E%E6%B8%90%E5%8F%98%E8%89%B2.html</url>
    <content type="text"><![CDATA[线性渐变绘制线性渐变，需要用到图形上下文的createLinearGradient方法来创建gradient对象，方法签名如下：1var gradient = context.createLinearGradient(x0,y0,x1,y1);(x0,y0)为渐变起始点的坐标，(x1,y1)为渐变结束的的坐标。接下来需要指定渐变的颜色，可以通过gradient对象的addColorStop方法来设定，方法签名如下：1gradient.addColorStop(stop,color);其中stop为介于 0.0 与 1.0 之间的值，表示渐变中开始与结束之间的位置；color为绘制时使用的颜色。最后需要做的就是将gradient对象赋予给fillStyle属性：1context.fillStyle = gradient;绘制一个渐变色矩形：12345678910var canvas = document.getElementById("canvas");var context = canvas.getContext("2d");//设定渐变范围var g = context.createLinearGradient(0,0,250,150);//设置渐变起点颜色g.addColorStop(0,'#FF9999');//设置渐变终点颜色g.addColorStop(1,'#FFFF99');context.fillStyle = g;context.fillRect(0,0,250,150);显示效果：径向渐变径向渐变指的是沿着圆形的半径方向向外扩散的渐变方式。绘制径向渐变使用的是图形上下文的createRadialGradient方法来创建gradient对象，方法签名如下：1var gradient = context.createRadialGradient(x0,y0,r0,x1,y1,r1);(x0,y0)为渐变的开始圆心坐标，r0为渐变开始圆的半径；(x1,y1)为渐变的结束圆心坐标，r1为渐变结束圆的半径。剩余的操作和线性渐变一致，不再赘述。这里绘制一个径向渐变的圆：1234567var g = context.createRadialGradient(100,100,0,100,100,100);g.addColorStop(0,'#FFFF99');g.addColorStop(1,'#FF9999');context.beginPath();context.arc(100,100,100,0,Math.PI*2,false);context.fillStyle = g;context.fill();显示效果：《HTML5与CSS3权威指南》读书笔记]]></content>
      <tags>
        <tag>HTML5</tag>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[canvas绘制简单图形]]></title>
    <url>%2Fblog%2Fcanvas%E7%BB%98%E5%88%B6%E7%AE%80%E5%8D%95%E5%9B%BE%E5%BD%A2.html</url>
    <content type="text"><![CDATA[canvas是HTML5中专门用来绘制图形的元素。在页面上放置一个canvas元素就相当于创建了一个画布。绘制过程由JS脚本完成。首先在页面上添加一个canvas元素：12345678910&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;html5&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;canvas id="canvas" width="500" height="400"/&gt;&lt;/body&gt;&lt;/html&gt;基本步骤使用canvas绘制图形的几个基本步骤：1.获取canvas对象：1var canvas = document.getElementById("canvas");2.取得上下文context，其包含许多绘制的方法：1var context = canvas.getContext("2d");目前仅有2d参数可选。3.设置绘图样式：绘图样式主要包含图形填充样式fillStyle，图形边框样式strokeStyle和线宽lineWidth。123456//设置填充样式为红色context.fillStyle = "red";//设置边框为黄色context.strokeStyle = "yellow";//设置线宽为1pxcontext.lineWidth = 1;4.开始绘制图形：具体绘制方法下面陆续展开。绘制矩形使用fillRect方法与strokeRect方法来绘制矩形和矩形边框：12context.fillRect(x,y,width,height);context.strokeRect(x,y,width,height);​x，y为矩形左上角起点坐标，width为矩形宽，height为矩形高。开始绘制：1234567891011121314var canvas = document.getElementById("canvas");var context = canvas.getContext("2d");// 设置canvas画布颜色context.fillStyle = "#F7F7F7";context.fillRect(0,0,300,300);//设置填充颜色，边框颜色context.fillStyle = "#E4F0C3";context.strokeStyle = "#F06560";//设置线宽context.lineWidth = 1;//绘制矩形context.fillRect(50,50,100,100);//绘制矩形边框context.strokeRect(50,50,150,150);结果：关于矩形，还有一个clearRect方法，用于清除指定矩形区域像素：1context.clearRect(x,y,width,height);在上面的JS脚本中加入下面这行代码：1context.clearRect(50,50,50,50);效果：绘制圆形，扇形，椭圆绘制圆形主要多了开始创建路径beginPath和关闭路径closePath这两个过程。主要步骤：1.开始创建路径：1context.beginPath();2.绘制圆形路径：方法：1context.arc(x,y,r,sAngle,eAngle,anticlockwise);其中x，y为绘制圆形的起点坐标即圆心，r为圆形半径，sAngle（起始角）和eAngle（结束角）决定了圆的弧度，两者的连线决定了圆的形状，anticlockwise表示是否按逆时针方向绘制，为boolean类型。3.关闭路径：1context.closePath();设置填充样式。绘制圆形示例：1234567891011121314var canvas = document.getElementById("canvas");var context = canvas.getContext("2d");for(var i = 0;i &lt; 6; i++)&#123; //开始创建路径 context.beginPath(); //绘制圆，Math.PI*2为2π弧度 context.arc(i*25,i*25,i*10,0,Math.PI*2,true); //关闭路径 context.closePath(); //设置填充颜色 context.fillStyle = "rgba(66,185,131,0.4)"; //进行填充 context.fill();&#125;度与弧度换算：1° = 1/180π rad效果如下图所示：假如不关闭路径会怎样呢？将上面的代码改为：12345678for(var i = 0;i &lt; 6; i++)&#123; //绘制圆，Math.PI*2为2π弧度 context.arc(i*25,i*25,i*10,0,Math.PI*2,true); //设置填充颜色 context.fillStyle = "rgba(66,185,131,0.4)"; //进行填充 context.fill();&#125;效果如下图所示：不关闭路径将会导致再绘制第二个圆的时候，第一个圆会根据之前的路径再次绘制一次。所以在这个例子中，第一个圆绘制了5次，第二个圆绘制了4次，以此类推，以至于第一个圆的颜色最深。关于弧度的参考可见下图：顺时针和逆时针的差别举个例子说明：顺时针，弧度为0.5rad：1234567context.beginPath();context.arc(100,100,100,0,Math.PI*0.5,false);context.closePath();context.fillStyle = "rgba(66,185,131,0.4)";context.strokeStyle = "#F06560";context.fill();context.stroke();效果如下图：将false改为true，即逆时针时：椭圆的绘制公式如下：1context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);其中x，y为起始坐标，radiusX为椭圆横向半径，radiusY为椭圆纵向半径，rotation为椭圆顺时针旋转角度，startAngle（起始角）和endAngle（结束角）决定了圆的弧度，两者的连线决定了圆的形状，anticlockwise表示是否按逆时针方向绘制，为boolean类型。绘制一个简单的椭圆：12345context.beginPath();context.ellipse(100,100,50,90,Math.PI*0.25,0,Math.PI*2,false);context.closePath();context.fillStyle = "rgba(66,185,131,0.4)";context.fill();效果图：绘制直线与绘制直线有关的方法主要有两个：1context.moveTo(x,y);moveTo方法将绘制光标移动到x，y位置。1context.lineTo(x,y);lineTo方法将从当前光标位置开始，到x，y位置间绘制一条直线。多次调用该方法，则下一次的起点为上一次lineTo的终点。使用lineTo方法结合数学公式，绘制一个复杂的图案：123456789101112131415var dx = 150;var dy = 150;var s = 100;context.beginPath();context.fillStyle = "rgba(230,177,163,.5)";context.strokeStyle = "#e96900";var dig = Math.PI/15*11;for(var i = 0;i &lt; 30 ; i++)&#123; var x = Math.sin(i*dig); var y = Math.cos(i*dig); context.lineTo(dx+x*s,dy+y*s);&#125;context.closePath();context.fill();context.stroke();效果图：图形上下文的lineCap属性可为直线添加线帽，可用的属性有：butt，默认值，不为直线添加线帽。round，添加圆形线帽。square，添加方形线帽。例如：1234567context.strokeStyle = "rgba(66,185,131,0.6)";context.lineWidth = "10";context.beginPath();context.moveTo(50,50);context.lineTo(50,150);context.lineCap = "round";context.stroke();效果：图形上下文的lineJoin属性指定两条线交汇处的形状，可用的值有：miter，默认值，尖角拐角。round，圆角拐角。bevel，斜角拐角。例如：12345678context.strokeStyle = "rgba(66,185,131,0.6)";context.lineWidth = "10";context.beginPath();context.moveTo(50,50);context.lineTo(50,150);context.lineTo(150,150);context.lineJoin = "bevel";context.stroke();效果图：图形上下文的setLineDash方法可设置虚线的样式：1context.setLineDash(segments);segments为一个数组。数组长度可分为4种情况：1.当数组长度为1时：1context.setLineDash([5]);表示线段长度为5，线段间距离也为5。2.当数组长度为2时：1context.setLineDash([5,10]);表示线段长度为5，线段间距离为10。3.当数组长度为大于2的偶数时：1context.setLineDash([5,10,15,20]);第奇数个数值表示线段长度，第偶数个数值表示线段间距。4.当数组长度为大于1的奇数时：1context.setLineDash([5,10,15]);浏览器会将其解析为：1context.setLineDash([5,10,15,5,10,15]);画个虚线试试：1234567context.strokeStyle = "rgba(66,185,131,0.9)";context.lineWidth = 2;context.beginPath();context.moveTo(10,50);context.lineTo(250,50);context.setLineDash([15,5]);context.stroke();效果：绘制曲线绘制曲线使用arcTo方法：1context.fillRect(x1,y1,x2,y2,radiusX[radiusY,rotation]);关于坐标参数，可以参考下面这张图：其中x0，y0为当前点的坐标，x1，y1为绘制圆弧时使用的控制坐标，x2，y2为重点坐标。radiusX为圆弧的半径。radiusY和rotation为隐藏参数，前者表示纵向半径，后者表示顺时针旋转角度。绘制个曲线图：1234567891011context.strokeStyle = "rgba(66,185,131,0.9)";context.lineWidth = 2;context.beginPath();context.moveTo(10,50);//曲线的起点context.lineTo(100,50);//(150,50)曲线的控制点，(150,100)曲线的终点，曲线半径为50context.arcTo(150,50,150,100,50);//再来一条context.arcTo(100,100,100,50,50);context.stroke();效果图：图形上下文的bezierCurveTo方法用以三次绘制贝塞尔曲线。1context.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y); ​其中cp1x为第一个贝塞尔控制点的 x 坐标，cp1y为第一个贝塞尔控制点的 y 坐标。cp2x为第二个贝塞尔控制点的 x 坐标，cp2y为第二个贝塞尔控制点的 y 坐标。x，y为终点坐标。例如：123456context.strokeStyle = "rgba(66,185,131,0.9)";context.lineWidth = 2;context.beginPath();context.moveTo(50, 150);context.bezierCurveTo(150, 100, 150, 200, 250, 150);context.stroke();效果图：贝塞尔曲线在线生成工具：http://www.j--d.com/bezier图形上下文的quadraticCurveTo方法用以二次绘制贝塞尔曲线：1context.quadraticCurveTo(cpx,cpy,x,y);相较于bezierCurveTo方法，其只有一个控制点。cpx，cpy为控制点的坐标，x，y为终点坐标。一个简单的例子：123456context.strokeStyle = "rgba(66,185,131,0.9)";context.lineWidth = 2;context.beginPath();context.moveTo(50, 50);context.quadraticCurveTo(250, 150, 150, 50);context.stroke();效果图：《HTML5与CSS3权威指南》读书笔记]]></content>
      <tags>
        <tag>HTML5</tag>
        <tag>Canvas</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux打包指令tar]]></title>
    <url>%2Fblog%2FLinux%E6%89%93%E5%8C%85%E6%8C%87%E4%BB%A4tar.html</url>
    <content type="text"><![CDATA[gzip, bzip2, xz 也能够针对目录来进行压缩，不过它们都是对目录下的文件逐个压缩的。而tar指令则可以将这些文件先打包成一个大文件，然后再进行压缩操作。仅用tar命令打包不压缩的文件，称为tarfile，既打包又压缩的文件，如file.tar.gz则成为tarball。tar指令的选项非常多，一般只是用几个常用的，基本语法如下：12345678910111213141516tar [-z|-j|-J] [cv] [-f 待建立的文件名] filename... &lt;==打包与压缩tar [-z|-j|-J] [tv] [-f 已有的tar格式文件名] &lt;==查看文件名tar [-z|-j|-J] [xv] [-f 已有的tar格式文件名] [-C 目录] &lt;==解压缩选项与参数：-c ：建立打包文件，可搭配 -v 来察看过程中被打包的档名(filename)-t ：察看打包文件的内容含有哪些档名，重点在察看『档名』就是了；-x ：解打包或解压缩的功能，可以搭配 -C (大写) 在特定目录解开。特别留意的是， -c, -t, -x 不可同时出现在一串指令列中。-z ：透过 gzip 的支持进行压缩/解压缩：此时档名最好为 *.tar.gz-j ：透过 bzip2 的支持进行压缩/解压缩：此时档名最好为 *.tar.bz2-J ：透过 xz 的支持进行压缩/解压缩：此时档名最好为 *.tar.xz。特别留意， -z, -j, -J 不可以同时出现在一串指令列中-v ：在压缩/解压缩的过程中，将正在处理的文件名显示出来！-f filename：-f 后面要立刻接要被处理的档名！建议 -f 单独写一个选项-C 目录 ：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。-p(小写) ：保留备份数据的原本权限与属性，常用于备份(-c)重要的配置文件-P(大写) ：保留绝对路径，亦即允许备份数据中含有根目录存在之意；--exclude=FILE：在压缩的过程中，不要将 FILE 打包！一般来说，tar命令只要记住下面这个范例就行了：压 缩：tar -jcv -f filename.tar.bz2要被压缩的文件或目录名称查 询：tar -jtv -f filename.tar.bz2解压缩：tar -jxv -f filename.tar.bz2 -C欲解压缩的目录filename.tar.bz2 是我们自己取的文件名，tar 并不会自动帮我们生成打包压缩后的文件名。文件命名最好符合规范。示例：使用tar命令打包/etc/目录，然后使用-z，-j，-J选项进行压缩，并观察结果与耗时1234567891011121314151617181920212223242526272829root@ubuntu:/temp# time tar -zpcv -f etc.tar.gz /etctar: Removing leading `/' from member names/etc//etc/ucf.conf/etc/selinux//etc/selinux/semanage.conf... real 0m0.848s //耗时0.848秒user 0m0.456ssys 0m0.080s root@ubuntu:/temp# time tar -jpcv -f etc.tar.bz2 /etctar: Removing leading `/' from member names/etc//etc/ucf.conf/etc/selinux//etc/selinux/semanage.conf... real 0m1.781s //耗时1.781秒user 0m1.220ssys 0m0.060s root@ubuntu:/temp# time tar -Jpcv -f etc.tar.xz /etc real 0m7.700s //耗时7.700秒user 0m5.428ssys 0m0.456s查阅 tar 文件的数据内容12345root@ubuntu:/temp# tar -ztv -f etc.tar.gz drwxr-xr-x root/root 0 2017-04-13 09:31 etc/-rw-r--r-- root/root 1260 2016-03-17 04:58 etc/ucf.confdrwxr-xr-x root/root 0 2016-04-21 06:07 etc/selinux/...可发现，每个文件名都没了根目录。正如备份的时候出现的警告：tar: Removing leading `/‘ from member names那样。这种做法主要是为了防止解压缩的时候出现覆盖源文件的情况。如果要保留文件的根目录/，则可以使用-P（大写）选项。指定目录解压缩如果直接在当前目录下执行命令：tar -jxv -f /root/etc.tar.bz2，则目录下会多出个etc的目录。如果要指定解压缩的目录，可以使用-C选项。如将/temp/etc.tar.gz解压到/tmp目录下1root@ubuntu:/temp# tar -zxv -f etc.tar.gz -C /tmp指定解压某个文件除了一次性全部解压，我们还可以指定解压某个文件。比如我要解压etc.tar.gz下的etc/shadow，可以使用如下命令：12root@ubuntu:/temp# tar -zxv -f etc.tar.gz etc/shadowetc/shadow打包某目录，但不含该目录下的某些文件比如我想打包/etc目录，但是不想包含目录下的ppp和qqq文件：1root@ubuntu:/temp# tar -zcv -f etc.tar.gz --exclude=/etc/ppp --exclude=/etc/qqq /etc或者：1root@ubuntu:/temp# vi exclude-file里面输入12/etc/ppp/etc/qqq然后使用命令：1root@ubuntu:/temp# tar -zcvf etc.tar.gz --exclude-from exclude-file /etc仅备份比某个时刻还要新的文件比如，仅备份比/etc/passwd文件新的文件（mtime）：123456789root@ubuntu:/temp# ls -l /etc/passwd-rw-r--r-- 1 root root 2243 Apr 13 09:30 /etc/passwdroot@ubuntu:/temp# tar -zcv -f etc.newer.passwd.tar.gz --newer-mtime="2017/04/13 09:30" /etc/*tar: Option --newer-mtime: Treating date '2017/04/13 09:30' as 2017-04-13 09:30:00tar: Removing leading `/' from member names/etc/acpi/tar: /etc/acpi/asus-wireless.sh: file is unchanged; not dumpedtar: /etc/acpi/asus-keyboard-backlight.sh: file is unchanged; not dumped...《鸟哥的Linux私房菜》读书笔记]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux常用压缩指令]]></title>
    <url>%2Fblog%2FLinux%E5%B8%B8%E7%94%A8%E5%8E%8B%E7%BC%A9%E6%8C%87%E4%BB%A4.html</url>
    <content type="text"><![CDATA[Linux 上常见的压缩指令有 gzip，bzip2 以及最新的 xz。压缩率从高到低为xz，bzip2，gzip。压缩率越高，压缩所花的时间就越长。所以实际工作中需要根据具体情况在压缩率和压缩时间中做出抉择。以下为几个常见的压缩文件扩展名：123456789*.Z compress 程序压缩的文件；*.zip zip 程序压缩的文件；*.gz gzip 程序压缩的文件；*.bz2 bzip2 程序压缩的文件；*.xz xz 程序压缩的文件；*.tar tar 程序打包的数据，并没有压缩过；*.tar.gz tar 程序打包的文件，其中并且经过 gzip 的压缩*.tar.bz2 tar 程序打包的文件，其中并且经过 bzip2 的压缩*.tar.xz tar 程序打包的文件，其中并且经过 xz 的压缩compress指令已经过时了，取而代之的是gzip。gzip, zcat/zmore/zless/zgrepgzip可以解开 compress，zip 与 gzip 等软件所压缩 的文件。 gzip 所建立的压缩文件为 *.gz，gzip语法：12345678gzip [-cdtv#] 文件名zcat 文件名.gz选项与参数：-c ：将压缩的数据输出到屏幕上，可透过数据流重导向来处理；-d ：解压缩的参数；-t ：可以用来检验一个压缩文件的一致性～看看文件有无错误；-v ：可以显示出原文件/压缩文件案的压缩比等信息；-# ：# 为数字的意思，代表压缩等级，-1 最快，但是压缩比最差、-9 最慢，但是压缩比最好！预设是 -6示例：使用gzip压缩/temp/services文件，并查看压缩比：12345root@ubuntu:/temp# gzip -v services services: 61.6% -- replaced with services.gzroot@ubuntu:/temp# ls -lh /etc/services services.gz -rw-r--r-- 1 root root 20K Oct 25 2014 /etc/services-rw-r--r-- 1 root root 7.4K Apr 17 16:15 services.gz因为services是文本文件，所以可以使用zcat/zmore/zless 去读取 ：1234567root@ubuntu:/temp# zcat services.gz # Network services, Internet style## Note that it is presently the policy of IANA to assign a single well-known# port number for both TCP and UDP; hence, officially ports have two entries# even if the protocol doesn't support UDP operations....将services.gz解压缩：1root@ubuntu:/temp# gzip -d services.gz使用gzip指令以最好的压缩比压缩services，并保留原文件：1gzip -9 -c services &gt; services.gz-c 可以将原本要转成压缩文件的资料内容，将它变成文字类型从屏幕输出， 然后我们可以透过大于 (&gt;) 这个符号，将原本应该由屏幕输出的数据，转成输出到文件而不是屏幕，所以就能够建立出压缩文件了。只是文件名也要自己写， 当然最好还是遵循 gzip 的压缩文件名规范。bzip2, bzcat/bzmore/bzless/bzgrepbzip2则是为了取代 gzip 并提供更佳的压缩比而来的，语法和gzip差不多：123456789bzip2 [-cdkzv#] 文件名bzcat 文件名.bz2选项与参数：-c ：将压缩的过程产生的数据输出到屏幕上。-d ：解压缩的参数。-k ：保留源文件，而不会删除原始的文件。-z ：压缩的参数 (默认值，可以不加)。-v ：可以显示出原文件/压缩文件案的压缩比等信息。-# ：与 gzip 同样的，都是在计算压缩比的参数， -9 最佳， -1 最快！示例：使用bzip2命令压缩services文件：12root@ubuntu:/temp# bzip2 -v services services: 2.712:1, 2.950 bits/byte, 63.13% saved, 19605 in, 7229 out.xz, xzcat/xzmore/xzless/xzgrepbzip2 已经具有很棒的压缩比，不过显然某些自由软件开发者还不满足，因此后来还推出了 xz 这个压缩比更高的软件。xz的语法：123456789xz [-dtlkc#] 文件名xcat 文件名.xz选项与参数：-d ：就是解压缩-t ：测试压缩文件的完整性，看有没有错误-l ：列出压缩文件的相关信息-k ：保留原本的文件不删除-c ：同样的，就是将数据由屏幕上输出的意思-# ：同样的，也有较佳的压缩比的意思对比分别使用gzip，bzip2和xz命令默认压缩比对service文件进行压缩，并查看时间：12345678910111213root@ubuntu:/temp# time gzip -c services &gt; services.gz;time bzip2 -k services;time xz -k services real 0m0.003suser 0m0.000ssys 0m0.000s real 0m0.004suser 0m0.000ssys 0m0.000s real 0m0.076suser 0m0.016ssys 0m0.020s查看压缩后的文件大小：12345root@ubuntu:/temp# ls -l services services.gz services.bz2 services.xz -rw-r--r-- 1 root root 19605 Apr 17 16:42 services-rw-r--r-- 1 root root 7554 Apr 17 16:43 services.gz-rw-r--r-- 1 root root 7229 Apr 17 16:42 services.bz2-rw-r--r-- 1 root root 7156 Apr 17 16:42 services.xz《鸟哥的Linux私房菜》读书笔记]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一些JS技巧[转]]]></title>
    <url>%2Fblog%2F%E4%B8%80%E4%BA%9BJS%E6%8A%80%E5%B7%A7-%E8%BD%AC.html</url>
    <content type="text"><![CDATA[使用+将字符串转换成数字这个技巧非常有用，其非常简单，可以交字符串数据转换成数字，不过其只适合用于字符串数据，否则将返回NaN，比如下面的示例：12345function toNumber(strNumber) &#123; return +strNumber;&#125;console.log(toNumber("1234")); // 1234console.log(toNumber("ACB")); // NaN这个也适用于 Date，在本例中，它将返回的是时间戳数字：1console.log(+new Date()) // 1461288164385并条件符如果你写了一段这样的代码：123if (conected) &#123; login();&#125;你也可以将变量简写，并且使用&amp;&amp;和函数连接在一起，比如上面的示例，可以简写成这样：1conected &amp;&amp; login();使用 || 运算符在ES6中有默认参数这一特性。为了在老版本的浏览器中模拟这一特性，可以使用||操作符，并且将将默认值当做第二个参数传入。如果第一个参数返回的值为 false，那么第二个值将会认为是一个默认值。如下面这个示例：123456789101112function User(name, age) &#123; this.name = name || "Oliver Queen"; this.age = age || 27;&#125; var user1 = new User();console.log(user1.name); // Oliver Queenconsole.log(user1.age); // 27 var user2 = new User("Barry Allen", 25);console.log(user2.name); // Barry Allenconsole.log(user2.age); // 25检测对象中属性当你需要检测一些属性是否存在，避免运行未定义的函数或属性时，这个小技巧就显得很有用。如果你打算定些一些跨兼容的浏览器代码，你也可能会用到这个小技巧。例如，你想使用 document.querySelector() 来选择一个 id，并且让它能兼容IE6浏览器，但是在IE6浏览器中这个函数是不存在的，那么使用这个操作符来检测这个函数是否存在就显得非常的有用，如下面的示例：12345if ('querySelector' in document) &#123; document.querySelector("#id");&#125; else &#123; document.getElementById("id");&#125;在这个示例中，如果 document 不存在 querySelector 函数，那么就会调用 docuemnt.getElementById(&quot;id&quot;)。获取数组中最后一个元素Array.prototype.slice(begin,end)用来获取begin和end之间的数组元素。如果你不设置end参数，将会将数组的默认长度值当作end值。但有些同学可能不知道这个函数还可以接受负值作为参数。如果你设置一个负值作为begin的值，那么你可以获取数组的最后一个元素。如：12345var array = [1,2,3,4,5,6]; console.log(array.slice(-1)); // [6]console.log(array.slice(-2)); // [5,6]console.log(array.slice(-3)); // [4,5,6]数组截断这个小技巧主要用来锁定数组的大小，如果用于删除数组中的一些元素来说，是非常有用的。例如，你的数组有10个元素，但你只想只要前五个元素，那么你可以通过 array.length=5 来截断数组。如下这个示例：123456var array = [1,2,3,4,5,6];console.log(array.length); // 6 array.length = 3;console.log(array.length); // 3console.log(array); // [1,2,3]合并数组如果你要合并两个数组，一般情况之下你都会使用Array.concat()函数：1234var array1 = [1,2,3];var array2 = [4,5,6]; console.log(array1.concat(array2)); // [1,2,3,4,5,6];然后这个函数并不适合用来合并两个大型的数组，因为其将消耗大量的内存来存储新创建的数组。在这种情况之个，可以使用 Array.pus().apply(arr1,arr2)来替代创建一个新数组。这种方法不是用来创建一个新的数组，其只是将第一个第二个数组合并在一起，同时减少内存的使用：1234var array1 = [1,2,3];var array2 = [4,5,6]; console.log(array1.push.apply(array1, array2)); // [1,2,3,4,5,6];将NodeList转换成数组如果你运行 document.querySelectorAll(“p”) 函数时，它可能返回DOM元素的数组，也就是NodeList对象。但这个对象不具有数组的函数功能，比如 sort()、reduce()、map()、ilter() 等。为了让这些原生的数组函数功能也能用于其上面，需要将节点列表转换成数组。可以使用 [].slice.call(elements) 来实现：123var elements = document.querySelectorAll("p"); // NodeListvar arrayElements = [].slice.call(elements); // 将NodeList转化为数组var arrayElements = Array.from(elements); // 另一种方式将NodeList转化为数组HTML5 DOM 选择器1234567// querySelector() 返回匹配到的第一个元素var item = document.querySelector('.item');console.log(item); // querySelectorAll() 返回匹配到的所有元素，是一个nodeList集合var items = document.querySelectorAll('.item');console.log(items[0]);鼠标滚轮事件12345678910111213$('#content').on("mousewheel DOMMouseScroll", function (event) &#123; // chrome &amp; ie || // firefox var delta = (event.originalEvent.wheelDelta &amp;&amp; (event.originalEvent.wheelDelta &gt; 0 ? 1 : -1)) || (event.originalEvent.detail &amp;&amp; (event.originalEvent.detail &gt; 0 ? -1 : 1)); if (delta &gt; 0) &#123; // 向上滚动 console.log('mousewheel top'); &#125; else if (delta &lt; 0) &#123; // 向下滚动 console.log('mousewheel bottom'); &#125; &#125;);检测浏览器是否支持svg1234567function isSupportSVG() &#123; var SVG_NS = 'http://www.w3.org/2000/svg'; return !!document.createElementNS &amp;&amp;!!document.createElementNS(SVG_NS, 'svg').createSVGRect; &#125; // 测试console.log(isSupportSVG());检测浏览器是否支持canvas12345678910function isSupportCanvas() &#123; if(document.createElement('canvas').getContext)&#123; return true; &#125;else&#123; return false; &#125;&#125; // 测试console.log(isSupportCanvas());转自http://www.mrfront.com/]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux文件与指令搜索]]></title>
    <url>%2Fblog%2FLinux%E6%96%87%E4%BB%B6%E4%B8%8E%E6%8C%87%E4%BB%A4%E6%90%9C%E7%B4%A2.html</url>
    <content type="text"><![CDATA[当我们要对Linux下的某个文件做修改的时候，必须先知道文件的位置，这时候就可以使用文件搜索指令来完成。而指令的搜索则可以知道该指令文件的实际存放位置。指令搜索which通过which可以知道指令的完整文件名放在哪里。语法：123which [-a] command选项或参数：-a ：将所有由 PATH 目录中可以找到的指令均列出，而不止第一个被找到的指令名称简单示例：123456mrbird@ubuntu:~$ which ls/bin/lsmrbird@ubuntu:~$ which passwd/usr/bin/passwdmrbird@ubuntu:~$ which which/usr/bin/whichtype指令也可以实现指令搜索：1234mrbird@ubuntu:~$ type passwdpasswd is hashed (/usr/bin/passwd)mrbird@ubuntu:~$ type whichwhich is hashed (/usr/bin/which)文件档名的搜寻whereis (由一些特定的目录中寻找文件文件名)：whereis 只找系统中某些特定目录底下的文件 ，基本语法：1234567whereis [-bmsu] 文件或目录名选项与参数：-l :可以列出 whereis 会去查询的几个主要目录而已-b :只找 binary 格式的文件-m :只找在说明文件 manual 路径下的文件-s :只找 source 来源文件-u :搜寻不在上述三个项目当中的其他特殊文件示例：1234567891011121314151617#查看whereis搜寻的目录：mrbird@ubuntu:~$ whereis -lbin: /usr/binbin: /usr/sbinbin: /usr/libbin: /binbin: /sbinbin: /etcbin: /libbin: /lib64... mrbird@ubuntu:~$ whereis passwdpasswd: /usr/bin/passwd /etc/passwd /usr/share/man/man1/passwd.1ssl.gz /usr/share/man/man1/passwd.1.gz /usr/share/man/man5/passwd.5.gz#只查找在说明文件 manual 路径下的文件mrbird@ubuntu:~$ whereis -m passwdpasswd: /usr/share/man/man1/passwd.1ssl.gz /usr/share/man/man1/passwd.1.gz /usr/share/man/man5/passwd.5.gzlocate / updatedb：locate则是利用数据库来搜寻文件名，并且没有实际的搜寻硬盘内的文件系统态。locate语法：1234567locate [-ir] keyword选项与参数：-i ：忽略大小写的差异；-c ：不输出档名，仅计算找到的文件数量-l ：仅输出几行的意思，例如输出五行则是 -l 5-S ：输出 locate 所使用的数据库文件的相关信息，包括该数据库纪录的文件/目录数量等-r ：后面可接正规表示法的显示方式示例：123456789101112131415#找出系统中所有与passwd相关的档名，且只列出5个mrbird@ubuntu:~$ locate -l 5 passwd/etc/passwd/etc/passwd-/etc/cron.daily/passwd/etc/init/passwd.conf/etc/pam.d/chpasswd #列出locate查询所使用的数据库文件之文件名与各数据数量mrbird@ubuntu:~$ locate -SDatabase /var/lib/mlocate/mlocate.db: 22,021 directories 218,810 files 11,880,406 bytes in file names 5,267,885 bytes used to store database为 locate 寻找的数据是由已建立的数据库 /var/lib/mlocate/里面的数据所搜寻到的， 所以不用直接在去硬盘当中存取数据。而数据库的建立默认是在每天执行一次，所以当你新建立起来的文件， 却还在数据库更新之前搜寻该文件，那么 locate 会告诉你找不到！可以使用updatedb指令手动更新数据库，因为 updatedb 会去搜寻硬盘，所以当你执行 updatedb 时，可能会等待数分钟的时间。find：find指令直接搜索硬盘，所以具体搜索时间根据硬盘性能而定。基本语法：与时间有关的选项：1234567find [PATH] [option] [action]选项与参数：1. 与时间有关的选项：共有 -atime, -ctime 与 -mtime ，以 -mtime 说明 -mtime n ：n 为数字，意义为在 n 天之前的『一天之内』被更动过内容的文件； -mtime +n ：列出在 n 天之前(不含 n 天本身)被更动过内容的文件档名； -mtime -n ：列出在 n 天之内(含 n 天本身)被更动过内容的文件档名。 -newer file ：file 为一个存在的文件，列出比 file 还要新的文件档名举个例子，当n为4时：+4 代表大于等于 5 天前的档名；-4 代表小于等于 4 天内的文件档名； 4 则是代表 4-5 那一天的文件档名。示例：12345678910#列出24小时内有更改过内容（mtime）的文件档名：root@ubuntu:~# find / -mtime 0 #寻找/etc底下的文件，如果文件日期比/etc/passwd新就列出root@ubuntu:~# find /etc -newer /etc/passwd/etc/etc/apparmor.d/etc/apparmor.d/cache/etc/apparmor.d/cache/.features/etc/gshadow与使用者或组名有关的参数：12345678910选项与参数：2. 与使用者或组名有关的参数： -uid n ：n 为数字，这个数字是用户的账号 ID，亦即 UID ，这个 UID 是记录在 /etc/passwd 里面与账号名称对应的数字。 -gid n ：n 为数字，这个数字是组名的 ID，亦即 GID，这个 GID 记录在/etc/group。 -user name ：name 为使用者账号名称。例如 mrbird。 -group name：name 为组名，例如 users 。 -nouser ：寻找文件的拥有者不存在 /etc/passwd 的人。 -nogroup ：寻找文件的拥有群组不存在于 /etc/group 的文件。 当你自行安装软件时，很可能该软件的属性当中并没有文件拥有者，这是可能的。在这个时候，就可以使用 -nouser 与 -nogroup 搜寻。示例：12345678#搜寻/home底下属于mrbird用户的文件root@ubuntu:~# find /home -user mrbird/home/mrbird/home/mrbird/.sudo_as_admin_successful... #搜寻系统中不属于任何人的文件root@ubuntu:~# find / -nouser与文件权限及名称有关的参数：1234567891011121314151617选项与参数：3. 与文件权限及名称有关的参数： -name filename：搜寻文件名为 filename 的文件； -size [+-]SIZE：搜寻比 SIZE 还要大(+)或小(-)的文件。这个 SIZE 的规格有： c: 代表 byte， k: 代表 1024bytes。所以，要找比 50KB还要大的文件， 就是『 -size +50k 』 -type TYPE ：搜寻文件的类型为 TYPE 的，类型主要有：一般正规文件 (f), 装置文件 (b, c), 目录 (d), 连结档 (l), socket (s), 及 FIFO (p) 等属性。 -perm mode ：搜寻文件权限『刚好等于』 mode 的文件，这个 mode 为类似 chmod 的属性值，举例来说， -rwxr-xr-x 的属性为 0755。 -perm -mode ：搜寻文件权限『必须要全部囊括 mode 的权限』的文件，举例来说，我 们要搜寻 -rwxr--r-- ，亦即 0744 的文件，使用 -perm -0744， 当一个文件的权限为 -rwsr-xr-x ，亦即 4755 时，也会被列出来， 因为 -rwsr-xr-x 的属性已经囊括了 -rwxr--r-- 的属性了。 -perm /mode ：搜寻文件权限『包含任一 mode 的权限』的文件，举例来说，我们搜寻 -rwxr-xr-x ，亦即 -perm /755 时，当一个文件属性为 -rw------- 也会被列出来，因为他有 -rw.... 的属性存在.示例：12345678910111213141516171819202122232425262728#找出档名为passwd这个文件root@ubuntu:~# find / -name passwd/usr/share/lintian/overrides/passwd/usr/share/doc/passwd/usr/share/bash-completion/completions/passwd...#找出文件名包含了passwd这个关键词的文件root@ubuntu:~# find / -name *passwd*/usr/share/app-install/desktop/kdepasswd:kde4__kdepasswd.desktop/usr/share/app-install/desktop/usermode:redhat-userpasswd.desktop/usr/share/lintian/overrides/base-passwd... #找出/run目录下，文件类型为Socket的文件root@ubuntu:~# find /run -type s/run/NetworkManager/private-dhcp/run/cups/cups.sock/run/uuidd/request/run/avahi-daemon/socket... #搜寻文件权限为666的文件root@ubuntu:~# find / -perm 666/dev/vsock/dev/net/tun/dev/ptmx...额外可进行的操作：1234选项与参数：4. 额外可进行的动作： -exec command ：command 为其他指令，-exec 后面可再接额外的指令来处理搜寻到的结果。 -print ：将结果打印到屏幕上，这个动作是预设动作。示例：12345678#搜寻/run目录下文件权限为666的文件，并用ls -l命令查看其信息root@ubuntu:~# find /run -perm 666 -exec ls -l &#123;&#125; \;srw-rw-rw- 1 root root 0 Apr 13 10:34 /run/cups/cups.socksrw-rw-rw- 1 root root 0 Apr 13 10:34 /run/uuidd/requestsrw-rw-rw- 1 root root 0 Apr 13 10:34 /run/avahi-daemon/socketsrw-rw-rw- 1 root root 0 Apr 13 10:34 /run/acpid.socketsrw-rw-rw- 1 root root 0 Apr 13 10:34 /run/dbus/system_bus_socket...{}代表的是由 find 找到的内容，-exec 一直到\;是执行额外动作的指令。这里不能用管线来代替-exec：12root@ubuntu:~# find /run -perm 666 | ls -ltotal 0《鸟哥的Linux私房菜》读书笔记]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux文件预设权限umask]]></title>
    <url>%2Fblog%2FLinux%E6%96%87%E4%BB%B6%E9%A2%84%E8%AE%BE%E6%9D%83%E9%99%90umask.html</url>
    <content type="text"><![CDATA[当我们在Linux下创建一个新的目录或文件的时候，它都会有个默认的权限。这个权限的设定和umask有关，umask指的是：目前用户在建立文件或目录时候的权限默认值。查阅当前用户umask方式有两种，一种可以直接输入 umask ，就可以看到数字型态的权限设定分数， 一种则是 加入 -S (Symbolic) 这个选项，就会以符号类型的方式来显示出权限了：1234root@ubuntu:~# umask0022root@ubuntu:~# umask -Su=rwx,g=rx,o=rxumask的第一个值为特殊权限。剩下的三个值分别就代表了r，w，x了。Linux中，文件的预设权限为-rw-rw-rw-，目录的预设权限为drwxrwxrwx。要注意的是，umask 的分数指的是该默认值需要减掉的权限！所以如果umask的值为022的时候，在创建新文件或目录的时候，其权限的计算方式为：建立文件时：(-rw-rw-rw-) - (—–w–w-) ==&gt; -rw-r–r–建立目录时：(drwxrwxrwx) - (—–w–w-) ==&gt; drwxr-xr-x验证一下：12345678root@ubuntu:~# cd /temproot@ubuntu:/temp# umask0022root@ubuntu:/temp# touch file1root@ubuntu:/temp# mkdir dir1root@ubuntu:/temp# ls -ld file1 dir1drwxr-xr-x 2 root root 4096 Apr 13 14:35 dir1-rw-r--r-- 1 root root 0 Apr 13 14:35 file1改变umask的值：123root@ubuntu:/temp# umask 033root@ubuntu:/temp# umask0033《鸟哥的Linux私房菜》读书笔记]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux文件隐藏属性]]></title>
    <url>%2Fblog%2FLinux%E6%96%87%E4%BB%B6%E9%9A%90%E8%97%8F%E5%B1%9E%E6%80%A7.html</url>
    <content type="text"><![CDATA[Linux文件或目录除了rwxrwxrwx九个权限设定外，还有隐藏的属性。设置文件或目录的隐藏属性可以指令chattr，而显示文件或目录的隐藏属性则用指令lsattr。chattr：语法：123456789101112131415chattr [+-=][ASacdistu] 文件或目录名称选项与参数：+ ：增加某一个特殊参数，其他原本存在参数则不动。- ：移除某一个特殊参数，其他原本存在参数则不动。= ：设定一定，且仅有后面接的参数A ：当设定了 A 这个属性时，若你有存取此文件(或目录)时，他的访问时间 atime 将不会被修改，可避免 I/O 较慢的机器过度的存取磁盘。S ：一般文件是异步写入磁盘的，如果加上 S 这个属性时，当你进行任何文件的修改，该更动会『同步』写入磁盘中。a ：当设定 a 之后，这个文件将只能增加数据，而不能删除也不能修改数据，只有 root 才能设定这属性c ：这个属性设定之后，将会自动的将此文件『压缩』，在读取的时候将会自动解压缩，但是在储存的时候，将会先进行压缩后再储存。d ：当 dump 程序被执行的时候，设定 d 属性将可使该文件(或目录)不会被 dump 备份i ：他可以让一个文件『不能被删除、改名、设定连结也无法写入或新增数据』对于系统安全性有相当大的帮助。只有 root 能设定此属性。s ：当文件设定了 s 属性时，如果这个文件被删除，他将会被完全的移除出这个硬盘空间，所以如果误删了，完全无法救回来了。u ：与 s 相反的，当使用 u 来配置文件案时，如果该文件被删除了，则数据内容其实还存在磁盘中，可以使用来救援该文件。注意 1：属性设定常见的是 a 与 i 的设定值，而且很多设定值必须要身为 root 才能设定。注意 2：xfs 文件系统仅支援 AadiS 而已。示例：在/temp下新建一个文件，并加入i选项，然后尝试删除：1234root@ubuntu:/temp# touch file2root@ubuntu:/temp# chattr +i file2root@ubuntu:/temp# rm file2rm: cannot remove 'file2': Operation not permitted操作被拒绝，只有移除i选项后，才能够删除：12root@ubuntu:/temp# chattr -i file2root@ubuntu:/temp# rm file2lsattr：语法：12345lsattr [-adR] 文件或目录选项与参数：-a ：将隐藏文件的属性也秀出来；-d ：如果接的是目录，仅列出目录本身的属性而非目录内的文件名；-R ：连同子目录的数据也一并列出来。示例：1234root@ubuntu:/temp# touch file2root@ubuntu:/temp# chattr +iA file2root@ubuntu:/temp# lsattr file2----i--A-----e-- file2《鸟哥的Linux私房菜》读书笔记]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux文件时间类型]]></title>
    <url>%2Fblog%2FLinux%E6%96%87%E4%BB%B6%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B.html</url>
    <content type="text"><![CDATA[Linux文件有三个主要的变动时间：modification time (mtime)： 当该文件的『内容数据』变更时，就会更新这个时间。内容数据指的是文件的内容，而不是文件的属性或权限。status time (ctime)： 当该文件的『状态 (status)』改变时，就会更新这个时间，举例来说，像是权限与属性被更改了，都会更新这个时间。access time (atime)： 当『该文件的内容被取用』时，就会更新这个读取时间 (atime)。举例来说，我们使用 cat 去读取/etc/ltrace.conf， 就会更新该文件的atime 。查看/etc/ltrace.conf文件的相关时间：12345root@ubuntu:/home/mrbird# date;ls -l /etc/ltrace.conf;ls -l --time=atime /etc/ltrace.conf;ls -l --time=ctime /etc/ltrace.conf Wed Apr 12 02:32:27 PDT 2017-rw-r--r-- 1 root root 14867 Apr 11 2016 /etc/ltrace.conf-rw-r--r-- 1 root root 14867 Apr 12 00:31 /etc/ltrace.conf-rw-r--r-- 1 root root 14867 Apr 11 03:20 /etc/ltrace.conf默认的情况下，ls 显示出来的是该文件的 mtime。要修改文件相关时间属性，可以使用touch指令。语法：1234567touch [-acdmt] 文件选项与参数：-a ：仅修订 access time；-c ：仅修改文件的时间，若该文件不存在则不建立新文件；-d ：后面可以接欲修订的日期而不用目前的日期，也可以使用 --date="日期或时间"-m ：仅修改 mtime ；-t ：后面可以接欲修订的时间而不用目前的时间，格式为[YYYYMMDDhhmm]新建一个空文件，并查看其时间：123root@ubuntu:/temp# touch testouchroot@ubuntu:/temp# ls -l testouch-rw-r--r-- 1 root root 0 Apr 12 02:40 testouch修改testouch的mtime为两天前：12root@ubuntu:/temp# ls -l testouch-rw-r--r-- 1 root root 0 Apr 10 02:45 testouch修改testouch的atime为2017/01/01 00:00：123root@ubuntu:/temp# touch -a -t 201701010000 testouch root@ubuntu:/temp# ls -l --time=atime testouch -rw-r--r-- 1 root root 0 Jan 1 00:00 testouch《鸟哥的Linux私房菜》读书笔记]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux文件内容查阅]]></title>
    <url>%2Fblog%2FLinux%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E6%9F%A5%E9%98%85.html</url>
    <content type="text"><![CDATA[Linux文件内容查阅主要使用以下命令：cat：由第一行开始显示文件内容。tac：从最后一行开始显示，可以看出 tac 是 cat 的倒着写。nl：显示的时候，顺道输出行号。more：一页一页的显示文件内容。less：与 more 类似，但是比 more 更好的是，他可以往前翻页。head：只看头几行。tail：只看尾巴几行。od：以二进制的方式读取文件内容。直接检视文件内容cat：cat 是 Concatenate (连续) 的简写，主要的功能是将一个文件的内容连续的印出在屏幕上面。语法：12345678cat [-AbEnTv]选项与参数：-A ：相当于 -vET 的整合选项，可列出一些特殊字符而不是空白而已；-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！-E ：将结尾的断行字符 $ 显示出来；-n ：打印出行号，连同空白行也会有行号，与 -b 的选项不同；-T ：将 [tab] 按键以 ^I 显示出来；-v ：列出一些看不出来的特殊字符示例：使用cat命令查阅/etc/legal文件内容，并加上行号：123456789root@ubuntu:~# cat -n /etc/legal 1 2 The programs included with the Ubuntu system are free software; 3 the exact distribution terms for each program are described in the 4 individual files in /usr/share/doc/copyright. 5 6 Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by 7 applicable law. 8tac（反向列示）：tac 刚好是将 cat 反写过来，所以他的功能就跟 cat 相反。cat 是由第一行到最后一行连续显示在屏幕上，而 tac 则是由最后一行到第一行反向在屏幕上显示出来。使用tac命令查阅/etc/legal文件内容：12345678root@ubuntu:~# tac /etc/legal applicable law.Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by individual files in /usr/share/doc/copyright.the exact distribution terms for each program are described in theThe programs included with the Ubuntu system are free software;nl（添加行号打印）：nl可以将输出的文件内容自动的加上行号。其预设的结果与cat -n有点不太一样， nl可以将行号做比较多的显示设计，包括位数与是否自动补齐 0 等等的功能。语法：12345678910nl [-bnw] 文件选项与参数：-b ：指定行号指定的方式，主要有两种： -b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)； -b t ：如果有空行，空的那一行不要列出行号(默认值)；-n ：列出行号表示的方法，主要有三种： -n ln ：行号在屏幕的最左方显示； -n rn ：行号在自己字段的最右方显示，且不加 0 ； -n rz ：行号在自己字段的最右方显示，且加 0 ；-w ：行号字段的占用的字符数示例：使用nl显示/etc/legal文件内容：12345678root@ubuntu:~# nl /etc/legal 1 The programs included with the Ubuntu system are free software; 2 the exact distribution terms for each program are described in the 3 individual files in /usr/share/doc/copyright. 4 Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by 5 applicable law.可见，空行并没有显示行号，可以使用-b a选项显示空行行号：123456789root@ubuntu:~# nl -b a /etc/legal 1 2 The programs included with the Ubuntu system are free software; 3 the exact distribution terms for each program are described in the 4 individual files in /usr/share/doc/copyright. 5 6 Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by 7 applicable law. 8可翻页查阅当文件内容较多的时候，可以使用more和less命令来翻页显示文件内容。more：使用more查阅/etc/ltrace.conf，页面最后一行会显示出目前显示的百分比：还可以在最后一行输入一些有用的指令：123456空格键 (space)：代表向下翻一页；Enter ：代表向下翻一行；/字符串 ：代表在这个显示的内容当中，向下搜寻『字符串』这个关键词；:f ：立刻显示出文件名以及目前显示的行数；q ：代表立刻离开 more ，不再显示该文件内容；b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。 ​less：less 的用法比起 more 又更加的有弹性，less可用的指令有： bash 空格键 ：向下翻动一页； [pagedown]：向下翻动一页； [pageup] ：向上翻动一页； /字符串 ：向下搜寻『字符串』的功能； ?字符串 ：向上搜寻『字符串』的功能； n ：重复前一个搜寻 (与 / 或 ? 有关) N ：反向的重复前一个搜寻 (与 / 或 ? 有关) g ：前进到这个资料的第一行去； G ：前进到这个数据的最后一行去 (注意大小写)； q ：离开 less 这个程序。 ​12345678## 以行为单位查阅### head（取出前面几行）：语法：```bashhead [-n number] 文件 选项与参数：-n ：后面接数字，代表显示几行的意思示例：12345678910#使用head指令查阅/etc/ltrace.conf，默认输出前10行root@ubuntu:~# head /etc/ltrace.conf ; ltrace.conf;; ~/.ltrace.conf will also be read, if it exists. The -F option may be...#只查看前1行root@ubuntu:~# head -n 1 /etc/ltrace.conf ; ltrace.conf如果数字是负数的话，如使用指令head -n -100 /etc/file 则表示输出file文件去除后100行后的所有行。即如果file文件有150行，使用该指令后，只会输出前50行。tail（取出后面几行）：语法：12345tail [-n number] 文件 选项与参数：-n ：后面接数字，代表显示几行的意思-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c 才会结束 tail 的侦测使用方法和head类似。如果要查阅/etc/ltrace.conf第11行到20行的数据，我们可以使用管线 (|)连接head和tail指令。管线的意思是：前面的指令所输出的讯息，请透过管线交由后续 的指令继续使用。1234567891011root@ubuntu:~# head -n 20 /etc/ltrace.conf | tail -n 10typedef in_addr = struct(hex(uint));int inet_aton(string, +in_addr*);hex(uint) inet_addr(string);hex(uint) inet_network(string);string inet_ntoa(in_addr);in_addr inet_makeaddr(hex(int), hex(int));hex(uint) inet_lnaof(in_addr);hex(uint) inet_netof(in_addr); ; bfd.h加上行号：1234567891011root@ubuntu:~# cat -n /etc/ltrace.conf | head -n 20 | tail -n 10 11 typedef in_addr = struct(hex(uint)); 12 int inet_aton(string, +in_addr*); 13 hex(uint) inet_addr(string); 14 hex(uint) inet_network(string); 15 string inet_ntoa(in_addr); 16 in_addr inet_makeaddr(hex(int), hex(int)); 17 hex(uint) inet_lnaof(in_addr); 18 hex(uint) inet_netof(in_addr); 19 20 ; bfd.h非纯文本档： od当查阅非文本文件的时候，应该使用od命令。语法：123456789od [-t TYPE] 文件选项或参数：-t ：后面可以接各种『类型 (TYPE)』的输出，例如： a ：利用默认的字符来输出； c ：使用 ASCII 字符来输出 d[size] ：利用十进制(decimal)来输出数据，每个整数占用 size bytes ； f[size] ：利用浮点数(floating)来输出数据，每个数占用 size bytes ； o[size] ：利用八进制(octal)来输出数据，每个整数占用 size bytes ； x[size] ：利用十六进制(hexadecimal)来输出数据，每个整数占用 size bytes ；示例：将/usr/bin/passwd 的内容使用 ASCII 方式来展现：123456789od -t c /usr/bin/passwd 0000000 177 E L F 002 001 001 \0 \0 \0 \0 \0 \0 \0 \0 \00000020 003 \0 &gt; \0 001 \0 \0 \0 0 &gt; \0 \0 \0 \0 \0 \00000040 @ \0 \0 \0 \0 \0 \0 \0 360 314 \0 \0 \0 \0 \0 \00000060 \0 \0 \0 \0 @ \0 8 \0 \t \0 @ \0 034 \0 033 \00000100 006 \0 \0 \0 005 \0 \0 \0 @ \0 \0 \0 \0 \0 \0 \00000120 @ \0 \0 \0 \0 \0 \0 \0 @ \0 \0 \0 \0 \0 \0 \00000140 370 001 \0 \0 \0 \0 \0 \0 370 001 \0 \0 \0 \0 \0 \0...将/etc/issue 这个文件的内容以 8 进位列出储存值与 ASCII 的对照表：123456root@ubuntu:~# od -t oCc /etc/issue0000000 125 142 165 156 164 165 040 061 066 056 060 064 056 062 040 114 U b u n t u 1 6 . 0 4 . 2 L0000020 124 123 040 134 156 040 134 154 012 012 T S \ n \ l \n \n0000032《鸟哥的Linux私房菜》读书笔记]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux文件与目录简单操作]]></title>
    <url>%2Fblog%2FLinux%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[Linux下几个特殊的目录：12345. 代表此层目录.. 代表上一层目录- 代表前一个工作目录~ 代表『目前用户身份』所在的家目录~mrbird 代表 mrbird 这个用户的家目录目录相关操作几个常见的处理目录的指令：cd：变换目录；pwd：显示当前目录；mkdir：建立一个新的目录；rmdir：删除一个空的目录。cd (change directory, 变换目录)：1234567891011#切换到var目录下mrbird@ubuntu:~$ cd /var#回到刚刚那个目录mrbird@ubuntu:/var$ cd -/home/mrbird#切换到用户mrbird的家目录mrbird@ubuntu:~$ cd ~mrbird#上一层目录mrbird@ubuntu:~$ cd ..#当前目录mrbird@ubuntu:/home$ cd .pwd (Print Working Directory，显示目前所在的目录)：语法：123pwd [-P]选项与参数：-P ：显示出确实的路径，而非使用链接 (link) 路径。示例：1234567root@ubuntu:/home/mrbird# pwd/home/mrbirdroot@ubuntu:/home/mrbird# cd /var/lockroot@ubuntu:/var/lock# pwd/var/lockroot@ubuntu:/var/lock# pwd -P/run/lock加入-p选项后，显示出了/var/lock的真实路径，因为它是个链接档。mkdir (make directory，建立新目录)：语法：1234mkdir [-mp] 目录名称选项与参数：-m ：配置文件案的权限！直接设定，不需要看预设权限 (umask) 的脸色-p ：帮助你直接将所需要的目录(包含上层目录)递归建立起来。 ​示例：1234567891011121314#创建目录temproot@ubuntu:~# mkdir /temproot@ubuntu:~# cd /temp#直接创建多层级目录报错root@ubuntu:/temp# mkdir test1/test2/test3mkdir: cannot create directory 'test1/test2/test3': No such file or directory#加入-p递归创建root@ubuntu:/temp# mkdir -p test1/test2/test3#创建目录test2，权限为711root@ubuntu:/temp# mkdir -m 711 test2root@ubuntu:/temp# ls -altotal 16...drwx--x--x 2 root root 4096 Apr 11 18:43 test2rmdir (删除『空』的目录)：语法：123rmdir [-p] 目录名称选项与参数：-p ：连同『上层』『空的』目录也一起删除示例：12345678910#删除空目录test2root@ubuntu:/temp# rmdir test2root@ubuntu:/temp# lstest1#删除非空目录test1，提示无法删除root@ubuntu:/temp# rmdir test1rmdir: failed to remove 'test1': Directory not empty#使用-p递归删除root@ubuntu:/temp# rmdir -p test1/test2/test3root@ubuntu:/temp# ls文件与目录管理相关的命令有：ls：显示属性；cp：拷贝；rm：删除文件；mv移动目录或文件等。ls（list）文件与目录的检视：语法：123456789101112131415161718192021222324ls [-aAdfFhilnrRSt] 文件名或目录名称..ls [--color=&#123;never,auto,always&#125;] 文件名或目录名称..ls [--full-time] 文件名或目录名称..选项与参数：-a ：全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)-A ：全部的文件，连同隐藏档，但不包括 . 与 .. 这两个目录-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)-f ：直接列出结果，而不进行排序 (ls 预设会以档名排序！)-F ：根据文件、目录等信息，给予附加数据结构，例如： *:代表可执行文件； /:代表目录； =:代表 socket 文件； |:代表 FIFO 文件；-h ：将文件容量以人类较易读的方式(例如 GB, KB 等等)列出来；-i ：列出 inode 号码，inode 的意义下一章将会介绍；-l ：长数据串行出，包含文件的属性与权限等等数据；(常用)-n ：列出 UID 与 GID 而非使用者与群组的名称 (UID 与 GID 会在账号管理提到！)-r ：将排序结果反向输出，例如：原本档名由小到大，反向则为由大到小；-R ：连同子目录内容一起列出来，等于该目录下的所有文件都会显示出来；-S ：以文件容量大小排序，而不是用档名排序；-t ：依时间排序，而不是用档名。--color=never ：不要依据文件特性给予颜色显示；--color=always ：显示颜色--color=auto ：让系统自行依据设定来判断是否给予颜色--full-time ：以完整时间模式 (包含年、月、日、时、分) 输出--time=&#123;atime,ctime&#125; ：输出 access 时间或改变权限属性时间 (ctime) 而非内容变更时间 (modification time)ls命令很常用，这里仅示例--color，--full-time，--time参数：--color参数的使用：ls默认显示根据文件特性显示颜色，可以使用--color=never关闭！--full-time参数的使用：12345678root@ubuntu:/var# ls --full-timetotal 48drwxr-xr-x 2 root root 4096 2017-04-11 18:07:45.485003705 -0700 backupsdrwxr-xr-x 15 root root 4096 2017-04-11 03:49:17.681766424 -0700 cachedrwxrwsrwt 2 root whoopsie 4096 2017-04-11 04:17:29.961240226 -0700 crashdrwxr-xr-x 64 root root 4096 2017-04-11 04:56:56.702320395 -0700 libdrwxrwsr-x 2 root staff 4096 2016-04-12 13:14:23.000000000 -0700 local...该完整的呈现了文件的修改时间 (modification time)。cp（copy）复制文件或目录：语法：1234567891011121314[root@study ~]# cp [-adfilprsu] 来源文件(source) 目标文件(destination)[root@study ~]# cp [options] source1 source2 source3 .... directory选项与参数：-a ：相当于 -dr --preserve=all 的意思，至于 dr 请参考下列说明；(常用)-d ：若来源文件为链接文件的属性(link file)，则复制链接文件属性而非文件本身；-f ：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；-i ：若目标文件(destination)已经存在时，在覆盖时会先询问动作的进行(常用)-l ：进行硬式连结(hard link)的连结档建立，而非复制文件本身；-p ：连同文件的属性(权限、用户、时间)一起复制过去，而非使用默认属性(备份常用)；-r ：递归持续复制，用于目录的复制行为；(常用)-s ：复制成为符号链接文件 (symbolic link)，亦即『快捷方式』文件；-u ：destination 比 source 旧才更新 destination，或 destination 不存在的情况下才复制。--preserve=all ：除了 -p 的权限相关参数外，还加入 SELinux 的属性, links, xattr 等也复制了。 最后需要注意的，如果来源档有两个以上，则最后一个目的文件一定要是『目录』才行。不同权限用户使用cp命令会产生不同的结果，下面举几个实例：12345678910111213141516171819202122232425262728293031323334353637383940#用 root 身份，将家目录下的 .bashrc 复制到 /tmp 下，并更名为 bashrcroot@ubuntu:~# cp ~/.bashrc /temp/bashrc#使用-i选项，当目标文件已经存在时，会进行操作询问root@ubuntu:~# cp -i ~/.bashrc /temp/bashrccp: overwrite '/temp/bashrc'? y &lt;==n 不覆盖，y 为覆盖 root@ubuntu:/var/log# cd /temp#复制/var/log/wtmp 到当前（/temp）目录，别忘记了加.root@ubuntu:/temp# cp /var/log/wtmp .root@ubuntu:/temp# lsbashrc wtmp #使用ls -l命令观察源文件和复制文件的权限，可见两者并不一致root@ubuntu:/temp# ls -l /var/log/wtmp wtmp-rw-rw-r-- 1 root utmp 8448 Apr 11 18:11 /var/log/wtmp-rw-r--r-- 1 root root 8448 Apr 11 19:08 wtmp#使用-a选项，连同权限一起复制root@ubuntu:/temp# cp -a /var/log/wtmp wtmp1root@ubuntu:/temp# ls -l /var/log/wtmp wtmp wtmp1-rw-rw-r-- 1 root utmp 8448 Apr 11 18:11 /var/log/wtmp-rw-r--r-- 1 root root 8448 Apr 11 19:08 wtmp-rw-rw-r-- 1 root utmp 8448 Apr 11 18:11 wtmp1 #配合-r选项将/var/log/目录下的所有内容复制到/temp目录下root@ubuntu:/temp# cp -ar /var/log/ .root@ubuntu:/temp# lsbashrc log wtmp wtmp1root@ubuntu:/temp# ls logXorg.0.log auth.log dmesg gpu-manager.log lightdm ... #建立一个bashrc文件的连结档 (symbolic link)root@ubuntu:/temp# cp -s bashrc bashrc_slinkroot@ubuntu:/temp# cp -l bashrc bashrc_hlinkroot@ubuntu:/temp# ls -ltotal 36-rw-r--r-- 2 root root 3106 Apr 11 19:04 bashrc-rw-r--r-- 2 root root 3106 Apr 11 19:04 bashrc_hlinklrwxrwxrwx 1 root root 6 Apr 11 19:24 bashrc_slink -&gt; bashrc...最后一个例子中，使用 -l 及 -s 都会建立所谓的连结档(link file)，但是这两种连结档却有不一样的情况。那个 -l 就是所谓的实体链接(hard link)，至于 -s 则是符号链接(symbolic link)， 简单来说，bashrc_slink 是一个『快捷方式』，这个快捷方式会连结到 bashrc 去。所以你会看到档名右侧会有个指向(-&gt;)的符号。bashrc_hlink 文件与 bashrc 的属性与权限完全一模一样，与尚未进行连结前的差异则是第二栏的 link 数由 1 变成 2。rm（remove）移除文件或目录：语法：12345rm [-fir] 文件或目录选项与参数：-f ：就是 force 的意思，忽略不存在的文件，不会出现警告讯息；-i ：互动模式，在删除前会询问使用者是否动作-r ：递归删除，这是非常危险的选项！！示例：12345678910111213141516171819202122232425#删除/temp目录下的bashrc文件root@ubuntu:/temp# rm -i bashrcrm: remove regular file 'bashrc'? y #删除/temp/log目录root@ubuntu:/temp# rmdir logrmdir: failed to remove 'log': Directory not empty#非空目录，使用rm -r命令递归删除，无需询问的话去掉-i选项即可root@ubuntu:/temp# rm -ri logrm: descend into directory 'log'? yrm: descend into directory 'log/vmware'? yrm: remove regular file 'log/vmware/rc.local.log'? ^C #删除一个带有 - 开头的文件root@ubuntu:/temp# touch ./-aaa-root@ubuntu:/temp# ls-aaa- bashrc_hlink bashrc_slink log wtmp wtmp1root@ubuntu:/temp# rm -aaa-rm: invalid option -- 'a'Try 'rm ./-aaa-' to remove the file '-aaa-'. &lt;== bash给的建议Try 'rm --help' for more information.#因为-是选项的意思，系统误判，使用转义符解决：root@ubuntu:/temp# rm ./-aaa-root@ubuntu:/temp# lsbashrc_hlink bashrc_slink log wtmp wtmp1最后一个例子中，使用命令rm -- -aaa-也可以删除-aaa-文件。mv（move）移动文件与目录，或重命名：语法：123456mv [-fiu] source destinationmv [options] source1 source2 source3 .... directory选项与参数：-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！-u ：若目标文件已经存在，且 source 比较新，才会更新 (update)示例：1234567891011121314151617#在/temp下新建目录tmp，然后将bashrc文件移动到该目录下root@ubuntu:/temp# mkdir tmproot@ubuntu:/temp# mv bashrc tmproot@ubuntu:/temp# lsbashrc_hlink bashrc_slink log tmp wtmp wtmp1root@ubuntu:/temp# ls tmpbashrc #将目录tmp重命名为tmp1root@ubuntu:/temp# mv tmp tmp1root@ubuntu:/temp# lsbashrc_hlink bashrc_slink log tmp1 wtmp wtmp1 #将log目录下的wtmp和vmware文件一起移动到tmp1目录下root@ubuntu:/temp# mv log/wtmp log/vmware tmp1root@ubuntu:/temp# ls tmp1bashrc vmware wtmp查看文件类型如果你想要知道某个文件的基本数据，例如是属于ASCII 或者是data 文件，或者是 binary等，可以利用 file 这个指令来查看：1234567mrbird@ubuntu:/temp$ file bashrc_hlink bashrc_hlink: ASCII textmrbird@ubuntu:/temp$ file wtmpwtmp: datamrbird@ubuntu:/temp$ file /usr/bin/passwd /usr/bin/passwd: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV),dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=40a9016718f4247f09acc62e1bbf056372bf31f5, stripped《鸟哥的Linux私房菜》读书笔记]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS优先级规则]]></title>
    <url>%2Fblog%2FCSS%E4%BC%98%E5%85%88%E7%BA%A7%E8%A7%84%E5%88%99.html</url>
    <content type="text"><![CDATA[特殊性如果一个元素有两个以上冲突的属性声明，那么特殊性（specificity）高的声明将会胜出。特殊性的值表述为四个部分，如0,0,0,0，具体规则：1.选择器中给定的各个ID属性值，加0,1,0,0。2.选择器中给定的各个类属型值，属性选择和伪类，加0,0,1,0。3.选择器中给定的各个元素和伪元素，加0,0,0,1。4.通配符对特殊性没有任何贡献，加0,0,0,0。比如：1234567h1 &#123;color: red;&#125; /* specificity = 0,0,0,1 */p em &#123;color: purple;&#125; /* specificity = 0,0,0,2 */*.grape &#123;color: purple;&#125; /* specificity = 0,0,1,0 */.bright &#123;color: purple;&#125; /* specificity = 0,0,0,1 */p.bright em.dark &#123;color: maroon;&#125; /* specificity = 0,0,2,2 */#drop-down &#123;color: green;&#125; /* specificity = 0,1,0,0 */div#sidebar *[href] &#123;color: black;&#125; /* specificity = 0,1,1,1 */特殊性大小的比较规则为从左到右，数值大的越大。举个例子，考虑有如下规则的html：12345678910111213&lt;style&gt; h1 + p &#123;color: black; font-style: italic&#125; /* specificity = 0,0,0,2 */ p &#123;color: gray; background: white; font-style: normal&#125; /* specificity = 0,0,0,1 */ *.aside &#123;color: black; background: silver&#125; /* specificity = 0,0,1,0 */&lt;/style&gt;&lt;body&gt; &lt;h1&gt;Greeting!&lt;/h1&gt; &lt;p class="aside"&gt;It's a fine way to start a day.&lt;/p&gt; &lt;p&gt;There are many ways to greet a man.&lt;/p&gt; &lt;h1&gt;Salutations&lt;/h1&gt; &lt;p&gt;There is nothing finer than a hearty welcome from ...&lt;/p&gt; &lt;p class="aside"&gt;Although a thick and juicy hamburger with...&lt;/p&gt;&lt;/body&gt;最终显示如下图所示：内联样式特殊性特殊性值的第一位是为内联样式保留的，每个内联样式的特殊性都为1,0,0,0，比如下面的h1元素将显示为绿色：12h1#meadow &#123;color: red&#125;&lt;h1 id="meadow" style="color: green;"&gt;The title&lt;/h1&gt;重要性对于某个非常重要的声明，可以在这些声明的结束分号前插入!important。如果一个非重要声明和重要声明冲突，胜出的总是重要声明。如：1234567&lt;style&gt; h1 &#123;color: green !important;&#125; h1.title &#123;color: red&#125;&lt;/style&gt;&lt;body&gt; &lt;h1 class="title"&gt;Greeting!&lt;/h1&gt;&lt;/body&gt;最终h1为绿色。继承对于继承的值没有特殊性，而非0特殊性。举个例子：12345678&lt;style&gt; * &#123;color: lightcoral&#125; h1.title &#123;color: black&#125;&lt;/style&gt;&lt;body&gt; &lt;h1 class="title"&gt;Meerkat &lt;em&gt;Central&lt;/em&gt;&lt;/h1&gt; &lt;p&gt;Welcome to the best place on the web...&lt;/p&gt;&lt;/body&gt;显示如下图所示：结果证明了0特殊性比无特殊性要强。按权重和来源排序一般来说，权重由大到小的顺序为：1.读者的重要声明。2.创作人员的重要声明。3.创作人员的正常声明。4.读者的正常声明。5.用户代理声明。CSS中的样式一共有三种来源：创作人员、读者和用户代理。创作人员（author’s+style）样式应该是我们最熟悉的，如果你是一个前端开发者，那么你写的那些样式就叫做创作人员样式。用户代理样式（agent’s+style）。用户代理也就是我们通常所说的浏览器（IE、Firefox等等），这些浏览器会提供一些默认的样式。读者样式（reader’s+style）。所谓读者自然就是浏览网页的用户，有些时候这些用户里可能会有人不满意网页的配色，或者字体大小，这时候他们就是通过浏览器提供的接口为网站添加读者样式。比如：12p em &#123;color: black;&#125; /* author's style sheet*/ p em &#123;color: yellow;&#125; /* reader's style sheet*/第一条规则将胜出。12p em &#123;color: black !important;&#125; /* author's style sheet*/ p em &#123;color: yellow !important;&#125; /* reader's style sheet*/第二条规则将胜出。]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu16.04搭建Java开发环境]]></title>
    <url>%2Fblog%2Fubuntu16-04%E6%90%AD%E5%BB%BAJava%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html</url>
    <content type="text"><![CDATA[安装JDKJDK1.8下载地址：http://pan.baidu.com/s/1qYPORRA，JDK安装步骤：1.将下载的包解压到/opt/jvm：12sudo mkdir /opt/jvmsudo tar zxvf jdk-8u77-linux-x64.tar.gz -C /opt/jvm如果提示失败，是因为目录权限不足，可以使用chmod改变权限：1sudo chmod 777 /opt /opt/jvm2.配置jdk的环境变量，打开 /etc/profile文件（sudo vim /etc/profile），在文件末尾添加下语句：1234export JAVA_HOME=/opt/jvm/jdk1.8.0_77export JRE_HOME=$&#123;JAVA_HOME&#125;/jreexport CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH点击Esc，输入:wq保存退出。3.使其生效：1sudo source /etc/profile如若提示sudo: source：找不到命令，可以切换为root，再次执行，操作如下：12sudo -s -Hsource /etc/profile检查是否成功：1234mrbird@mrbird-xps13:~$ java -versionjava version "1.8.0_77"Java(TM) SE Runtime Environment (build 1.8.0_77-b03)Java HotSpot(TM) 64-Bit Server VM (build 25.77-b03, mixed mode)安装eclipseeclipse下载，官网：https://www.eclipse.org/downloads/eclipse-packages/?osType=linux&amp;release=undefined，或者百度云：http://pan.baidu.com/s/1pKMmRR9。eclipse安装步骤：1.下载后切换到下载目录，将其解压到/opt/文件夹中：1sudo tar zxvf eclipse-jee-neon-3-linux-gtk-x86_64.tar.gz -C /opt2.然后到/opt/eclipse目录下双击eclipse即可，为了方便，建议将其锁定到启动器。安装MySQL1.在Ubuntu 16.04上安装MySQL：1sudo apt-get install mysql-server mysql-client2.安装过程中需要你输入MySQL 管理员用户（root）密码 。3.运行MySQL初始化安全脚本：1sudo mysql_secure_installation4.根据提示信息设置：更改root密码、移除MySQL的匿名用户、禁止root远程登录、删除test数据库。检查是否成功：123456789101112131415161718192021222324252627mrbird@mrbird-xps13:~$ mysql -u root -pEnter password: Welcome to the MySQL monitor. Commands end with ; or \g.Your MySQL connection id is 4Server version: 5.7.17-0ubuntu0.16.04.1 (Ubuntu) Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners. Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. mysql&gt; show databases -&gt; ;+--------------------+| Database |+--------------------+| information_schema || mysql || performance_schema || sys |+--------------------+4 rows in set (0.00 sec) mysql&gt;]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XPS13安装win10 ubuntu双系统]]></title>
    <url>%2Fblog%2FXPS13%E5%AE%89%E8%A3%85win10-ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F.html</url>
    <content type="text"><![CDATA[这几天被安装双系统折腾得够呛，昨天终于安装成功，所以撰写此文以备忘。安装和启动方式均为UEFI，进行以下操作时先进行数据备份！博主电脑为Dell XPS13 9350，不同电脑进入BIOS快捷键可能不一样，请自行百度。安装win10win10选择的是家庭中文版1607 64bit，因为序列号是烧在主板上的，所以安装完联网就自动激活了，而且对于我来说家庭版和专业版没有太大区别…win10镜像文件下载地址：http://pan.baidu.com/s/1dF3Q8Id，下载后用UltraISO将镜像文件刻录到U盘里：1.打开UltralISO，选择文件→打开，选中下载好的win10镜像文件： 2.选择启动→写入硬盘映像，硬盘驱动器选择插入的U盘：3.点击便捷启动→写入新的驱动器引导扇区→Windows9x，弹出框：4.点击确定，然后点击写入，等待写入完毕。写入完毕后重启电脑，出现品牌Logo的时候按F2进如BIOS设置界面。进行如下设置：• 将Security Boot 设置为Disabled• 启动方式设置为UEFI保存设置重启电脑，出现品牌Logo的时候按F12进入启动选择界面，然后选择UEFI模式下的U盘选项，接下来根据提示操作即可。安装途中，可能出现无法将windows安装到磁盘0的分区1错误提示，解决办法为：按住“shift+f10”，呼出“cmd”命令符输入如下命令：1234567diskpart //回车执行，进入diskpart命令模式list disk //回车执行，显示磁盘信息select disk 0 //回车执行，选择第0个磁盘（电脑的硬盘编号是从0开始的）clean //回车执行，删除磁盘分区&amp;格式化（所以说要做好备份！）convert mbr //回车执行，将当前磁盘分区设置为mbr形式convert gpt //回车执行，将将当前磁盘分区设置为gpt形式exit //回车执行，退出刷新磁盘，即可继续安装。安装Ubuntu16.04镜像文件在ubuntu官网下载：https://www.ubuntu.com/download/desktop。安装前，先在win10下压缩出100GB的磁盘空间（我的磁盘大小为256GB，所以分100GB给ubuntu，保持未分配状态）。同样使用UltralISO将ubuntu镜像文件刻录进U盘里（U盘先格式化为FAT32模式，然后刻录时写入新的驱动器引导扇区为syslinux）。刻录完重启电脑，出现品牌Logo的时候按F12进入启动选择界面，选择UEFI模式下的U盘选项，然后Install ubuntu。安装过程中不要选择“与其它系统共存”那一项，而选择最后那个“其它选项（创建自己的分区）”，然后选择空闲分区（就是刚刚分出来的100GB），下面依次点击新建分区表来挂载分区：1.新建efi系统分区，选中逻辑分区和空间起始位置，分配512MB。2.挂载“/home”，类型为EXT4日志文件系统，选中逻辑分区和空间起始位置，分配20GB。3.挂载“/usr”，类型为EXT4日志文件系统，选中逻辑分区和空间起始位置，分配45GB。4.挂载“/”，类型为EXT4日志文件系统，选中逻辑分区和空间起始位置，分配20GB。5.swap交换空间，这个也就是虚拟内存的地方，选择主分区和空间起始位置，剩下的内存都分配给它。分配好各个挂载点后，选择“安装引导启动器的设备”，选择第一步创建的efi系统分区！！！！！安装成功后，拔掉U盘并且重启，出现品牌Logo的时候按F2进如BIOS设置界面开启Secure Boot，保存退出启动电脑就可以看到系统选择界面了。最后贴两张安装好后的系统截图：win10ubuntu：]]></content>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux文件权限]]></title>
    <url>%2Fblog%2FLinux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90.html</url>
    <content type="text"><![CDATA[Linux 最优秀的地方之一就在于他的多人多任务环境。而为了让各个使用者具有较保密的文件数，因此文件的权限管理就变得很重要了。Linux一般将文件可存取的身份分为三个类别：owner/group/others，且三种身份各有read/write/execute等权限。文件属性使用ls命令查看当前目录下文件的属性：12345678910111213mrbird@mrbird-xps13:~$ ls -alh总用量 196Kdrwxr-xr-x 32 mrbird mrbird 4.0K 3月 26 11:34 .drwxr-xr-x 4 root root 4.0K 3月 25 03:31 ..drwxrwxr-x 4 mrbird mrbird 4.0K 3月 26 10:58 .audacity-data-rw------- 1 mrbird mrbird 5.5K 3月 26 11:18 .bash_history-rw-r--r-- 1 mrbird mrbird 220 3月 25 03:31 .bash_logout-rw-r--r-- 1 mrbird mrbird 3.7K 3月 25 03:31 .bashrcdrwx------ 25 mrbird mrbird 4.0K 3月 26 11:34 .cachedrwx------ 30 mrbird mrbird 4.0K 3月 26 10:51 .configdrwxrwxr-x 4 mrbird mrbird 4.0K 3月 25 20:19 .cxofficedrwx------ 3 mrbird mrbird 4.0K 3月 25 11:35 .dbus...文件属性分为7个部分，从左到右依次是：文件类型和权限，连接数，拥有者，群组，文件容量，修改日期和文件名。1.文件的类型与权限（permission）：如：drwxrwxr-x我们拆分为d rwx rwx r-x 四个部分，第一部分代表文件类型，类型有：• 当为[ d ]则是目录，例如上面文件名为『.config』的那一行。• 当为[ - ]则是文件，例如上表档名为『.bash_history』那一行。• 若是[ l ]则表示为连结档（link file）。• 若是[ b ]则表示为装置文件里面的可供储存的接口设备（可随机存取装置）。• 若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标（一次性读取装置）。剩余的三个部分分别表示文件拥有者可具备的权限，加入此群组账号的权限和非本人且没有加入本群组之其他账号的权限。其中rwx分别表示：[ r ]代表可读（read）、[ w ]代表 可写（write）、[ x ]代表可执行（execute）。如果没有权限，就用减号[ - ]表示。2.连接数（i-node）：每个文件都会将他的权限与属性记录到文件系统的 i-node 中，不过我们使用的目录树却是使用文件名来记录，因此每个档名就会连结到一个 i-node。这个属性记录的就是有多少不同的档名连结到相同的一个 i-node 号码了。3.拥有者：表示这个文件(或目录)的『拥有者账号』。4.群组：在 Linux 系统下，你的账号会加入于一个或多个的群组中。例如p1，p2，p3均属于 people 这个群组，假设某个文件所属的群组为 people，且该文件的权限为（-rwxrwx---），则p1，p2，p3三人对于该文件都具有可读、可写、可执行的权限（看群组权限）。 但如果是不属于people群组的其他账号，对于此文件就不具有任何权限了。5.文件容量：代表文件的容量大小，默认单位为 bytes。6.修改日期：代表文件创建或最后修改的日期。7.文件名：如果为隐藏文件，则以.开头。更改文件属性和权限涉及的指令：chgrp：改变文件所属群组，chown：改变文件拥有者，chmod：改变文件的权限。1.chgrp（change group）：语法：1234chgrp [-R] dirname/filename ...选项与参数:-R : 进行递归（recursive）的持续变更，亦即连同次目录下的所有文件、 目录都更新成为这个群组之意。常常用在变更某一目录内所有的文件的情况。比如，改变文件examples.desktop的群组为root：123456789root@mrbird-xps13:/home/mrbird# ls -lh总用量 48K-rw-r--r-- 1 mrbird mrbird 8.8K 3月 25 03:31 examples.desktop...root@mrbird-xps13:/home/mrbird# chgrp root examples.desktop root@mrbird-xps13:/home/mrbird# ls -lh总用量 48K-rw-r--r-- 1 mrbird root 8.8K 3月 25 03:31 examples.desktop...2.chown（change owner）：chown不但可以改变文件拥有者，也可以改变群组！语法如下：1234chown [-R] 账号名称 文件或目录chown [-R] 账号名称:组名 文件或目录选项与参数:-R : 进行递归(recursive)的持续变更,亦即连同次目录下的所有文件都变更例：将examples.desktop的拥有者改为root：123456789root@mrbird-xps13:/home/mrbird# ls -lh总用量 48K-rw-r--r-- 1 mrbird mrbird 8.8K 3月 25 03:31 examples.desktop...root@mrbird-xps13:/home/mrbird# chown root examples.desktop root@mrbird-xps13:/home/mrbird# ls -lh总用量 48K-rw-r--r-- 1 root mrbird 8.8K 3月 25 03:31 examples.desktop...例：将examples.desktop的拥有者和群组都改为root：12345root@mrbird-xps13:/home/mrbird# chown root:root examples.desktop root@mrbird-xps13:/home/mrbird# ls -lh总用量 48K-rw-r--r-- 1 root root 8.8K 3月 25 03:31 examples.desktop...3.chmod：改变权限有两种方式：数字类型和符号类型。• 数字类型改变文件权限：rwx分别代表421，例如当权限为: [-rwxrwx---] 分数 则是：owner = rwx = 4+2+1 = 7group = rwx = 4+2+1 = 7others= — = 0+0+0 = 0数字类型改变权限语法：1234chmod [-R] xyz 文件或目录选项与参数:xyz : 就是刚刚提到的数字类型的权限属性,为 rwx 属性数值的相加。-R : 进行递归(recursive)的持续变更,亦即连同次目录下的所有文件都会变更例：将examples.desktop的权限都启用：123456789root@mrbird-xps13:/home/mrbird# ls -lh总用量 48K-rw-r--r-- 1 root root 8.8K 3月 25 03:31 examples.desktop...root@mrbird-xps13:/home/mrbird# chmod 777 examples.desktop root@mrbird-xps13:/home/mrbird# ls -lh总用量 48K-rwxrwxrwx 1 root root 8.8K 3月 25 03:31 examples.desktop...• 符号类型改变文件权限在符号类型改变权限的规则中，我们使用u，g，o来代表user，group和owner三种身份的权限。此外，a 则代表 all 亦即全部的身份。相应规则可看下表：chmodugoa+(加入)-(除去)=(设定)rwx文件或目录例如，将文件examples.desktop的权限改为-rw-r--r--：12345root@mrbird-xps13:/home/mrbird# chmod u=rw,go=r examples.desktop root@mrbird-xps13:/home/mrbird# ls -lh总用量 48K-rw-r--r-- 1 root root 8.8K 3月 25 03:31 examples.desktop...例如，增加文件examples.desktop每个人均可写入的权限：12345root@mrbird-xps13:/home/mrbird# chmod a+w examples.desktop root@mrbird-xps13:/home/mrbird# ls -lh总用量 48K-rw-rw-rw- 1 root root 8.8K 3月 25 03:31 examples.desktop...权限的意义1.对于文件来说，rwx代表：• r (read)：可读取此一文件的实际内容,如读取文本文件的文字内容等。• w (write)：可以编辑、新增或者是修改该文件的内容（但不含删除该文件）。• x (eXecute)：该文件具有可以被系统执行的权限（类似与window中的exe，bat等）。2.对于目录来说，rwx代表：• r (read contents in directory)：表示具有读取目录结构列表的权限，所以当你具有读取（r）一个目录的权限时，表示你可以查询该目录下的文件名数据。 所以你就可以利用 ls 这个指令将该目录的内容列表显示出来。• w (modify contents of directory)：表示你具有异动该目录结构列表的权限，也就是可以对该目录或者其下的文件进行曾删改操作！• x (access directory)：目录的 x 代表的是用户能否进入该目录成为工作目录，所谓的工作目录（work directory）就是你目前所在的目录。]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leanote博客主题Material Design]]></title>
    <url>%2Fblog%2FLeanote%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98Material-Design.html</url>
    <content type="text"><![CDATA[Material Design（卡片式材料设计）是谷歌在I/O 2014上发布的新的设计语言。在Material的扁平化设计中，它使用了分层元素来营造三维空间。该主题有Light和Dark两种显示模式，可通过toolBar右侧的按钮切换。博客可在主题文件theme.json中作简单的修改，theme.json文件内容如下：12345678910111213&#123; ... "WebImgName": "leanote.png", "Color": "blue", "ColorStrength": "300", "BlogImg": "material.jpg", "FriendLinks": [ &#123;"Title": "My Note", "Url": "https://leanote.com/note"&#125;, &#123;"Title": "Leanote Home", "Url": "https://leanote.com"&#125;, &#123;"Title": "Leanote BBS", "Url": "http://bbs.leanote.com"&#125;, &#123;"Title": "Leanote Github", "Url": "https://github.com/leanote/leanote"&#125; ]&#125;主题预览：theme.json文件中，WebImgName 为网页小图标图片名称+格式名， BlogImg为博客标题背景图+格式名，标题的背景图尺寸建议为350X130，Color为博客颜色（比如toolBar和按钮等组件的颜色），ColorStrength为颜色的浓度。下面为所有可取的值： 这里有一点需要注意，颜色名称必须为全小写，比如Blue应写为blue。如有问题，欢迎留言。2017年3月20日修复了几处在火狐浏览器下的bug。2017年3月23日修复Markdown下点击文章导航不跳转问题。最新主题包下载地址：github]]></content>
      <tags>
        <tag>Leanote</tag>
        <tag>theme</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建SSM (Spring+SpringMVC+MyBatis)]]></title>
    <url>%2Fblog%2F%E6%90%AD%E5%BB%BASSM-Spring-SpringMVC-MyBatis.html</url>
    <content type="text"><![CDATA[Spring+SpringMVC的搭建参考博文 —— 搭建SpringMVC。这里主要记录SpringMVC与MyBatis的整合。准备工作数据库使用MySql，创建一张测试表：1234567 CREATE TABLE `emp` ( `ID` int(4) NOT NULL AUTO_INCREMENT, `NAME` varchar(50) COLLATE utf8_unicode_ci NOT NULL, `AGE` int(11) DEFAULT NULL, `BIRTHDAY` date DEFAULT NULL, PRIMARY KEY (`ID`))引入依赖：123456789101112131415161718192021222324252627282930313233343536&lt;!-- spring事务 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;4.3.5.RELEASE&lt;/version&gt;&lt;/dependency&gt; &lt;!-- spring jdbc --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;4.3.5.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!-- mysql数据库连接包--&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.6&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 数据库连接池--&gt;&lt;dependency&gt; &lt;groupId&gt;c3p0&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.1.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- mybatis --&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- mybaits-spring --&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.3.0&lt;/version&gt;&lt;/dependency&gt;Spring配置文件在applicationContext.xml文件中配置数据库：12345678910111213&lt;!-- 属性占位符 --&gt;&lt;context:property-placeholder location="classpath:/config.properties" /&gt;&lt;!--配置数据源--&gt;&lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"&gt; &lt;property name="driverClass" value="$&#123;jdbc.driver&#125;" /&gt; &lt;property name="jdbcUrl" value="$&#123;jdbc.url&#125;" /&gt; &lt;property name="user" value="$&#123;jdbc.username&#125;" /&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;" /&gt; &lt;property name="maxPoolSize" value="40" /&gt; &lt;property name="minPoolSize" value="1" /&gt; &lt;property name="initialPoolSize" value="10" /&gt; &lt;/bean&gt;配置SqlSessionFactory以及sqlSessionTemplate：12345678910&lt;!-- mybatis 的SqlSessionFactory --&gt;&lt;bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" scope="prototype"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;!-- 指定mybaits配置文件路径 --&gt; &lt;property name="configLocation" value="classpath:mybatis-config.xml"/&gt;&lt;/bean&gt;&lt;!-- sqlSessionTemplate --&gt;&lt;bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype"&gt; &lt;constructor-arg index="0" ref="sqlSessionFactory"/&gt;&lt;/bean&gt;配置事务：1234567&lt;!-- 事物管理器配置 --&gt;&lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource"/&gt;&lt;/bean&gt;&lt;!-- 开启注解事务 --&gt;&lt;tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/&gt;配置扫描mapper：123456&lt;!-- 采用自动扫描的方式创建mapper bean --&gt;&lt;bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="ssm"/&gt; &lt;property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/&gt; &lt;property name="annotationClass" value="org.springframework.stereotype.Repository"/&gt;&lt;/bean&gt;MyBatis配置文件mybaits-config.xml：123456789101112131415161718192021 &lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt; &lt;configuration&gt; &lt;settings&gt; &lt;setting name="cacheEnabled" value="true"/&gt; &lt;setting name="useGeneratedKeys" value="true"/&gt; &lt;setting name="defaultExecutorType" value="REUSE"/&gt; &lt;setting name="lazyLoadingEnabled" value="true"/&gt; &lt;setting name="defaultStatementTimeout" value="25000"/&gt; &lt;/settings&gt; &lt;typeAliases&gt; &lt;!--给实体类起一个别名 --&gt; &lt;typeAlias type="ssm.mrbird.entity.Emp" alias="emp" /&gt; &lt;/typeAliases&gt; &lt;mappers&gt; &lt;!--RoleMapper.xml装载进来 同等于把'mapper'的实现装载进来 --&gt; &lt;mapper resource="ssm/mrbird/mapper/EmpMapper.xml" /&gt; &lt;/mappers&gt; &lt;/configuration&gt;创建实体创建库表对应实体Emp：12345678910import java.io.Serializable;import java.sql.Date; public class Emp implements Serializable&#123; private long id; private String name; private int age; private Date birthday; // get set 略&#125;接口与映射创建一个包含基本CRUD的接口EmpMapper：12345678910import org.springframework.stereotype.Repository;import ssm.mrbird.entity.Emp; @Repositorypublic interface EmpMapper &#123; public void insertEmp(Emp emp); public void updateEmp(Emp emp); public void deleteEmp(long id); public Emp getEmp(long id);&#125;其对应的映射文件EmpMapper.xml：1234567891011121314151617181920212223&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="ssm.mrbird.mapper.EmpMapper"&gt; &lt;insert id="insertEmp" parameterType="emp"&gt; insert into emp(name,age,birthday) values (#&#123;name&#125;,#&#123;age&#125;,#&#123;birthday&#125;) &lt;/insert&gt; &lt;update id="updateEmp" parameterType="emp"&gt; update emp &lt;set&gt; &lt;if test="name != null"&gt;name = #&#123;name&#125;,&lt;/if&gt; &lt;if test="age != null"&gt;age = #&#123;age&#125;,&lt;/if&gt; &lt;if test="birthday != null"&gt;birthday = #&#123;birthday&#125;&lt;/if&gt; &lt;/set&gt; where id = #&#123;id&#125; &lt;/update&gt; &lt;delete id="deleteEmp" parameterType="long"&gt; delete from emp where id = #&#123;id&#125; &lt;/delete&gt; &lt;select id="getEmp" parameterType="long" resultType="emp"&gt; select id,name,age,birthday from emp where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt;配置服务层首先创建接口EmpService：12345678import ssm.mrbird.entity.Emp; public interface EmpService &#123; public void insertEmp(Emp emp); public void updateEmp(Emp emp); public void deleteEmp(long id); public Emp getEmp(long id); &#125;其实现类EmpServiceImpl：123456789101112131415161718192021222324252627282930313233343536import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional; import ssm.mrbird.entity.Emp;import ssm.mrbird.mapper.EmpMapper;@Service@Transactional(propagation=Propagation.SUPPORTS,readOnly=true)public class EmpServiceImpl implements EmpService&#123; @Autowired private EmpMapper empMapper; @Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void insertEmp(Emp emp) &#123; this.empMapper.insertEmp(emp); &#125; @Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateEmp(Emp emp) &#123; this.empMapper.updateEmp(emp); &#125; @Override @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void deleteEmp(long id) &#123; this.empMapper.deleteEmp(id); &#125; @Override public Emp getEmp(long id) &#123; return this.empMapper.getEmp(id); &#125;&#125;这里采用注解的方式配置事务。关于事务，可参考博文 —— Spring事务管理。测试最终，工程的目录结构为：测试创建Emp：1234567891011121314151617181920@Controllerpublic class TestController &#123; @Autowired private EmpService empService; @RequestMapping(value="/insert",method=RequestMethod.GET) @ResponseBody public String insertEmp()&#123; try &#123; Emp emp = new Emp(); emp.setName("mrbird"); emp.setAge(100); this.empService.insertEmp(emp); return "success"; &#125; catch (Exception e) &#123; e.printStackTrace(); return "fail"; &#125; &#125;&#125;启动项目，访问：http://localhost:8080/ssm/insert查询数据库：1234567mysql&gt; select * from emp;+----+--------+------+----------+| ID | NAME | AGE | BIRTHDAY |+----+--------+------+----------+| 1 | mrbird | 100 | NULL |+----+--------+------+----------+1 row in set (0.00 sec)插入成功。测试getEmp：12345678910@RequestMapping(value="/get",method=RequestMethod.GET)@ResponseBodypublic String getEmp()&#123; try &#123; return this.empService.getEmp(1l).getName(); &#125; catch (Exception e) &#123; e.printStackTrace(); return "fail"; &#125;&#125;访问：http://localhost:8080/ssm/get测试updateEmp：12345678910111213@RequestMapping(value="/update",method=RequestMethod.GET)@ResponseBodypublic String updateEmp()&#123; try &#123; Emp emp = this.empService.getEmp(1l); emp.setAge(250); this.empService.updateEmp(emp); return "success"; &#125; catch (Exception e) &#123; e.printStackTrace(); return "fail"; &#125;&#125;访问：http://localhost:8080/ssm/update查询数据库：1234567mysql&gt; select * from emp;+----+--------+------+----------+| ID | NAME | AGE | BIRTHDAY |+----+--------+------+----------+| 1 | mrbird | 250 | NULL |+----+--------+------+----------+1 row in set (0.00 sec)更新成功。测试deleteEmp：1234567891011@RequestMapping(value="/delete",method=RequestMethod.GET)@ResponseBodypublic String deleteEmp()&#123; try &#123; this.empService.deleteEmp(1l); return "success"; &#125; catch (Exception e) &#123; e.printStackTrace(); return "fail"; &#125;&#125;访问：http://localhost:8080/ssm/delete查询数据库：12mysql&gt; select * from emp;Empty set (0.00 sec)删除成功。]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>MyBatis</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建SSH (Spring+SpringMVC+Hibernate)]]></title>
    <url>%2Fblog%2F%E6%90%AD%E5%BB%BASSH-Spring-SpringMVC-Hibernate.html</url>
    <content type="text"><![CDATA[Spring+SpringMVC的搭建参考博文 —— 搭建SpringMVC。这里主要记录SpringMVC与Hibernate的整合。准备工作数据库使用MySql，创建一张测试表：1234567CREATE TABLE `emp` ( `ID` int(4) NOT NULL AUTO_INCREMENT, `NAME` varchar(50) COLLATE utf8_unicode_ci NOT NULL, `AGE` int(11) DEFAULT NULL, `BIRTHDAY` date DEFAULT NULL, PRIMARY KEY (`ID`))引入依赖：12345678910111213141516171819202122232425262728293031&lt;!-- spring事务 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-tx&lt;/artifactId&gt; &lt;version&gt;4.3.5.RELEASE&lt;/version&gt;&lt;/dependency&gt; &lt;!-- spring orm --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-orm&lt;/artifactId&gt; &lt;version&gt;4.3.5.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!-- hibernate --&gt;&lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt; &lt;version&gt;4.3.5.Final&lt;/version&gt;&lt;/dependency&gt;&lt;!-- mysql数据库连接包--&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.6&lt;/version&gt;&lt;/dependency&gt; &lt;!-- 数据库连接池--&gt;&lt;dependency&gt; &lt;groupId&gt;c3p0&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.1.2&lt;/version&gt;&lt;/dependency&gt;配置数据库在applicationContext.xml中配置数据库：1234567891011121314151617181920&lt;!-- 属性占位符 --&gt;&lt;context:property-placeholder location="classpath:/config.properties" /&gt; &lt;!--配置数据源--&gt;&lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"&gt; &lt;!--数据库连接驱动--&gt; &lt;property name="driverClass" value="$&#123;jdbc.driver&#125;" /&gt; &lt;!--数据库地址--&gt; &lt;property name="jdbcUrl" value="$&#123;jdbc.url&#125;" /&gt; &lt;!--用户名--&gt; &lt;property name="user" value="$&#123;jdbc.username&#125;" /&gt; &lt;!--密码--&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;" /&gt; &lt;!--最大连接数--&gt; &lt;property name="maxPoolSize" value="40" /&gt; &lt;!--最小连接数--&gt; &lt;property name="minPoolSize" value="1" /&gt; &lt;!--初始化连接池内的数据库连接--&gt; &lt;property name="initialPoolSize" value="10" /&gt; &lt;/bean&gt;其中，config.properties配置文件内容如下：12345678910#database connection configjdbc.driver = com.mysql.jdbc.Driverjdbc.url = jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8jdbc.username = rootjdbc.password = 123456 #hibernate confighibernate.dialect = org.hibernate.dialect.MySQLDialecthibernate.show_sql = truehibernate.format_sql = true配置sessionFactory在applicationContext.xml中配置sessionFactory：12345678910111213141516&lt;!--配置session工厂--&gt;&lt;bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;!-- 指定实体类扫描路径 --&gt; &lt;property name="packagesToScan" value="ssh.mrbird.entity" /&gt; &lt;property name="hibernateProperties"&gt; &lt;props&gt; &lt;!--指定数据库方言--&gt; &lt;prop key="hibernate.dialect"&gt;$&#123;hibernate.dialect&#125;&lt;/prop&gt; &lt;!--在控制台显示执行的数据库操作语句--&gt; &lt;prop key="hibernate.show_sql"&gt;$&#123;hibernate.show_sql&#125;&lt;/prop&gt; &lt;!--在控制台显示执行的数据库操作语句（格式）--&gt; &lt;prop key="hibernate.format_sql"&gt;$&#123;hibernate.format_sql&#125;&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt;&lt;/bean&gt;使用spring的事务管理机制：123456&lt;!-- 事物管理器配置 --&gt;&lt;bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"&gt; &lt;property name="sessionFactory" ref="sessionFactory" /&gt;&lt;/bean&gt;&lt;!-- 开启注解事务 --&gt;&lt;tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/&gt;创建库表实体123456789101112131415161718192021222324252627282930import java.io.Serializable;import java.sql.Date; import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table; @Entity@Table(name = "Emp")public class Emp implements Serializable&#123; private static final long serialVersionUID = 1L; @Id @GeneratedValue(strategy = GenerationType.AUTO) @Column(name = "ID") private long id; @Column(name = "NAME") private String name; @Column(name = "AGE") private int age; @Column(name = "BIRTHDAY") private Date birthday; // get set 略&#125;数据库访问层创建EmpDao接口，包含基本的CRUD方法：12345678import ssh.mrbird.entity.Emp; public interface EmpDao &#123; Emp findEmpById(long id); void deleteEmpById(long id); void updateEmp(Emp emp); void saveEmp(Emp emp);&#125;其实现类EmpDaoImpl：123456789101112131415161718192021222324252627282930313233343536import org.hibernate.Session;import org.hibernate.SessionFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import org.springframework.transaction.annotation.Propagation;import org.springframework.transaction.annotation.Transactional; import ssh.mrbird.entity.Emp; @Repository@Transactional(propagation=Propagation.SUPPORTS,readOnly=true)public class EmpDaoImpl implements EmpDao&#123; //注入SessionFactory @Autowired private SessionFactory sessionFactory; //获取session private Session getCurrentSession() &#123; return this.sessionFactory.getCurrentSession(); &#125; public Emp findEmpById(long id) &#123; return (Emp) getCurrentSession().get(Emp.class, id); &#125; @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void deleteEmpById(long id) &#123; Emp emp = findEmpById(id); getCurrentSession().delete(emp); &#125; @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void updateEmp(Emp emp) &#123; getCurrentSession().update(emp); &#125; @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void saveEmp(Emp emp) &#123; getCurrentSession().save(emp); &#125;&#125;使用注解的方式控制事务，关于事务，可参考博文 —— Spring事务管理。测试最终，工程的目录结构为：applicationContext.xml完整配置如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation=" http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd"&gt; &lt;!-- 开启组件扫描 --&gt; &lt;context:component-scan base-package="ssh"/&gt; &lt;!-- 启用Spring mvc --&gt; &lt;mvc:annotation-driven/&gt; &lt;!-- 配置viewResolver --&gt; &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/views/" p:suffix=".jsp"&gt; &lt;/bean&gt; &lt;!-- 属性占位符 --&gt; &lt;context:property-placeholder location="classpath:/config.properties" /&gt; &lt;!--配置数据源--&gt; &lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"&gt; &lt;property name="driverClass" value="$&#123;jdbc.driver&#125;" /&gt; &lt;property name="jdbcUrl" value="$&#123;jdbc.url&#125;" /&gt; &lt;property name="user" value="$&#123;jdbc.username&#125;" /&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;" /&gt; &lt;property name="maxPoolSize" value="40" /&gt; &lt;property name="minPoolSize" value="1" /&gt; &lt;property name="initialPoolSize" value="10" /&gt; &lt;/bean&gt; &lt;!--配置session工厂--&gt; &lt;bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"&gt; &lt;property name="dataSource" ref="dataSource" /&gt; &lt;!-- 指定实体类扫描路径 --&gt; &lt;property name="packagesToScan" value="ssh.mrbird.entity" /&gt; &lt;property name="hibernateProperties"&gt; &lt;props&gt; &lt;prop key="hibernate.dialect"&gt;$&#123;hibernate.dialect&#125;&lt;/prop&gt; &lt;prop key="hibernate.show_sql"&gt;$&#123;hibernate.show_sql&#125;&lt;/prop&gt; &lt;prop key="hibernate.format_sql"&gt;$&#123;hibernate.format_sql&#125;&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt; &lt;/bean&gt; &lt;!-- 事物管理器配置 --&gt; &lt;bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"&gt; &lt;property name="sessionFactory" ref="sessionFactory" /&gt; &lt;/bean&gt; &lt;!-- 开启注解事务 --&gt; &lt;tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/&gt;&lt;/beans&gt;编写测试Controller：1234567891011121314151617181920212223242526272829303132333435363738394041@Controllerpublic class TestController &#123; @Autowired private EmpDaoImpl empDao; @RequestMapping(value="/saveEmp",method=RequestMethod.GET) @ResponseBody public String saveEmp()&#123; //直接模拟数据 try&#123; Emp emp = new Emp(); emp.setName("mrbird"); emp.setAge(100); empDao.saveEmp(emp); return "success"; &#125;catch(Exception e)&#123; e.printStackTrace(); return "fail"; &#125; &#125; @RequestMapping(value="/findEmp",method=RequestMethod.GET) @ResponseBody public String findEmp()&#123; Emp emp = empDao.findEmpById(1); return emp.getName(); &#125; @RequestMapping(value="/updateEmp",method=RequestMethod.GET) @ResponseBody public String updateEmp()&#123; Emp emp = empDao.findEmpById(1l); emp.setAge(250); empDao.updateEmp(emp); return "success"; &#125; @RequestMapping(value="/deleteEmp",method=RequestMethod.GET) @ResponseBody public String deleteEmp()&#123; empDao.deleteEmpById(1l); return "success"; &#125;&#125;启动工程，访问：http://localhost:8080/ssh/saveEmp查询数据库：1234567mysql&gt; select * from emp;+----+--------+------+----------+| ID | NAME | AGE | BIRTHDAY |+----+--------+------+----------+| 1 | mrbird | 100 | NULL |+----+--------+------+----------+1 row in set (0.00 sec)数据插入成功，剩下的测试略。]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet状态管理]]></title>
    <url>%2Fblog%2FServlet%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.html</url>
    <content type="text"><![CDATA[Servlet状态管理：将客户端(浏览器)与服务器之间多次交互（一次请求，一次响应）当做一个整体来看待，并且将多次交互所涉及的数据（即状态）保存下来。如何进行状态管理？1.客户端状态管理技术：即将状态保存在客户端，有代表性的是cookie技术。2.服务器端状态管理技术：即将状态保存在服务器端，有代表性的是session技术。cookie浏览器向web服务器发送请求时，服务器会将少量的数据以set-cookie消息头的方式发送给浏览器，浏览器会将这些数据保存下来。当浏览器再次访问服务器时，会将这些数据以cookie消息头的方式发送给服务器。创建cookie：12Cookie c = new Cookie(String name,String value);response.addCookie(c);查询cookie：1234567Cookie[] cookies = request.getCookies();if(cookies != null)&#123; for(Cookie c : cookies)&#123; String cookieName = c.getName(); String cookieValue = c.getValue(); &#125;&#125;编码问题：cookie只能保存合法的ascii字符，如果要保存中文，需要将中文转换成合法的ascii字符（编码）。1String str = URLEncoder.encode("北京","utf-8");encode方法先将”北京”按照”utf-8”进行编码（编码之后会得到一个字节数组），然后将字节数组转换成一个字符串。类似于%AD%EF%88%DD%AF%48%。12// 将字符串还原String decodeValue = URLDecoder.decode(str,"utf-8");生存时间：默认情况下，浏览器会将cookie保存在内存里面，只要浏览器不关闭，cookie会一直存在。也可以用代码指定其生存时间：1cookie.setMaxAge(int seconds);注意seconds单位是秒。seconds取值有三种情况：1.seconds &gt; 0：浏览器保存cookie的最长时间为设置的参数值，如果超过指定的时间，浏览器会删除这个cookie。浏览器会将cookie保存在硬盘上。2.seconds = 0：删除cookie。比如，要删除一个名称为”addr”的cookie：123Cookie c = new Cookie("addr","");c.setMaxAge(0);response.addCookie(c);3.sencods &lt; 0：缺省值,浏览器会将cookie放到内存里面。修改cookie：所谓Cookie的修改，本质是获取到要变更值的Cookie，通过setValue方法将新的数据存入到cookie中，然后由response响应对象发回到客户端，对原有旧值覆盖后即实现了修改。session服务器为不同的客户端在内存中创建了用于保存数据的Session对象，并将用于标识该对象的唯一Id发回给与该对象对应的客户端。当浏览器再次发送请求时，SessionId也会被发送过来，服务器凭借这个唯一Id找到与之对应的Session对象。在服务器端维护的这些用于保存与不同客户端交互时的数据的对象叫做Session。Session对象可以保存更复杂的对象类型数据了，不像Cookie只能保存字符串。获得session对象：1.方式一：1HttpSession session = request.getSession(boolean flag);flag为true时：先查看请求当中有没有sessionId，如果没有，服务器要创建一个session对象；如果有sessionId，服务器会依据sessionId查找对应的session对象，如果找到了则返回，找不到服务器会创建一个新的session对象。flag为false时：先查看请求当中有没有sessionId，如果没有，服务器不会创建session对象，返回null。如果有sessionId，服务器会依据sessionId查找对应的session对象，如果找到了则返回，找不到返回null。2.方式二：12HttpSession session = request.getSession();// 等价于 request.getSession(true)。使用session对象绑定数据：1void session.setAttribute(String name,Object obj);获取绑定数据或移除绑定数据的代码如下：12void session.getAttribute(String name);void session.removeAttribute(String name);session超时：什么是session超时？web服务器会将空闲时间过长的session对象删除掉（为了节省内存空间资源）。web服务器缺省的超时时间限制，一般是30分。可以修改缺省的超时时间限制，比如，可以修改tomcat的web.xml：123&lt;session-config&gt; &lt;session-timeout&gt;30&lt;/session-timeout&gt;&lt;/session-config&gt;使用编程的方式来修改：1session.setMaxInactiveInterval(int seconds);立即删除session对象：1session.invalidate();session优缺点：session对象的数据由于保存在服务器端，并不在网络中进行传输，所以安全一些，并且能够保存的数据类型更丰富，同时Session也能够保存更多的数据，Cookie只能保存大约4kb的字符串。session的安全性是以牺牲服务器资源为代价的，如果用户量过大，会严重影响服务器的性能。]]></content>
      <tags>
        <tag>servlet&amp;jsp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB 文档查询]]></title>
    <url>%2Fblog%2FMongoDB-%E6%96%87%E6%A1%A3%E6%9F%A5%E8%AF%A2.html</url>
    <content type="text"><![CDATA[MongoDB查询涵盖以下几个方面：1.使用find或者findOne函数和查询文档对数据库执行查询；2.使用$条件查询实现范围查询，数据集包含查询，不等式查询，以及其它一些查询；3.查询将会返回一个数据库游标，游标只会在你需要时才将需要的文档批量返回；4.针对游标执行的元操作，包括忽略一定数量的结果，或者限定返回结果的数量，以及对结果排序。find简介指定需要返回的键比如，我只对blog集合的博文post感兴趣，可以使用以下查询语句：1234&gt; db.blog.find(&#123;&#125;,&#123;"post":1&#125;)&#123; "_id" : ObjectId("58acf0743c8ad0b0d9d65f45"), "post" : "MongoDB文档CUD" &#125;&#123; "_id" : ObjectId("58acf64b3c8ad0b0d9d65f4a"), "post" : "MongoDB shell" &#125;&#123; "_id" : ObjectId("58acf65d3c8ad0b0d9d65f4d"), "post" : "start Spring Boot" &#125;如果不希望返回“_id”，可以这样：1234&gt; db.blog.find(&#123;&#125;,&#123;"post":1,"_id":0&#125;)&#123; "post" : "MongoDB文档CUD" &#125;&#123; "post" : "MongoDB shell" &#125;&#123; "post" : "start Spring Boot" &#125;查询条件比较操作符MongoDB中的比较操作符有五种，其中$gt，$gte，$lt，$lte分别对应&gt;，&gt;=，&lt;，&lt;=，比如查询blog阅读量pageview大于5的文档：123456789&gt; db.blog.find(&#123;"pageview":&#123;"$gte":5&#125;&#125;).pretty()&#123; "_id" : ObjectId("58acf0743c8ad0b0d9d65f45"), "name" : "mrbird's blog", "post" : "MongoDB文档CUD", "pageview" : 5, "like" : 2, "date" : ISODate("2017-02-22T05:45:03.006Z")&#125;这四种操作符也可用于日期比较，比如：123456&gt; var date = new Date("01/01/2017")&gt; db.blog.find(&#123;"date":&#123;"$gte":date&#125;&#125;,... &#123;"post":1,"date":1,"_id":0&#125;)&#123; "post" : "MongoDB文档CUD", "date" : ISODate("2017-02-22T05:45:03.006Z") &#125;&#123; "post" : "MongoDB shell", "date" : ISODate("2017-02-22T05:45:03.006Z") &#125;&#123; "post" : "start Spring Boot", "date" : ISODate("2017-02-22T05:45:03.006Z") &#125;另外一个比较操作符为$ne，not equal，可以用于所有类型，比如：1234&gt; db.blog.find(&#123;"post":&#123;"$ne":"MongoDB shell"&#125;&#125;,... &#123;"post":1&#125;)&#123; "_id" : ObjectId("58acf0743c8ad0b0d9d65f45"), "post" : "MongoDB文档CUD" &#125;&#123; "_id" : ObjectId("58acf65d3c8ad0b0d9d65f4d"), "post" : "start Spring Boot" &#125;OR查询$in操作符可以查询一个键的多个值，比如：1234&gt; db.blog.find(&#123;"post":&#123;"$in":["MongoDB文档CUD","MongoDB shell"]&#125;&#125;,... &#123;"post":1,"_id":0&#125;)&#123; "post" : "MongoDB文档CUD" &#125;&#123; "post" : "MongoDB shell" &#125;其中数组中的值可以是不同类型的。与$in相反的是$nin，如：123&gt; db.blog.find(&#123;"post":&#123;"$nin":["MongoDB文档CUD","MongoDB shell"]&#125;&#125;,... &#123;"post":1,"_id":0&#125;)&#123; "post" : "start Spring Boot" &#125;$or操作符和SQL中的含义类似，比如查询post为MongoDB文档CUD或者pageview为3的文档：12345&gt; db.blog.find(&#123;"$or":[&#123;"post":"MongoDB文档CUD"&#125;,&#123;"pageview":3&#125;]&#125;,...&#123;"post":1,"pageview":1,"_id":0&#125;).pretty()&#123; "post" : "MongoDB文档CUD", "pageview" : 5 &#125;&#123; "post" : "MongoDB shell", "pageview" : 3 &#125;&#123; "post" : "start Spring Boot", "pageview" : 3 &#125;$not$mod为取模运算符，比如查询pageview为3的倍数的博文：123&gt; db.blog.find(&#123;"pageview":&#123;"$mod":[3,0]&#125;&#125;,&#123;"post":1,"pageview":1,"_id":0&#125;)&#123; "post" : "MongoDB shell", "pageview" : 3 &#125;&#123; "post" : "start Spring Boot", "pageview" : 3 &#125;$not运算符用于取反，比如取pageview不为3的倍数的博文：123&gt; db.blog.find(&#123;"pageview":&#123;"$not":&#123;"$mod":[3,0]&#125;&#125;&#125;, ...&#123;"post":1,"pageview":1,"_id":0&#125;)&#123; "post" : "MongoDB文档CUD", "pageview" : 5 &#125;$and$and操作符和SQL中的含义类似，比如查找post为MongoDB文档CUD且pageview大于3的文档：123&gt; db.blog.find(&#123;"$and":[&#123;"post":"MongoDB文档CUD"&#125;,&#123;"pageview":&#123;"$gt":3&#125;&#125;]&#125;,... &#123;"post":1,"pageview":1,"_id":0&#125;)&#123; "post" : "MongoDB文档CUD", "pageview" : 5 &#125;特定类型的查询null。查询文档某个键的值为null，会将不包含该键的文档也查询出来，比如：1234567&gt; db.blog.find(&#123;&#125;,&#123;"post":1,"like":1,"_id":0&#125;)&#123; "post" : "MongoDB文档CUD", "like" : 2 &#125;&#123; "post" : "MongoDB shell" &#125;&#123; "post" : "start Spring Boot", "like" : null &#125;&gt; db.blog.find(&#123;"like":null&#125;,&#123;"post":1,"like":1,"_id":0&#125;)&#123; "post" : "MongoDB shell" &#125;&#123; "post" : "start Spring Boot", "like" : null &#125;可以通过$exists条件判断键是否存在，比如：123&gt; db.blog.find(&#123;"like":&#123;"$in":[null],"$exists":true&#125;&#125;, ...&#123;"post":1,"like":1,"_id":0&#125;)&#123; "post" : "start Spring Boot", "like" : null &#125;MongoDB查询也支持键值的正则表达式匹配，这里就懒得记录了。查询数组先看个栗子：1234567&gt; db.food.find()&#123; "_id" : ObjectId("58ad45986596dd54570ce1ed"), "fruit" : [ "西瓜", "香蕉", "桃子" ] &#125;&#123; "_id" : ObjectId("58ad45c76596dd54570ce1ee"), "fruit" : [ "西瓜", "芒果", "杨桃" ] &#125;&#123; "_id" : ObjectId("58ad45f76596dd54570ce1ef"), "fruit" : [ "哈密瓜", "葡萄", "樱桃" ] &#125;&gt; db.food.find(&#123;"fruit":"西瓜"&#125;)&#123; "_id" : ObjectId("58ad45986596dd54570ce1ed"), "fruit" : [ "西瓜", "香蕉", "桃子" ] &#125;&#123; "_id" : ObjectId("58ad45c76596dd54570ce1ee"), "fruit" : [ "西瓜", "芒果", "杨桃" ] &#125;查找既包含西瓜又包含芒果的文档，使用$all操作符：12&gt; db.food.find(&#123;"fruit":&#123;"$all":["西瓜","芒果"]&#125;&#125;)&#123; "_id" : ObjectId("58ad45c76596dd54570ce1ee"), "fruit" : [ "西瓜", "芒果", "杨桃" ] &#125;其中，数组中值的顺序不重要。如果不使用$all 就是精准匹配了，比如下面这个查询将查询不出任何结果：1&gt; db.food.find(&#123;"fruit":["西瓜","芒果"]&#125;)也可以根据数组的下标进行查询，比如：12&gt; db.food.find(&#123;"fruit.1":"葡萄"&#125;)&#123; "_id" : ObjectId("58ad45f76596dd54570ce1ef"), "fruit" : [ "哈密瓜", "葡萄", "樱桃" ] &#125;$size操作符用于根据数组的长度进行查询匹配，比如查找fruit数组长度为3的文档：1234&gt; db.food.find(&#123;"fruit":&#123;"$size":3&#125;&#125;)&#123; "_id" : ObjectId("58ad45986596dd54570ce1ed"), "fruit" : [ "西瓜", "香蕉", "桃子" ] &#125;&#123; "_id" : ObjectId("58ad45c76596dd54570ce1ee"), "fruit" : [ "西瓜", "芒果", "杨桃" ] &#125;&#123; "_id" : ObjectId("58ad45f76596dd54570ce1ef"), "fruit" : [ "哈密瓜", "葡萄", "樱桃" ] &#125;注意：$size操作符不能$gt等比较操作符一起使用！$slice操作符可以返回某个键匹配的数组元素的一个子集，比如：1234&gt; db.food.find(&#123;&#125;,&#123;"fruit":&#123;"$slice":2&#125;&#125;)&#123; "_id" : ObjectId("58ad45986596dd54570ce1ed"), "fruit" : [ "西瓜", "香蕉" ] &#125;&#123; "_id" : ObjectId("58ad45c76596dd54570ce1ee"), "fruit" : [ "西瓜", "芒果" ] &#125;&#123; "_id" : ObjectId("58ad45f76596dd54570ce1ef"), "fruit" : [ "哈密瓜", "葡萄" ] &#125;如果想返回数组的后两个元素，可以这样：1234&gt; db.food.find(&#123;&#125;,&#123;"fruit":&#123;"$slice":-2&#125;&#125;)&#123; "_id" : ObjectId("58ad45986596dd54570ce1ed"), "fruit" : [ "香蕉", "桃子" ] &#125;&#123; "_id" : ObjectId("58ad45c76596dd54570ce1ee"), "fruit" : [ "芒果", "杨桃" ] &#125;&#123; "_id" : ObjectId("58ad45f76596dd54570ce1ef"), "fruit" : [ "葡萄", "樱桃" ] &#125;$slice也可以指定偏移量，比如：1234&gt; db.food.find(&#123;&#125;,&#123;"fruit":&#123;"$slice":[1,3]&#125;&#125;)&#123; "_id" : ObjectId("58ad45986596dd54570ce1ed"), "fruit" : [ "香蕉", "桃子" ] &#125;&#123; "_id" : ObjectId("58ad45c76596dd54570ce1ee"), "fruit" : [ "芒果", "杨桃" ] &#125;&#123; "_id" : ObjectId("58ad45f76596dd54570ce1ef"), "fruit" : [ "葡萄", "樱桃" ] &#125;[1,1]表示跳过前1个元素，返回第2~3个元素，如果没有那么多元素，就返回第2个元素之后的所有元素。数组的范围查询数组的范围查询需要注意一个问题，如：12345678&gt; db.test.find()&#123; "_id" : ObjectId("58b0eca3a263b332501bc7b5"), "x" : 5 &#125;&#123; "_id" : ObjectId("58b0eca9a263b332501bc7b6"), "x" : 15 &#125;&#123; "_id" : ObjectId("58b0ecaea263b332501bc7b7"), "x" : 25 &#125;&#123; "_id" : ObjectId("58b0ecbda263b332501bc7b8"), "x" : [ 5, 25 ] &#125; &gt; db.test.find(&#123;"x":&#123;"$gt":10,"$lt":20&#125;&#125;)&#123; "_id" : ObjectId("58b0eca9a263b332501bc7b6"), "x" : 15 &#125;&#123; "_id" : ObjectId("58b0ecbda263b332501bc7b8"), "x" : [ 5, 25 ] &#125;查询结果不符合预期，因为数组中的5符合$lt:20，25符合$gt:10。要对数组元素进行范围查询，可借助$elemMatch操作符：12&gt; db.test.find(&#123;"x":&#123;"$elemMatch":&#123;"$gt":10,"$lt":20&#125;&#125;&#125;)&gt; //查询不到任何结果这个查询没有任何结果，因为{ &quot;_id&quot; : ObjectId(&quot;58b0eca9a263b332501bc7b6&quot;), &quot;x&quot; : 15 }文档x的值不是数组类型，并且$elemMatch操作符使得数组元素的每一个值都必须与条件相匹配。查询内嵌文档12345678910111213141516171819202122232425&gt; db.blog.find().pretty()&#123; "_id" : ObjectId("58b11d0ca263b332501bc7b9"), "title" : "MongoDB查询", "like" : "2", "comments" : &#123; "name" : "ltsc", "comment" : "good post" &#125;&#125;&#123; "_id" : ObjectId("58b11daca263b332501bc7ba"), "title" : "MongoDB shell", "like" : "3", "comments" : [ &#123; "name" : "ltsc", "comment" : "good post" &#125;, &#123; "name" : "xiaohema", "comment" : "不明觉厉" &#125; ]&#125;要查询包含名为”xiaohema”，并且评论为”不明觉厉的”博文，可以使用以下查询：12345678910111213141516&gt; db.blog.find(&#123;"comments":&#123;"$elemMatch":&#123;"name":"xiaohema","comment":"不明觉厉"&#125;&#125;&#125;).pretty()&#123; "_id" : ObjectId("58b11daca263b332501bc7ba"), "title" : "MongoDB shell", "like" : "3", "comments" : [ &#123; "name" : "ltsc", "comment" : "good post" &#125;, &#123; "name" : "xiaohema", "comment" : "不明觉厉" &#125; ]&#125;$where查询当一般查询都不能满足查询要求的时候，可以考虑使用$where操作符，比如有如下文档：123&gt; db.food.find(&#123;&#125;,&#123;"_id":0&#125;)&#123; "草莓蛋糕" : 4, "芝士蛋糕" : 5, "巧克力蛋糕" : 4 &#125;&#123; "摩卡咖啡" : 3, "拿铁咖啡" : 6, "热巧克力" : 1 &#125;现要查询含有相同数量食物的文档，可以使用$where操作符：12345678910&gt; db.food.find(&#123;"$where":function()&#123;... for(var current in this)&#123;... for(var next in this)&#123;... if(current != next &amp;&amp; this[current] == this[next])&#123;... return true;... &#125;... &#125;... &#125;... &#125;&#125;,&#123;"_id":0&#125;)&#123; "草莓蛋糕" : 4, "芝士蛋糕" : 5, "巧克力蛋糕" : 4 &#125;但是在实际情况下，出于对性能和安全的考虑，应该尽量不使用$where。游标MongoDB使用游标返回find查询结果，使用hasNext函数判断游标中是否还有其他结果，使用next函数来迭代结果，如：123456789101112131415&gt; function create()&#123;... db.test.drop();... for(var i = 0;i&lt;100;i++)&#123;... db.test.insert(&#123;"x":i&#125;);... &#125;&#125;&gt; create()&gt; var cursor = db.test.find()&gt; cursor.hasNext()true&gt; cursor.next()&#123; "_id" : ObjectId("58b12834a263b332501bc7bd"), "x" : 0 &#125;&gt; cursor.next()&#123; "_id" : ObjectId("58b12834a263b332501bc7be"), "x" : 1 &#125;&gt; cursor.next()&#123; "_id" : ObjectId("58b12834a263b332501bc7bf"), "x" : 2 &#125;游标还实现了JavaScript的迭代器接口，可以使用forEach循环来迭代输出结果：12345678910111213&gt; cursor.forEach(function(x)&#123;... print(x.x);... &#125;)34567...9899&gt; cursor.hasNext()falselimit，skip和sortlimit用于限制返回结果的数量，比如：1234&gt; db.test.find().limit(3)&#123; "_id" : ObjectId("58b12834a263b332501bc7bd"), "x" : 0 &#125;&#123; "_id" : ObjectId("58b12834a263b332501bc7be"), "x" : 1 &#125;&#123; "_id" : ObjectId("58b12834a263b332501bc7bf"), "x" : 2 &#125;要是匹配的数量还不到3个，则返回匹配的数量。skip则是用于跳过N个数量后，返回剩下的查询结果，比如：1234&gt; db.test.find().skip(97)&#123; "_id" : ObjectId("58b12834a263b332501bc81e"), "x" : 97 &#125;&#123; "_id" : ObjectId("58b12834a263b332501bc81f"), "x" : 98 &#125;&#123; "_id" : ObjectId("58b12834a263b332501bc820"), "x" : 99 &#125;sort则是用于对返回结果的排序，-1表示降序，1表示升序，如：12345&gt; db.test.find().limit(4).sort(&#123;"x":-1&#125;)&#123; "_id" : ObjectId("58b12834a263b332501bc820"), "x" : 99 &#125;&#123; "_id" : ObjectId("58b12834a263b332501bc81f"), "x" : 98 &#125;&#123; "_id" : ObjectId("58b12834a263b332501bc81e"), "x" : 97 &#125;&#123; "_id" : ObjectId("58b12834a263b332501bc81d"), "x" : 96 &#125;当使用skip略过较多数量文档时，速度会变得很慢，比如常用的分页需求：123&gt; var page1 = db.test.find().limit(100)&gt; var page2 = db.test.find().skip(100).limit(100)&gt; var page3 = db.test.find().skip(200).limit(100)正如前面所说的，这会导致速度很慢，可以使用下面这种思路取代，比如使用date降序来显示文档列表：1&gt; var page1 = db.test.find().sort(&#123;"date":-1&#125;).limit(100)然后可以使用最后一个文档的date作为查询条件，如：1234567var latest = nullwhile(page1.hasNext())&#123; latest = page1.next();&#125;//获取下一页var page2 = db.test.find(&#123;"date":&#123;"$gt":&#123;latest.date&#125;&#125;&#125;);page2.sort(&#123;"date":-1&#125;).limit(100);获取的一致性看个栗子：123456var cursor = db.test.find();while(cursor.hasNext())&#123; var current = curosr.next(); var modify = process(current); db.test.save(modify);&#125;其中process为某个修改文档函数。这样做当文档较大的时候，游标可能会多次返回同一个文档，而并不能预期的进行遍历。因为当保存文档的时候，如果文档较大，文档间的空隙又不足，这时候文档无法预期的保存回数据库，MongoDB会将其挪至集合的末尾，为了避免这种情况，我们可以对查询添加快照。使用查询快照后，查询会对”_id”进行遍历，这就保证了每个文档只会返回一次，修改上述查询：1var cursor = db.test.find().snapshot();《MongoDB权威指南》读书笔记]]></content>
      <tags>
        <tag>MongoDB</tag>
        <tag>DataBase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB文档CUD]]></title>
    <url>%2Fblog%2FMongoDB%E6%96%87%E6%A1%A3CUD.html</url>
    <content type="text"><![CDATA[插入文档使用insert向集合中插入一个文档：1234&gt; db.test.insert(&#123;"name":"mrbird"&#125;)WriteResult(&#123; "nInserted" : 1 &#125;)&gt; db.test.findOne()&#123; "_id" : ObjectId("58a99b8168e0d7b9f6992c69"), "name" : "mrbird" &#125;插入的文档没有“_id”键的话，这个操作会自动为文档添加一个“_id”键。 批量插入文档则需使用insertMany函数，函数接收一个文档数组：123456789101112&gt; db.test.insertMany([&#123;"name":"Jane"&#125;,&#123;"name":"KangKang"&#125;])&#123; "acknowledged" : true, "insertedIds" : [ ObjectId("58a99d6468e0d7b9f6992c6b"), ObjectId("58a99d6468e0d7b9f6992c6c") ]&#125;&gt; db.test.find()&#123; "_id" : ObjectId("58a99b8168e0d7b9f6992c69"), "name" : "mrbird" &#125;&#123; "_id" : ObjectId("58a99d6468e0d7b9f6992c6b"), "name" : "Jane" &#125;&#123; "_id" : ObjectId("58a99d6468e0d7b9f6992c6c"), "name" : "KangKang" &#125;要查看一个文档的大小，可以使用Object.bsonsize(doc)函数（单位为字节）：12&gt; Object.bsonsize(db.test.find(&#123;"name":"mrbird"&#125;))1215删除文档删除文档使用remove函数，接收一个查询文档，所有匹配的文档都将会被删除：12345&gt; db.test.remove(&#123;"name":"mrbird"&#125;)WriteResult(&#123; "nRemoved" : 1 &#125;)&gt; db.test.find()&#123; "_id" : ObjectId("58a99d6468e0d7b9f6992c6b"), "name" : "Jane" &#125;&#123; "_id" : ObjectId("58a99d6468e0d7b9f6992c6c"), "name" : "KangKang" &#125;要清空整个集合的话，可以使用drop函数：123&gt; db.test.drop()true&gt; db.test.find()更新文档使用update函数更新文档，接收两个参数，查询文档和修改器文档，如：1234567891011121314151617&gt; db.test.findOne(&#123;"name":"mrbird"&#125;)&#123; "_id" : ObjectId("58a9ace92363ff29a7d881e9"), "name" : "mrbird", "blog" : "mrbird.leanote.com"&#125;&gt; var mrbird = db.test.findOne(&#123;"name":"mrbird"&#125;)&gt; mrbird.blog = "mrbird's blog"mrbird's blog&gt; db.test.update(&#123;"name":"mrbird"&#125;,mrbird)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.test.findOne(&#123;"name":"mrbird"&#125;)&#123; "_id" : ObjectId("58a9ace92363ff29a7d881e9"), "name" : "mrbird", "blog" : "mrbird's blog"&#125;$inc修改器用来增加或减少已有的键值，如果该键不存在则创造一个。比如：123456789101112131415161718192021222324252627282930313233 &gt; db.test.findOne(&#123;"name":"mrbird"&#125;) &#123; "_id" : ObjectId("58a9ace92363ff29a7d881e9"), "name" : "mrbird", "blog" : "mrbird's blog"&#125;&gt; db.test.update(&#123;"name":"mrbird"&#125;,&#123;"$inc":&#123;"pageview":1&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.test.findOne(&#123;"name":"mrbird"&#125;)&#123; "_id" : ObjectId("58a9ace92363ff29a7d881e9"), "name" : "mrbird", "blog" : "mrbird's blog", "pageview" : 1&#125;&gt; db.test.update(&#123;"name":"mrbird"&#125;,&#123;"$inc":&#123;"pageview":100&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.test.findOne(&#123;"name":"mrbird"&#125;)&#123; "_id" : ObjectId("58a9ace92363ff29a7d881e9"), "name" : "mrbird", "blog" : "mrbird's blog", "pageview" : 101&#125;&gt; db.test.update(&#123;"name":"mrbird"&#125;,&#123;"$inc":&#123;"pageview":-50&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.test.findOne(&#123;"name":"mrbird"&#125;)&#123; "_id" : ObjectId("58a9ace92363ff29a7d881e9"), "name" : "mrbird", "blog" : "mrbird's blog", "pageview" : 51&#125;$inc只能用于整型，长整型或双精度浮点型的值。$set用于修改文档的字段值，当这个字段不存在的时候就创建一个。如：123456789101112131415161718&gt; db.test.findOne(&#123;"name":"mrbird"&#125;)&#123; "_id" : ObjectId("58a9ace92363ff29a7d881e9"), "name" : "mrbird", "blog" : "mrbird's blog", "pageview" : 51&#125;&gt; db.test.update(&#123;"_id":ObjectId("58a9ace92363ff29a7d881e9")&#125;, ... &#123;"$set":&#123;"note":"love leanote!!"&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.test.findOne(&#123;"_id":ObjectId("58a9ace92363ff29a7d881e9")&#125;)&#123; "_id" : ObjectId("58a9ace92363ff29a7d881e9"), "name" : "mrbird", "blog" : "mrbird's blog", "pageview" : 51, "note" : "love leanote!!"&#125;$set还可以修改键的类型，比如将note键的值改为数组类型：1234567891011121314&gt; db.test.update(&#123;"_id":ObjectId("58a9ace92363ff29a7d881e9")&#125;,... &#123;"$set":&#123;"note":["love leanote","the fun of code"]&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.test.findOne(&#123;"_id":ObjectId("58a9ace92363ff29a7d881e9")&#125;)&#123; "_id" : ObjectId("58a9ace92363ff29a7d881e9"), "name" : "mrbird", "blog" : "mrbird's blog", "pageview" : 51, "note" : [ "love leanote", "the fun of code" ]&#125;$set也可以修改内嵌文档，比如：12345678910111213141516171819202122&gt; db.blog.findOne()&#123; "_id" : ObjectId("58aa47f645b899838bfb6114"), "name" : "mrbird's blog", "post" : "mongodb", "comment" : &#123; "name" : "xiaohema", "msg" : "学习了，感谢分享" &#125;&#125;&gt; db.blog.update(&#123;"name":"mrbird's blog"&#125;,... &#123;"$set":&#123;"comment.msg":"好，支持威武有希望了"&#125;&#125;)&gt; db.blog.findOne()&#123; "_id" : ObjectId("58aa47f645b899838bfb6114"), "name" : "mrbird's blog", "post" : "mongodb", "comment" : &#123; "name" : "xiaohema", "msg" : "好，支持威武有希望了" &#125;&#125;使用$unset可删除键，比如：12345678910&gt; db.test.update(&#123;"_id":ObjectId("58a9ace92363ff29a7d881e9")&#125;,... &#123;"$unset":&#123;"note":1&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.test.findOne(&#123;"_id":ObjectId("58a9ace92363ff29a7d881e9")&#125;)&#123; "_id" : ObjectId("58a9ace92363ff29a7d881e9"), "name" : "mrbird", "blog" : "mrbird's blog", "pageview" : 51&#125;数组修改器$push会向已有的数组末尾添加一个值，如果数组不存在，则创建该数组。比如：123456789101112131415161718192021&gt; db.blog.findOne()&#123; "_id" : ObjectId("58aa47f645b899838bfb6114"), "name" : "mrbird's blog", "post" : "mongodb"&#125;&gt; db.blog.update(&#123;"name":"mrbird's blog"&#125;, &#123;"$push":...&#123;"comments": &#123;"name":"ltsc","msg":"不明觉厉"&#125;&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.blog.findOne()&#123; "_id" : ObjectId("58aa47f645b899838bfb6114"), "name" : "mrbird's blog", "post" : "mongodb", "comments" : [ &#123; "name" : "ltsc", "msg" : "不明觉厉" &#125; ]&#125;如果要一次性向数组中添加多个值，可以使用$push结合$each修改器。比如：123456789101112131415161718192021222324&gt; db.blog.update(&#123;"name":"mrbird's blog"&#125;,... &#123;"$push":&#123;"comments":&#123;"$each":[... &#123;"name":"Althars","msg":"siguoyi"&#125;,... &#123;"name":"jint","msg":"厉害了我的哥"&#125;]&#125;&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.blog.findOne()&#123; "_id" : ObjectId("58aa47f645b899838bfb6114"), "name" : "mrbird's blog", "post" : "mongodb", "comments" : [ &#123; "name" : "ltsc", "msg" : "不明觉厉" &#125;, &#123; "name" : "Althars", "msg" : "siguoyi" &#125;, &#123; "name" : "jint", "msg" : "厉害了我的哥" &#125; ]$slice可以在为数组添加值的时候截取数组，但必须配合$push和$each一起使用，否则报语法错误，比如：123456789101112131415161718192021222324252627&gt; db.user.findOne()&#123; "_id" : ObjectId("58aa5e8a6a294f5543ff66eb"), "name" : "KangKang", "sex" : "male", "habbit" : [ "basketball", "football", "swimming", "running" ]&#125;&gt; db.user.update(&#123;"name":"KangKang"&#125;,... &#123;"$push":&#123;"habbit":&#123;"$each":... ["eating"],"$slice":-3&#125;&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.user.findOne()&#123; "_id" : ObjectId("58aa5e8a6a294f5543ff66eb"), "name" : "KangKang", "sex" : "male", "habbit" : [ "swimming", "running", "eating" ]&#125;从结果可以看出，$slice截取了数组最新的三个值。注意，$slice的值必须是负整数。现在有这么一种情况，$push修改器可以向一个数组中添加重复的值，如：12345678910111213141516171819&gt; db.user.findOne(&#123;"name":"mrbird"&#125;)&#123; "_id" : ObjectId("58aa7cb06a294f5543ff66ec"), "name" : "mrbird", "email" : [ "mrbird@qq.com" ]&#125;&gt; db.user.update(&#123;"name":"mrbird"&#125;, &#123;"$push":&#123;"email":"mrbird@qq.com"&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.user.findOne(&#123;"name":"mrbird"&#125;)&#123; "_id" : ObjectId("58aa7cb06a294f5543ff66ec"), "name" : "mrbird", "email" : [ "mrbird@qq.com", "mrbird@qq.com" ]&#125;如果希望数组中添加的值不重复的话，可以使用$addToSet修改器：12345678910111213141516&gt; db.user.update(&#123;"name":"mrbird"&#125;, &#123;"$unset":&#123;"email":1&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.user.findOne(&#123;"name":"mrbird"&#125;)&#123; "_id" : ObjectId("58aa7cb06a294f5543ff66ec"), "name" : "mrbird" &#125;&gt; db.user.update(&#123;"name":"mrbird"&#125;, ... &#123;"$addToSet":&#123;"email":&#123;"$each":["mrbird@qq.com","mrbird@qq.com","mrbird@gmail.com"]&#125;&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.user.findOne(&#123;"name":"mrbird"&#125;)&#123; "_id" : ObjectId("58aa7cb06a294f5543ff66ec"), "name" : "mrbird", "email" : [ "mrbird@qq.com", "mrbird@gmail.com" ]&#125;删除数组元素有几种方法，比如$pop，{“$pop”:{&quot;key&quot;:1}}表示从数组尾部删除元素，-1则表示从头部删除：1234567891011121314151617181920&gt; db.user.findOne(&#123;"name":"mrbird"&#125;)&#123; "_id" : ObjectId("58aa7cb06a294f5543ff66ec"), "name" : "mrbird", "email" : [ "mrbird@qq.com", "mrbird@gmail.com" ]&#125;&gt; db.user.update(&#123;"name":"mrbird"&#125;,... &#123;"$pop":&#123;"email":1&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.user.findOne(&#123;"name":"mrbird"&#125;)&#123; "_id" : ObjectId("58aa7cb06a294f5543ff66ec"), "name" : "mrbird", "email" : [ "mrbird@qq.com" ]&#125;另外一个删除数组元素的修改器为$pull，该操作符会将所有匹配的元素从数组中删除。比如：12345678910111213141516171819202122232425262728&gt; db.user.update(&#123;"name":"KangKang"&#125;,... &#123;"$push":&#123;"habbit":"eating"&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.user.findOne(&#123;"name":"KangKang"&#125;)&#123; "_id" : ObjectId("58aa5e8a6a294f5543ff66eb"), "name" : "KangKang", "sex" : "male", "habbit" : [ "swimming", "running", "eating", "eating" ]&#125;&gt; db.user.update(&#123;"name":"KangKang"&#125;,... &#123;"$pull":&#123;"habbit":"eating"&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.user.findOne(&#123;"name":"KangKang"&#125;)&#123; "_id" : ObjectId("58aa5e8a6a294f5543ff66eb"), "name" : "KangKang", "sex" : "male", "habbit" : [ "swimming", "running" ]&#125;还可以通过数组的下标修改数组内容，如下所示：12345678910111213141516171819202122232425262728293031323334353637383940414243&gt; db.blog.find(&#123;"name":"mrbird's blog"&#125;).pretty()&#123; "_id" : ObjectId("58aa47f645b899838bfb6114"), "name" : "mrbird's blog", "post" : "mongodb", "comments" : [ &#123; "name" : "ltsc", "msg" : "不明觉厉" &#125;, &#123; "name" : "Althars", "msg" : "siguoyi" &#125;, &#123; "name" : "jint", "msg" : "厉害了我的哥" &#125; ]&#125;&gt; db.blog.update(&#123;"name":"mrbird's blog"&#125;,... &#123;"$set":&#123;"comments.1.msg":"四国以"&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.blog.find(&#123;"name":"mrbird's blog"&#125;).pretty()&#123; "_id" : ObjectId("58aa47f645b899838bfb6114"), "name" : "mrbird's blog", "post" : "mongodb", "comments" : [ &#123; "name" : "ltsc", "msg" : "不明觉厉" &#125;, &#123; "name" : "Althars", "msg" : "四国以" &#125;, &#123; "name" : "jint", "msg" : "厉害了我的哥" &#125; ]&#125;这种做法有局限性，就是必须先知道待修改字段的数组下标，可以使用另外一种方法，下面这种方法只需要知道待修改字段就行了：1234567891011121314151617181920212223&gt; db.blog.update(&#123;"comments.msg":"四国以"&#125;,... &#123;"$set":&#123;"comments.$.msg":"看完此文，犹如醍醐灌顶"&#125;&#125;)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.blog.find(&#123;"name":"mrbird's blog"&#125;).pretty()&#123; "_id" : ObjectId("58aa47f645b899838bfb6114"), "name" : "mrbird's blog", "post" : "mongodb", "comments" : [ &#123; "name" : "ltsc", "msg" : "不明觉厉" &#125;, &#123; "name" : "Althars", "msg" : "看完此文，犹如醍醐灌顶" &#125;, &#123; "name" : "jint", "msg" : "厉害了我的哥" &#125; ]&#125;update函数的第三个参数为upsert，设置为true时，新一个文档，没有找到匹配的查询文档时，插入该文档，找到了就更新，比如：1234567891011121314151617&gt; db.blog.findOne(&#123;"name":"mrbrid","post":"MongoDB文档CUD"&#125;)null&gt; db.blog.update(&#123;"name":"mrbrid","post":"MongoDB文档CUD"&#125;,... &#123;"$inc":&#123;"pageview":1&#125;&#125;,true)WriteResult(&#123; "nMatched" : 0, "nUpserted" : 1, "nModified" : 0, "_id" : ObjectId("58acf0743c8ad0b0d9d65f45")&#125;)&gt; db.blog.findOne(&#123;"name":"mrbrid","post":"MongoDB文档CUD"&#125;)&#123; "_id" : ObjectId("58acf0743c8ad0b0d9d65f45"), "name" : "mrbrid", "post" : "MongoDB文档CUD", "pageview" : 1&#125;update函数的第四个参数为multi，设置为true的时候，批量更新和查询文档匹配的文档，比如将mrbird’s blog集合中所有文档的pageview增加1：1234567891011121314151617181920212223242526272829303132333435363738394041&gt; db.blog.find().pretty()&#123; "_id" : ObjectId("58acf0743c8ad0b0d9d65f45"), "name" : "mrbird's blog", "post" : "MongoDB文档CUD", "pageview" : 1&#125;&#123; "_id" : ObjectId("58acf64b3c8ad0b0d9d65f4a"), "name" : "mrbird's blog", "post" : "MongoDB shell", "pageview" : 1&#125;&#123; "_id" : ObjectId("58acf65d3c8ad0b0d9d65f4d"), "name" : "mrbird's blog", "post" : "start Spring Boot", "pageview" : 1&#125;&gt; db.blog.update(&#123;"name":"mrbird's blog"&#125;,&#123;"$inc":&#123;"pageview":1&#125;&#125;,... false,true)WriteResult(&#123; "nMatched" : 3, "nUpserted" : 0, "nModified" : 3 &#125;)&gt; db.blog.find().pretty()&#123; "_id" : ObjectId("58acf0743c8ad0b0d9d65f45"), "name" : "mrbird's blog", "post" : "MongoDB文档CUD", "pageview" : 2&#125;&#123; "_id" : ObjectId("58acf64b3c8ad0b0d9d65f4a"), "name" : "mrbird's blog", "post" : "MongoDB shell", "pageview" : 2&#125;&#123; "_id" : ObjectId("58acf65d3c8ad0b0d9d65f4d"), "name" : "mrbird's blog", "post" : "start Spring Boot", "pageview" : 2&#125;另外，调用getLastError可查看最近一次更新的文档数量，如：12345678910&gt; db.runCommand(&#123;getLastError:1&#125;)&#123; "connectionId" : 1, "updatedExisting" : true, "n" : 3, "syncMillis" : 0, "writtenTo" : null, "err" : null, "ok" : 1&#125;拥有类似事务特性的更新与查询操作findAndModify。它是原子性的，会返回符合查询条件的更新后的文档。一次最多只更新一个文档，也就是条件query条件，且执行sort后的第一个文档。语法如下：123456789db.COLLECTION_NAME.findAndModify(&#123; query:&#123;&#125;, update:&#123;&#125;, remove:true|false, new:true|false, sort:&#123;&#125;, fields:&#123;&#125;, upsert:true|false&#125;); ​query是查询选择器，与findOne的查询选择器相同。update是要更新的值，不能与remove同时出现。remove表示删除符合query条件的文档，不能与update同时出现。new为true：返回更新后的文档，false：返回更新前的，默认是false。sort：排序条件，与sort函数的参数一致。fields:投影操作，与find的第二个参数一致。upsert:与update的upsert参数一样。例子：12345678910111213141516171819202122232425262728293031&gt; db.blog.findAndModify(&#123;... "query":&#123;"name":"mrbird's blog"&#125;,... "update":&#123;... "$inc":&#123;"pageview":1&#125;,... "$set":&#123;"like":1&#125;&#125;&#125;)&#123; "_id" : ObjectId("58acf0743c8ad0b0d9d65f45"), "name" : "mrbird's blog", "post" : "MongoDB文档CUD", "pageview" : 3&#125;&gt; db.blog.find().pretty()&#123; "_id" : ObjectId("58acf0743c8ad0b0d9d65f45"), "name" : "mrbird's blog", "post" : "MongoDB文档CUD", "pageview" : 4, "like" : 1&#125;&#123; "_id" : ObjectId("58acf64b3c8ad0b0d9d65f4a"), "name" : "mrbird's blog", "post" : "MongoDB shell", "pageview" : 3&#125;&#123; "_id" : ObjectId("58acf65d3c8ad0b0d9d65f4d"), "name" : "mrbird's blog", "post" : "start Spring Boot", "pageview" : 3&#125;可发现，执行findAndModify后，返回被更新前（默认显示更新前的）的文档，并且只更新了匹配的第一条文档。如果要返回被更新后的文档，我们设置new 为true：1234567891011&gt; db.blog.findAndModify(&#123; ..."query":&#123;"name":"mrbird's blog"&#125;, ..."update":&#123; "$inc":&#123;"pageview":1&#125;, "$set":&#123;"like":2&#125;&#125;,..."new":true&#125;)&#123; "_id" : ObjectId("58acf0743c8ad0b0d9d65f45"), "name" : "mrbird's blog", "post" : "MongoDB文档CUD", "pageview" : 5, "like" : 2&#125;《MongoDB权威指南》读书笔记]]></content>
      <tags>
        <tag>MongoDB</tag>
        <tag>DataBase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leanote博客主题Conciseness]]></title>
    <url>%2Fblog%2FLeanote%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98Conciseness.html</url>
    <content type="text"><![CDATA[主题Conciseness已上架Leanote博客主题市场。该主题修改自roomcar的pure主题。主题预览图如下所示：该主题可自行修改，这里做几点介绍。修改图片编辑主题，找到theme.json文件以下字段：12345..."BlogImgName": "blogImg.jpg","WebImgName": "webImg.png","ErrorImgName": "robot.png", ...BlogImgName为博客About Me图片，WebImgName为网页小图标，ErrorImgName为404页面图片。假如现在您想将About Me的图片换为自己上传的名为handsomeBoy.png的照片，只需将theme.json文件的BlogImgName字段值换位“handsomeBoy.png”即可。修改About Me连接编辑主题，找到theme.json文件以下字段：123"QQ": "123456","Weico": "http://weibo.com/","Facebook": "https://www.facebook.com/",可将属性值换为自己的连接即可。修改音乐音乐插件来自：32空间。修改音乐只需修改theme.json文件中的MusicUrl 属性即可。该属性的值为一个数组，格式如下所示：1&#123;"title": "musicTitle","artist":"artist","mp3": "musicUrl","cover": "musicCover"&#125;,title为歌曲名，artist为歌手名，mp3为音乐连接，cover为专辑封面。关于这几个值的获取方法，下面做详细介绍：1.比如在网易云音乐中搜索莫文蔚的《当你老了》，可得到音乐链接为：http://music.163.com/#/song?id=30621954&amp;userid=3425798。其中song的id为30621954。2.复制该id，打开链接：http://music.163.com/api/song/detail/?id=yourId&amp;ids=%5ByourId%5D&amp;csrf_token=。3.将链接中的yourId更改为第一条复制的音乐id，然后回车，可看到页面解析出一个json格式内容：123456789101112131415161718192021222324252627282930313233343536373839&#123;"songs": [ &#123; "name": "当你老了", "id": 30621954,... "artists": [ &#123; "name": "莫文蔚", "id": 8926, "picId": 0, "img1v1Id": 0, "briefDesc": "", "picUrl": "http://p3.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg", "img1v1Url": "http://p4.music.126.net/6y-UleORITEDbvrOLV0Q8A==/5639395138885805.jpg", "albumSize": 0, "alias": [], "trans": "", "musicSize": 0 &#125; ], "album": &#123; "name": "当你老了", "id": 3104146, "type": "EP/Single", "size": 1, "picId": 7860408627221136, "blurPicUrl": "http://p3.music.126.net/2nJOdPf1RlGY_tQdB5ZdPA==/7860408627221136.jpg", "companyId": 0, "pic": 7860408627221136, "picUrl": "http://p4.music.126.net/2nJOdPf1RlGY_tQdB5ZdPA==/7860408627221136.jpg", "publishTime": 1424188800007,... "mp3Url": "http://m2.music.126.net/tQ0pNmpsiHIsxEl-CnMmJg==/7897792022607979.mp3" &#125; ],"equalizers": &#123;&#125;,"code": 200&#125;一大段json数据，和我们有关的就几个，其中title这里我们填写为“当你老了”，artist为“莫文蔚”，mp3为json数据中的mp3Url字段，这里为：http://m2.music.126.net/tQ0pNmpsiHIsxEl-CnMmJg==/7897792022607979.mp3。cover为json文件中的album的picUrl字段值，这里为：http://p4.music.126.net/2nJOdPf1RlGY_tQdB5ZdPA==/7860408627221136.jpg。所以最终的这首歌的代码为：123456 &#123; "title": "当你老了", "artist":"莫文蔚", "mp3": "http://m2.music.126.net/tQ0pNmpsiHIsxEl-CnMmJg==/7897792022607979.mp3", "cover": "http://p4.music.126.net/2nJOdPf1RlGY_tQdB5ZdPA==/7860408627221136.jpg"&#125;,将这段代码加到theme.json文件中的musicUrl属性中即可。输入特效在搜索以及评论框内加如了插件activate-power-mode.js特效，如果不需要可以找到0-c.html第55行：12345&lt;script&gt; POWERMODE.colorful = true; POWERMODE.shake = false; document.body.addEventListener('input', POWERMODE);&lt;/script&gt;将这几行代码删掉即可。弹出层页面弹出层使用的是sweetAlert.js插件。当删除评论以及未登录状况下点击博文的评论和点赞按钮即可触发，如：相应API可查看sweetAlert插件官网。在主题share_comment.js文件中可找到相关代码。如果有疑问，欢迎留言。2017年3月27日修复一些bug，样式调整。最新安装包：github]]></content>
      <tags>
        <tag>Leanote</tag>
        <tag>theme</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB shell]]></title>
    <url>%2Fblog%2FMongoDB-shell.html</url>
    <content type="text"><![CDATA[启动MongoDB安装好MongoDB，将其bin目录配置到系统环境变量path后，在磁盘上创建一个数据库保存目录，比如D:\MongoDB，然后打开命令窗口输入如下命令启动MongoDB服务：1&gt; mongod --dbpath=d:\mongodb当看到输出如下信息，表明启动成功，端口号为27017：12...[thread1] waiting for connections on port 27017打开另外一个命令窗口作为客户端，输入mongo即可连上服务：1234&gt; mongoMongoDB shell version v3.4.2connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.2语法糖MongoDB shell自带了一些语法糖：123456show dbs 列出所有DBuse dbname 切换当前DBshow tables 或 show collections 列出当前DB的所有表/集合show users 列出当前DB的所有用户show profile 列出当前DB的所有慢查询show logs 列出运行日志使用shell执行脚本假如在C:\Program Files\MongoDB\Server\3.4\bin目录下创建一个test.js脚本文件：1print("hello MnogoDB")有两种方式让MongoDB执行该脚本：连上服务前123456789&gt; exitbye C:\Users\Dell&gt;cd ../../program files/mongodb/server/3.4/binC:\Program Files\MongoDB\Server\3.4\bin&gt;mongo test.jsMongoDB shell version v3.4.2connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.2hello MnogoDB可看到，shell页面执行了test.js脚本并如期输出hello MongoDB（路径必须和脚本所在路径一致）。连上服务后连上服务后，可使用load()函数执行脚本：123&gt; load("test.js")hello MnogoDBtrue另外一个就是可以在shell中初始化一些辅助函数，比如定义一个hello.js：12345var hello = function()&#123; var world = ["handsome","charming"]; var index = Math.floor(Math.random()*2); print("hello mrbird,you are so "+world[index]);&#125;在shell中加载这个脚本，hello函数就可以使用了：12345678&gt; typeof helloundefined&gt; load("hello.js")true&gt; typeof hellofunction&gt; hello()hello mrbird,you are so charming.mongorc.js对于一些常用的脚本，如果每次启动服务后都用load()手动加载，这将很繁琐。对于这些常用的脚本，我们可以将其放在.mongorc.js文件中，因为MongoDB启动的时候，会自动加载该脚本。比如在.mongorc.js加入一句问候语：1print("Hello mrbird,welcome to use mongoDB")连接服务时，shell窗口输出：12345&gt; mongoMongoDB shell version v3.4.2connecting to: mongodb://127.0.0.1:27017MongoDB server version: 3.4.2Hello mrbird,welcome to use mongoDB也可以加如一些实用功能，比如添加防止自己误删的js脚本：123456789var no = function()&#123; print("Please don't");&#125;;// 禁止删除数据库db.dropDatabases = DB.prototype.dropDatabases = no;// 禁止删除集合DBCollection.prototype.drop = no;// 禁止删除索引DBCollection.prototype.dropIndex = no;测试一下：123456&gt; show collectionsblog&gt; db.blog.drop();Please don't&gt; show collectionsblog配合编辑器在shell中编辑文档是一件麻烦的事情，我们可以在.mongorc.js文件中加入自己的脚本编辑器：1EDITOR = "\"D:\\Program Files (x86)\\Notepad++\\notepad++.exe\""这里指定编辑器为notepad++，然后在shell中即可实用edit命令来编辑一个变量：123456789&gt; db.blog.findOne()&#123; "_id" : ObjectId("58a86088eb4ef940034d2733"), "title" : "mongodb shell", "content" : "mongodb超级有趣", "date" : ISODate("2017-02-18T14:55:39.679Z")&#125;&gt; var msg = db.blog.findOne()&gt; edit msg界面弹出：在编辑器中修改content内容后，保存并退出编辑器，变量就会被重新解析然后加载回shell：123456789&gt; db.blog.update(&#123;title: "mongodb shell"&#125;,msg)WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)&gt; db.blog.findOne()&#123; "_id" : ObjectId("58a86088eb4ef940034d2733"), "title" : "mongodb shell", "content" : "mongodb is interesting", "date" : ISODate("2017-02-18T14:55:39.679Z")&#125;可看到，文档已修改。《MongoDB权威指南》读书笔记]]></content>
      <tags>
        <tag>MongoDB</tag>
        <tag>DataBase</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IntelliJ IDEA 开发环境配置]]></title>
    <url>%2Fblog%2FIntelliJ-IDEA-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.html</url>
    <content type="text"><![CDATA[IntelliJ IDEA 主要用于支持 Java、Scala、Groovy 等语言的开发工具，同时具备支持目前主流的技术和框架，擅长于企业应用、移动应用和 Web 应用的开发。最近使用后觉得比eclipse强太多。初次使用要配置各种开发环境，所以记之。配置Git1.在官网https://git-scm.com/下载Git for windows并安装。2.打开IntelliJ IDEA的设置界面，选择Version Control → Git：将Path to Git executable设置为Git安装路径。配置GitHub1.打开IntelliJ IDEA的设置界面，选择Version Control → GitHub。2.填写账号密码，并测试是否登陆成功：配置Maven1.首先配置Maven本地资源库存放路径(拷贝Maven自带settings.xml，打开修改存放路径)：1&lt;localRepository&gt;D:\MyMaven\repository&lt;/localRepository&gt;2.打开IntelliJ IDEA的设置界面，选择Build,Execution,Deployment → Build Tools → Maven：选择相应settings.xml文件即可。]]></content>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Security保护方法]]></title>
    <url>%2Fblog%2FSpring-Security%E4%BF%9D%E6%8A%A4%E6%96%B9%E6%B3%95.html</url>
    <content type="text"><![CDATA[Spring Security提供了三种不同的安全注解：1.Spring Security自带的@Secured注解；2.JSR-250的@RolesAllowed注解；3.表达式驱动的注解，包括@PreAuthorize、@PostAuthorize、@PreFilter和 @PostFilter。@Secured在Spring-Security.xml中启用@Secured注解：1&lt;global-method-security secured-annotations="enabled"/&gt;例如只有拥有权限“ROLE_ADMIN”的用户才能访问下面这个方法：1234@Secured("ROLE_ADMIN")public void test()&#123; ...&#125;权限不足时，方法抛出Access Denied异常。@Secured注解会使用一个String数组作为参数。每个String值是一个权限，调用这个方法至少需要具备其中的一个权限。如：1234@Secured(&#123;"ROLE_ADMIN","ROLE_USER"&#125;)public void test()&#123; ...&#125;@RolesAllowed@RolesAllowed注解和@Secured注解在各个方面基本上都是一致的。启用@RolesAllowed注解：1&lt;global-method-security jsr250-annotations="enabled"/&gt;栗子：1234@RolesAllowed("ROLE_ADMIN")public void test()&#123; ...&#125;SpEL注解启用该注解：1&lt;global-method-security pre-post-annotations="enabled"/&gt;@PreAuthorize该注解用于方法前验证权限，比如限制非VIP用户提交blog的note字段字数不得超过1000字：1234@PreAuthorize("hasRole('ROLE_ADMIN') and #form.note.length() &lt;= 1000 or hasRole('ROLE_VIP')")public void writeBlog(Form form)&#123; ...&#125;表达式中的#form部分直接引用了方法中的同名参数。这使得Spring Security能够检查传入方法的参数，并将这些参数用于认证决策的制定。@PostAuthorize方法后调用权限验证，比如校验方法返回值：12345@PreAuthorize("hasRole(ROLE_USER)")@PostAuthorize("returnObject.user.userName == principal.username")public User getUserById(long id)&#123; ... &#125;Spring Security在SpEL中提供了名为returnObject 的变量。在这里方法返回一个User对象，所以这个表达式可以直接访问user对象中的userName属性。]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Security JSP标签库]]></title>
    <url>%2Fblog%2FSpring-Security-JSP%E6%A0%87%E7%AD%BE%E5%BA%93.html</url>
    <content type="text"><![CDATA[Spring Security提供了一套JSP标签库用于保护JSP视图。该库比较小，只提供了三个标签。要使用这个库，先在JSP页首加入：1&lt;%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec" %&gt;该库包含的三个标签如下：&lt;security:accesscontrollist&gt;：如果用户通过访问控制列表授予了指定的权限，那么渲染该标签体中的内容。&lt;security:authentication&gt;：渲染当前用户认证对象的详细信息。&lt;security:authorize&gt;：如果用户被授予了特定的权限或者SpEL表达式的计算结果为true，那么渲染该标签体中的内容。认证用户信息使用&lt;security:authentication&gt; JSP标签可以访问用户的认证详情：principal：用户的基本信息对象。使用admin登陆，查看其用户认证详情：1&lt;sec:authentication property="principal"/&gt;页面显示内容如下：12345678org.springframework.security.core.userdetails.User@586034f: Username: admin; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ROLE_ADMIN,ROLE_USER还可以将其赋值给变量，并指定作用域：1&lt;sec:authentication property="principal" var="principal" scope="request"/&gt;details：认证的附加信息（IP地址、证件序列号、会话ID等）。查看admin用户的details属性：1&lt;sec:authentication property="details"/&gt;页面显示内容如下：123org.springframework.security.web.authentication.WebAuthenticationDetails@21a2c: RemoteIpAddress: 0:0:0:0:0:0:0:1; SessionId: D45BA834E227E0DA5596FF8C56FB9CA1authorities：一组用于表示用户所授予权限的GrantedAuthority对象。查看admin用户的authorities属性：1&lt;sec:authentication property="authorities"/&gt;页面显示内容如下：1[ROLE_ADMIN, ROLE_USER]credentials：用于核实用户的凭证（通常，这会是用户的密码）。根据权限展示JSP页面的内容也可以根据用户的权限进行有条件的展示，比如只让admin看到admin I love u信息：123&lt;sec:authorize access="hasRole('ROLE_ADMIN')"&gt; admin i love u&lt;/sec:authorize&gt;测试过程中发现程序报错：No WebApplicationContext found: no ContextLoaderListener registered?。修改web.xml加入ContextLoaderListener配置：123456789101112131415161718192021&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt; classpath:applicationContext.xml &lt;/param-value&gt;&lt;/context-param&gt;&lt;listener&gt; &lt;listener-class&gt; org.springframework.web.context.ContextLoaderListener &lt;/listener-class&gt; &lt;/listener&gt; &lt;servlet&gt; &lt;servlet-name&gt;spring&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;spring&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;...结果抛出新异常：Could not open ServletContext resource [/WEB-INF/spring-servlet.xml]。在WEB-INF下创建一个spring-servlet.xml文件即可：1234567891011&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd"&gt; &lt;!-- some tags --&gt;&lt;/beans&gt;]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于数据库用户认证]]></title>
    <url>%2Fblog%2F%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81.html</url>
    <content type="text"><![CDATA[实际开发中用户的信息一般存放在数据库表里，所以我们使用元素替代现使用Mysql数据库演示，表结构如下：123456789101112131415161718192021CREATE TABLE `role` ( `id` int(20) NOT NULL AUTO_INCREMENT COMMENT '角色编号', `name` varchar(60) NOT NULL COMMENT '角色', `note` varchar(100) DEFAULT NULL COMMENT '描述', PRIMARY KEY (`id`));CREATE TABLE `user` ( `id` int(20) NOT NULL AUTO_INCREMENT COMMENT '用户编号', `username` varchar(60) NOT NULL COMMENT '用户名', `password` varchar(60) NOT NULL COMMENT '密码', `status` int(20) NOT NULL COMMENT '状态', `note` varchar(100) DEFAULT NULL COMMENT '描述', PRIMARY KEY (`id`));CREATE TABLE `user_role` ( `role_id` int(20) NOT NULL COMMENT '角色编号', `user_id` int(20) NOT NULL COMMENT '用户编号', PRIMARY KEY (`role_id`,`user_id`), CONSTRAINT `user_role_ibfk_2` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`), CONSTRAINT `user_role_ibfk_1` FOREIGN KEY (`role_id`) REFERENCES `role` (`id`));插入测试数据：1234567INSERT INTO `role` VALUES ('1', 'ROLE_ADMIN', '管理员角色');INSERT INTO `role` VALUES ('2', 'ROLE_USER', '用户角色');INSERT INTO `user` VALUES ('1', 'admin', 'admin', '1', '管理员');INSERT INTO `user` VALUES ('2', 'user', 'user', '1', '普通用户');INSERT INTO `user_role` VALUES ('1', '1');INSERT INTO `user_role` VALUES ('1', '2');INSERT INTO `user_role` VALUES ('2', '2');加入spring-jdbc以及mysql-connector依赖：12345678910&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;4.3.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.6&lt;/version&gt;&lt;/dependency&gt;修改spring-security配置：123456789101112131415161718&lt;bean id="datasource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" p:driverClassName="com.mysql.jdbc.Driver" p:url="jdbc:mysql://localhost:3306/security?useUnicode=true&amp;characterEncoding=UTF-8" p:username="root" p:password="123456"/&gt;&lt;jdbc-user-service id="user_service" data-source-ref="datasource" users-by-username-query="select username,password,status as enabled from user where username=?" authorities-by-username-query="select u.username,r.name as authority from user u join user_role ur on u.id=ur.user_id join role r on r.id=ur.role_id where u.username=?"/&gt;users-by-username-query为根据用户名查找用户，系统通过传入的用户名查询当前用户的登录名，密码和是否被禁用这一状态。authorities-by-username-query为根据用户名查找权限，系统通过传入的用户名查询当前用户已被授予的所有权限。]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义Spring Security登录页]]></title>
    <url>%2Fblog%2F%E8%87%AA%E5%AE%9A%E4%B9%89Spring-Security%E7%99%BB%E5%BD%95%E9%A1%B5.html</url>
    <content type="text"><![CDATA[虽然Spring Security框架给我们赠送了个登录页面，但这个页面过于简单，Spring Security允许我们自定义登录页。准备工作第一步在maven中加入Spring Security相关依赖（Spring MVC已搭建好）。123456789101112131415&lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-web&lt;/artifactId&gt; &lt;version&gt;3.2.0.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt; &lt;version&gt;3.2.0.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.security&lt;/groupId&gt; &lt;artifactId&gt;spring-security-taglibs&lt;/artifactId&gt; &lt;version&gt;3.2.0.RELEASE&lt;/version&gt;&lt;/dependency&gt;为了在项目中使用 Spring Security 控制权限，首先要在web.xml 中配置过滤器，这样我们就可以控制对这个项目的每个请求了。12345678&lt;filter&gt; &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;applicationContext.xml的配置如下：12345678910111213141516171819202122232425262728&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd"&gt; &lt;!-- 开启组件扫描 --&gt; &lt;context:component-scan base-package="spring"/&gt; &lt;!-- 启用Spring mvc --&gt; &lt;mvc:annotation-driven/&gt; &lt;!-- 配置viewResolver --&gt; &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/views/" p:suffix=".jsp" p:viewClass="org.springframework.web.servlet.view.JstlView"&gt; &lt;/bean&gt; &lt;mvc:resources location="/css/" mapping="/css/**"/&gt; &lt;!-- 引入spring-security.xml --&gt; &lt;import resource="spring-security.xml"/&gt;&lt;/beans&gt;在applicationContext.xml中，使用&lt;import/&gt;标签引入了spring-security.xml配置。spring-security.xml先简单配置如下：123456789101112131415161718192021222324252627282930313233343536&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;b:beans xmlns:b="http://www.springframework.org/schema/beans" xmlns="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd"&gt; &lt;!-- 设置免验证路径 --&gt; &lt;http pattern="/**/*.css" security="none"/&gt; &lt;http pattern="/**/*.jpg" security="none"/&gt; &lt;http pattern="/**/*.jpeg" security="none"/&gt; &lt;http pattern="/checkCode" security="none"/&gt; &lt;http auto-config="true"&gt; &lt;intercept-url pattern="/login" access="IS_AUTHENTICATED_ANONYMOUSLY" /&gt; &lt;intercept-url pattern="/admin" access="ROLE_ADMIN"/&gt; &lt;intercept-url pattern="/**" access="ROLE_USER"/&gt; &lt;form-login login-page="/login"/&gt; &lt;custom-filter ref="loginfilter" before="FORM_LOGIN_FILTER" /&gt; &lt;/http&gt; &lt;b:bean id="loginfilter" class="spring.security.web.MrbirdUsernamePasswordAuthenticationFilter"&gt; &lt;b:property name="filterProcessesUrl" value="/j_spring_security_check"/&gt; &lt;!-- 登入页面form mothed 必须是post --&gt; &lt;b:property name="postOnly" value="true"/&gt; &lt;b:property name="authenticationManager" ref="authenticationManager" /&gt; &lt;b:property name="continueChainBeforeSuccessfulAuthentication" value="false"/&gt; &lt;/b:bean&gt; &lt;user-service id="user_service"&gt; &lt;user name="admin" password="123456" authorities="ROLE_USER,ROLE_ADMIN"/&gt; &lt;user name="user" password="123456" authorities="ROLE_USER"/&gt; &lt;/user-service&gt; &lt;authentication-manager alias="authenticationManager"&gt; &lt;authentication-provider user-service-ref="user_service"/&gt; &lt;/authentication-manager&gt;&lt;/b:beans&gt;上述配置中主要干了几件事：1.声明在xml 中使用Spring Security 提供的命名空间xmlns=”http://www.springframework.org/schema/security&quot;。2.设置一些免验证资源或者路径。3.利用intercept-url来判断用户需要具有何种权限才能访问对应的url资源，可以在pattern中指定一个特定的url资源，access指明需要的权限。比如url “/admin” 必须拥有ROLE_ADMIN的用户才能访问。在实际使用中，Spring Security采用的是一种就近原则，就是说当用户访 问的url 资源满足多个intercepter-url 时，系统将使用第一个符合条件的 intercept-url 进行权限控制。4.access=&quot;IS_AUTHENTICATED_ANONYMOUSLY&quot;指定匿名用户也可以访问。5.&lt;form-login/&gt;标签的login-page=”/login”属性表示登录页面的请求，由控制器去处理。6.&lt;custom-filter/&gt;标签引用了一个名为loginfilter的过滤器，用于登录的时候进行验证。7.接下来定义了id为loginfilter的bean，其filterProcessesUrl设定了登录页表单提交时的请求；authenticationManager属性指向authenticationManager。该bean对应的类下文再做介绍。8.user-service中定义了两个用户，admin 和user，password属性定义其密码，authorities属性为其分配权限。9.&lt;authentication-manager/&gt;标签注册了一个认证管理器，并通过 &lt;authentication-provider/&gt;标签的user-service-ref属性将之前定义的用户装配起来。除此之外，还可以使用SpEL表达式进行url的拦截。启用SpEL启用SpEL：123&lt;http auto-config="true" use-expressions="true"&gt; ...&lt;/http&gt;Spring Security支持的所有SpEL表达式如下：安全表达式计算结果authentication用户的认证对象denyAll结果始终为falsehasAnyRole(list of&nbsp;roles)如果用户被授予了列表中任意的指定角色，结果为truehasRole(role)如果用户被授予了指定的角色，结果为truehasIpAddress(IP Address)如果请求来自指定IP的话，结果为trueisAnonymous()如果当前用户为匿名用户，结果为trueisAuthenticated()如果当前用户进行了认证的话，结果为trueisFullyAuthenticated()如果当前用户进行了完整认证的话（不是通过Remember-me功能进行的认 证），结果为trueisRememberMe()如果当前用户是通过Remember-me自动认证的，结果为truepermitAll结果始终为trueprincipal用户的principal对象使用SpEL改写的access属性：123456&lt;http auto-config="true" access-denied-page="/deny" use-expressions="true"&gt; &lt;intercept-url pattern="/login" access="permitAll" /&gt; &lt;intercept-url pattern="/admin" access="hasRole('ROLE_ADMIN')"/&gt; &lt;intercept-url pattern="/**" access="hasRole('ROLE_USER')"/&gt; ...&lt;/http&gt;接下来自己编写个登录页。自定义登录页login.jsp如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;&lt;%@ taglib uri="http://www.springframework.org/tags" prefix="s" %&gt;&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/&gt; &lt;title&gt;login page&lt;/title&gt; &lt;link href="&lt;c:url value='/css/bootstrap.min.css'/&gt;" rel="stylesheet" type="text/css"&gt; &lt;link href="&lt;c:url value='/css/bootstrap-theme.min.css'/&gt;" rel="stylesheet" type="text/css"&gt; &lt;link href="&lt;c:url value='/css/templatemo_style.css'/&gt;" rel="stylesheet" type="text/css"&gt; &lt;/head&gt;&lt;body class="templatemo-bg-gray"&gt;&lt;div class="container"&gt; &lt;div class="col-md-12"&gt; &lt;h1 class="margin-bottom-15"&gt;Login Page&lt;/h1&gt; &lt;form action="&lt;s:url value='/j_spring_security_check'/&gt;" class="form-horizontal templatemo-container templatemo-login-form-1 margin-bottom-30" role="form" method="post"&gt; &lt;div class="form-group"&gt; &lt;div class="col-xs-12"&gt; &lt;div class="control-wrapper"&gt; &lt;span class="form-text"&gt;username&lt;/span&gt; &lt;input type="text" class="form-control" name="j_username"/&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;div class="col-md-12"&gt; &lt;div class="control-wrapper"&gt; &lt;span class="form-text"&gt;password&lt;/span&gt; &lt;input type="password" class="form-control" name="j_password"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;div class="col-md-12"&gt; &lt;div class="control-wrapper"&gt; &lt;span class="form-text"&gt;validateCode&lt;/span&gt; &lt;input type="password" class="form-control" name="validateCode"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="form-group"&gt; &lt;div class="col-md-12"&gt; &lt;div class="control-wrapper"&gt; &lt;input type="submit" value="Log in" class="btn btn-info"&gt; &lt;input type="reset" value="Reset" class="btn btn-info"&gt; &lt;img id="checkCodeImg" title="验证码不区分大小写" src="checkCode" onclick="changeValidateCode()" style="cursor: pointer;"&gt; &lt;a href="javascript:;" onclick="changeValidateCode()"&gt;看不清？&lt;/a&gt; &lt;span class="form-error"&gt; $&#123;sessionScope['SPRING_SECURITY_LAST_EXCEPTION'].message&#125; &lt;/span&gt; &lt;span class="form-error"&gt; $&#123;SPRING_SECURITY_403_EXCEPTION.message&#125; &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;script type="text/javascript"&gt; function changeValidateCode()&#123; document.getElementById("checkCodeImg").src = "checkCode"+ "?nocache=" + new Date().getTime(); &#125; &lt;/script&gt;&lt;/html&gt;与Spring Security相关的就几个：1./j_spring_security_check，提交登录信息的URL地址。2.j_username，输入登录名的参数名称。3.j_password，输入密码的参数名称。4.${sessionScope[&#39;SPRING_SECURITY_LAST_EXCEPTION&#39;].message}和${SPRING_SECURITY_403_EXCEPTION.message}用于输出登录失败的异常信息。login.jsp页面尾部添加了验证码验证。验证码对应的controller如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091@Controllerpublic class CodeController &#123; @RequestMapping(value="/checkCode") public void createCheckCode(HttpServletRequest request, HttpServletResponse response) throws IOException&#123; //设置不缓存图片 response.setHeader("Pragma", "No-cache"); response.setHeader("Cache-Control", "No-cache"); response.setDateHeader("Expires", 0); //指定生成的响应类型及格式-图片jpg response.setContentType("image/jpeg"); //指定生成验证码的宽度和高度 int width=66,height=30; //创建BufferedImage对象,其作用相当于一图片 BufferedImage image=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB); //创建Graphics对象,其作用相当于画笔 Graphics g=image.getGraphics(); //创建Grapchics2D对象 Graphics2D g2d=(Graphics2D)g; Random random=new Random(); //定义字体样式 Font mfont=new Font("楷体",Font.BOLD,20); g.setColor(getRandColor(200,250)); //绘制背景 g.fillRect(0, 0, width, height); //设置字体 g.setFont(mfont); g.setColor(getRandColor(180,200)); //绘制20条颜色和位置全部为随机产生的线条,该线条为2f for(int i=0;i&lt;20;i++)&#123; int x=random.nextInt(width-1); int y=random.nextInt(height-1); int x1=random.nextInt(6)+1; int y1=random.nextInt(12)+1; //定制线条样式 BasicStroke bs=new BasicStroke(2f,BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL); Line2D line=new Line2D.Double(x,y,x+x1,y+y1); g2d.setStroke(bs); //绘制直线 g2d.draw(line); &#125; String sRand=""; String ctmp=""; String[] rBase=&#123;"1","2","3","4","5","6","7","8","9", "a","b","c","d","e","f","g", "h","i","j","k", "m","n", "o","p","q", "r","s","t", "u","v","w", "x","y","z", "A","B","C","D","E","F","G", "H", "J","K","L","M","N", "O","P","Q", "R","S","T", "U","V","W", "X","Y","Z"&#125;; //制定输出的验证码为四位 for(int i=0;i&lt;4;i++)&#123; int index = random.nextInt(rBase.length-1); ctmp = rBase[index]; sRand+=ctmp; Color color=new Color(20+random.nextInt(110),20+random.nextInt(110), random.nextInt(110)); g.setColor(color); /*将文字旋转制定角度*/ Graphics2D g2d_word=(Graphics2D)g; AffineTransform trans=new AffineTransform(); //trans.rotate((45)*3.14/180,15*i+8,7); /*缩放文字*/ float scaleSize=random.nextFloat()+0.8f; if(scaleSize&gt;1f) scaleSize=1f; trans.scale(scaleSize, scaleSize); g2d_word.setTransform(trans); g.drawString(ctmp, 12*i+12, 22); &#125; HttpSession session=request.getSession(true); session.setAttribute("validateCode", sRand); //释放g所占用的系统资源 g.dispose(); //输出图片 ImageIO.write(image,"JPEG",response.getOutputStream()); &#125; /*该方法主要作用是获得随机生成的颜色*/ public Color getRandColor(int s,int e)&#123; Random random=new Random (); if(s&gt;255) s=255; if(e&gt;255) e=255; int r,g,b; r=s+random.nextInt(e-s); g=s+random.nextInt(e-s); b=s+random.nextInt(e-s); return new Color(r,g,b); &#125; &#125;接下来编写index.jsp，成功登录后跳转到该页面：12345678910111213141516171819&lt;%@ taglib uri="http://www.springframework.org/security/tags" prefix="sec" %&gt;&lt;%@ taglib uri="http://www.springframework.org/tags" prefix="s" %&gt;&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/&gt; &lt;title&gt;index page&lt;/title&gt; &lt;link href="&lt;c:url value='/css/templatemo_style.css'/&gt;" rel="stylesheet" type="text/css"&gt; &lt;/head&gt;&lt;body class="templatemo-bg-gray"&gt; &lt;div class="index-div"&gt; &lt;span class="index-text"&gt;hello:&lt;sec:authentication property="name"/&gt;&lt;/span&gt;&lt;br/&gt; &lt;hr&gt; &lt;a href="&lt;s:url value='/admin'/&gt;"&gt;admin.jsp&lt;/a&gt; &lt;a href="j_spring_security_logout"&gt;logout&lt;/a&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;编写admin.jsp用于测试权限控制：1234567891011121314&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/&gt; &lt;title&gt;admin page&lt;/title&gt; &lt;link href="&lt;c:url value='/css/templatemo_style.css'/&gt;" rel="stylesheet" type="text/css"&gt; &lt;/head&gt;&lt;body class="templatemo-bg-gray"&gt; &lt;div class="index-div"&gt; &lt;span class="index-text"&gt;welcome admin!&lt;/span&gt;&lt;br/&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;页面跳转controller：123456789101112131415161718import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping; @Controllerpublic class LoginController &#123; @RequestMapping(value="/login") public String login()&#123; return "login"; &#125; @RequestMapping(value="/admin") public String admin()&#123; return "admin"; &#125; @RequestMapping(value="/index") public String index()&#123; return "index"; &#125;&#125;处理登录在spring-security.xml文件中定义的loginfilter过滤器对应的类如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession; import org.springframework.security.authentication.AuthenticationServiceException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.web.authentication .UsernamePasswordAuthenticationFilter;import org.springframework.util.StringUtils; public class MrbirdUsernamePasswordAuthenticationFilter extends UsernamePasswordAuthenticationFilter&#123; private boolean postOnly = true; public static final String VALIDATE_CODE = "validateCode"; public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException &#123; if (postOnly &amp;&amp; !request.getMethod().equals("POST")) &#123; throw new AuthenticationServiceException( "Authentication method not supported: " + request.getMethod()); &#125; //获取输入的用户名和密码 String username = obtainUsername(request); String password = obtainPassword(request); //校验 if (username == null || StringUtils.isEmpty(username.trim())) &#123; //校验不通过时抛出相应的异常 throw new AuthenticationServiceException( messages.getMessage("Auth.usernameIsNull")); &#125; if (password == null || StringUtils.isEmpty(password.trim())) &#123; throw new AuthenticationServiceException( messages.getMessage("Auth.passwordIsNull")); &#125; //校验验证码 checkValidateCode(request); username = username.trim(); UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(username, password); setDetails(request, authRequest); //不做用户的验证工作，因为在org.springframework.security.web.access //.intercept.FilterSecurityInterceptor中会做验证。不需要重复验证。 return this.getAuthenticationManager().authenticate(authRequest); &#125; protected void checkValidateCode(HttpServletRequest request) &#123; HttpSession session = request.getSession(); String sessionValidateCode = obtainSessionValidateCode(session); //让上一次的验证码失效 session.setAttribute(VALIDATE_CODE, null); String validateCodeParameter = obtainValidateCodeParameter(request); if (StringUtils.isEmpty(validateCodeParameter) || !sessionValidateCode.equalsIgnoreCase(validateCodeParameter)) &#123; throw new AuthenticationServiceException("验证码错误！"); &#125; &#125; private String obtainValidateCodeParameter(HttpServletRequest request) &#123; Object obj = request.getParameter(VALIDATE_CODE); return null == obj ? "" : obj.toString().toLowerCase(); &#125; protected String obtainSessionValidateCode(HttpSession session) &#123; Object obj = session.getAttribute(VALIDATE_CODE); return null == obj ? "" : obj.toString().toLowerCase(); &#125; &#125;MrbirdUsernamePasswordAuthenticationFilter继承自UsernamePasswordAuthenticationFilter，主要工作是获取用户在登录界面输入的用户名和密码，并判断是否为空，以及判断验证码的正确性。UsernamePasswordAuthenticationToken 中有2个参数Object principal（主要的身份认证信息），Object credentials（用于证明principal是正确的信息，比如密码）在一个带有username和password的权限认证请求中，principal就会被赋值username，credentials就会被赋值password。我们还可以在Spring Security.xml中的loginfilter bean配置登录成功与失败的过滤器：1234567891011121314151617181920&lt;b:bean id="loginfilter" class="spring.security.web.MrbirdUsernamePasswordAuthenticationFilter"&gt; ... &lt;!-- 验证成功后的处理--&gt; &lt;b:property name="authenticationSuccessHandler" ref="authenticationSuccessHandler"/&gt; &lt;!-- 验证失败后的处理--&gt; &lt;b:property name="authenticationFailureHandler" ref="authenticationFailureHandler"/&gt; ...&lt;/b:bean&gt;&lt;!-- 登入信息验证失败后，退回到登入页面 --&gt;&lt;b:bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication .SimpleUrlAuthenticationFailureHandler"&gt; &lt;b:property name="defaultFailureUrl" value="/login?error=true"/&gt; &lt;/b:bean&gt; &lt;!-- 登入信息验证成功后，登入系统主页 --&gt;&lt;b:bean id="authenticationSuccessHandler" class="spring.security.web.MrbirdLoginSuccessHandler"&gt; &lt;b:property name="defaultTargetUrl" value="/index"/&gt;&lt;/b:bean&gt;其中，MrbirdLoginSuccessHandler用于处理登录成功后的操作，比如生成日志等：1234567891011121314151617181920212223import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse; import org.springframework.security.core.Authentication;import org.springframework.security.core.userdetails.User;import org.springframework.security.web.authentication .SavedRequestAwareAuthenticationSuccessHandler; public class MrbirdLoginSuccessHandler extends SavedRequestAwareAuthenticationSuccessHandler &#123; public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,Authentication authentication) throws ServletException, IOException&#123; System.out.println("登录成功！"); //获取登录人信息 User user = (User) authentication.getPrincipal(); System.out.println(user.getUsername()+user.getAuthorities()); //跳转到主页面 super.onAuthenticationSuccess(request, response, authentication); &#125;&#125;处理登出同样，我们可以添加登出过滤器，在Spring Security.xml中的中配置登出过滤器：12345678910&lt;http auto-config="true"&gt; ... &lt;logout invalidate-session="true" logout-url="/j_spring_security_logout" success-handler-ref="logoutSuccessHandler"/&gt; &lt;/http&gt; &lt;!-- 登出成功，处理类 --&gt;&lt;b:bean id="logoutSuccessHandler" class="spring.security.web.MrbirdLogoutSuccessHandler"&gt; &lt;b:property name="defaultTargetUrl" value="/login"/&gt;&lt;/b:bean&gt;logoutSuccessHandler对应的类MrbirdLogoutSuccessHandler：12345678910111213141516171819202122232425import java.io.IOException;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse; import org.springframework.security.core.Authentication;import org.springframework.security.core.userdetails.User;import org.springframework.security.web.authentication .AbstractAuthenticationTargetUrlRequestHandler;import org.springframework.security.web.authentication.logout .LogoutSuccessHandler; public class MrbirdLogoutSuccessHandler extends AbstractAuthenticationTargetUrlRequestHandler implements LogoutSuccessHandler&#123; public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException &#123; System.out.println("登出成功！"); User user = (User) authentication.getPrincipal(); System.out.println(user.getUsername()+user.getAuthorities()); //跳转到登录页 super.handle(request, response, authentication); &#125;&#125;异常信息本地化Spring Security自带的异常信息显示是纯英文的，但Spring Security支持异常信息本地化，这些信息包括认证失败、访问被拒绝等。在Spring Security.xml中配置：12345678910&lt;b:bean id="loginfilter" class="spring.security.web.MrbirdUsernamePasswordAuthenticationFilter"&gt; ... &lt;b:property name="messageSource" ref="messageSource"/&gt; &lt;/b:bean&gt;&lt;!-- 定义登录页面异常信息的本地化 --&gt; &lt;b:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource"&gt; &lt;b:property name="basename" value="classpath:messages_zh_CN"/&gt; &lt;/b:bean&gt;其中，messages_zh_CN.properties配置如下：123AbstractUserDetailsAuthenticationProvider.badCredentials=\u8D26\u53F7\u6216\u5BC6\u7801\u9519\u8BEFAuth.usernameIsNull=\u8D26\u53F7\u4E0D\u80FD\u4E3A\u7A7AAuth.passwordIsNull=\u5BC6\u7801\u4E0D\u80FD\u4E3A\u7A7AAbstractUserDetailsAuthenticationProvider.badCredentials定义了账户或密码不匹配时候的异常信息，Auth.usernameIsNull和Auth.passwordIsNull则是MrbirdUsernamePasswordAuthenticationFilter中抛出的异常。自定义限制页面当页面因为用户权限不足而受限的时候，显示的是403 Access is Denied页面，我们可以自定义这个受限页面。修改配置spring security.xml文件的元素，添加自定义访问拒绝页面的地址：123&lt;http auto-config="true" access-denied-page="/deny" &gt; ...&lt;/http&gt;在LoginController中添加：12345...@RequestMapping(value="/deny")public String deny()&#123; return "deny";&#125;deny.jsp123456789101112131415&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html;charset=UTF-8"/&gt; &lt;title&gt;deny page&lt;/title&gt; &lt;link href="&lt;c:url value='/css/templatemo_style.css'/&gt;" rel="stylesheet" type="text/css"&gt; &lt;/head&gt;&lt;body class="templatemo-bg-gray"&gt; &lt;div class="index-div"&gt; &lt;span class="index-text-deny" style='color:#C7425C;font-size:28px;'&gt; sorry,Insufficient authority +_+ &lt;/span&gt;&lt;br/&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;测试最终，工程的目录结构为：spring security.xml最终配置如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;b:beans xmlns:b="http://www.springframework.org/schema/beans" xmlns="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd"&gt; &lt;!-- 设置免验证路径 --&gt; &lt;http pattern="/**/*.css" security="none"/&gt; &lt;http pattern="/**/*.jpg" security="none"/&gt; &lt;http pattern="/**/*.jpeg" security="none"/&gt; &lt;http pattern="/checkCode" security="none"/&gt; &lt;http auto-config="true" access-denied-page="/deny" use-expressions="true"&gt; &lt;intercept-url pattern="/login" access="permitAll" /&gt; &lt;intercept-url pattern="/admin" access="hasRole('ROLE_ADMIN')"/&gt; &lt;intercept-url pattern="/**" access="hasRole('ROLE_USER')"/&gt; &lt;form-login login-page="/login"/&gt; &lt;custom-filter ref="loginfilter" before="FORM_LOGIN_FILTER" /&gt; &lt;logout invalidate-session="true" logout-url="/j_spring_security_logout" success-handler-ref="logoutSuccessHandler"/&gt; &lt;/http&gt; &lt;b:bean id="loginfilter" class="spring.security.web.MrbirdUsernamePasswordAuthenticationFilter"&gt; &lt;b:property name="filterProcessesUrl" value="/j_spring_security_check"/&gt; &lt;!-- 登入页面form mothed 必须是post --&gt; &lt;b:property name="postOnly" value="true"/&gt; &lt;!-- 权限管理器 --&gt; &lt;b:property name="authenticationManager" ref="authenticationManager" /&gt; &lt;b:property name="continueChainBeforeSuccessfulAuthentication" value="false"/&gt; &lt;!-- 验证成功后的处理--&gt; &lt;b:property name="authenticationSuccessHandler" ref="authenticationSuccessHandler"/&gt; &lt;!-- 验证失败后的处理--&gt; &lt;b:property name="authenticationFailureHandler" ref="authenticationFailureHandler"/&gt; &lt;b:property name="messageSource" ref="messageSource"/&gt; &lt;/b:bean&gt; &lt;!-- 定义登录页面异常信息的本地化 --&gt; &lt;b:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource"&gt; &lt;b:property name="basename" value="classpath:messages_zh_CN"/&gt; &lt;/b:bean&gt; &lt;!-- 登入信息验证失败后，退回到登入页面 --&gt; &lt;b:bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication .SimpleUrlAuthenticationFailureHandler"&gt; &lt;b:property name="defaultFailureUrl" value="/login?error=true"/&gt; &lt;/b:bean&gt; &lt;!-- 登入信息验证成功后，登入系统主页 --&gt; &lt;b:bean id="authenticationSuccessHandler" class="spring.security.web.MrbirdLoginSuccessHandler"&gt; &lt;b:property name="defaultTargetUrl" value="/index"/&gt; &lt;/b:bean&gt; &lt;!-- 登出成功，处理类 --&gt; &lt;b:bean id="logoutSuccessHandler" class="spring.security.web.MrbirdLogoutSuccessHandler"&gt; &lt;b:property name="defaultTargetUrl" value="/login"/&gt; &lt;/b:bean&gt; &lt;user-service id="user_service"&gt; &lt;user name="admin" password="123456" authorities="ROLE_USER,ROLE_ADMIN"/&gt; &lt;user name="user" password="123456" authorities="ROLE_USER"/&gt; &lt;/user-service&gt; &lt;authentication-manager alias="authenticationManager"&gt; &lt;authentication-provider user-service-ref="user_service"/&gt; &lt;/authentication-manager&gt;&lt;/b:beans&gt;启动工程，访问：http://localhost:8080/spring-security/login当登录失败时，页面如下：admin成功登录后：控制台输出：12登录成功！admin[ROLE_ADMIN, ROLE_USER]点击admin.jsp：点击logout回到登录页面，使用user登录：点击admin.jsp：访问受限。source code]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Carrying data across redirect requests]]></title>
    <url>%2Fblog%2FCarrying-data-across-redirect-requests.html</url>
    <content type="text"><![CDATA[重定向请求传递数据主要有URL和flash两种方式：URL123456@RequestMapping(value="/redirect",method=RequestMethod.GET)public String redirect(Model model)&#123; model.addAttribute("name", "KangKang"); model.addAttribute("id", 1l); return "redirect:/index/redirect/&#123;name&#125;";&#125;重定向 URL路径将会是“/index/redirect/KangKang?id=1l”。重定向方法：1234@RequestMapping(value="/redirect/&#123;name&#125;")public String getValue(@PathVariable String name,Long id)&#123; // do something&#125;通过断点，可看到name的值为KangKang，id为1l。flashURL只能传递String等简单类型值，而flash则可传递Java对象等复杂的值。Spring提供了通过RedirectAttributes设置flash属性的方法，这是Spring 3.1引入的Model 的一个子接口。RedirectAttributes提供了Model的所有功能。12345678@RequestMapping(value="/redirect",method=RequestMethod.GET)public String redirect(RedirectAttributes model)&#123; User user = new User(); user.setId(2l); user.setName("Jane"); model.addFlashAttribute(user); return "redirect:/index/redirect/flash";&#125;重定向方法：1234@RequestMapping(value="/redirect/flash")public String getValue(Model model)&#123; return "testRedirect";&#125;testRedirect.jsp页面可以直接用EL访问User对象。如果要在方法中获取User对象的属性，可以使用@ModelAttribute(“user”)标签。]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring multipart上传下载]]></title>
    <url>%2Fblog%2FSpring-multipart%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD.html</url>
    <content type="text"><![CDATA[加入依赖Apache Commons FileUpload：12345&lt;dependency&gt; &lt;groupId&gt;commons-fileupload&lt;/groupId&gt; &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt; &lt;version&gt;1.3.1&lt;/version&gt;&lt;/dependency&gt;maven tomcat设置URI编码为UTF-8：123456789&lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.1&lt;/version&gt; &lt;configuration&gt; &lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt; &lt;port&gt;8080&lt;/port&gt; &lt;/configuration&gt;&lt;/plugin&gt;multipart解析器12345678&lt;bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt; &lt;property name="defaultEncoding" value="utf-8"/&gt; &lt;!-- 单位为字节,这里为100MB --&gt; &lt;property name="maxUploadSize" value="104857600"/&gt; &lt;!-- 临时目录 --&gt; &lt;property name="uploadTempDir" value="/WEB-INF/temp"/&gt;&lt;/bean&gt;form表单12345&lt;form action='&lt;s:url value="/upload"/&gt;' method="post" enctype="multipart/form-data"&gt; 选择文件:&lt;input type="file" name="upload"&gt; &lt;input type="submit" value="提交"&gt; &lt;/form&gt;处理multipart请求123456789101112131415161718192021222324252627282930313233343536373839404142434445@Controller@RequestMapping("/")public class FileUploadController &#123; @RequestMapping(value="upload",method=RequestMethod.GET) public String upload() &#123; return "upload"; &#125; @RequestMapping(value="upload",method=RequestMethod.POST) //@RequestPart("upload")对于input框的name属性 public String processUpload(@RequestPart("upload") MultipartFile file, HttpServletRequest request,Model model) &#123; try&#123; if(file != null &amp;&amp; !file.isEmpty())&#123; // 保存的文件名未UUID+上传文件名，并且过滤文件名特殊字符 String fileName = makeFileName(StringFilter(file.getOriginalFilename())); String filePath = request.getSession().getServletContext() .getRealPath("/") + "/WEB-INF/upload/" + fileName; File uploadFile = new File(filePath); if(!uploadFile.exists())&#123; uploadFile.mkdirs(); &#125; // 转存文件 file.transferTo(uploadFile); model.addAttribute("name",file.getOriginalFilename()); return "result"; &#125;else&#123; return "fail"; &#125; &#125;catch(Exception e)&#123; e.printStackTrace(); return "fail"; &#125; &#125; String makeFileName(String filename) &#123; return UUID.randomUUID().toString() + "_" + filename; &#125; String StringFilter(String str) throws PatternSyntaxException &#123; String regEx = "[`~!@#$%^&amp;*+=|&#123;&#125;':; ',//[//]&lt;&gt;/?~！@#￥%……&amp;*（）——+|&#123;&#125;【】‘；：”“’。，、？]"; Pattern p = Pattern.compile(regEx); Matcher m = p.matcher(str); return m.replaceAll("").trim(); &#125;&#125;多文件上传的话，只需将MultipartFile file改为MultipartFile[] files，input标签加上multiple=”multiple”即可。处理下载当文件上传成功后，页面跳转到result.jsp：12&lt;p&gt;上传成功&lt;/p&gt;&lt;a href="&lt;s:url value='/download?fileName=$&#123;name &#125;'/&gt;"&gt;$&#123;name &#125;&lt;/a&gt;现处理下载请求：123456789101112131415161718192021222324@RequestMapping(value="download") public void processDownload(String fileName,HttpServletResponse response, HttpServletRequest request) throws UnsupportedEncodingException&#123; String realFileName = fileName.substring(fileName.indexOf("_") + 1); try &#123; response.setCharacterEncoding("utf-8"); response.setContentType("multipart/form-data"); response.setHeader("Content-Disposition", "attachment;fileName=" + java.net.URLEncoder.encode(realFileName,"utf-8")); String filePath = request.getSession().getServletContext().getRealPath("/") + "WEB-INF/upload/" + fileName; InputStream inputStream = new FileInputStream(new File(filePath)); OutputStream os = response.getOutputStream(); byte[] b = new byte[2048]; int length; while ((length = inputStream.read(b)) &gt; 0) &#123; os.write(b, 0, length); &#125; os.close(); inputStream.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125;&#125;异步处理异步处理multipart可以使用jQuery.form.js插件来完成：12345678$("#form_id").ajaxSubmit(&#123; url: "url.do", type: "post", dataType: "json", success: function(r)&#123; // your code here. &#125;&#125;);form表单代码：123&lt;form enctype="multipart/form-data"&gt; 选择文件:&lt;input type="file" name="upload"&gt; &lt;/form&gt;后端代码不变。]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring中使用Apache Tiles布局]]></title>
    <url>%2Fblog%2FSpring-Apache-Tiles.html</url>
    <content type="text"><![CDATA[假设我们想为应用中的所有页面定义一个通用的头部和底部。最原始的方式就是查找每个JSP模板，并为其添加头部和底部的HTML。但是这种方法的扩展性并不好，也难以维护。更好的方式是使用布局引擎，如Apache Tiles，定义适用于所有页面的通用页面布局。Spring MVC以视图解析器的形式为Apache Tiles提供了支持。配置Tiles视图解析器首先引入依赖：123456789101112131415&lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-jsp&lt;/artifactId&gt; &lt;version&gt;3.0.7&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-core&lt;/artifactId&gt; &lt;version&gt;3.0.7&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.tiles&lt;/groupId&gt; &lt;artifactId&gt;tiles-api&lt;/artifactId&gt; &lt;version&gt;3.0.7&lt;/version&gt;&lt;/dependency&gt;配置：1234567891011121314&lt;!-- 指定tiles.xml --&gt;&lt;bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer"&gt; &lt;property name="definitions"&gt; &lt;list&gt; &lt;value&gt;/WEB-INF/views/tiles.xml&lt;/value&gt; &lt;/list&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 代替InternalResourceViewResolver --&gt;&lt;bean id="viewResolver" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver"/&gt;&lt;!-- 配置静态资源路径 --&gt;&lt;mvc:resources location="/images/" mapping="/images/**"/&gt;tiles.xml见下文。tiles.xml1234567891011121314151617181920&lt;?xml version="1.0" encoding="utf-8" ?&gt;&lt;!DOCTYPE tiles-definitions PUBLIC "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN" "http://tiles.apache.org/dtds/tiles-config_3_0.dtd"&gt;&lt;tiles-definitions&gt; &lt;!-- 设置基本tile，定义了header,body,footer --&gt; &lt;definition name="base" template="/WEB-INF/views/page.jsp"&gt; &lt;put-attribute name="header" value="/WEB-INF/views/header.jsp" /&gt; &lt;put-attribute name="footer" value="/WEB-INF/views/footer.jsp" /&gt; &lt;/definition&gt; &lt;!-- 拓展tile，name对应controller中的视图名，body指定页面主体内容 --&gt; &lt;definition name="index" extends="base"&gt; &lt;put-attribute name="body" value="/WEB-INF/views/index.jsp" /&gt; &lt;/definition&gt; &lt;definition name="register" extends="base"&gt; &lt;put-attribute name="body" value="/WEB-INF/views/register.jsp" /&gt; &lt;/definition&gt; &lt;/tiles-definitions&gt;每个元素都定义了一个Tile，它最终引用的是一个JSP模板。名为base的Tile中，模板为page.jsp，还定义了页首和页脚的模板JSP：header.jsp：1234567&lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;&lt;%@ taglib uri="http://www.springframework.org/tags" prefix="s" %&gt;&lt;a href="&lt;s:url value="/index/" /&gt;"&gt; &lt;img src='&lt;c:url value="/images/leanote.png"/&gt;' border="0"/&gt;&lt;/a&gt;footer.jsp：123&lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;Copyright © Leanotepage.jsp：12345678910111213141516171819202122232425&lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;&lt;%@ taglib uri="http://www.springframework.org/tags" prefix="s" %&gt;&lt;%@ taglib uri="http://tiles.apache.org/tags-tiles" prefix="t" %&gt;&lt;%@ page session="false" %&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;leanote 蚂蚁笔记&lt;/title&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 头部 --&gt; &lt;div id="header"&gt; &lt;t:insertAttribute name="header" /&gt; &lt;/div&gt; &lt;!-- 主体内容，对应tiles.xml中继承base的Tile --&gt; &lt;div id="content"&gt; &lt;t:insertAttribute name="body" /&gt; &lt;/div&gt; &lt;!-- 尾部 --&gt; &lt;div id="footer"&gt; &lt;t:insertAttribute name="footer" /&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;名为index和register的Tile各自都继承了base Tile，还定义了body，分别引用index.jsp和register.jsp：index.jsp：12345&lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;&lt;p&gt;蚂蚁笔记，有极客范的云笔记！&lt;/p&gt;&lt;p&gt;前所未有的文档体验，近乎完美的平台覆盖，支持团队协同，企业级私有云&lt;/p&gt;&lt;p&gt;蚂蚁笔记 = 笔记 + 博客 + 协作 + 私有云&lt;/p&gt;register.jsp：1234567891011121314&lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;&lt;%@ taglib uri="http://www.springframework.org/tags/form" prefix="sf" %&gt; &lt;h3&gt;注册leanote&lt;/h3&gt;&lt;sf:form method="post" commandName="form" action="$&#123;pageContext.request.contextPath&#125;/register"&gt; &lt;sf:label path="name" cssErrorClass="error"&gt;用户名：&lt;/sf:label&gt; &lt;sf:input path="name" cssErrorClass="error"/&gt; &lt;sf:errors path="name" cssClass="error"/&gt;&lt;br/&gt; 邮箱：&lt;sf:input path="email"/&gt;&lt;sf:errors path="email" cssClass="error"/&gt;&lt;br/&gt; 密码：&lt;sf:password path="password" /&gt;&lt;sf:errors path="password" cssClass="error"/&gt;&lt;br/&gt; &lt;input type="submit" value="注册" /&gt;&lt;/sf:form&gt;测试访问http://localhost:8080/spring/index/：访问http://localhost:8080/spring/registerindex/可以看到，头部和尾部是固定的，变的只是body部分。]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Apache Tiles</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring表单校验]]></title>
    <url>%2Fblog%2FSpring%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C.html</url>
    <content type="text"><![CDATA[从Spring 3.0开始，Spring对Java校验API（Java Validation API，又称JSR-303）提供了支持。在Spring MVC中要使用Java校验API的话，并不需要什么额外的配置。只要保证在类路径下包含这个Java API的实现即可，比如Hibernate Validator。引入hibernate-validator：123456&lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-validator --&gt;&lt;dependency&gt; &lt;groupId&gt;org.hibernate&lt;/groupId&gt; &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt; &lt;version&gt;5.2.4.Final&lt;/version&gt;&lt;/dependency&gt;校验注解所有的注解都位于javax.validation.constraints和org.hibernate.validator.constraints包中。下表列出了这些校验注解。注解描述@Null限制只能为null@NotNull限制必须不为null@AssertFalse限制必须为false@AssertTrue限制必须为true@DecimalMax(value)限制必须为一个不大于指定值的数字@DecimalMin(value)限制必须为一个不小于指定值的数字@Digits(integer,fraction)限制必须为一个小数，且整数部分的位数不能超过integer， 小数部分的位数不能超过fraction@Future限制必须是一个将来的日期@Past限制必须是一个过去的日期@Max(value)限制必须为一个不大于指定值的数字@Min(value)限制必须为一个不小于指定值的数字@Past限制必须是一个过去的日期@Pattern(value)限制必须符合指定的正则表达式@Size(max,min)限制字符长度必须在min到max之间@SafeHtml字符串是安全的html@URL字符串是合法的URL@NotBlank字符串必须有字符@NotEmpty字符串不为NULL，集合有字符@AssertFalse必须是false@AssertTrue必须是true使用校验注解配置实体类新建一个表单实体类，并加上注解：1234567891011121314151617181920212223242526272829303132333435363738394041import javax.validation.constraints.NotNull;import javax.validation.constraints.Size;import org.hibernate.validator.constraints.Email; public class Form &#123; @NotNull @Size(min = 5, max = 16, message = "&#123;name.msg&#125;") private String name; @NotNull() @Email(message = "&#123;email.msg&#125;") private String email; @NotNull @Size(min = 5, max = 16, message = "&#123;password.msg&#125;") private String password; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getEmail() &#123; return email; &#125; public void setEmail(String email) &#123; this.email = email; &#125; public String getPassword() &#123; return password; &#125; public void setPassword(String password) &#123; this.password = password; &#125;&#125;message属性用于添加国际化支持，接下来需要做的就是创建一个名为ValidationMessages.properties的文件（默认叫这个，不区分大小写，放在src/main/resources路径下）：123name.msg=\u7528\u6237\u540D\u957F\u5EA6\u4E3A&#123;min&#125;\u5230&#123;max&#125;\u4E2A\u5B57\u7B26password.msg=\u5BC6\u7801\u957F\u5EA6\u4E3A&#123;min&#125;\u5230&#123;max&#125;\u4E2A\u5B57\u7B26email.msg=\u90AE\u7BB1\u683C\u5F0F\u4E0D\u5408\u6CD5ValidationMessages.properties文件中每条信息的key值对应于注解中message属性占位符的 值。同时，最小和最大长度在ValidationMessages.properties文件中有自己的占位符——{min}和{max}——它们会引用@Size注解上所设置的min和max属性。自定义校验规则上面的注解都是较为简单的注解，实际编程中校验的规则可能五花八门。当自带的这些注解无法满足我们的需求时，我们也可以自定义校验注解。下面是一个自定义校验注解的基本格式：1234567891011121314151617import javax.validation.Constraint;import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target@Target(&#123;ElementType.FIELD, ElementType.METHOD&#125;)@Retention(RetentionPolicy.RUNTIME)@Constraint(validatedBy = MyConstraintValidator.class)public @interface MyConstraint &#123; String message(); Class&lt;?&gt;[] groups() default &#123;&#125;; Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;&#125;其中@Constraint注解表明这个注解是用于规则校验的，validatedBy属性表明用什么去校验，这里我们指定的类为MyConstraintValidator。注解还包含了三个书属性，属性message指定当校验不通过的时候提示什么信息。接下来编写MyConstraintValidator，代码如下所示：12345678910111213141516import javax.validation.ConstraintValidator;import javax.validation.ConstraintValidatorContext;public class MyConstraintValidator implements ConstraintValidator&lt;MyConstraint, Object&gt; &#123; @Override public void initialize(MyConstraint myConstraint) &#123; System.out.println("my validator init"); &#125; @Override public boolean isValid(Object o, ConstraintValidatorContext constraintValidatorContext) &#123; System.out.println(o); return false; &#125;&#125;MyConstraintValidator实现了ConstraintValidator接口，该接口必须指定两个泛型，第一个泛型指的是上面定义的注解类型，第二个泛型表示校验对象的类型。MyConstraintValidator实现了ConstraintValidator接口的initialize方法和isValid方法。initialize方法用于该校验初始化的时候进行一些操作；isValid方法用于编写校验逻辑，第一个参数为需要校验的值，第二个参数为校验上下文。Spring JSP库为了使用Spring JSP库，需要在JSP页首加入：12&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;&lt;%@ taglib uri="http://www.springframework.org/tags/form" prefix="sf" %&gt;引入依赖：123456&lt;!-- https://mvnrepository.com/artifact/jstl/jstl --&gt;&lt;dependency&gt; &lt;groupId&gt;jstl&lt;/groupId&gt; &lt;artifactId&gt;jstl&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt;&lt;/dependency&gt;相关标签如下表所示：JSP标签描述&lt;sf:checkbox&gt;渲染成一个HTML &lt;input&gt;标签，其中type属性设置为checkbox&lt;sf:checkboxes&gt;渲染成多个HTML &lt;input&gt;标签，其中type属性设置为checkbox&lt;sf:errors&gt;在一个HTML &lt;span&gt;中渲染输入域的错误&lt;sf:form&gt;渲染成一个HTML &lt;form&gt;标签，并为其内部标签暴露绑定路径，用于数据绑定&lt;sf:hidden&gt;渲染成一个HTML &lt;input&gt;标签，其中type属性设置为hidden&lt;sf:input&gt;渲染成一个HTML &lt;input&gt;标签，其中type属性设置为text&lt;sf:label&gt;渲染成一个HTML &lt;label&gt;标签&lt;sf:option&gt;渲染成一个HTML &lt;option&gt;标签，其selected属性根据所绑定的值进行设置&lt;sf:options&gt;按照绑定的集合、数组或Map，渲染成一个HTML &lt;option&gt;标签的列表&lt;sf:password&gt;渲染成一个HTML &lt;input&gt;标签，其中type属性设置为password&lt;sf:radiobutton&gt;渲染成一个HTML &lt;input&gt;标签，其中type属性设置为radio&lt;sf:radiobuttons&gt;渲染成多个HTML &lt;input&gt;标签，其中type属性设置为radio&lt;sf:select&gt;渲染为一个HTML &lt;select&gt;标签&lt;sf:textarea&gt;渲染为一个HTML &lt;textarea&gt;标签用Spring JSP标签创建一个register.jsp：123456789101112131415161718192021222324252627&lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;&lt;%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %&gt;&lt;%@ taglib uri="http://www.springframework.org/tags/form" prefix="sf" %&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html;chartset=utf-8"&gt; &lt;title&gt;leanote 蚂蚁笔记&lt;/title&gt;&lt;/head&gt;&lt;style&gt; input&#123;margin-top:5px;&#125; label.error&#123;color:red;&#125; span.error&#123;color:red;&#125; input.error&#123;border:1px solid red;&#125;&lt;/style&gt;&lt;body&gt; &lt;sf:form method="post" commanName="form" action="$&#123;pageContext.request.contextPath&#125;/register"&gt; &lt;sf:label path="name" cssErrorClass="error"&gt;用户名：&lt;/sf:label&gt; &lt;sf:input path="name" cssErrorClass="error"/&gt; &lt;sf:errors path="name" cssClass="error"/&gt;&lt;br/&gt; 邮箱：&lt;sf:input path="email"/&gt;&lt;sf:errors path="email" cssClass="error"/&gt;&lt;br/&gt; 密码：&lt;sf:password path="password"/&gt;&lt;sf:errors path="password" cssClass="error"/&gt;&lt;br/&gt; &lt;input type="submit" value="注册"/&gt; &lt;/sf:form&gt;&lt;/body&gt;&lt;/html&gt;&lt;sf:form&gt;会渲染为一个HTML&lt;form&gt;标签，也可以通过commandName属性构建针对某个模型对象的上下文信息。这里设为form（待会在controller中传递到此页面）。cssClass属性可以给标签加上样式Class，用于在CSS中对其选中并修改样式。path属性指向实体类form对应的属性名称。如果将&lt;sf:errors/&gt;标签的path属性设置为*的话，其将显示所有不满足校验的提示信息。cssErrorClass属性指定校验不通过时候除了&lt;sf:errors/&gt;标签外的标签样式。编写controllerRegester控制器如下所示：123456789101112131415161718192021222324252627282930313233343536373839404142import javax.validation.Valid;import mrbird.mvc.entity.Form;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod; @Controllerpublic class LeanoteController &#123; @RequestMapping(value = "/registerindex", method = RequestMethod.GET) public String register(Model model) &#123; //对应&lt;sf:form/&gt;标签的commandName属性值 model.addAttribute(new Form()); return "register"; &#125; @RequestMapping(value = "/register", method = RequestMethod.POST) //form参数添加了@Valid注解，这会告知Spring，需要确保这个对象满足校验限制。 //Errors参数要紧跟在带有@Valid注解的参数后面 public String submit(@Valid Form form, BindingResult result) &#123; if (result.hasErrors()) &#123; // 输出校验失败信息 result.getAllErrors().stream().forEach(e -&gt; &#123; FieldError fieldError = (FieldError) e; System.out.println(((FieldError) e).getField() + " " + e.getDefaultMessage()); &#125; ); //出错时回到注册页面，这里不能够用重定向，不然看不到错误提示信息 return "register"; &#125; //校验通过，重定向到/success/&#123;name&#125; return "redirect:/success/" + form.getName(); &#125; @RequestMapping(value = "/success/&#123;name&#125;", method = RequestMethod.GET) public String success(@PathVariable String name, Model model) &#123; model.addAttribute(name); return "success"; &#125;&#125;部署项目，访问：http://localhost:8080/spring/registerindex：]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring传递参数]]></title>
    <url>%2Fblog%2FSpring%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0.html</url>
    <content type="text"><![CDATA[总结下平时使用Spring时，服务端接收客户端传递的参数的几种方式。同名变量在客户端，使用GET请求发送一个变量到服务端，比如传递一个testParam变量：12345var testParam = 'mrbird';$.ajax(&#123; url:"$&#123;pageContext.request.contextPath&#125;/test?testParam="+testParam, method:"get"&#125;);服务端：12345678@Controller@RequestMapping(value="/test")public class TestContoller &#123; @RequestMapping(method=RequestMethod.GET) public void test(String testParam)&#123; &#125;&#125;用testParam同名参数接收，通过断点，得到的值为mrbird。@requestParam和第一种方法类似，只不过使用@requestParam注解后，变量可以使用别的名字命名：12345678@Controller@RequestMapping(value="/test")public class TestContoller &#123; @RequestMapping(method=RequestMethod.GET) public void test(@RequestParam("testParam") String param)&#123; &#125;&#125;HttpServletRequest通过HttpServletRequest对象获取：12345678@Controller@RequestMapping(value="/test")public class TestContoller &#123; @RequestMapping(method=RequestMethod.GET) public void test(HttpServletRequest request)&#123; String param = request.getParameter("testParam"); &#125;&#125;POJO使用POJO接收参数适用于参数量较多的时候，比方说表单提交的时候，但这里我们还是用testParam栗子演示。创建一个用于接收参数的POJO，并定义和传递参数同名的属性：12345678910public class Params &#123; private String testParam; public String getTestParam() &#123; return testParam; &#125; public void setTestParam(String testParam) &#123; this.testParam = testParam; &#125;&#125;服务端：12345678@Controller@RequestMapping(value="/test")public class TestContoller &#123; @RequestMapping(method=RequestMethod.GET) public void test(Params param)&#123; String testParam = param.getTestParam(); &#125;&#125;占位符我们将GET请求的URL改为：1url:"$&#123;pageContext.request.contextPath&#125;/test/"+testParam,将参数通过URL路径进行标识，而不是通过查询参数。为了实现这种路径变量，Spring MVC允许我们在@RequestMapping路径中添加占位符。占位符的名称要用大括号（“{”和“}”）括起来。路径中的其他部分要与所处理的请求完全匹配， 但是占位符部分可以是任意的值。修改controller：12345678@Controller@RequestMapping(value="/test")public class TestContoller &#123; @RequestMapping(value="&#123;testParam&#125;",method=RequestMethod.GET) public void test(@PathVariable String testParam)&#123; &#125;&#125;test方法参数名称必须和占位符名称相同。]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建SpringMVC]]></title>
    <url>%2Fblog%2F%E6%90%AD%E5%BB%BASpringMVC.html</url>
    <content type="text"><![CDATA[guide下图展示了请求在Spring MVC中的过程：环境准备使用Maven构建Spring web MVC project。新建Maven Project（选中skip archetype selection）:点击next，然后填写Group Id和Artifact Id，打包方式为war：finish后，右击项目，选择properties，选中Deployment Assembly，移除选中的路径：apply后选择Project Facets，勾选Dynamic Web Module，点击下方的Further configuration avaiable：如下填写后确定即可：准备好后，在pom中引入依赖以及配置tomcat插件：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;4.3.5.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;4.3.5.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;4.3.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;4.3.5.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.servlet&lt;/groupId&gt; &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.annotation&lt;/groupId&gt; &lt;artifactId&gt;jsr250-api&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.inject&lt;/groupId&gt; &lt;artifactId&gt;javax.inject&lt;/artifactId&gt; &lt;version&gt;1&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;!-- 布置到tomcat --&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt; &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt; &lt;version&gt;2.1&lt;/version&gt; &lt;configuration&gt; &lt;!--在这里定义端口号 --&gt; &lt;port&gt;8080&lt;/port&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt;XML配置搭建web.xml中配置DispatcherServlet：1234567891011121314&lt;!-- 配置dispatcherServlet --&gt;&lt;servlet&gt; &lt;servlet-name&gt;mvc-xml&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;mvc-xml&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;配置applicationContext.xml：123456789101112131415161718192021222324&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd"&gt; &lt;!-- 开启组件扫描 --&gt; &lt;context:component-scan base-package="mrbird"/&gt; &lt;!-- 启用Spring mvc --&gt; &lt;mvc:annotation-driven/&gt; &lt;!-- 配置viewResolver --&gt; &lt;bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/views/" p:suffix=".jsp"&gt; &lt;/bean&gt;&lt;/beans&gt;编写一个最简单的cotroller：1234567891011import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod; @Controllerpublic class IndexController &#123; @RequestMapping(value="/index",method=RequestMethod.GET) public String index()&#123; return "index"; &#125;&#125;编写一个最简单的页面：12345678910111213&lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;&lt;title&gt;leanote 蚂蚁笔记&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;p&gt;蚂蚁笔记，有极客范的云笔记！&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;一切准备就绪，启动项目，访问http://localhost:8080/mvc-xml/index：JavaConfig配置搭建配置DispatcherServlet：123456789101112131415161718import org.springframework.web.servlet.support .AbstractAnnotationConfigDispatcherServletInitializer; public class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer&#123; @Override protected Class&lt;?&gt;[] getRootConfigClasses() &#123; return new Class&lt;?&gt;[]&#123;RootConfig.class&#125;; &#125; @Override protected Class&lt;?&gt;[] getServletConfigClasses() &#123; return new Class&lt;?&gt;[]&#123;WebConfig.class&#125;; &#125; @Override protected String[] getServletMappings() &#123; return new String[]&#123;"/"&#125;; &#125;&#125;WebConfig：123456789101112131415161718192021@Configuration//开启spring mvc@EnableWebMvc//开启扫描@ComponentScan("mrbird")public class WebConfig extends WebMvcConfigurerAdapter&#123; //配置viewResolver @Bean public ViewResolver viewResolver()&#123; InternalResourceViewResolver resolver = new InternalResourceViewResolver(); resolver.setPrefix("/WEB-INF/views/"); resolver.setSuffix(".jsp"); resolver.setExposeContextBeansAsAttributes(true); return resolver; &#125; @Override public void configureDefaultServletHandling( DefaultServletHandlerConfigurer configurer)&#123; configurer.enable(); &#125;&#125;新的WebConfig类还扩展了WebMvcConfigurerAdapter并重写了其configureDefaultServletHandling()方法。通过调用DefaultServletHandlerConfigurer的enable()方法，我们要求DispatcherServlet将对静态资源的请求转发到Servlet容器中默认的Servlet上，而不是使用DispatcherServlet本身来处理此类请求。RootConfig：123456@Configuration@ComponentScan(basePackages=&#123;"mrbird"&#125;, excludeFilters=&#123;@Filter(type=FilterType.ANNOTATION,value=EnableWebMvc.class)&#125;)public class RootConfig &#123; &#125;Controller和JSP页面同上。]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring注入外部值]]></title>
    <url>%2Fblog%2FSpring%E6%B3%A8%E5%85%A5%E5%A4%96%E9%83%A8%E5%80%BC.html</url>
    <content type="text"><![CDATA[Spring注入外部文件的值有几种方式：Spring Environment在Spring中，处理外部值的最简单方式就是声明属性源并通过Spring的Environment来检索属性。声明一个Phone接口：123public interface Phone &#123; public void phoneMsg();&#125;实现类GooglePixel：123456789101112131415public class GooglePixel implements Phone&#123; private String name; private String cpu; private String battery; public GooglePixel(String name, String cpu, String battery) &#123; this.name = name; this.cpu = cpu; this.battery = battery; &#125; public void phoneMsg() &#123; System.out.println(name+"，cpu型号："+cpu+"，电池容量："+battery); &#125;&#125;创建一个外部配置类：googlePixel.properties：123phone.name=Google Pixelphone.battery=2770mAhphone.cpu=Qualcomm Xiaolong 821在JavaConfig中加载外部配置，并用Spring的Environment对象获取：123456789101112131415161718192021import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.PropertySource;import org.springframework.core.env.Environment; @Configuration//加载外部配置文件@PropertySource("classpath:/mrbird/leanote/properties/googlePixel.properties")public class PhoneConfig &#123; //注入Spring环境对象 @Autowired private Environment env; @Bean(name="googlePixel") public Phone phone()&#123; return new GooglePixel( env.getProperty("phone.name"), env.getProperty("phone.cpu"), env.getProperty("phone.battery")); &#125;&#125;测试是否注入成功：1234567public class Test &#123; public static void main(String[] args) &#123; ApplicationContext ac = new AnnotationConfigApplicationContext(PhoneConfig.class); Phone googlePixel = (Phone) ac.getBean("googlePixel"); googlePixel.phoneMsg(); &#125;&#125;控制台输出：1Google Pixel，cpu型号：Qualcomm Xiaolong 821，电池容量：2770mAhgetProperty()方法并不是获取属性值的唯一方法，getProperty()方法有四个重载的变种形式：1234String getProperty(String key)String getProperty(String key,String defaultValue)T getProperty(String key,Class&lt;T&gt; type)T getProperty(Stirng key,Class&lt;T&gt; type,T defaultValue)前两种形式的getProperty()方法都会返回String类型的值。上面的栗子使用第一种getProperty()方法。稍微对@Bean方法进行一下修改，这样在指定属性不存在的时候，会使用一个默认值：1234567@Bean(name="googlePixel") public Phone phone()&#123; return new GooglePixel( env.getProperty("phone.name","谷歌Pixel"), env.getProperty("phone.cpu","高通枭龙821"), env.getProperty("phone.battery","2770毫安时")); &#125;剩下的两种getProperty()方法与前面的两种非常类似，但是它们可以传入类型。Environment还提供了几个与属性相关的方法，如果你在使用getProperty()方法的时候 没有指定默认值，并且这个属性没有定义的话，获取到的值是null。如果你希望这个属性必须要定义，那么可以使用getRequiredProperty()方法，如下所示：1234567@Bean(name="googlePixel") public Phone phone()&#123; return new GooglePixel( env.getRequiredProperty("phone.name"), env.getRequiredProperty("phone.cpu"), env.getRequiredProperty("phone.battery")); &#125;在这里，如果phone.name或phone.cpu或phone.battery属性没有定义的话，将会抛出 IllegalStateException异常。如果想检查一下某个属性是否存在的话，那么可以调用Environment的 containsProperty()方法：1boolean nameExists = env.containsProperty("phone.name");属性占位符创建一个phone-config.xml文件，使用Spring context命名空间中的context:propertyplaceholder元素生成PropertySourcesPlaceholderConfigurer bean：1234567891011121314151617&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd"&gt; &lt;context:property-placeholder location="classpath:/mrbird/leanote/properties/googlePixel.properties"/&gt; &lt;bean id="googlePixel" class="mrbird.leanote.javaconfig.GooglePixel" c:name="$&#123;phone.name&#125;" c:cpu="$&#123;phone.cpu&#125;" c:battery="$&#123;phone.battery&#125;"/&gt;&lt;/beans&gt;测试：123456789101112@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration("classpath:phone-config.xml")public class Test &#123; @Autowired @Qualifier("googlePixel") private Phone phone; @Test public void drive()&#123; assertNotNull(phone); phone.phoneMsg(); &#125;&#125;输出结果同上。或者不用XML显示配置Bean，开启自动扫描，使用注解注入属性值：12&lt;!-- 开启扫描 --&gt;&lt;context:component-scan base-package="mrbird.leanote.javaconfig"/&gt;GooglePixel类属性注入：12345678910111213141516171819@Componentpublic class GooglePixel implements Phone&#123; @Value("$&#123;phone.name&#125;") private String name; @Value("$&#123;phone.cpu&#125;") private String cpu; @Value("$&#123;phone.battery&#125;") private String battery; public GooglePixel(String name, String cpu, String battery) &#123; this.name = name; this.cpu = cpu; this.battery = battery; &#125; public void phoneMsg() &#123; System.out.println(name+"，cpu型号："+cpu+"，电池容量："+battery); &#125;&#125;或者构造器注入：12345678910...public GooglePixel( @Value("$&#123;phone.name&#125;")String name, @Value("$&#123;phone.cpu&#125;")String cpu, @Value("$&#123;phone.battery&#125;")String battery) &#123; this.name = name; this.cpu = cpu; this.battery = battery;&#125;...util:properties在phone-config.xml文件中：12345678910111213141516171819&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd"&gt; &lt;util:properties id="p" location="classpath:/mrbird/leanote/properties/googlePixel.properties"/&gt; &lt;bean id="googlePixel" class="mrbird.leanote.javaconfig.GooglePixel" c:name="#&#123;p['phone.name']&#125;" c:cpu="#&#123;p['phone.cpu']&#125;" c:battery="#&#123;p['phone.battery']&#125;"/&gt;&lt;/beans&gt;和占位符区别是，这里需要用spEL表达式获取属性的值，并且不能写为：”#{p.phone.name}”，这样Spring读取不到属性值，将会抛出异常。使用注解配置和占位符类似，比如set注入：12345678...@Value("#&#123;p['phone.name']&#125;")private String name;@Value("#&#123;p['phone.cpu']&#125;")private String cpu;@Value("#&#123;p['phone.battery']&#125;")private String battery;...或者使用systemProperties来代替p：12345678...@Value("#&#123;systemProperties['phone.name']&#125;")private String name;@Value("#&#123;systemProperties['phone.cpu']&#125;")private String cpu;@Value("#&#123;systemProperties['phone.battery']&#125;")private String battery;...some：XML123&lt;context:property-placeholder location="classpath:....properties"/&gt; &lt;context:component-scan base-package=""/&gt; &lt;import resource="classpath:....xml"/&gt;注解：123@PropertySource(value = "classpath:....properties")@ComponentScan(basePackages = "")@ImportResource(value = &#123;"classpath:....xml"&#125;)]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring条件化装配Bean]]></title>
    <url>%2Fblog%2FSpring%E6%9D%A1%E4%BB%B6%E5%8C%96%E8%A3%85%E9%85%8DBean.html</url>
    <content type="text"><![CDATA[Spring4引入了@Conditional注解，可配合@Bean或者@Component注解一起使用。用CET4考试来演示@Conditional注解。新建考试结果Result接口：123public interface Result &#123; public void getResult();&#125;实现类CET4：12345public class CET4 implements Result&#123; public void getResult() &#123; System.out.println("恭喜你通过CET4"); &#125;&#125;定义学生接口：123public interface Student &#123; public void exam();&#125;实现类XiaoMing：12345678910public class XiaoMing implements Student&#123; //注入result @Autowired(required=false) private Result result; public void exam() &#123; if(result == null) System.out.println("抱歉，CET4未通过"); else result.getResult(); &#125;&#125;配置JavaConfig：12345678910111213141516import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Conditional;import org.springframework.context.annotation.Configuration; @Configurationpublic class ConditionConfig &#123; @Bean @Conditional(ResultCondition.class) public Result result()&#123; return new CET4(); &#125; @Bean(name="xiaoming") public Student student()&#123; return new XiaoMing(); &#125;&#125;可以看到，@Conditional中给定了一个Class，它指明了条件——在本例中，也就是ResultCondition：123456789101112131415import org.springframework.context.annotation.Condition;import org.springframework.context.annotation.ConditionContext;import org.springframework.core.env.Environment;import org.springframework.core.type.AnnotatedTypeMetadata; public class ResultCondition implements Condition&#123; public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) &#123; Environment env = context.getEnvironment(); //获取环境变量中的result属性 String result = env.getProperty("result"); if("success".equals(result)) return true; else return false; &#125;&#125;设置给@Conditional的类可以是任意实现了Condition接口的类型。可以看出来，这个接口实现起来很简单直接，只需提供matches()方法的实现即可。如果matches()方法返回 true，那么就会创建带有@Conditional注解的bean。如果matches()方法返回false，将不会创建这些bean。ConditionContext是一个接口，大致如下所示：1234567public interface conditioncontext&#123; BeanDefinitionRegistry getRegistry(); ConfigurableListableBeanFactory getBeanFactory(); ResourceLoader getResourceLoader(); Environment getEnvironment(); ClassLoder getClassLoader();&#125;通过ConditionContext，我们可以做到如下几点：1.借助getRegistry()返回的BeanDefinitionRegistry检查bean定义；2.借助getBeanFactory()返回的ConfigurableListableBeanFactory检查bean是否存在，甚至探查bean的属性；3.借助getEnvironment()返回的Environment检查环境变量是否存在以及它的值是什么；4.读取并探查getResourceLoader()返回的ResourceLoader所加载的资源；5.借助getClassLoader()返回的ClassLoader加载并检查类是否存在。AnnotatedTypeMetadata则能够让我们检查带有@Bean注解的方法上还有什么其他的注解。像ConditionContext一样，AnnotatedTypeMetadata也是一个接口。它如下所示：12345678910public interface AnnotatedTypeMetadata&#123; boolean isAnnotated(String annotationType); Map&lt;String,Object&gt; getAnnotationAttributes(String annotationType); Map&lt;String,Object&gt; getAnnotationAttributes( String annotationType,boolean classValuesAsString); MutilValueMap&lt;String,Object&gt; getAllAnnotationAttributes( String annotationType); MutilValueMap&lt;String,Object&gt; getAllAnnotationAttributes( String annotationType,boolean classValuesAsString);&#125;借助isAnnotated()方法，我们能够判断带有@Bean注解的方法是不是还有其他特定的注解。借助其他的那些方法，我们能够检查@Bean注解的方法上其他注解的属性。现在测试@Conditional注解的作用：12345678public class TestConditional &#123; public static void main(String[] args) &#123; System.setProperty("result", "fail"); ApplicationContext ac = new AnnotationConfigApplicationContext(ConditionConfig.class); Student xiaoming = (Student) ac.getBean("xiaoming"); xiaoming.exam(); &#125;&#125;这里设置result为fail，ResultCondition的matches()方法返回false，所以CET4 Bean并不会被创建，结果应该输出“抱歉，CET4未通过”，测试结果：1抱歉，CET4未通过]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring混合装配Bean]]></title>
    <url>%2Fblog%2FSpring%E6%B7%B7%E5%90%88%E8%A3%85%E9%85%8DBean.html</url>
    <content type="text"><![CDATA[Spring可以通过Java代码以及XML配置来装配Bean，不仅如此，Spring还可以混合这两种装配方法。JavaConfig中引入XML配置去除@ComponentScan注解，让所有的Bean显示配置。创建一个DriverConfig配置类，里面只装配一个“laosiji”Bean：1234567@Configurationpublic class DriverConfig &#123; @Bean(name="laosiji") public Driver driver()&#123; return new LaoSiJi(); &#125;&#125;创建一个car-config.xml配置，在里面使用xml方式配置Car Bean：12345678910&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt; &lt;bean id="wulinghongguang" class="mrbird.leanote.javaconfig.WuLing" c:_-ref="laosiji"/&gt;&lt;/beans&gt;最后创建一个MainConfig配置类，引入CarConfig以及car-config.xml配置：123456789101112import org.springframework.context.annotation.Import;import org.springframework.context.annotation.ImportResource;import org.springframework.test.context.ContextConfiguration; @ContextConfiguration//导入DriverConfig配置类@Import(DriverConfig.class)//JavaConfig中引入XML配置@ImportResource("classpath:car-config.xml")public class MainConfig &#123; &#125;测试是否注入成功：1234567891011121314151617@RunWith(SpringJUnit4ClassRunner.class)//导入MainConfig配置类@ContextConfiguration(classes=MainConfig.class)public class CarTest &#123; @Autowired @Qualifier("wulinghongguang") private Car car; @Autowired private Driver driver; @Test public void drive()&#123; assertNotNull(car); car.drive(); assertNotNull(driver); driver.drive(); &#125;&#125;测试通过，页面输出：12快上车，来不及解释了快上车，来不及解释了XML配置中引入JavaConfig创建一个main-config.xml，里面分别引入DriverConfig以及car-config.xml：123456789&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"&gt; &lt;bean class="mrbird.leanote.javaconfig.DriverConfig"/&gt; &lt;import resource="car-config.xml"/&gt;&lt;/beans&gt;测试：12345678910111213141516@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration("classpath:main-config.xml")public class CarTest &#123; @Autowired @Qualifier("wulinghongguang") private Car car; @Autowired private Driver driver; @Test public void drive()&#123; assertNotNull(car); car.drive(); assertNotNull(driver); driver.drive(); &#125;&#125;测试通过，输出如上。]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java代码装配Bean]]></title>
    <url>%2Fblog%2FJava%E4%BB%A3%E7%A0%81%E8%A3%85%E9%85%8DBean.html</url>
    <content type="text"><![CDATA[除了可以使用XML配置Bean外，还可以使用Java代码来装配Bean。准备工作创建Maven项目，加入如下依赖：12345678910111213141516171819202122232425262728&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;4.3.5.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;4.3.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;4.3.5.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.stefanbirkner&lt;/groupId&gt; &lt;artifactId&gt;system-rules&lt;/artifactId&gt; &lt;version&gt;1.16.0&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt;创建Bean创建Driver接口：123public interface Driver &#123; public void drive();&#125;其实现类LaoSiJi：12345public class LaoSiJi implements Driver&#123; public void drive() &#123; System.out.println("快上车，来不及解释了"); &#125;&#125;给老司机分配一辆车，定义Car接口：123public interface Car &#123; public void drive();&#125;其实现类五菱宏光：1234567891011public class WuLing implements Car&#123; private Driver driver; // 通过构造器注入老司机 @Autowired public WuLing(Driver driver) &#123; this.driver = driver; &#125; public void drive() &#123; driver.drive(); &#125;&#125;创建配置类配置类中可以显示的配置Bean，也可以采用自动扫描的方法来简化配置。显示配置：1234567891011121314151617import mrbird.leanote.javaconfig.Car;import mrbird.leanote.javaconfig.CarConfig;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration; @Configurationpublic class CarConfig &#123; //显示配置driver和car @Bean public Driver driver()&#123; return new LaoSiJi(); &#125; @Bean public Car car(Driver driver)&#123; return new WuLing(driver); &#125;&#125;自动扫描：自动扫描的话稍微修改配置类：1234567import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.Configuration; @Configuration@ComponentScanpublic class CarConfig &#123;&#125;然后在上面创建的Bean类上添加@Component注解，让Spring发现并注入到配置类中。测试测试是否注入成功：12345678910111213141516171819202122232425import mrbird.leanote.javaconfig.Car;import mrbird.leanote.javaconfig.CarConfig;import static org.junit.Assert.*;import org.junit.Rule;import org.junit.Test;import org.junit.contrib.java.lang.system.StandardOutputStreamLog;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner; @RunWith(SpringJUnit4ClassRunner.class)//加载配置类@ContextConfiguration(classes=CarConfig.class)public class CarTest &#123; @Rule public final StandardOutputStreamLog log = new StandardOutputStreamLog(); @Autowired private Car car; @Test public void drive()&#123; assertNotNull(car); car.drive(); &#125;&#125;输出：1快上车，来不及解释了]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[几个精彩的JavaScript代码段]]></title>
    <url>%2Fblog%2F%E5%87%A0%E4%B8%AA%E7%B2%BE%E5%BD%A9%E7%9A%84JavaScript%E4%BB%A3%E7%A0%81%E6%AE%B5.html</url>
    <content type="text"><![CDATA[1.根据给定的条件在原有的数组上，得到所需要的新数组1234567891011var a = [-1, -1, 1, 2, -2, -2, -3, -3, 3, -3];function f(s, e) &#123; var ret = []; for (var i in s) &#123; // 根据原有的数组长度进行循环 ret.push(e(s[i])); &#125; return ret;&#125;f(a, function(n) &#123; return n &gt; 0 ? n : 0&#125;); // 传输一个匿名函数作为逻辑判断​2.比原生type或typeof更详细的类型监测方法1234function type(p) &#123; /function.(\w*)\(\)/.test(p.constructor); //通过其构造函数来获取对应的类型。 return RegExp.$1;&#125;3.通过移位运算来替代”parseInt”123~~3.14 = &gt; 3;// ~~ 取整。~取当前数值的反,~~表示再次取反，也就是得到当前自身// （说明，JS中的“位”运算会将数值自动转换为整）4.将数值转换为16进制的字符串（常用于表示色彩）1234(~~ (Math.random() * (1 &lt;&lt; 24))).toString(16)// ~~ 通过位运算来取整。// &lt;&lt; 左移位。将1的二进制数左移24位。而1&lt;&lt;24 == 2^24(RGB模式下最多可表示的色彩数量)// toString(16) 将数值转换为16进制的字符串输出。5.正则匹配清除两侧空格1234var trim = function(v)&#123; var patrn = /^\s*(.*?)\s+$/; return (patrn.test(v))? RegExp.$1 : 'null ';&#125;转自：微信公众号：JavaScriptcn]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis Dynamic SQL]]></title>
    <url>%2Fblog%2FMyBatis-Dynamic-SQL.html</url>
    <content type="text"><![CDATA[MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其他类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句有多么痛苦。拼接的时候要确保不能忘了必要的空格，还要注意省掉列名列表最后的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。if动态 SQL 通常要做的事情是有条件地包含 where 子句的一部分。比如：12345678910&lt;select id="findRoles" resultType="roleList"&gt; SELECT * FROM t_role WHERE 1 = 1 &lt;if test="roleNo != null and roleNo != ''"&gt; AND role_no like concat('%',#&#123;roleNo&#125;,'%') &lt;/if&gt; &lt;if test="roleName != null and roleName != ''"&gt; AND role_name like concat('%',#&#123;roleName&#125;,'%') &lt;/if&gt;&lt;/select&gt;choose, when, otherwise有些时候，我们不想用到所有的条件语句，而只想从中择其一二。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。如：123456789101112131415&lt;select id="findRoles" resultType="roleList"&gt; SELECT * FROM t_role WHERE 1 = 1 &lt;choose&gt; &lt;when test="roleNo != null and roleNo != ''"&gt; AND role_no = #&#123;roleNo&#125; &lt;/when&gt; &lt;when test="roleName != null and roleName != ''"&gt; AND role_name like concat('%',#&#123;roleName&#125;,'%') &lt;/when&gt; &lt;otherwise&gt; AND note is not null &lt;/otherwise&gt; &lt;/choose&gt;&lt;/select&gt;trim, where, set在第一个栗子中，假如不加上1=1的话，比如当第一个条件不成立的时候，SQL就变成了这样：1SELECT * FROM t_role WHERE AND roleName like concat('%',#&#123;roleName&#125;,'%')为了防止这种情况，我们可以使用where元素：1234567891011&lt;select id="findRoles" resultType="roleList"&gt; SELECT * FROM t_role &lt;where&gt; &lt;if test="roleNo != null and roleNo != ''"&gt; AND role_no like concat('%',#&#123;roleNo&#125;,'%') &lt;/if&gt; &lt;if test="roleName != null and roleName != ''"&gt; AND role_name like concat('%',#&#123;roleName&#125;,'%') &lt;/if&gt; &lt;/where&gt;&lt;/select&gt;where 元素知道只有在一个以上的if条件有值的情况下才去插入“WHERE”子句。而且，若最后的内容是“AND”或“OR”开头的，where 元素也知道如何将他们去除。和 where 元素等价的自定义 trim 元素为：123&lt;trim prefix="WHERE" prefixOverrides="AND |OR "&gt; ... &lt;/trim&gt;perfix表示语句前缀，prefixOverrides表示要去除的前缀（注意此例中的空格也是必要的）。它带来的结果就是所有在 prefixOverrides 属性中指定的内容将被移除，并且插入 prefix 属性中指定的内容。类似的用于动态更新语句的解决方案叫做 set。set 元素可以被用于动态包含需要更新的列，而舍去其他的。比如：123456789101112&lt;update id="updateRole" parameterType="role"&gt; update t_role &lt;set&gt; &lt;if test="roleName != null and roleName != ''"&gt; role_name = #&#123;roleName&#125;, &lt;/if&gt; &lt;if test="note != null and note != ''"&gt; note = #&#123;note&#125; &lt;/if&gt; where role_no = #&#123;roleNo&#125; &lt;/set&gt;&lt;/update&gt;这里，set 元素会动态前置 SET 关键字，同时也会消除无关的逗号。对应的trim元素的写法为：123&lt;trim prefix="SET" suffixOverrides=","&gt; ...&lt;/trim&gt;suffixOverrides去除后缀。forEach动态 SQL 的另外一个常用的必要操作是需要对一个集合进行遍历，通常是在构建 IN 条件语句的时候。比如：1234567&lt;select id="findUserBySex" resultType="user"&gt; select * from t_user where sex in &lt;forEach item="sex" index="index" collection="sexList" open="(" separator="," close=")"&gt; #&#123;sex&#125; &lt;/forEach&gt;&lt;/select&gt;说明： 1.collection配置的sexList是传递进来的参数名称，可以为数组，List，Set或集合。2.item配置的是循环中当前的元素。3.index配置的是当前元素的下标。4.open和close配置的是以什么符号将这些集合元素包裹起来。5.separator配置的是间隔符。bindbind元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文。比如：1234&lt;select id="findRole" resultMap="roleList"&gt; &lt;bind name="pattern" value="'%' + _parameter + '%'"/&gt; select * from t_role where role_name like #&#123;pattern&#125;&lt;/select&gt;其中_paramrter代表的是传进来的参数，和通配符连接后赋给了pattern。Multi-db vendor support一个配置了“_databaseId”变量的 databaseIdProvider 对于动态代码来说是可用的，这样就可以根据不同的数据库厂商构建特定的语句。比如下面的例子：1234567891011&lt;insert id="insert"&gt; &lt;selectKey keyProperty="id" resultType="int" order="BEFORE"&gt; &lt;if test="_databaseId == 'oracle'"&gt; select seq_users.nextval from dual &lt;/if&gt; &lt;if test="_databaseId == 'db2'"&gt; select nextval for seq_users from sysibm.sysdummy1" &lt;/if&gt; &lt;/selectKey&gt; insert into users values (#&#123;id&#125;, #&#123;name&#125;)&lt;/insert&gt;《深入浅出MyBatis技术原理与实战》读书笔记]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis Cache]]></title>
    <url>%2Fblog%2FMyBatis-Cache.html</url>
    <content type="text"><![CDATA[MyBatis对缓存提供了支持，默认情况下只开启了一级缓存，要开启二级缓存需要进行配置。为了验证这个过程，我们创建log4j.properties：1234log4j.rootLogger=DEBUG , stdout log4j.logger.mrbird.leanote=DEBUG log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout在mybatis-config.xml文件中配置它：1234&lt;settings&gt; ... &lt;setting name="logImpl" value="LOG4J"/&gt;&lt;/settings&gt;一级缓存一级缓存是针对于一个SqlSession而言的，在参数和SQL完全一样的情况下，同一个SqlSession对象调用同一个Mapper方法，只会执行一次SQL，而不同的SqlSession都是相互隔离的，所以即使使用相同的Mapper，相同的方法，也会再次发送SQL进行查询。举个栗子：1234567891011121314151617181920212223242526272829SqlSession sqlSession1 = null;SqlSession sqlSession2 = null;final Logger logger = Logger.getLogger(MyBatisMain.class);try &#123; sqlSession1 = SqlSessionFactoryUtil.openSqlSession(); RoleMapper roleMapper1 = sqlSession1.getMapper(RoleMapper.class); Role role1 = roleMapper1.getRoleById(1L); logger.debug("使用同一个sqlSession再次执行"); Role role2 = roleMapper1.getRoleById(1L); //使用二级缓存的时候，SqlSession调用了commit方法后才会生效 sqlSession1.commit(); logger.debug("使用不同sqlSession再次执行"); sqlSession2 = SqlSessionFactoryUtil.openSqlSession(); RoleMapper roleMapper2 = sqlSession2.getMapper(RoleMapper.class); Role role3 = roleMapper2.getRoleById(1L); //使用二级缓存的时候，SqlSession调用了commit方法后才会生效 sqlSession2.commit();&#125; catch (Exception e) &#123; e.printStackTrace(); sqlSession1.rollback();sqlSession2.rollback();&#125;finally&#123; if(sqlSession1 != null)&#123; sqlSession1.close(); &#125; if(sqlSession2 != null)&#123; sqlSession2.close(); &#125;&#125;查看控制台输出日志：1234567891011121314151617181920212223242526Logging initialized using 'class org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.Logging initialized using 'class org.apache.ibatis.logging.log4j.Log4jImpl' adapter.PooledDataSource forcefully closed/removed all connections.PooledDataSource forcefully closed/removed all connections.PooledDataSource forcefully closed/removed all connections.PooledDataSource forcefully closed/removed all connections.Opening JDBC ConnectionCreated connection 1995619265.Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@76f2bbc1]==&gt; Preparing: select * from t_role where id = ? ==&gt; Parameters: 1(Long)&lt;== Total: 1使用同一个sqlSession再次执行使用不同sqlSession再次执行Opening JDBC ConnectionCreated connection 2044366277.Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@79da8dc5]==&gt; Preparing: select * from t_role where id = ? ==&gt; Parameters: 1(Long)&lt;== Total: 1Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@76f2bbc1]Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@76f2bbc1]Returned connection 1995619265 to pool.Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@79da8dc5]Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@79da8dc5]Returned connection 2044366277 to pool.可见一级缓存是针对于SqlSession层面的。二级缓存二级缓存是针对于SqlSessionFactory层面的，也就是说只要是同一个SqlSessionFactory创建的SqlSession，它们间都将共享缓存。开启二级缓存需要POJO都实现Serializable接口，并在你的 SQL 映射文件中添加一行:1&lt;cache/&gt;字面上看就是这样。这个简单语句的效果如下: 1.映射语句文件中的所有 select 语句将会被缓存。2.映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。3.缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。4.根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序 来刷新。5.缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。6.缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而 且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。开启二级缓存后，再次执行上面的方法，查看控制台输出日志：1234567891011121314151617181920Logging initialized using 'class org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.Logging initialized using 'class org.apache.ibatis.logging.log4j.Log4jImpl' adapter.PooledDataSource forcefully closed/removed all connections.PooledDataSource forcefully closed/removed all connections.PooledDataSource forcefully closed/removed all connections.PooledDataSource forcefully closed/removed all connections.Cache Hit Ratio [mrbird.leanote.mapper.RoleMapper]: 0.0Opening JDBC ConnectionCreated connection 330382173.Setting autocommit to false on JDBC Connection [com.mysql.jdbc.JDBC4Connection@13b13b5d]==&gt; Preparing: select * from t_role where id = ? ==&gt; Parameters: 1(Long)&lt;== Total: 1使用同一个sqlSession再次执行Cache Hit Ratio [mrbird.leanote.mapper.RoleMapper]: 0.0使用不同sqlSession再次执行Cache Hit Ratio [mrbird.leanote.mapper.RoleMapper]: 0.3333333333333333Resetting autocommit to true on JDBC Connection [com.mysql.jdbc.JDBC4Connection@13b13b5d]Closing JDBC Connection [com.mysql.jdbc.JDBC4Connection@13b13b5d]Returned connection 330382173 to pool.可见，从头到尾只发送了一次SQL进行查询。属性都可以通过缓存元素的属性来修改。比如：1&lt;cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/&gt;这个更高级的配置创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会 导致冲突。可用的收回策略有: 1.LRU – 最近最少使用的:移除最长时间不被使用的对象。2.FIFO – 先进先出:按对象进入缓存的顺序来移除它们。3.SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。4.WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。默认的是 LRU。flushInterval(刷新间隔)可以被设置为任意的正整数,而且它们代表一个合理的毫秒 形式的时间段。默认情况是不设置,也就是没有刷新间隔,缓存仅仅调用语句时刷新。size(引用数目)可以被设置为任意正整数,要记住你缓存的对象数目和你运行环境的 可用内存资源数目。默认值是 1024。readOnly(只读)属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓 存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。《深入浅出MyBatis技术原理与实战》读书笔记]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis级联]]></title>
    <url>%2Fblog%2FMyBatis%E7%BA%A7%E8%81%94.html</url>
    <content type="text"><![CDATA[MyBatis中的级联分为3种：association，collection和discriminator：1.association：代表一对一关系，比如学生和学生证是一对一关系。2.collection：代表一对多关系，比如学生和课程是一对多关系，一个学生可以有多个课程。3.discriminator：鉴别器，它可以根据实际选择采用哪个类作为实例，允许你根据特定的条件去关联不同的结果集。为了学习这些东东，设计一个模型关系：根据模型新建库表：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061CREATE TABLE t_lecture( id int(20) not null auto_increment comment '编号', lecture_name VARCHAR(60) not null comment '课程名称', PRIMARY KEY (id)); CREATE table t_student( id int(20) not null auto_increment comment '编号', cnname VARCHAR(60) not null comment '学生姓名', sex TINYINT(4) not null COMMENT '性别', selfcard_no int(20) not NULL COMMENT '学生证号', note VARCHAR(1024) COMMENT '备注', PRIMARY KEY (id)); CREATE table t_student_health_female( id int(20) not null auto_increment comment '编号', student_id VARCHAR(60) not null comment '学生编号', check_date VARCHAR(60) not NULL COMMENT '检查日期', heart VARCHAR(60) not NULL COMMENT '心', liver VARCHAR(60) not NULL COMMENT '肝', spleen VARCHAR(60) not NULL COMMENT '脾', lung VARCHAR(60) not NULL COMMENT '肺', kidney VARCHAR(60) not NULL COMMENT '肾', uterus VARCHAR(60) not NULL COMMENT '子宫', note VARCHAR(1024) not NULL comment '备注', PRIMARY KEY (id)); CREATE table t_student_health_male( id int(20) not null auto_increment comment '编号', student_id VARCHAR(60) not null comment '学生编号', check_date VARCHAR(60) not NULL COMMENT '检查日期', heart VARCHAR(60) not NULL COMMENT '心', liver VARCHAR(60) not NULL COMMENT '肝', spleen VARCHAR(60) not NULL COMMENT '脾', lung VARCHAR(60) not NULL COMMENT '肺', kidney VARCHAR(60) not NULL COMMENT '肾', prostate VARCHAR(60) not NULL COMMENT '前列腺', note VARCHAR(1024) not NULL comment '备注', PRIMARY KEY (id)); create table t_student_lecture( id int(20) not null auto_increment COMMENT '编号', student_id int(20) not null comment '学生编号', lecture_id int(20) not null comment '课程编号', grade DECIMAL(16,2) not null comment '评分', note VARCHAR(1024) comment '备注', PRIMARY KEY (id)); create table t_student_selfcard( id int(20) not null auto_increment COMMENT '编号', student_id int(20) not null comment '学生编号', native VARCHAR(60) not NULL COMMENT '籍贯', issue_date date NOT NULL comment '发证日期', end_date date not NULL COMMENT '结束日期', note VARCHAR(1024) comment '备注', PRIMARY KEY (id));association用t_student和t_student_selfcard演示一对一级联。新增Student POJO：12345678910public class Student &#123; private Long id; private String cnName; private Sex sex; private Long selfCardNo; private String note; //一对一关系 private StudentSelfcard selfCard; // getter，setter略&#125;StudentSelfcard POJO：123456789public class StudentSelfcard &#123; private Long id; private Long studentId; private String natives; private Date issueDate; private Date endDate; private String note; // getter，setter略&#125;定义接口StudentSelfcardMapper：1234public interface StudentSelfcardMapper &#123; public StudentSelfcard findStudentSelfcardByStudentId(Long id); public int insertStudentSelfcard(StudentSelfcard selfCard);&#125;创建对应的映射文件StudentSelfcardMapper.xml：123456789101112131415161718&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="mrbird.leanote.mapper.StudentSelfcardMapper"&gt; &lt;sql id="studentSelfcard_column"&gt; id,student_id as studentId,native as natives,issue_date as issueDate, end_date as endDate,note &lt;/sql&gt; &lt;select id="findStudentSelfcardByStudentId" parameterType="long" resultType="studentSelfcard"&gt; select &lt;include refid="studentSelfcard_column"/&gt; from t_student_selfcard where student_id = #&#123;studentId&#125; &lt;/select&gt; &lt;insert id="insertStudentSelfcard" parameterType="studentSelfcard"&gt; insert into t_student_selfcard (student_id,native,issue_date,end_date, note) values (#&#123;studentId&#125;,#&#123;natives&#125;,#&#123;issueDate&#125;,#&#123;endDate&#125;,#&#123;note&#125;) &lt;/insert&gt;&lt;/mapper&gt;接着定义接口StudentMapper：1234public interface StudentMapper &#123; public Student findStudentById(Long id); public int createStudent(Student s);&#125;其相对于的映射文件StudentMapper.xml：1234567891011121314151617181920212223242526272829303132&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="mrbird.leanote.mapper.StudentMapper"&gt; &lt;resultMap type="student" id="studentList"&gt; &lt;id column="id" property="id"/&gt; &lt;result column="cnname" property="cnName"/&gt; &lt;result column="sex" property="sex" typeHandler="org.apache.ibatis.type.EnumTypeHandler"/&gt; &lt;result column="selfcard_no" property="selfCardNo"/&gt; &lt;result column="note" property="note"/&gt; &lt;!-- 一对一关联，column指定用哪列的值作为select查询的条件，如果有多个值用 逗号隔开，select指定查询方法--&gt; &lt;association property="selfCard" column="id" select="mrbird.leanote.mapper.StudentSelfcardMapper.findStudentSelfcardByStudentId"/&gt; &lt;/resultMap&gt; &lt;sql id="student_column"&gt; id,cnname as cnName,sex,selfcard_no as selfCardNo,note &lt;/sql&gt; &lt;select id="findStudentById" parameterType="long" resultMap="studentList"&gt; select &lt;include refid="student_column"/&gt; from t_student where id = #&#123;id&#125; &lt;/select&gt; &lt;!-- 设置主键回填，供t_student_selfcard的student_id字段使用 --&gt; &lt;insert id="createStudent" parameterType="student" useGeneratedKeys="true" keyProperty="id"&gt; insert into t_student(cnname,sex,selfcard_no,note) values (#&#123;cnName&#125;, #&#123;sex,typeHandler=org.apache.ibatis.type.EnumTypeHandler&#125;, #&#123;selfCardNo&#125;,#&#123;note&#125;) &lt;/insert&gt;&lt;/mapper&gt;设置别名，指定mapper略。先往库表插入值：123456789101112131415161718192021...sqlSession = SqlSessionFactoryUtil.openSqlSession();StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);StudentSelfcardMapper selfcardMapper = sqlSession.getMapper(StudentSelfcardMapper.class);Student student = new Student();student.setCnName("辛久奈");student.setNote("旋涡辛久奈");student.setSelfCardNo(10000L);student.setSex(Sex.FEMALE);int n = studentMapper.createStudent(student);if( n == 1)&#123; StudentSelfcard selfCard = new StudentSelfcard(); selfCard.setStudentId(student.getId()); selfCard.setNatives("福州"); selfCard.setIssueDate(new Date()); selfCard.setEndDate(new Date()); selfCard.setNote("旋涡辛久奈的学生证"); selfcardMapper.insertStudentSelfcard(selfCard);&#125;sqlSession.commit();...查询库表：123456789101112131415mysql&gt; select * from t_student;+----+--------+--------+-------------+------------+| id | cnname | sex | selfcard_no | note |+----+--------+--------+-------------+------------+| 10 | 辛久奈 | FEMALE | 10000 | 旋涡辛久奈 |+----+--------+--------+-------------+------------+1 row in set (0.00 sec) mysql&gt; select * from t_student_selfcard;+----+------------+--------+------------+------------+--------------------+| id | student_id | native | issue_date | end_date | note |+----+------------+--------+------------+------------+--------------------+| 2 | 10 | 福州 | 2017-01-06 | 2017-01-06 | 旋涡辛久奈的学生证 |+----+------------+--------+------------+------------+--------------------+1 row in set (0.00 sec)插入成功，现测试级联获取：1234567...sqlSession = SqlSessionFactoryUtil.openSqlSession();StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);Student student = studentMapper.findStudentById(10L);System.out.println(student.getSelfCard().getNote());sqlSession.commit();...控制台输出：1旋涡辛久奈的学生证success.collection学生和学生成绩是一对多的关系，所以用t_student和t_student_lecture表练习一对多级联。修改Student POJO：12345678910public class Student &#123; private Long id; private String cnName; private Sex sex; private Long selfCardNo; private String note; //一对多关联 private List&lt;StudentLecture&gt; lectures; // getter，setter略&#125;新增StudentLecture POJO：12345678public class StudentLecture &#123; private Long id; private Long studentId; private Long lectureId; private Double grade; private String note; // getter，setter略&#125;新建StudentLectureMapper接口：1234public interface StudentLectureMapper &#123; public List&lt;StudentLecture&gt; getLecturesByStudentId(Long studentId); public int insertStudentLecture(StudentLecture lecture);&#125;其对应的映射文件StudentLectureMapper.xml：1234567891011121314151617181920212223242526&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="mrbird.leanote.mapper.StudentLectureMapper"&gt; &lt;resultMap type="studentLecture" id="lectures"&gt; &lt;id column="id" property="id"/&gt; &lt;result column="student_id" property="studentId"/&gt; &lt;result column="lecture_id" property="lectureId"/&gt; &lt;result column="grade" property="grade"/&gt; &lt;result column="note" property="note"/&gt; &lt;/resultMap&gt; &lt;sql id="student_lecture_column"&gt; id,student_id as studentId,lecture_id as lectureId,grade,note &lt;/sql&gt; &lt;select id="getLecturesByStudentId" parameterType="long" resultMap="lectures"&gt; select &lt;include refid="student_lecture_column"/&gt; from t_student_lecture where student_id = #&#123;studentId&#125; &lt;/select&gt; &lt;insert id="insertStudentLecture" parameterType="student"&gt; &lt;![CDATA[ insert into t_student_lecture(student_id,lecture_id,grade,note) values (#&#123;studentId&#125;,#&#123;lectureId&#125;,#&#123;grade&#125;,#&#123;note&#125;) ]]&gt; &lt;/insert&gt;&lt;/mapper&gt;修改StudentMapper.xml：12345678910111213141516171819202122232425262728293031&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="mrbird.leanote.mapper.StudentMapper"&gt; &lt;resultMap type="student" id="studentList"&gt; &lt;id column="id" property="id"/&gt; &lt;result column="cnname" property="cnName"/&gt; &lt;result column="sex" property="sex" typeHandler="org.apache.ibatis.type.EnumTypeHandler"/&gt; &lt;result column="selfcard_no" property="selfCardNo"/&gt; &lt;result column="note" property="note"/&gt; &lt;!-- 一对多关联，column指定用哪列的值作为select查询的条件，如果由多个值用 逗号隔开，select指定查询方法--&gt; &lt;collection property="lectures" column="id" select="mrbird.leanote.mapper.StudentLectureMapper.getLecturesByStudentId"/&gt; &lt;/resultMap&gt; &lt;sql id="student_column"&gt; id,cnname as cnName,sex,selfcard_no as selfCardNo,note &lt;/sql&gt; &lt;select id="findStudentById" parameterType="long" resultMap="studentList"&gt; select &lt;include refid="student_column"/&gt; from t_student where id = #&#123;id&#125; &lt;/select&gt; &lt;!-- 设置主键回填，供t_student_selfcard的student_id字段使用 --&gt; &lt;insert id="createStudent" parameterType="student" useGeneratedKeys="true" keyProperty="id"&gt; insert into t_student(cnname,sex,selfcard_no,note) values (#&#123;cnName&#125;, #&#123;sex,typeHandler=org.apache.ibatis.type.EnumTypeHandler&#125;, #&#123;selfCardNo&#125;,#&#123;note&#125;) &lt;/insert&gt;&lt;/mapper&gt;先插入一些测试数据：12345678910111213141516171819202122232425...sqlSession = SqlSessionFactoryUtil.openSqlSession();StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);StudentLectureMapper lectureMapper = sqlSession.getMapper(StudentLectureMapper.class);Student student = new Student();student.setCnName("水门");student.setSelfCardNo(11111L);student.setNote("波风水门");student.setSex(Sex.MALE);int n = studentMapper.createStudent(student);if(n == 1)&#123; Long studentId = student.getId(); String[] noteArr = new String[]&#123;"语文成绩","数学成绩","英语成绩"&#125;; Double[] gradeArr = new Double[]&#123;99.0,100.0,98.0&#125;; for(int i=0;i&lt;noteArr.length;i++)&#123; StudentLecture lecture = new StudentLecture(); lecture.setStudentId(studentId); lecture.setLectureId(Long.valueOf(i)); lecture.setGrade(gradeArr[i]); lecture.setNote(noteArr[i]); lectureMapper.insertStudentLecture(lecture); &#125;&#125;sqlSession.commit();...查询数据库：123456789101112131415161718mysql&gt; select * from t_student;+----+--------+--------+-------------+------------+| id | cnname | sex | selfcard_no | note |+----+--------+--------+-------------+------------+| 10 | 辛久奈 | FEMALE | 10000 | 旋涡辛久奈 || 12 | 水门 | MALE | 11111 | 波风水门 |+----+--------+--------+-------------+------------+2 rows in set (0.01 sec) mysql&gt; select * from t_student_lecture;+----+------------+------------+--------+----------+| id | student_id | lecture_id | grade | note |+----+------------+------------+--------+----------+| 1 | 12 | 0 | 99.00 | 语文成绩 || 2 | 12 | 1 | 100.00 | 数学成绩 || 3 | 12 | 2 | 98.00 | 英语成绩 |+----+------------+------------+--------+----------+3 rows in set (0.00 sec)插入成功，现测试级联获取lectures：123456789...sqlSession = SqlSessionFactoryUtil.openSqlSession();StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);Student student = studentMapper.findStudentById(12L);List&lt;StudentLecture&gt; lectures = student.getLectures();for(StudentLecture l : lectures)&#123; System.out.println(l.getNote()+"："+l.getGrade());&#125; ...控制台输出：123语文成绩：99.0数学成绩：100.0英语成绩：98.0success.discriminator鉴别器其实同其他级联一样，只不过是多了个鉴别的过程罢了。为了学习鉴别器，我们向t_student_health_female和t_student_health_male中插入一组数据：12345678910111213141516171819202122232425INSERT INTO `t_student_health_female`VALUES( 1, '10', '2017-1-6', '心正常', '肝正常', '脾正常', '肺正常', '肾正常', '子宫正常', '健康'); INSERT INTO `t_student_health_male`VALUES( 1, '12', '2017-1-6', '心脏良好', '肝良好', '脾良好', '肺良好', '肾良好', '前列腺良好', '健康');其对应的实体类StudentHealthFemale和StudentHealthMale略。新增两个POJO：MaleStudent和FemaleStudent均继承自Student：1234public class MaleStudent extends Student&#123; private List&lt;StudentHealthMale&gt; studentHealthMaleList; // getter，setter略&#125;1234public class FemaleStudent extends Student&#123; private List&lt;StudentHealthFemale&gt; studentHealthFemaleList; // getter，setter略&#125;接着编写两个接口StudentHealthMaleMapper和StudentHealthFemaleMapper，包含一个根据studentId获取health的抽象方法：12345import mrbird.leanote.pojo.StudentHealthMale; public interface StudentHealthMaleMapper &#123; public StudentHealthMale findStudentHealthMaleByStudentId(Long studentId);&#125;12345import mrbird.leanote.pojo.StudentHealthFemale; public interface StudentHealthFemaleMapper &#123; public StudentHealthFemale findStudentHealthFemaleByStudentId(Long studentId);&#125;各自对应的映射器：StudentHealthMaleMapper.xml：123456789&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="mrbird.leanote.mapper.StudentHealthMaleMapper"&gt; &lt;select id="findStudentHealthMaleByStudentId" parameterType="long" resultType="studentHealthMale"&gt; select * from t_student_health_male where student_id = #&#123;studentId&#125; &lt;/select&gt; &lt;/mapper&gt;因为在MyBatis配置文件中配置了&lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;，并且数据库命名规范，所以这里可以用select * from…studentHealthFemaleMapper.xml：12345678&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="mrbird.leanote.mapper.StudentHealthFemaleMapper"&gt; &lt;select id="findStudentHealthFemaleByStudentId" parameterType="long" resultType="studentHealthFemale"&gt; select * from t_student_health_female where student_id = #&#123;studentId&#125; &lt;/select&gt; &lt;/mapper&gt;接下来就是重点了，我们修改StudentMapper.xml：123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="mrbird.leanote.mapper.StudentMapper"&gt; &lt;!-- 定义maleStudentList，类型为“maleStudent”。这是一个一对多关联，一个学生可以体检多次。 调用的方法为findStudentHealthMaleByStudentId。 正如其POJO继承Student那样，resultMap也同样继承自studentList--&gt; &lt;resultMap type="maleStudent" id="maleStudentList" extends="studentList"&gt; &lt;collection property="studentHealthMaleList" column="id" select="mrbird.leanote.mapper.StudentHealthMaleMapper .findStudentHealthMaleByStudentId"/&gt; &lt;/resultMap&gt; &lt;resultMap type="femaleStudent" id="femaleStudentList" extends="studentList"&gt; &lt;collection property="studentHealthFemaleList" column="id" select="mrbird.leanote.mapper.StudentHealthFemaleMapper .findStudentHealthFemaleByStudentId"/&gt; &lt;/resultMap&gt; &lt;resultMap type="student" id="studentList"&gt; &lt;id column="id" property="id"/&gt; &lt;result column="cnname" property="cnName"/&gt; &lt;result column="sex" property="sex"/&gt; &lt;result column="selfcard_no" property="selfCardNo"/&gt; &lt;result column="note" property="note"/&gt; &lt;!-- 配置鉴别器，类似于switch，用于鉴别的列为“sex”， 值为MALE时结果集为maleStudentList 值为FEMALE时结果集为femaleStudentList --&gt; &lt;discriminator javaType="string" column="sex"&gt; &lt;case value="MALE" resultMap="maleStudentList"&gt;&lt;/case&gt; &lt;case value="FEMALE" resultMap="femaleStudentList"&gt;&lt;/case&gt; &lt;/discriminator&gt; &lt;/resultMap&gt; &lt;sql id="student_column"&gt; id,cnname as cnName,sex,selfcard_no as selfCardNo,note &lt;/sql&gt; &lt;select id="findStudentById" parameterType="long" resultMap="studentList"&gt; select &lt;include refid="student_column"/&gt; from t_student where id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt;测试一下：1234567...sqlSession = SqlSessionFactoryUtil.openSqlSession();StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);MaleStudent student = (MaleStudent) studentMapper.findStudentById(12L);System.out.println(student.getCnName()+"的"+ student.getStudentHealthMaleList().get(0).getProstate());...页面输出：1水门的前例腺良好(≖ ‿ ≖)✧延迟加载假如一次性将所有与Student有关的信息都加载出来，这必定会造成性能的问题，如：1234567891011121314151617181920212223&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="mrbird.leanote.mapper.StudentMapper"&gt; &lt;resultMap type="student" id="studentList"&gt; &lt;id column="id" property="id"/&gt; &lt;result column="cnname" property="cnName"/&gt; &lt;result column="sex" property="sex"/&gt; &lt;result column="selfcard_no" property="selfCardNo"/&gt; &lt;result column="note" property="note"/&gt; &lt;association property="selfCard" column="id" select="mrbird.leanote.mapper.StudentSelfcardMapper .findStudentSelfcardByStudentId"/&gt; &lt;collection property="lectures" column="id" select="mrbird.leanote.mapper.StudentLectureMapper .getLecturesByStudentId"/&gt; &lt;discriminator javaType="string" column="sex"&gt; &lt;case value="MALE" resultMap="maleStudentList"&gt;&lt;/case&gt; &lt;case value="FEMALE" resultMap="femaleStudentList"&gt;&lt;/case&gt; &lt;/discriminator&gt; &lt;/resultMap&gt; ... &lt;/mapper&gt;MyBatis的延迟加载策略可以很好的应对这种情况。只需在mybatis-config.xml中配置：1234567&lt;settings&gt; ... &lt;!-- 开启延迟加载 --&gt; &lt;setting name="lazyLoadingEnabled" value="true"/&gt; &lt;!-- 关闭按层级加载 --&gt; &lt;setting name="aggressiveLazyLoading" value="false"/&gt;&lt;/settings&gt;然后我们在级联标签上可以自由的配置fetchType=”lazy”或者fetchType=”eager”来改变加载策略。eager 英[ˈi:gə(r)] 美[ˈiɡɚ] adj. 急切; 渴望的; 热心的; 热切的，热情洋溢的;另外一种级联所谓的另外一种级联就是用一条sql查出所有学生的信息，没有性能问题。在StudentMapper中定义一个查找所有学生信息的抽象方法：1public List&lt;Student&gt; finAllStudentMsg();其映射文件如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="mrbird.leanote.mapper.StudentMapper"&gt; &lt;select id="finAllStudentMsg" resultMap="allStudentList"&gt; select s.id,s.cnname,s.sex,s.selfcard_no,s.note as snote, IF (s.sex = 'MALE',shm.id,shf.id) as hid, IF (s.sex = 'MALE',shm.check_date,shf.check_date) as checkDate, IF (s.sex = 'MALE',shm.heart,shf.heart) as heart, IF (s.sex = 'MALE',shm.liver,shf.liver) as liver, IF (s.sex = 'MALE',shm.spleen,shf.spleen) as spleen, IF (s.sex = 'MALE',shm.lung,shf.lung) as lung, IF (s.sex = 'MALE',shm.kidney,shf.kidney) as kidney, IF (s.sex = 'MALE',shm.note,shf.note) as hnote, shm.prostate,shf.uterus, ss.id as ssid,ss.native as natives, ss.issue_date as issueDate,ss.end_date as endDate, ss.note as ssNote, sl.id as slid,sl.lecture_id as lectureId,sl.grade, sl.note as slNote FROM t_student s LEFT JOIN t_student_health_male shm on s.id = shm.student_id LEFT JOIN t_student_health_female shf on s.id = shf.student_id LEFT JOIN t_student_selfcard ss on s.id = ss.student_id LEFT JOIN t_student_lecture sl on s.id = sl.student_id &lt;/select&gt; &lt;resultMap type="student" id="allStudentList"&gt; &lt;id column="id" property="id"/&gt; &lt;result column="cnname" property="cnName"/&gt; &lt;result column="sex" property="sex"/&gt; &lt;result column="selfcard_no" property="selfCardNo"/&gt; &lt;result column="snote" property="note"/&gt; &lt;!-- javaType属性告诉MyBtis用哪个类去映射这些字段 --&gt; &lt;association property="selfCard" column="id" javaType="studentSelfcard"&gt; &lt;result property="id" column="ssid"/&gt; &lt;result property="studentId" column="id"/&gt; &lt;result property="natives" column="natives"/&gt; &lt;result property="issueDate" column="issueDate"/&gt; &lt;result property="endDate" column="endDate"/&gt; &lt;result property="note" column="ssNote"/&gt; &lt;/association&gt; &lt;collection property="lectures" ofType="studentLecture"&gt; &lt;result property="id" column="slid"/&gt; &lt;result property="studentId" column="id"/&gt; &lt;result property="lectureId" column="lectureId"/&gt; &lt;result property="grade" column="grade"/&gt; &lt;result property="note" column="slNote"/&gt; &lt;/collection&gt; &lt;discriminator javaType="string" column="sex"&gt; &lt;case value="MALE" resultMap="maleStudentList"&gt;&lt;/case&gt; &lt;case value="FEMALE" resultMap="femaleStudentList"&gt;&lt;/case&gt; &lt;/discriminator&gt; &lt;/resultMap&gt; &lt;resultMap type="maleStudent" id="maleStudentList" extends="allStudentList"&gt; &lt;!-- ofType属性指定了其泛型 --&gt; &lt;collection property="studentHealthMaleList" ofType="studentHealthMale"&gt; &lt;id property="id" column="hid"/&gt; &lt;result property="studentId" column="id"/&gt; &lt;result property="checkDate" column="checkDate"/&gt; &lt;result property="heart" column="heart"/&gt; &lt;result property="liver" column="liver"/&gt; &lt;result property="spleen" column="spleen"/&gt; &lt;result property="lung" column="lung"/&gt; &lt;result property="kidney" column="kidney"/&gt; &lt;result property="prostate" column="prostate"/&gt; &lt;result property="note" column="hnote"/&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;resultMap type="femaleStudent" id="femaleStudentList" extends="allStudentList"&gt; &lt;collection property="studentHealthFemaleList" ofType="studentHealthFemale"&gt; &lt;id property="id" column="hid"/&gt; &lt;result property="studentId" column="id"/&gt; &lt;result property="checkDate" column="checkDate"/&gt; &lt;result property="heart" column="heart"/&gt; &lt;result property="liver" column="liver"/&gt; &lt;result property="spleen" column="spleen"/&gt; &lt;result property="lung" column="lung"/&gt; &lt;result property="kidney" column="kidney"/&gt; &lt;result property="uterus" column="uterus"/&gt; &lt;result property="note" column="hnote"/&gt; &lt;/collection&gt; &lt;/resultMap&gt;&lt;/mapper&gt;测试finAllStudentMsg方法：12345678910111213141516171819202122232425262728293031323334...sqlSession = SqlSessionFactoryUtil.openSqlSession();StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);List&lt;Student&gt; students = studentMapper.finAllStudentMsg();for(Student student : students)&#123; if("MALE".equalsIgnoreCase(student.getSex().toString()))&#123; MaleStudent male = (MaleStudent) student; System.out.println(male.getCnName()+"的卡号："+male.getSelfCardNo()); StudentSelfcard selfcard = male.getSelfCard(); System.out.println("来自："+selfcard.getNatives()+","+selfcard.getNote()); List&lt;StudentLecture&gt; lectures = male.getLectures(); for(StudentLecture le : lectures)&#123; System.out.println(le.getNote()+"："+le.getGrade()); &#125; List&lt;StudentHealthMale&gt; healthMales = male.getStudentHealthMaleList(); for(StudentHealthMale healthMale : healthMales)&#123; System.out.println(healthMale.getCheckDate()+"，"+healthMale.getProstate()); &#125; &#125;else&#123; FemaleStudent female = (FemaleStudent) student; System.out.println(female.getCnName()+"的卡号："+female.getSelfCardNo()); StudentSelfcard selfcard = female.getSelfCard(); System.out.println("来自："+selfcard.getNatives()+","+selfcard.getNote()); List&lt;StudentLecture&gt; lectures = female.getLectures(); for(StudentLecture le : lectures)&#123; System.out.println(le.getNote()+"："+le.getGrade()); &#125; List&lt;StudentHealthFemale&gt; healthFemales = female.getStudentHealthFemaleList(); for(StudentHealthFemale healthfemale : healthFemales)&#123; System.out.println(healthfemale.getCheckDate()+"，"+healthfemale.getUterus()); &#125; &#125;&#125;...控制台输出：123456789101112辛久奈的卡号：10000来自：福州,旋涡辛久奈的学生证语文成绩：99.0数学成绩：99.0英语成绩：99.02017-1-6，子宫正常水门的卡号：11111来自：厦门,波风水门的学生证语文成绩：99.0数学成绩：100.0英语成绩：98.02017-1-6，前例腺良好这种方式比较直观明了，但是SQL编写起来较为繁琐。《深入浅出MyBatis技术原理与实战》读书笔记]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis映射器]]></title>
    <url>%2Fblog%2FMyBatis%E6%98%A0%E5%B0%84%E5%99%A8.html</url>
    <content type="text"><![CDATA[映射器的配置：元素名称描述select查询语句insert插入语句update更新语句delete删除语句sql允许定义一部分SQL，然后各个地方引用resultMap用于定义结果集cache给定命名控件的缓存配置cache-ref其它命名控件缓存配置的引用selectmapUnderscoreToCamelCase数据库字段名一般采用下划线命名规则，而java中的字段名用的是驼峰命名规则：JavaBean数据库ididroleNamerole_namenotenoteisGirl&nbsp; &nbsp;is_girl如果数据库字段命名规范，我们可以在settins中配置mapUnderscoreToCamelCase为true：123&lt;settings&gt; &lt;setting name="mapUnderscoreToCamelCase" value="true"/&gt;&lt;/settings&gt;MyBatis就会自动将数据库字段名转换为JavaBean的字段名，比如：123&lt;select id="getRole" parameterType="long" resultType="role"&gt; &lt;![CDATA[select * from t_role where id = #&#123;id&#125;]]&gt;&lt;/select&gt;如果不将mapUnderscoreToCamelCase设置为true，则select元素必须指明字段别名：1234&lt;select id="getRole" parameterType="long" resultType="role"&gt; &lt;![CDATA[select id,role_name as roleName, note,is_girl as isGirl from t_role where id = #&#123;id&#125;]]&gt;&lt;/select&gt;否则没有对应上的字段值为null。传递多个参数1.使用Map传参定义一个抽象方法：1public List&lt;Role&gt; getRole(Map&lt;String,String&gt; params);映射文件中配置select：12345678910111213&lt;resultMap type="role" id="roleList"&gt; &lt;id column="id" property="id"/&gt; &lt;result column="role_name" property="roleName"/&gt; &lt;result column="note" property="note"/&gt; &lt;result column="is_girl" property="isGirl" javaType="Boolean" jdbcType="VARCHAR"/&gt;&lt;/resultMap&gt;&lt;select id="getRole" resultMap="roleList"&gt; &lt;![CDATA[select * from t_role where role_name like concat('%',#&#123;roleName&#125;,'%') and note like concat('%',#&#123;note&#125;,'%') ]]&gt;&lt;/select&gt;测试：1234567891011...sqlSession = SqlSessionFactoryUtil.openSqlSession();RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);Map&lt;String,String&gt; params = new HashMap&lt;String,String&gt;();params.put("roleName", "雏田");params.put("note", "日向");List&lt;Role&gt; roleList = mapper.getRole(params);for(Role r : roleList)&#123; System.out.println(r.getRoleName()+" is a girl:"+r.getIsGirl());&#125;...输出：1雏田 is a girl:true2.使用注解传参修改抽象方法：12public List&lt;Role&gt; getRole(@Param("roleName")String roleName, @Param("note")String note);测试：12345678...sqlSession = SqlSessionFactoryUtil.openSqlSession();RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);List&lt;Role&gt; roleList = mapper.getRole("雏田", "日向");for(Role r : roleList)&#123; System.out.println(r.getRoleName()+" is a girl:"+r.getIsGirl());&#125;...输出：1雏田 is a girl:true3.使用JavaBean传参定义一个传递参数JavaBean：12345678910111213141516public class RoleParams &#123; private String roleName; private String note; public String getRoleName() &#123; return roleName; &#125; public void setRoleName(String roleName) &#123; this.roleName = roleName; &#125; public String getNote() &#123; return note; &#125; public void setNote(String note) &#123; this.note = note; &#125;&#125;修改抽象方法：1public List&lt;Role&gt; getRole(RoleParams params);测试：1234567891011...sqlSession = SqlSessionFactoryUtil.openSqlSession();RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);RoleParams params = new RoleParams();params.setRoleName("鸣人");params.setNote("旋涡");List&lt;Role&gt; roleList = mapper.getRole(params);for(Role r : roleList)&#123; System.out.println(r.getRoleName()+" is a girl:"+r.getIsGirl());&#125;...输出：1鸣人 is a girl:falseinsert主键回填和自定义开发中有时候需要获取到插入行的主键值，MyBatis的主键回填可以完成这个功能。定义一个createRole抽象方法：1public int createRole(Role role);映射：1234567&lt;insert id="createRole" parameterType="role" useGeneratedKeys="true" keyProperty="id"&gt; &lt;![CDATA[ insert into t_role(role_name,note,is_girl) values (#&#123;roleName&#125;,#&#123;note&#125;, #&#123;isGirl,typeHandler=mrbird.leanote.typehandler.BooleanTypeHandler&#125;) ]]&gt;&lt;/insert&gt;useGeneratedKeys会使MyBatis使用JDBC的getGeneratedKeys方法来获取出由数据库内部生成的主键，keyProperty表示以哪个列为属性的主键。测试获取主键：1234567891011...sqlSession = SqlSessionFactoryUtil.openSqlSession();RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);Role role = new Role();role.setRoleName("佐助");role.setNote("宇智波");role.setIsGirl(Boolean.FALSE);mapper.createRole(role);System.out.println(role.getId()); //7sqlSession.commit();...页面输出 7，查询数据库：123456789mysql&gt; select * from t_role;+----+-----------+----------+---------+| id | role_name | note | is_girl |+----+-----------+----------+---------+| 1 | 雏田 | 日向雏田 | Y || 2 | 鸣人 | 旋涡鸣人 | N || 7 | 佐助 | 宇智波 | N |+----+-----------+----------+---------+3 rows in set (0.00 sec)假如数据库主键没有设置自增，我们的要求是：如果表t_role没有记录，则id设置为1，否则我们取最大id加2。这时候我们可以对映射文件的insert标签稍作修改：1234567891011121314&lt;insert id="createRole" parameterType="role" useGeneratedKeys="true" keyProperty="id"&gt; &lt;!-- resultType必须和POJO里id的类型一致 --&gt; &lt;selectKey keyProperty="id" resultType="long" order="BEFORE"&gt; &lt;![CDATA[ select if(max(id) is null,1,max(id)+2) as id from t_role ]]&gt; &lt;/selectKey&gt; &lt;![CDATA[ insert into t_role(id,role_name,note,is_girl) values (#&#123;id&#125;,#&#123;roleName&#125;, #&#123;note&#125;, #&#123;isGirl,typeHandler=mrbird.leanote.typehandler.BooleanTypeHandler&#125;) ]]&gt;&lt;/insert&gt;测试：1234567891011...sqlSession = SqlSessionFactoryUtil.openSqlSession();RoleMapper mapper = sqlSession.getMapper(RoleMapper.class);Role role = new Role();role.setRoleName("小樱");role.setNote("春野樱");role.setIsGirl(Boolean.TRUE);mapper.createRole(role);System.out.println(role.getId()); //9sqlSession.commit();...输出9和我们预期的一致，查询数据库：12345678910mysql&gt; select * from t_role;+----+-----------+----------+---------+| id | role_name | note | is_girl |+----+-----------+----------+---------+| 1 | 雏田 | 日向雏田 | Y || 2 | 鸣人 | 旋涡鸣人 | N || 7 | 佐助 | 宇智波 | N || 9 | 小樱 | 春野樱 | Y |+----+-----------+----------+---------+4 rows in set (0.00 sec)update &amp; deleteupdate和delete较为简单，一个简单的更新和删除例子：1234567891011&lt;update id="updateRole" parameterType="role"&gt; &lt;![CDATA[ update t_role set role_name = #&#123;roleName&#125;, note = #&#123;note&#125; where id = #&#123;id&#125; ]]&gt;&lt;/update&gt;&lt;delete id="deleteRole" parameterType="long"&gt; &lt;![CDATA[ delete from t_role where id = #&#123;id&#125; ]]&gt;&lt;/delete&gt;参数参数配置参数除了可以指定javaType，jdbcType和typeHandler外，还可以对数值类型的参数设置精度：1#&#123;price,javaType=double,jdbcType=NUMERIC,numericScale=2&#125;$与井#{}的值被作为sql的参数，而${}则会被当作sql的一部分。sql元素sql元素的作用是可以定义sql语句的一部分，然后导出引用：123456789&lt;sql id="t_role_column"&gt; &lt;![CDATA[id,role_name as roleName,note,is_girl as isGirl]]&gt;&lt;/sql&gt;&lt;select id="getRole" resultMap="roleList"&gt; select &lt;include refid="t_role_column"/&gt; from t_role where role_name like concat('%',#&#123;roleName&#125;,'%') and note like concat('%',#&#123;note&#125;,'%')&lt;/select&gt;上述代码定义了一个id为t_role_column的sql，然后在select元素中使用include元素引用了它，从而达到了重用的功能。还可以在sql元素中指定标签：12345678910111213&lt;sql id="t_role_column"&gt; &lt;![CDATA[$&#123;prefix&#125;.id,$&#123;prefix&#125;.role_name as roleName, $&#123;prefix&#125;.note,$&#123;prefix&#125;.is_girl as isGirl]]&gt;&lt;/sql&gt;&lt;select id="getRole" resultMap="roleList"&gt; select &lt;include refid="t_role_column"&gt; &lt;property name="prefix" value="t"/&gt; &lt;/include&gt; from t_role t where t.role_name like concat('%',#&#123;roleName&#125;,'%') and t.note like concat('%',#&#123;note&#125;,'%')&lt;/select&gt;这个功能在使用关联查询的时候较为方便。级联🎉MyBatis级联cache🎉MyBatis缓存机制《深入浅出MyBatis技术原理与实战》读书笔记]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis配置文件]]></title>
    <url>%2Fblog%2FMyBatis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html</url>
    <content type="text"><![CDATA[MyBatis配置文件mybatis-config.xml包含：■ properties：用于配置属性信息。■ settings：用于配置MyBatis的运行时方式。■ typeAliases：配置类型别名，可以在xml中用别名取代全限定名。■ typeHandlers：配置类型处理器。■ plugins：配置拦截器，用于拦截sql语句的执行。■ environments：配置数据源信息、连接池、事务属性等。■ mappers：配置SQL映射文件。注意：这些配置必须按照上述的顺序进行配置！]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis typeHandler]]></title>
    <url>%2Fblog%2FMyBatis-typeHandler.html</url>
    <content type="text"><![CDATA[MyBatis在设置参数或者从结果集中获取参数的时候，都会用到注册了的typeHandler进行处理。typeHandler的作用为将参数从javaType转为jdbcType，或者从数据库取出结果时把jdbcType转为javaType。带的typeHandler类型处理器Java类型JDBC类型BooleanTypeHandlerjava.lang.Boolean,boolean数据库兼容的BOOLEANByteTypeHandlerjava.lang.Byte,byte数据库兼容的NUMERIC或BYTEShortTypeHandler&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Short,short数据库兼容的NUMERIC或SHORT INTEGERIntegerTypeHandler&nbsp;java.lang.Integer,int数据库兼容的NUMERIC或INTEGERLongTypeHandler&nbsp;java.lang.Long,long数据库兼容的NUMERIC或LONG INTEGERFloatTypeHandler&nbsp;java.lang.Float,float数据库兼容的NUMERIC或FLOATDoubleTypeHandler&nbsp;java.lang.Double,double数据库兼容的NUMERIC或DOUBLEBigDecimalTypeHandlerjava.math.BigDecimal数据库兼容的NUMERIC或DECIMALStringTypeHandler&nbsp;java.lang.StirngCHAR,VARCHARClobypeHandler&nbsp;java.lang.StringCLOB,LONGVARCHARNStringTypeHanlerjava.lang.StringNVARCHAR,NCHARNClobTypeHandler&nbsp;java.lang.StringNNCLOBByteArrayTypeHandler&nbsp;byte[]数据库兼容的字节流类型BlobTypeHandler&nbsp;byte[]BLOB,LONGVARBINARYDateTypeHandler&nbsp;java.util.DateTIMESTAMPDateOnlyTypeHandler&nbsp;java.util.DateDATETimeOnlyTypeHandler&nbsp;java.util.DateTIMESqlTimestampTypeHandler&nbsp;java.sql.TimestampTIMESTAMPSqlDateTypeHandler&nbsp;java.sql.DateDATESqlTimeTypeHandler&nbsp;java.sql.TimeTIMEObjectTypeHandler&nbsp;AnyOTHER或未指定类型EnumTypeHandler&nbsp;Enumeration TypeVARCHAR或任意兼容的字符串类型，存 储枚举的名称EnumOrdinalTypeHandler&nbsp;Enumeration Type任何兼容的NUMERIC或DOUBLE类型， 存储枚举的索引为了演示自带的typeHandler，新建一张表：1234567CREATE TABLE `t_role` ( `id` int(20) NOT NULL AUTO_INCREMENT COMMENT '编号', `role_name` varchar(60) NOT NULL COMMENT '角色名称', `note` varchar(1024) DEFAULT NULL COMMENT '备注', `is_girl` varchar(20) DEFAULT NULL COMMENT '是否为女孩', PRIMARY KEY (`id`))库表对应的实体类Role略。接口RoleMapper中定义一个createRole()抽象方法：1public int createRole(Role role);映射文件：123456&lt;insert id="createRole" parameterType="role"&gt; &lt;![CDATA[ insert into t_role(role_name,note,is_girl) values (#&#123;roleName&#125;,#&#123;note&#125;, #&#123;isGirl&#125;) ]]&gt;&lt;/insert&gt;测试插入方法：12345678910......sqlSession = SqlSessionFactoryUtil.openSqlSession();RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);Role role = new Role();role.setRoleName("雏田");role.setNote("日向雏田");role.setIsGirl(Boolean.TRUE);roleMapper.createRole(role);sqlSession.commit();......查询数据库：1234567mysql&gt; select * from t_role;+----+-----------+----------+---------+| id | role_name | note | is_girl |+----+-----------+----------+---------+| 1 | 雏田 | 日向雏田 | 1 |+----+-----------+----------+---------+1 row in set (0.00 sec)从结果中可以看出，默认的BooleantypeHandler将true转换为了1。如果想把true转换为Y,false转换为N,我们可以自定义BooleantypeHandler。自定义typeHandler自定义typeHandler可以通过继承BasetypeHandler或者实现typeHandler接口来实现，现自定义一个BooleanTypeHandler：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package mrbird.leanote.typehandler; import java.sql.CallableStatement;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import org.apache.ibatis.type.JdbcType;import org.apache.ibatis.type.TypeHandler; public class BooleanTypeHandler implements TypeHandler&lt;Boolean&gt;&#123; @Override public Boolean getResult(ResultSet arg0, String arg1) throws SQLException &#123; String str = arg0.getString(arg1); Boolean flag = Boolean.FALSE; if(str.equalsIgnoreCase("Y"))&#123; flag = Boolean.TRUE; &#125; return flag; &#125; @Override public Boolean getResult(ResultSet arg0, int arg1) throws SQLException &#123; String str = arg0.getString(arg1); Boolean flag = Boolean.FALSE; if(str.equalsIgnoreCase("Y"))&#123; flag = Boolean.TRUE; &#125; return flag; &#125; @Override public Boolean getResult(CallableStatement arg0, int arg1) throws SQLException &#123; String str = arg0.getString(arg1); Boolean flag = Boolean.FALSE; if(str.equalsIgnoreCase("Y"))&#123; flag = Boolean.TRUE; &#125; return flag; &#125; @Override public void setParameter(PreparedStatement arg0, int arg1, Boolean arg2, JdbcType arg3) throws SQLException &#123; Boolean flag = (Boolean) arg2; String value = flag == true ? "Y" : "N"; arg0.setString(arg1, value); &#125;&#125;在mybatis-config.xml文件中配置该typeHandler：1234&lt;typeHandlers&gt; &lt;typeHandler javaType="Boolean" jdbcType="VARCHAR" handler="mrbird.leanote.typehandler.BooleanTypeHandler" /&gt;&lt;/typeHandlers&gt;然后在映射文件中对需要转换的字段标注javaType和jdbcType，或者无需在mybatis-config.xml中注册直接在映射文件中指明typeHandler的路径即可。指明javaType和jdbcType，与注册中的一致即可找到相对应的typeHandler：123456&lt;insert id="createRole" parameterType="role"&gt; &lt;![CDATA[ insert into t_role(role_name,note,is_girl) values (#&#123;roleName&#125;,#&#123;note&#125;, #&#123;isGirl,javaType=Boolean,jdbcType=VARCHAR&#125;) ]]&gt;&lt;/insert&gt;或指明typeHandler路径：123456&lt;insert id="createRole" parameterType="role"&gt; &lt;![CDATA[ insert into t_role(role_name,note,is_girl) values (#&#123;roleName&#125;,#&#123;note&#125;, #&#123;isGirl,typeHandler=mrbird.leanote.typehandler.BooleanTypeHandler&#125;) ]]&gt;&lt;/insert&gt;测试：12345678910......sqlSession = SqlSessionFactoryUtil.openSqlSession();RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class);Role role = new Role();role.setRoleName("鸣人");role.setNote("旋涡鸣人");role.setIsGirl(Boolean.FALSE);roleMapper.createRole(role);sqlSession.commit();......查询数据库：12345678mysql&gt; select * from t_role;+----+-----------+----------+---------+| id | role_name | note | is_girl |+----+-----------+----------+---------+| 1 | 雏田 | 日向雏田 | 1 || 2 | 鸣人 | 旋涡鸣人 | N |+----+-----------+----------+---------+2 rows in set (0.00 sec)可发现，false已经转换为N了。枚举类型typeHandlerMyBatis自带两种枚举类型处理器：1.org.apache.ibatis.type.EnumOrdinalTypeHandler2.org.apache.ibatis.type.EnumTypeHandlerEnumOrdinalTypeHandler使用整数下标传递，EnumTypeHandler使用枚举字符串传递。创建一个枚举类型Sex：1234567891011121314151617181920212223package mrbird.leanote.enums; public enum Sex &#123; MALE(1,"男"),FEMALE(2,"女"); private int id; private String name; private Sex(int id, String name) &#123; this.id = id; this.name = name; &#125; public int getId() &#123; return id; &#125; public void setId(int id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125;&#125;EnumOrdinalTypeHandler创建一张表来演示EnumOrdinalTypeHandler：12345678CREATE TABLE `t_student` ( `id` int(20) NOT NULL AUTO_INCREMENT COMMENT '编号', `cnname` varchar(60) NOT NULL COMMENT '学生姓名', `sex` tinyint(4) NOT NULL COMMENT '性别', `selfcard_no` int(20) NOT NULL COMMENT '学生证号', `note` varchar(1024) DEFAULT NULL COMMENT '备注', PRIMARY KEY (`id`))这里sex字段类型为tinyint类型。Student实体类略。定义一个interface：123456789package mrbird.leanote.mapper; import java.util.List;import mrbird.leanote.pojo.Student; public interface StudentMapper &#123; public List&lt;Student&gt; getAllStudent(); public int createStudent(Student stu);&#125;对应的映射文件StudentMapper.xml：123456789101112131415161718192021222324&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="mrbird.leanote.mapper.StudentMapper"&gt; &lt;resultMap type="student" id="studentList"&gt; &lt;id column="id" property="id"/&gt; &lt;result column="cnname" property="cnName"/&gt; &lt;result column="sex" property="sex" typeHandler="org.apache.ibatis.type.EnumOrdinalTypeHandler"/&gt; &lt;result column="selfcard_no" property="selfCardNo"/&gt; &lt;result column="note" property="note"/&gt; &lt;/resultMap&gt; &lt;select id="getAllStudent" resultMap="studentList"&gt; &lt;![CDATA[select * from t_student]]&gt; &lt;/select&gt; &lt;insert id="createStudent" parameterType="student"&gt; &lt;![CDATA[ insert into t_student(cnname,sex,selfcard_no,note) values ( #&#123;cnName&#125;, #&#123;sex,typeHandler=org.apache.ibatis.type.EnumOrdinalTypeHandler&#125;, #&#123;selfCardNo&#125;,#&#123;note&#125;) ]]&gt; &lt;/insert&gt;&lt;/mapper&gt;测试createStudent方法：12345678910...StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);Student stu = new Student();stu.setCnName("鸣人");stu.setSex(Sex.MALE);stu.setSelfCardNo(1L);stu.setNote("漩涡鸣人");studentMapper.createStudent(stu);sqlSession.commit();...查询数据库：1234567mysql&gt; select * from t_student;+----+--------+-----+-------------+----------+| id | cnname | sex | selfcard_no | note |+----+--------+-----+-------------+----------+| 1 | 鸣人 | 0 | 1 | 漩涡鸣人 |+----+--------+-----+-------------+----------+1 row in set (0.00 sec)可见EnumOrdinalTypeHandler已经将MALE转换为了MALE的下标了。测试getAllStudent方法：1234567...StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);List&lt;Student&gt; students = studentMapper.getAllStudent();for(Student stu : students)&#123; System.out.println(stu.getCnName()+"性别："+stu.getSex());&#125;...控制台输出：1鸣人性别：MALEEnumTypeHandler为了演示EnumTypeHandler，我们需要把sex字段类型改为VARCHAR：1alter table t_student modify column sex VARCHAR(20);修改映射文件中的typeHandler：123456789101112131415161718192021222324&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;mapper namespace="mrbird.leanote.mapper.StudentMapper"&gt; &lt;resultMap type="student" id="studentList"&gt; &lt;id column="id" property="id"/&gt; &lt;result column="cnname" property="cnName"/&gt; &lt;result column="sex" property="sex" typeHandler="org.apache.ibatis.type.EnumTypeHandler"/&gt; &lt;result column="selfcard_no" property="selfCardNo"/&gt; &lt;result column="note" property="note"/&gt; &lt;/resultMap&gt; &lt;select id="getAllStudent" resultMap="studentList"&gt; &lt;![CDATA[select * from t_student]]&gt; &lt;/select&gt; &lt;insert id="createStudent" parameterType="student"&gt; &lt;![CDATA[ insert into t_student(cnname,sex,selfcard_no,note) values ( #&#123;cnName&#125;, #&#123;sex,typeHandler=org.apache.ibatis.type.EnumTypeHandler&#125;, #&#123;selfCardNo&#125;,#&#123;note&#125;) ]]&gt; &lt;/insert&gt;&lt;/mapper&gt;测试createStudent方法：12345678910...StudentMapper studentMapper = sqlSession.getMapper(StudentMapper.class);Student stu = new Student();stu.setCnName("雏田");stu.setSex(Sex.FEMALE);stu.setSelfCardNo(2L);stu.setNote("日向雏田");studentMapper.createStudent(stu);sqlSession.commit();...查询数据库：1234567mysql&gt; select * from t_student where selfcard_no = '2';+----+--------+--------+-------------+----------+| id | cnname | sex | selfcard_no | note |+----+--------+--------+-------------+----------+| 2 | 雏田 | FEMALE | 2 | 日向雏田 |+----+--------+--------+-------------+----------+1 row in set (0.00 sec)可见EnumTypeHandler保存的是枚举字符串。《深入浅出MyBatis技术原理与实战》读书笔记]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis配置数据库]]></title>
    <url>%2Fblog%2FMyBatis%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93.html</url>
    <content type="text"><![CDATA[xml文件配置直接在mybatis-config.xml文件中配置：123456&lt;dataSource type="POOLED"&gt; &lt;property name="driver" value="com.mysql.jdbc.Driver" /&gt; &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatis"/&gt; &lt;property name="username" value="root" /&gt; &lt;property name="password" value="6742530" /&gt; &lt;/dataSource&gt;properties配置文件为了方便日后维护修改，我们用properties配置文件来配置数据库属性：db.properties：1234driver:com.mysql.jdbc.Driverurl:jdbc:mysql://localhost:3306/mybatisusername:rootpassword:123456在mybatis-config.xml文件中引入：1234567&lt;properties resource="db.properties"/&gt;&lt;dataSource type="POOLED"&gt; &lt;property name="driver" value="$&#123;driver&#125;" /&gt; &lt;property name="url" value="$&#123;url&#125;"/&gt; &lt;property name="username" value="$&#123;username&#125;" /&gt; &lt;property name="password" value="$&#123;password&#125;" /&gt; &lt;/dataSource&gt;参数传递假如要对db.properties文件中的用户名和密码进行加密，那我们则需要在生成SqlSessionFactory的时候对用户名和密码解密（假设解密方法为decode()）：123456789101112131415161718192021222324252627282930313233343536373839404142434445public class SqlSessionFactoryUtil &#123; InputStream cfgStream = null; Reader cfgReader = null; InputStream proStream = null; Reader proReader = null; Properties properties = null; private static SqlSessionFactory sqlSessionFactory = null; //类线程锁 private static final Class CLASS_LOCK = SqlSessionFactoryUtil.class; //私有化构造函数 private SqlSessionFactoryUtil()&#123;&#125; //构建SqlSessionFactory public static SqlSessionFactory initSqlSessionFactory()&#123; try&#123; //读入配置文件流 cfgStream = Resources.getResourceAsStream("mybatis-config.xml"); cfgReader = new InputStreamReader(cfgStream); //读入属性文件 proStream = Resources.getResourceAsStream(db.properties); proReader = new InputStreamReader(proStream); properties = new Properties(); properties.load(proReader); properties.setProperty("username", decode(properties.getProperty("username"))); properties.setProperty("password", decode(properties.getProperty("password"))); &#125;catch(IOException e)&#123; e.printStackTrace(); &#125; synchronized (CLASS_LOCK) &#123; if(sqlSessionFactory == null)&#123; sqlSessionFactory = new SqlSessionFactoryBuilder().build(cfgStream); &#125; &#125; return sqlSessionFactory; &#125; //创建SqlSession public static SqlSession openSqlSession()&#123; if(sqlSessionFactory == null)&#123; initSqlSessionFactory(); &#125; return sqlSessionFactory.openSession(); &#125;&#125;environments配置环境1234567891011121314&lt;environments default="development"&gt; &lt;environment id="development"&gt; &lt;!-- 采用JDBC事务管理 --&gt; &lt;transactionManager type="JDBC"&gt; &lt;property name="autoCommit" value="false"/&gt; &lt;/transactionManager&gt; &lt;dataSource type="POOLED"&gt; &lt;property name="driver" value="com.mysql.jdbc.Driver" /&gt; &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatis"/&gt; &lt;property name="username" value="root" /&gt; &lt;property name="password" value="6742530" /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt;default属性表明默认选用哪个数据库。id属性为一个数据库配置的标识，可以同时配置多个数据库。dataSource的type属性可选非连接池UNPOOLED，连接池POOLED和JNDI《深入浅出MyBatis技术原理与实战》读书笔记]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis Guide]]></title>
    <url>%2Fblog%2FMyBatis-Guide.html</url>
    <content type="text"><![CDATA[准备工作创建表t_role：123456create table T_ROLE( id INT(20) not null auto_increment COMMENT '编号', role_name VARCHAR(60) not null comment '角色名称', note varchar(1024) comment '备注', PRIMARY KEY (id));添加MyBatis jar包和mySql连接驱动：MyBatis-jareclipse文件路径：各文件说明：文件作用MyBatisMain.java运行MyBatis程序的入口，包含main方法RoleMapper.java映射器RoleMapper.xml映射器配置文件Role.javaPOJOSqlSessionFactoryUtil.java构建SqlSessionFactory，并创建SqlSessionmybatis-config.xmlMyBatis配置配置mybatis-config.xml1234567891011121314151617181920212223242526272829&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt; &lt;configuration&gt; &lt;typeAliases&gt; &lt;!--给实体类起一个别名 role --&gt; &lt;typeAlias type="mrbird.leanote.pojo.Role" alias="role" /&gt; &lt;/typeAliases&gt; &lt;!--数据源配置 --&gt; &lt;environments default="development"&gt; &lt;environment id="development"&gt; &lt;!-- 采用JDBC事务管理 --&gt; &lt;transactionManager type="JDBC"&gt; &lt;property name="autoCommit" value="false"/&gt; &lt;/transactionManager&gt; &lt;dataSource type="POOLED"&gt; &lt;property name="driver" value="com.mysql.jdbc.Driver" /&gt; &lt;property name="url" value="jdbc:mysql://localhost:3306/mybatis"/&gt; &lt;property name="username" value="root" /&gt; &lt;property name="password" value="6742530" /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;!--RoleMapper.xml装载进来 同等于把'dao'的实现装载进来 --&gt; &lt;mapper resource="mrbird/leanote/mapper/RoleMapper.xml" /&gt; &lt;/mappers&gt; &lt;/configuration&gt;构建SqlSessionFactory利用mybatis-config.xml完成SqlSessionFactory的构建，并创建SqlSession。采用单例的形式构建SqlSessionFactory。123456789101112131415161718192021222324252627282930313233343536373839package mrbird.leanote.util; import java.io.IOException;import java.io.InputStream;import org.apache.ibatis.io.Resources;import org.apache.ibatis.session.SqlSession;import org.apache.ibatis.session.SqlSessionFactory;import org.apache.ibatis.session.SqlSessionFactoryBuilder; public class SqlSessionFactoryUtil &#123; private static SqlSessionFactory sqlSessionFactory = null; //类线程锁 private static final Class CLASS_LOCK = SqlSessionFactoryUtil.class; //私有化构造函数 private SqlSessionFactoryUtil()&#123;&#125; //构建SqlSessionFactory public static SqlSessionFactory initSqlSessionFactory()&#123; String resource = "mybatis-config.xml"; InputStream in = null; try &#123; in = Resources.getResourceAsStream(resource); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; synchronized (CLASS_LOCK) &#123; if(sqlSessionFactory == null)&#123; sqlSessionFactory = new SqlSessionFactoryBuilder().build(in); &#125; &#125; return sqlSessionFactory; &#125; //创建SqlSession public static SqlSession openSqlSession()&#123; if(sqlSessionFactory == null)&#123; initSqlSessionFactory(); &#125; return sqlSessionFactory.openSession(); &#125;&#125;POJO创建一个与库表对应的POJO：12345678910111213141516171819202122232425package mrbird.leanote.pojo; public class Role &#123; private Long id; private String roleName; private String note; public Long getId() &#123; return id; &#125; public void setId(Long id) &#123; this.id = id; &#125; public String getRoleName() &#123; return roleName; &#125; public void setRoleName(String roleName) &#123; this.roleName = roleName; &#125; public String getNote() &#123; return note; &#125; public void setNote(String note) &#123; this.note = note; &#125; &#125;接口与映射文件新建一个RoleMapper接口，包含简单的CRUD抽象方法：123456789package mrbird.leanote.mapper; import mrbird.leanote.pojo.Role; public interface RoleMapper &#123; public Role getRole(Long id); public int deleteRole(Long id); public int createRole(Role role);&#125;编写RoleMapper.xml映射文件，让其自动映射RoleMapper interface：1234567891011121314151617181920212223&lt;?xml version="1.0" encoding="UTF-8" ?&gt; &lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; &lt;!--和接口路径和名称保持一致，MyBatis会自动帮我们找到这个 Mapper--&gt; &lt;mapper namespace="mrbird.leanote.mapper.RoleMapper"&gt; &lt;!-- id与接口方法名一致，参数类型与接口方法参数类型一致，返回值类型与接口方法一致 'role'为mybatis-config.xml中定义的别名 --&gt; &lt;select id="getRole" parameterType="long" resultType="role"&gt; &lt;![CDATA[ select id,role_name as roleName,note from t_role where id = #&#123;id&#125; ]]&gt; &lt;/select&gt; &lt;insert id="createRole" parameterType="role"&gt; &lt;![CDATA[ insert into t_role(role_name,note) values (#&#123;roleName&#125;,#&#123;note&#125;) ]]&gt; &lt;/insert&gt; &lt;delete id="deleteRole" parameterType="long"&gt; &lt;![CDATA[ delete from t_role where id = #&#123;id&#125; ]]&gt; &lt;/delete&gt;&lt;/mapper&gt;测试测试插入数据：12345678910111213141516171819202122232425262728package mrbird.leanote.mian; import mrbird.leanote.mapper.RoleMapper;import mrbird.leanote.pojo.Role;import mrbird.leanote.util.SqlSessionFactoryUtil;import org.apache.ibatis.session.SqlSession; public class MyBatisMain &#123; public static void main(String[] args) &#123; SqlSession sqlSession = null; try &#123; sqlSession = SqlSessionFactoryUtil.openSqlSession(); RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class); Role role = new Role(); role.setRoleName("mrbird"); role.setNote("the fun of code"); roleMapper.createRole(role); sqlSession.commit(); &#125; catch (Exception e) &#123; e.printStackTrace(); sqlSession.rollback(); &#125;finally&#123; if(sqlSession != null)&#123; sqlSession.close(); &#125; &#125; &#125;&#125;运行后查询数据库：1234567mysql&gt; select * from t_role;+----+-----------+-----------------+| id | role_name | note |+----+-----------+-----------------+| 1 | mrbird | the fun of code |+----+-----------+-----------------+1 row in set (0.00 sec)创建成功。测试删除：123456789101112131415161718public class MyBatisMain &#123; public static void main(String[] args) &#123; SqlSession sqlSession = null; try &#123; sqlSession = SqlSessionFactoryUtil.openSqlSession(); RoleMapper roleMapper = sqlSession.getMapper(RoleMapper.class); roleMapper.deleteRole(1L); sqlSession.commit(); &#125; catch (Exception e) &#123; e.printStackTrace(); sqlSession.rollback(); &#125;finally&#123; if(sqlSession != null)&#123; sqlSession.close(); &#125; &#125; &#125;&#125;运行后查询数据库：12mysql&gt; select * from t_role;Empty set (0.00 sec)删除成功。《深入浅出MyBatis技术原理与实战》读书笔记]]></content>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS 中的LHS和RHS]]></title>
    <url>%2Fblog%2FJS-%E4%B8%AD%E7%9A%84LHS%E5%92%8CRHS.html</url>
    <content type="text"><![CDATA[LHS和RHS的含义是”赋值操作符的左侧或右侧”，并不一定意味着就是“=赋值操作符的左侧或右侧“。赋值操作还有其他几种形式，因此在概念上最好将其理解为”赋值操作的目标是谁（LHS）“以及”谁是赋值操作的源头（RHS）“。比如下面这个例子：1234function foo(a)&#123; console.log(a);&#125;foo(2);最后一行foo(..)函数的调用需要对foo进行RHS引用，意味着去找到”foo的值，并把它给我“。代码中，隐式的 a = 2 操作进行了一次LHS查询，找到赋值操作的目标a——foo函数的形式参数。接下来对a进行RHS引用，并将得到的值传给console.log(..)。console.log(..)本身也需要对console进行一次RHS引用，查找是否有一个叫作log的方法。当LHS查询失败时，引擎会在全局作用域中创建该变量：12345function foo(a)&#123; b = a;&#125;foo(2);console.log(window.b); //2当RHS查询失败时，引擎会抛出ReferenceError异常：1234function foo()&#123; var b = a;&#125;foo();引擎抛出：Uncaught ReferenceError: a is not defined。《你不知道的JavaScript上卷》读书笔记]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ajax]]></title>
    <url>%2Fblog%2FAjax.html</url>
    <content type="text"><![CDATA[JavaScript AjaxXMLHttpRequest对象1234567891011function getXHR() &#123; //根据对象判断浏览器 if(window.XMLHttpRequest) &#123; //不是IE return new XMLHttpRequest(); &#125;else&#123; //IE return new ActiveXObject("Microsoft.XMLHttp"); &#125;&#125;var xhr = getXHR();get请求打开请求：1xhr.open("get", "example.php?name1=value1&amp;name2=value2", true);true表示发送异步请求。下面这个函数可以辅助向现有URL 的末尾添加查询字符串参数：12345function addURLParam(url, name, value) &#123; url += (url.indexOf("?") == -1 ? "?" : "&amp;"); url += encodeURIComponent(name) + "=" + encodeURIComponent(value); return url;&#125;addURLParam()函数接受三个参数：要添加参数的URL、参数的名称和参数的值。下面是使用这个函数来构建请求URL 的示例。12345678var url = "example.php";//添加参数url = addURLParam(url, "name", "Nicholas");url = addURLParam(url, "book", "Professional JavaScript");//初始化请求xhr.open("get", url, false);发送请求：1xhr.send(null);这里的send()方法接收一个参数，即要作为请求主体发送的数据。如果不需要通过请求主体发送数据，则必须传入null，因为这个参数对有些浏览器来说是必需的。调用send()之后，请求就会被分派到服务器。回调函数：XHR 对象的readyState 属性可取的值：0：未初始化。尚未调用open()方法。1：启动。已经调用open()方法，但尚未调用send()方法。2：发送。已经调用send()方法，但尚未接收到响应。3：接收。已经接收到部分响应数据。4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了。只要readyState 属性的值由一个值变成另一个值，都会触发一次readystatechange 事件。可以利用这个事件来检测每次状态变化后readyState 的值。123456789xhr.onreadystatechange = function()&#123;callback(xhr);&#125;;//回调函数function callback(xhr) &#123; //当请求结束且没报错时 if(xhr.readyState==4 &amp;&amp; xhr.status==200) &#123; var txt = xhr.responseText; console.log(txt); &#125;&#125; ​在收到响应后，响应的数据会自动填充XHR 对象的属性，相关的属性简介如下。responseText：作为响应主体被返回的文本。responseXML：如果响应的内容类型是”text/xml”或”application/xml”，这个属性中将保存包含着响应数据的XML DOM 文档。status：响应的HTTP 状态。statusText：HTTP 状态的说明。post请求12345678910xhr.open("post", "postexample.php", true);xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");//发送form表单数据var form = document.getElementById("form");xhr.send(serialize(form));//发送普通数据xhr.send("name = Nicholas");xhr.send("book = Professional JavaScript");jQuery Ajaxload()load() 方法通过 AJAX 请求从服务器加载数据，并把返回的数据放置到指定的元素中。语法：1load(url,data,function(response,status,xhr));参数描述url规定要将请求发送到哪个 URL。data可选。规定连同请求发送到服务器的数据。function(response,status,xhr)可选。规定当请求完成时运行的函数。额外的参数：response&amp;nbsp - 包含来自请求的结果数据status&amp;nbsp - 包含请求的状态（”success”, “notmodified”, “error”, “timeout” 或 “parsererror”）xhr&amp;nbsp - 包含 XMLHttpRequest 对象如在id为result的div中加载test.html页面：1$("#result").load("test.html");\$.get()和\$.post()$.get()方法使用 HTTP GET 请求从服务器加载数据。语法：1$.get(URL,data,function(data,status,xhr),dataType);参数：参数描述URL必需。规定您需要请求的 URL。data可选。规定连同请求发送到服务器的数据。function(data,status,xhr)可选。规定当请求成功时运行的函数。额外的参数：data&amp;nbsp - 包含来自请求的结果数据status&amp;nbsp - 包含请求的状态（”success”、”notmodified”、”error”、”timeout”、”parsererror”）xhr&amp;nbsp - 包含 XMLHttpRequest 对象dataType可选。规定预期的服务器响应的数据类型。默认地，jQuery 会智能判断。可能的类型：xml - 一个 XML 文档html - HTML 作为纯文本text - 纯文本字符串script - 以 JavaScript 运行响应，并以纯文本返回json - 以 JSON 运行响应，并以 JavaScript 对象返回jsonp - 使用 JSONP 加载一个 JSON 块，将添加一个 “?callback=?” 到 URL 来规定回调如：123456$.get("get.php",&#123; userName : $("#userName").val().trim(), content : $("#content").val().trim() &#125;,function(data)&#123; // do something&#125;,"json");$.post()和$.get()类似，区别在于$.post()可发送的数据量更大。\$.ajax()语法：1$.ajax(&#123;name:value, name:value, ... &#125;)下面的表格中列出了可能的名称/值：名称值/描述async布尔值，表示请求是否异步处理。默认是 true。beforeSend( xhr )发送请求前运行的函数。cache布尔值，表示浏览器是否缓存被请求页面。默认是 true。complete( xhr,status )请求完成时运行的函数（在请求成功或失败之后均调用，即在 success 和 error 函数之后）。contentType发送数据到服务器时所使用的内容类型。默认是：”application/x-www-form-urlencoded”。context为所有 AJAX 相关的回调函数规定 “this” 值。data规定要发送到服务器的数据。dataFilter( data , type )用于处理 XMLHttpRequest 原始响应数据的函数。dataType预期的服务器响应的数据类型。error( xhr,status,error )如果请求失败要运行的函数。global布尔值，规定是否为请求触发全局 AJAX 事件处理程序。默认是 true。ifModified布尔值，规定是否仅在最后一次请求以来响应发生改变时才请求成功。默认是 false。jsonp在一个 jsonp 中重写回调函数的字符串。jsonpCallback在一个 jsonp 中规定回调函数的名称。password规定在 HTTP 访问认证请求中使用的密码。processData布尔值，规定通过请求发送的数据是否转换为查询字符串。默认是 true。scriptCharset规定请求的字符集。success( result,status,xhr )当请求成功时运行的函数。timeout设置本地的请求超时时间（以毫秒计）。traditional布尔值，规定是否使用参数序列化的传统样式。type规定请求的类型（GET 或 POST）。url规定发送请求的 URL。默认是当前页面。username规定在 HTTP 访问认证请求中使用的用户名。xhr用于创建 XMLHttpRequest 对象的函数。]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BOM location]]></title>
    <url>%2Fblog%2FBOM-location.html</url>
    <content type="text"><![CDATA[使用location 对象可以通过很多方式来改变浏览器的位置。如：1location.assign("http://www.wrox.com");或：12window.location = "http://www.wrox.com";location.href = "http://www.wrox.com";另外，修改location 对象的其他属性也可以改变当前加载的页面。下面的例子展示了通过将hash、search、hostname、pathname 和port 属性设置为新值来改变URL。12345678910111213141516//假设初始URL 为http://www.wrox.com/WileyCDA/ //将URL 修改为"http://www.wrox.com/WileyCDA/#section1"location.hash = "#section1"; //将URL 修改为"http://www.wrox.com/WileyCDA/?q=javascript"location.search = "?q=javascript"; //将URL 修改为"http://www.yahoo.com/WileyCDA/"location.hostname = "www.yahoo.com"; //将URL 修改为"http://www.yahoo.com/mydir/"location.pathname = "mydir"; //将URL 修改为"http://www.yahoo.com:8080/WileyCDA/"location.port = 8080;使用location.replace(url)会导致浏览器位置改变，但不会在历史记录中生成新记录。”后退”按钮将不可点击。reload()：12location.reload(); //重新加载（有可能从缓存中加载）location.reload(true); //重新加载（从服务器重新加载）]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript Function类型]]></title>
    <url>%2Fblog%2FJavaScript-Function%E7%B1%BB%E5%9E%8B.html</url>
    <content type="text"><![CDATA[函数声明与函数表达式函数声明长这样：123function sum(num1, num2)&#123; return num1 + num2;&#125;函数表达式长这样：123var sum = function(num1, num2)&#123; return num1 + num2;&#125;;区别：解析器在向执行环境中加载数据时，对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问）；至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解释执行。如下面语句不报错：1234alert(sum(10,10));function sum(num1, num2)&#123; return num1 + num2;&#125;而下面语句报错：1234alert(sum(10,10));var sum = function(num1, num2)&#123; return num1 + num2;&#125;;除了什么时候可以通过变量访问函数这一点区别之外，函数声明与函数表达式的语法其实是等价的。作为值的函数因为ECMAScript 中的函数名本身就是变量，所以函数也可以作为值来使用。也就是说，不仅可以像传递参数一样把一个函数传递给另一个函数，而且可以将一个函数作为另一个函数的结果返回。如：12345678function callSomeFunction(someFunction, someArgument)&#123; return someFunction(someArgument);&#125;function add10(num)&#123; return num + 10;&#125;var result1 = callSomeFunction(add10, 10);alert(result1); //20函数内部属性arguments在函数体内可以通过arguments 对象来访问参数数组，从而获取传递给函数的每一个参数，比如定义一个计算任意个参数的和的函数：1234567function sum() &#123; var s = 0; for(var i=0;i&lt;arguments.length;i++) &#123; s += arguments[i]; &#125; return s;&#125;虽然arguments的主要用途是保存函数参数，但这个对象还有一个名叫callee的属性，该属性是一个指针，指向拥有这个arguments对象的函数。请看下面这个非常经典的阶乘函数。1234567function factorial(num)&#123; if (num &lt;=1) &#123; return 1; &#125; else &#123; return num * factorial(num-1) &#125;&#125;这个函数的执行与函数名factorial 紧紧耦合在了一起。为了消除这种紧密耦合的现象，可以像下面这样使用arguments.callee。1234567function factorial(num)&#123; if (num &lt;=1) &#123; return 1; &#125; else &#123; return num * arguments.callee(num-1) &#125;&#125;thisthis引用的是函数据以执行的环境对象——或者也可以说是this 值（当在网页的全局作用域中调用函数时，this 对象引用的就是window）。如：12345678window.color = "red";var o = &#123; color: "blue" &#125;;function sayColor()&#123; alert(this.color);&#125;sayColor(); //"red"o.sayColor = sayColor;o.sayColor(); //"blue"callerECMAScript 5 也规范化了另一个函数对象的属性：caller。这个属性中保存着调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，它的值为null。例如：1234567function outer()&#123; inner();&#125;function inner()&#123; alert(inner.caller);&#125;outer();以上代码会导致警告框中显示outer()函数的源代码。因为outer()调用了inner()，所以inner.caller 就指向outer()。属性和方法ECMAScript 中的函数是对象，因此函数也有属性和方法。每个函数都包含两个属性：length 和prototype。lengthlength属性表示函数希望接收的命名参数的个数，如下面的例子所示。123456789101112function sayName(name)&#123; alert(name);&#125;function sum(num1, num2)&#123; return num1 + num2;&#125;function sayHi()&#123; alert("hi");&#125;alert(sayName.length); //1alert(sum.length); //2alert(sayHi.length); //0prototype对于ECMAScript 中的引用类型而言，prototype是保存它们所有实例方法的真正所在。如：12345678910111213function Person()&#123;&#125;Person.prototype.name = "Nicholas";Person.prototype.age = 29;Person.prototype.job = "Software Engineer";Person.prototype.sayName = function()&#123; alert(this.name);&#125;;var person1 = new Person();person1.sayName(); //"Nicholas"var person2 = new Person();person2.sayName(); //"Nicholas"alert(person1.sayName == person2.sayName); //true可以通过isPrototypeOf()方法来确定一个对象是否是另一个对象的原型：12alert(Person.prototype.isPrototypeOf(person1)); //truealert(Person.prototype.isPrototypeOf(person2)); //true使用Object.getPrototypeOf()可以方便地取得一个对象的原型：12alert(Object.getPrototypeOf(person1) == Person.prototype); //truealert(Object.getPrototypeOf(person1).name); //"Nicholas"每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从对象实例本身开始。如果在实例中找到了具有给定名字的属性，则返回该属性的值；如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性。如果在原型对象中找到了这个属性，则返回该属性的值。虽然可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值。如果我们在实例中添加了一个属性，而该属性与实例原型中的一个属性同名，那我们就在实例中创建该属性，该属性将会屏蔽原型中的那个属性。12345678910111213function Person()&#123;&#125;Person.prototype.name = "Nicholas";Person.prototype.age = 29;Person.prototype.job = "Software Engineer";Person.prototype.sayName = function()&#123; alert(this.name);&#125;;var person1 = new Person();var person2 = new Person();person1.name = "Greg";alert(person1.name); //"Greg"——来自实例alert(person2.name); //"Nicholas"——来自原型使用delete操作符则可以完全删除实例属性，从而让我们能够重新访问原型中的属性，如下所示。123456789101112131415function Person()&#123;&#125;Person.prototype.name = "Nicholas";Person.prototype.age = 29;Person.prototype.job = "Software Engineer";Person.prototype.sayName = function()&#123; alert(this.name);&#125;;var person1 = new Person();var person2 = new Person();person1.name = "Greg";alert(person1.name); //"Greg"——来自实例alert(person2.name); //"Nicholas"——来自原型delete person1.name;alert(person1.name); //"Nicholas"——来自原型使用hasOwnProperty()方法可以检测一个属性是存在于实例中，还是存在于原型中。这个方法（不要忘了它是从Object 继承来的）只在给定属性存在于对象实例中时，才会返回true。123456789101112131415161718192021function Person()&#123;&#125;Person.prototype.name = "Nicholas";Person.prototype.age = 29;Person.prototype.job = "Software Engineer";Person.prototype.sayName = function()&#123; alert(this.name);&#125;;var person1 = new Person();var person2 = new Person();alert(person1.hasOwnProperty("name")); //false person1.name = "Greg";alert(person1.name); //"Greg"——来自实例alert(person1.hasOwnProperty("name")); //truealert(person2.name); //"Nicholas"——来自原型alert(person2.hasOwnProperty("name")); //false delete person1.name;alert(person1.name); //"Nicholas"——来自原型alert(person1.hasOwnProperty("name")); //false在单独使用in操作符会在通过对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。看一看下面的例子。12345678910111213141516171819202122232425262728function Person()&#123;&#125;Person.prototype.name = "Nicholas";Person.prototype.age = 29;Person.prototype.job = "Software Engineer";Person.prototype.sayName = function()&#123; alert(this.name);&#125;; var person1 = new Person();var person2 = new Person(); alert(person1.hasOwnProperty("name")); //falsealert("name" in person1); //true person1.name = "Greg";alert(person1.name); //"Greg" ——来自实例alert(person1.hasOwnProperty("name")); //truealert("name" in person1); //true alert(person2.name); //"Nicholas" ——来自原型alert(person2.hasOwnProperty("name")); //falsealert("name" in person2); //true delete person1.name;alert(person1.name); //"Nicholas" ——来自原型alert(person1.hasOwnProperty("name")); //falsealert("name" in person1); //true要取得对象上所有可枚举的实例属性，可以使用ECMAScript 5 的Object.keys()方法。这个方法接收一个对象作为参数，返回一个包含所有可枚举属性的字符串数组。1234567891011121314151617function Person()&#123;&#125;Person.prototype.name = "Nicholas";Person.prototype.age = 29;Person.prototype.job = "Software Engineer";Person.prototype.sayName = function()&#123; alert(this.name);&#125;; var keys = Object.keys(Person.prototype);alert(keys); //"name,age,job,sayName" var p1 = new Person();p1.name = "Rob";p1.age = 31;var p1keys = Object.keys(p1);alert(p1keys); //"name,age"如果你想要得到所有实例属性，无论它是否可枚举，都可以使用Object.getOwnPropertyNames()方法。12345678var keys = Object.getOwnPropertyNames(Person.prototype);alert(keys); //"constructor,name,age,job,sayName" var p1 = new Person();p1.name = "Rob";p1.age = 31;var p1keys = Object.getOwnPropertyNames(p1);alert(p1keys); //"name,age"每个函数都包含两个非继承而来的方法：apply()和call()。apply()和call()这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this 对象的值。apply()方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组。其中，第二个参数可以是Array 的实例，也可以是arguments对象。例如：1234567891011function sum(num1, num2)&#123; return num1 + num2;&#125;function callSum1(num1, num2)&#123; return sum.apply(this, arguments); // 传入arguments 对象&#125;function callSum2(num1, num2)&#123; return sum.apply(this, [num1, num2]); // 传入数组&#125;alert(callSum1(10,10)); //20alert(callSum2(10,10)); //20在这里，this就相当于window。对于call()方法而言，第一个参数是this 值没有变化，变化的是其余参数都直接传递给函数。1234567function sum(num1, num2)&#123; return num1 + num2;&#125;function callSum(num1, num2)&#123; return sum.call(this, num1, num2);&#125;alert(callSum(10,10)); //20事实上，传递参数并非apply()和call()真正的用武之地；它们真正强大的地方是能够扩充函数赖以运行的作用域。12345678910window.color = "red";var o = &#123; color: "blue" &#125;;function sayColor()&#123; alert(this.color);&#125; sayColor(); //redsayColor.call(this); //redsayColor.call(window); //redsayColor.call(o); //blueECMAScript 5 还定义了一个方法：bind()。这个方法会创建一个函数的实例，其this 值会被绑定到传给bind()函数的值。例如：1234567window.color = "red";var o = &#123; color: "blue" &#125;;function sayColor()&#123; alert(this.color);&#125;var objectSayColor = sayColor.bind(o);objectSayColor(); //blue ​《JavaScript高级程序设计》读书笔记]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript CreateObject]]></title>
    <url>%2Fblog%2FJavaScript-CreateObject.html</url>
    <content type="text"><![CDATA[创建自定义类型的最常见方式，就是组合使用构造函数模式与原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。结果，每个实例都会有自己的一份实例属性的副本，但同时又共享着对方法的引用，最大限度地节省了内存。另外，这种混成模式还支持向构造函数传递参数。如：123456789101112131415161718function Person(name, age, job)&#123; this.name = name; this.age = age; this.job = job; this.friends = ["Shelby", "Court"];&#125;Person.prototype = &#123; constructor : Person, sayName : function()&#123; return this.name; &#125;&#125;var person1 = new Person("Nicholas", 29, "Software Engineer");var person2 = new Person("Greg", 27, "Doctor");alert(person1.friends); //"Shelby,Count"alert(person2.friends); //"Shelby,Count"alert(person1.friends === person2.friends); //falsealert(person1.sayName === person2.sayName); //true在这个例子中，实例属性都是在构造函数中定义的，而由所有实例共享的属性constructor 和方法sayName()则是在原型中定义的。而修改了person1.friends（向其中添加一个新字符串），并不会影响到person2.friends，因为它们分别引用了不同的数组。 这种构造函数与原型混成的模式，是目前在ECMAScript 中使用最广泛、认同度最高的一种创建自定义类型的方法。《JavaScript高级程序设计》读书笔记]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript Array类型]]></title>
    <url>%2Fblog%2FJavaScript-Array%E7%B1%BB%E5%9E%8B.html</url>
    <content type="text"><![CDATA[检测数组ECMAScript 5 新增了Array.isArray()方法。这个方法的目的是最终确定某个值到底是不是数组。123if (Array.isArray(value))&#123; //对数组执行某些操作&#125;转换方法所有对象都具有toLocaleString()、toString()和valueOf()方法。其中，调用数组的toString()方法会返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串。而 调用valueOf()返回的还是数组。1234var colors = ["red", "blue", "green"]; // 创建一个包含3 个字符串的数组alert(colors.toString()); // red,blue,greenalert(colors.valueOf()); // red,blue,greenalert(colors); // red,blue,green最后一行代码直接将数组传递给了alert()。由于alert()要接收字符串参数，所以它会在后台调用toString()方法，由此会得到与直接调toString()方法相同的结果。join()方法只接收一个参数，即用作分隔符的字符串，然后返回包含所有数组项的字符串。123var colors = ["red", "green", "blue"];alert(colors.join(",")); //red,green,bluealert(colors.join("||")); //red||green||blue栈方法栈是一种LIFO（Last-In-First-Out，后进先出）的数据结构，也就是最新添加的项最早被移除。而栈中项的插入（叫做推入）和移除（叫做弹出），只发生在一个位置——栈的顶部。ECMAScript 为数组专门提供了push()和pop()方法，以便实现类似栈的行为。push()方法可以接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度。而pop()方法则从数组末尾移除最后一项，减少数组的length值，然后返回移除的项。12345678var colors = new Array(); // 创建一个数组var count = colors.push("red", "green"); // 推入两项alert(count); //2count = colors.push("black"); // 推入另一项alert(count); //3var item = colors.pop(); // 取得最后一项alert(item); //"black"alert(colors.length); //2队列方法队列数据结构的访问规则是FIFO（First-In-First-Out， 先进先出）。队列在列表的末端添加项，从列表的前端移除项。shift()方法移除数组中的第一个项并返回该项，同时将数组长度减1。12345678var colors = new Array(); //创建一个数组var count = colors.push("red", "green"); //推入两项alert(count); //2count = colors.push("black"); //推入另一项alert(count); //3var item = colors.shift(); //取得第一项alert(item); //"red"alert(colors.length); //2ECMAScript 还为数组提供了一个unshift()方法。顾名思义，unshift()与shift()的用途相反：它能在数组前端添加任意个项并返回新数组的长度。12345var colors = new Array(); //创建一个数组var count = colors.unshift("red", "green"); //推入两项alert(count); //2count = colors.unshift("black"); //推入另一项alert(count); //3重排序方法数组中已经存在两个可以直接用来重排序的方法：reverse()和sort()。reverse()方法会反转数组项的顺序。123var values = [1, 2, 3, 4, 5];values.reverse();alert(values); //5,4,3,2,1sort()方法按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。为了实现排序，sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定如何排序。123var values = [0, 1, 5, 10, 15];values.sort();alert(values); //0,1,10,15,5sort()方法还可以接收一个比较函数作为参数，以便我们指定哪个值位于哪个值的前面。123456function compare(value1, value2)&#123; return value2 - value1;&#125;var values = [0, 1, 5, 10, 15];values.sort(compare);alert(values); // 15,10,5,1,0操作方法concat()方法可以基于当前数组中的所有项创建一个新数组。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给concat()方法传递参数的情况下，它只是复制当前数组并返回副本。如果传递给concat()方法的是一或多个数组，则该方法会将这些数组中的每一项都添加到结果数组中。如果传递的值不是数组，这些值就会被简单地添加到结果数组的末尾。1234var colors = ["red", "green", "blue"];var colors2 = colors.concat("yellow", ["black", "brown"]);alert(colors); //red,green,bluealert(colors2); //red,green,blue,yellow,black,brownslice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。12345var colors = ["red", "green", "blue", "yellow", "purple"];var colors2 = colors.slice(1);var colors3 = colors.slice(1,4);alert(colors2); //green,blue,yellow,purplealert(colors3); //green,blue,yellowsplice()方法：12345678910var colors = ["red", "green", "blue"];var removed = colors.splice(0,1); // 删除第一项alert(colors); // green,bluealert(removed); // red，返回的数组中只包含一项removed = colors.splice(1, 0, "yellow", "orange"); // 从位置1 开始插入两项alert(colors); // green,yellow,orange,bluealert(removed); // 返回的是一个空数组removed = colors.splice(1, 1, "red", "purple"); // 插入两项，删除一项alert(colors); // green,red,purple,orange,bluealert(removed); // yellow，返回的数组中只包含一项位置方法ECMAScript 5 为数组实例添加了两个位置方法：indexOf()和lastIndexOf()。这两个方法都接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中，indexOf()方法从数组的开头（位置0）开始向后查找，lastIndexOf()方法则从数组的末尾开始向前查找。没有找到返回-1。12345var numbers = [1,2,3,4,5,4,3,2,1];alert(numbers.indexOf(4)); //3alert(numbers.lastIndexOf(4)); //5alert(numbers.indexOf(4, 4)); //5alert(numbers.lastIndexOf(4, 4)); //3迭代方法every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。filter()：对数组中的每一项运行给定函数，返回该函数会返回true 的项组成的数组。forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。some()：对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。以上方法都不会修改数组中的包含的值。123456789var numbers = [1,2,3,4,5,4,3,2,1];var everyResult = numbers.every(function(item, index, array)&#123; return (item &gt; 2);&#125;);alert(everyResult); //falsevar someResult = numbers.some(function(item, index, array)&#123; return (item &gt; 2);&#125;);alert(someResult); //true以上代码调用了every()和some()，传入的函数只要给定项大于2 就会返回true。对于every()，它返回的是false，因为只有部分数组项符合条件。对于some()，结果就是true，因为至少有一项是大于2 的。filter()函数：12345var numbers = [1,2,3,4,5,4,3,2,1];var filterResult = numbers.filter(function(item, index, array)&#123; return (item &gt; 2);&#125;);alert(filterResult); //[3,4,5,4,3]map()也返回一个数组，而这个数组的每一项都是在原始数组中的对应项上运行传入函数的结果。例如，可以给数组中的每一项乘以2，然后返回这些乘积组成的数组：12345var numbers = [1,2,3,4,5,4,3,2,1];var mapResult = numbers.map(function(item, index, array)&#123; return item * 2;&#125;);alert(mapResult); //[2,4,6,8,10,8,6,4,2]forEach()用于迭代数组：1234var numbers = [1,2,3,4,5,4,3,2,1];numbers.forEach(function(item, index, array)&#123; //执行某些操作&#125;);归并方法使用reduce()方法可以执行求数组中所有值之和的操作，比如：12345var values = [1,2,3,4,5];var sum = values.reduce(function(prev, cur, index, array)&#123; return prev + cur;&#125;);alert(sum); //15第一次执行回调函数，prev 是1，cur 是2。第二次，prev 是3（1 加2 的结果），cur 是3（数组的第三项）。这个过程会持续到把数组中的每一项都访问一遍，最后返回结果。 reduceRight()的作用类似，只不过方向相反而已：12345var values = [1,2,3,4,5];var sum = values.reduceRight(function(prev, cur, index, array)&#123; return prev + cur;&#125;);alert(sum); //15在这个例子中，第一次执行回调函数，prev 是5，cur 是4。当然，最终结果相同，因为执行的都是简单相加的操作。使用reduce()还是reduceRight()，主要取决于要从哪头开始遍历数组。除此之外，它们完全相同。极值12var values = [1, 2, 3, 4, 5, 6, 7, 8];var max = Math.max.apply(Math, values); //8《JavaScript高级程序设计》读书笔记]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSP 标签文件]]></title>
    <url>%2Fblog%2FJSP-%E6%A0%87%E7%AD%BE%E6%96%87%E4%BB%B6.html</url>
    <content type="text"><![CDATA[定制JSP标签可以实现一些JSTL和EL没有提供的功能，基本步骤就是编写标签处理器然后注册标签。从JSP2.0以后，可以直接编写标签文件（.tag）来代替定制JSP标签。相比定制JSP标签，标签文件无需编写Java代码，无需注册标签，只需要在tag文件中写代码逻辑即可。一个简单的例子：在WEB-INF下创建tags文件夹，然后在里面新建一个firstTag.tag文件：123456&lt;%@tag import="java.util.Date"%&gt;&lt;%@tag import="java.text.SimpleDateFormat"%&gt;&lt;% SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); out.print(sdf.format(new Date()));%&gt;然后在firstTagTest.jsp页面中使用它：12&lt;%@ taglib prefix="mt" tagdir="/WEB-INF/tags"%&gt;Today is:&lt;mt:firstTag/&gt;部署到Tomcat中，启动服务，访问该jsp，页面显示：That’ all.标签文件中的隐式对象：对象类型requestjavax.servlet.http.HttpServletRequestresponsejavax.servlet.http.HttpServletResponseoutjavax.servlet.jsp.JspWritersessionjavax.servlet.http.HttpSessionapplicationjavax.servlet.ServletContextconfigjavax.servlet.ServletConfigjspContextjavax.servlet.jsp.JspContext和Jsp的隐式对象类似。标签文件指令tag指令tag指令常用属性：属性描述display-name通过XML工具显示的简称，默认为标签名body-content标签主体内容的信息，可以为empty，tagdependent或scriptless（默认）import导入Java类型pageEncoding指定编码isELIgnoreds是否使用EL表达式include指令该指令可以引入静态文件（HTML文件）或动态文件（另一个标签文件）。如有静态HTML文件included.html：123456789101112131415161718192021222324252627282930313233343536&lt;table border=1&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td style="text-align: center;"&gt;&lt;strong&gt;object&lt;/strong&gt;&lt;/td&gt; &lt;td style="text-align: center;"&gt;&lt;strong&gt;type&lt;/strong&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;request&lt;/td&gt; &lt;td&gt;javax.servlet.http.HttpServletRequest&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;response&lt;/td&gt; &lt;td&gt;javax.servlet.http.HttpServletResponse&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;out&lt;/td&gt; &lt;td&gt;javax.servlet.jsp.JspWriter&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;session&lt;/td&gt; &lt;td&gt;javax.servlet.http.HttpSession&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;application&lt;/td&gt; &lt;td&gt;javax.servlet.ServletContext&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;config&lt;/td&gt; &lt;td&gt;javax.servlet.ServletConfig&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;jspContext&lt;/td&gt; &lt;td&gt;javax.servlet.jsp.JspContext&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;included.tag文件：1234&lt;%@tag pageEncoding="utf-8" %&gt;&lt;% out.print("和Jsp的隐式对象类似。");%&gt;在include.tag标签中引用included.html和included.tag：1234&lt;%@tag pageEncoding="utf-8"%&gt;标签文件中的隐式对象：&lt;/br&gt;&lt;/br&gt;&lt;%@include file="/WEB-INF/tags/included.html"%&gt;&lt;/br&gt;&lt;%@include file="/WEB-INF/tags/included.tag"%&gt;在jsp页面中测试：123&lt;%@taglib prefix="mt" tagdir="/WEB-INF/tags" %&gt;&lt;%@page pageEncoding="utf-8" %&gt;&lt;mt:include/&gt;启动访问，页面显示：taglib指令该指令的作用就是在一个标签文件中使用另外一个标签，如现有taglibDemo.tag：12&lt;%@ taglib prefix="mt" tagdir="/WEB-INF/tags" %&gt;Today's date : &lt;mt:firstTag/&gt;该标签调用了第一个例子中创建的firstTag标签。attribute指令该指令在标签中使用属性，attribute常用的属性有：属性描述name属性名required是否式必须的，默认为falsetype&nbsp;&nbsp;&nbsp;&nbsp;类型，默认为String编写一个时间格式化标签formatDate.tag：1234567&lt;%@tag import="java.util.Date"%&gt;&lt;%@tag import="java.text.SimpleDateFormat"%&gt;&lt;%@ attribute name="fmt" required="true"%&gt;&lt;% SimpleDateFormat sdf = new SimpleDateFormat(fmt); out.print(sdf.format(new Date()));%&gt;jsp中测试：123&lt;%@ taglib prefix="mt" tagdir="/WEB-INF/tags" %&gt;&lt;mt:dateFormat fmt="yyyy-MM-dd HH:mm:ss"/&gt;&lt;/br&gt;&lt;mt:dateFormat fmt="yyyyMMdd"/&gt;页面显示：variable指令用于定义标签文件的变量，常用的属性有：属性描述name-given变量名scope范围description描述如下标签，它有两个变量：longDate和shortDate：123456789101112&lt;%@tag import="java.text.SimpleDateFormat"%&gt;&lt;%@tag import="java.util.Date"%&gt;&lt;%@ variable name-given="longDate" %&gt;&lt;%@ variable name-given="shortDate" %&gt;&lt;% Date date = new Date(); SimpleDateFormat longFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss"); SimpleDateFormat shortFormat = new SimpleDateFormat("yyyy-MM-dd"); jspContext.setAttribute("longDate", longFormat.format(date)); jspContext.setAttribute("shortDate", shortFormat.format(date));%&gt;&lt;jsp:doBody/&gt;jsp页面引用：12345678&lt;%@ taglib prefix="tags" tagdir="/WEB-INF/tags" %&gt;Today's date:&lt;br/&gt;&lt;tags:varDemo&gt;In long format: $&#123;longDate&#125;&lt;br/&gt;In short format: $&#123;shortDate&#125;&lt;/tags:varDemo&gt;测试，页面显示：]]></content>
      <tags>
        <tag>servlet&amp;jsp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IO Stream]]></title>
    <url>%2Fblog%2FIO-Stream.html</url>
    <content type="text"><![CDATA[我们编写的程序除了自身会定义一些数据信息外，经常还会引用外界的数据，或是将自身的数据发送到外界。比如，我们编写的程序想读取一个文本文件，又或者我们想将程序中的某些数据写入到一个文件中。这时我们就要使用输入与输出。什么是输入(read):输入是一个从外界进入到程序的方向，通常我们需要“读取”外界的数据时，使用输入。所以输入是用来读取数据的。什么是输出(write):输出是一个从程序发送到外界的方向，通常我们需要”写出”数据到外界时，使用输出。所以输出是用来写出数据的。InputStream是所有字节输入流的父类，其定义了基础的读取方法，常用的方法如下:1.int read():读取一个字节，以int形式返回，该int值的”低八位”有效，若返回值为-1则表示EOF。2.int read(byte[] d):尝试最多读取给定数组的length个字节并存入该数组，返回值为实际读取到的字节量。OutputStream是所有字节输出流的父类，其定义了基础的写出方法，常用的方法如下:1.void write(int d):写出一个字节,写的是给定的int的”低八位”。2.void write(byte[] d):将给定的字节数组中的所有字节全部写出。文件流FileOutputStreamjava.io.FileOutputStream：文件字节输出流，用于将数据写入到文件中的流，该流是一个低级流。低级流特点:数据的来源和去向是明确的，真实负责“搬运”数据的流。123456789101112131415161718192021222324public class FOSDemo &#123; public static void main(String[] args) throws IOException &#123; /* * 向文件中写出数据 * 一个参数的构造方法: * FileOutputStream(String path) * FileOutputStream(File file) * 创建出来的文件输出流是覆盖写操作，若操作的 * 文件中有数据，会先将数据清除，重写本次写出的数据。 * * 若希望追加写操作，则需要传入第二个参数 * 是一个boolean值，为true即可。 * FileOutputStream(File file,boolean append) * FileOutputStream(String path,boolean append) */ // File file=new File("fos.txt"); // FileOutputStream fos = new FileOutputStream(file,true); FileOutputStream fos = new FileOutputStream("fos.txt",true); String str = "一步两步,一步一步像爪牙,像魔鬼的步伐!"; fos.write(str.getBytes("UTF-8")); fos.close(); &#125;&#125;FileInputStreamjava.io.FileInputStream：低级流，可以从文件中读取字节（操作过程和RandomAccessFile相似）。1234567891011public class FISDemo &#123; public static void main(String[] args) throws IOException &#123; FileInputStream fis = new FileInputStream("fos.txt"); byte[] data = new byte[1024]; int len = fis.read(data); String str = new String(data,0,len,"UTF-8"); System.out.println(str);//一步两步,一步一步像爪牙,像魔鬼的步伐! fis.close(); &#125;&#125;复制使用文件流的形式复制文件。1234567891011121314151617 public class CopyDemo1 &#123; public static void main(String[] args) throws IOException &#123; FileInputStream fis = new FileInputStream("fos.txt"); FileOutputStream fos = new FileOutputStream("fos_copy.txt"); byte[] data = new byte[1024*10]; int len = -1; while((len = fis.read(data))!=-1)&#123; fos.write(data,0,len); &#125; System.out.println("复制完毕"); fis.close(); fos.close(); &#125;&#125;缓冲流在读取数据时若以字节为单位读取数据，会导致读取次数过于频繁从而大大的降低读取效率。为此我们可以通过提高一次读取的字节数量减少读写次数来提高读取的效率。1.BIS:是一个处理流，该流为我们提供了缓冲功能。2.BOS:与缓冲输入流相似，在向硬件设备做写出操作时，增大写出次数无疑也会降低写出效率，为此我们可以使用缓冲输出流来一次性批量写出若干数据减少写出次数来提高写 出效率。3.BufferedInputStream是缓冲字节输入流。其内部维护着一个缓冲区(字节数组)，使用该流在读取一个字节时，该流会尽可能多的一次性读取若干字节并存入缓冲区，然后逐一的将字节返回，直到缓冲区中的数据被全部读取完毕，会再次读取若干字节从而反复。这样就减少了读取的次数，从而提高了读取效率。4.BufferedOutputStream缓冲输出流内部也维护着一个缓冲区，每当我们向该流写数据时，都会先将数据存入缓冲区，当缓冲区已满时，缓冲流会将数据一次性全部写出。BIS和BOSBufferedInputStream与BufferedOutputStream(BIS和BOS):缓冲字节输入流，缓冲字节输出流.这是一对高级流，作用是可以提高读写效率.（作用类似于字节数组）。12345678910111213141516171819202122public class CopyDemo2 &#123; public static void main(String[] args) throws IOException &#123; FileInputStream fis = new FileInputStream("1.mp4"); BufferedInputStream bis = new BufferedInputStream(fis); FileOutputStream fos = new FileOutputStream("1_copy2.mp4"); BufferedOutputStream bos = new BufferedOutputStream(fos); int d = -1; while((d=bis.read())!=-1)&#123; bos.write(d); &#125; System.out.println("复制完毕!"); /* * 关闭流的时候，只需要关闭最外层的高级流 * 即可。因为高级流在关闭自身前会先将其处理 * 的流关闭。 */ bis.close(); bos.close(); &#125;&#125;flushvoid flush()，缓冲流都提供了flush的实现。作用是强制将现有缓冲数组中的数据一次性写出。避免了因缓冲数组中数据不够而导致文件内容为空的问题。频繁调用该方法会提高写出次数从而降低写出效率，但是当我们需要有写出数据即时性的时候就要使用。12345678910111213public class BosDemo &#123; public static void main(String[] args) throws IOException &#123; FileOutputStream fos = new FileOutputStream("bos.txt"); BufferedOutputStream bos = new BufferedOutputStream(fos); String str = "我爱北京天安门"; byte[] data = str.getBytes(); bos.write(data); // bos.flush(); bos.close();//close内部也有flush()方法. &#125;&#125;对象流对象是存在于内存中的。有时候我们需要将对象保存到硬盘上，又有时我们需要将对象传输到另一台计算机上等等这样的操作。这时我们需要将对象转换为一个字节序列，而这个过程就称为对象序列化。相反，我们有这样一个字节序列需要将其转换为对应的对象，这个过程就称为对象的反序列化。1.java.io.ObjectOutputStream：高级流，功能是将给定的一个对象转换为一组字节，然后通过其处理的流将字节写出。2.java.io.ObjectInputStream：高级流，可以进行对象的反序列化。将 一组字节还原回对象，前提是这一组字节必须是由ObjectOutputStream将一个对象序列化后的字节读写对象一般用于:保存现有对象到硬盘上；在网络中传输对象。以下Person类用于测试对象流读写对象：123456789101112131415161718192021public class Person implements Serializable&#123; private String name; private int age; private String gender; private List&lt;String&gt; otherInfo; public Person()&#123; &#125; public Person(String name, int age, String gender, List&lt;String&gt; otherInfo) &#123; super(); this.name = name; this.age = age; this.gender = gender; this.otherInfo = otherInfo; &#125; // get,set略 public String toString()&#123; return name+","+age+","+gender+","+otherInfo; &#125;&#125;对象→字节1234567891011121314151617181920212223242526public class OOSDemo &#123; public static void main(String[] args) throws IOException &#123; FileOutputStream fos = new FileOutputStream("person.obj"); ObjectOutputStream oos = new ObjectOutputStream(fos); Person p = new Person(); p.setName("路飞"); p.setAge(18); p.setGender("男"); List&lt;String&gt; otherInfo = new ArrayList&lt;String&gt;(); otherInfo.add("蒙奇·D·路飞"); otherInfo.add("要成为海贼王的男人"); otherInfo.add("积极乐观"); p.setOtherInfo(otherInfo); /* * void writeObject(Object obj) * 该方法会将给定的对象转换为一组字节，然后写出 * * 序列化:将一个数据结构转换为一组字节的过程 * 持久化:将内存中的数据写入硬盘长久保存的过程 */ oos.writeObject(p); oos.close(); &#125;&#125;字节→对象123456789101112131415public class OISDemo &#123; public static void main(String[] args) throws IOException, ClassNotFoundException &#123; FileInputStream fis = new FileInputStream("person.obj"); ObjectInputStream ois = new ObjectInputStream(fis); /* * Object readObject() * 该方法会读取若干字节，然后将其反序列化回对象。 * 并以Object形式返回，需要自己强制类型转换 */ Person p = (Person)ois.readObject(); System.out.println(p); //路飞,18,男,[蒙奇·D·路飞, 要成为海贼王的男人, 积极乐观] ois.close(); &#125;&#125;字符流Reader是所有字符输入流的父类，而Writer是所有字符输出流的父类。字符流是以字符(char)为单位读写数据的。一次处理一个unicode。字符流都是高级流，其底层都是依靠字节流进行读写数据的，所以底层仍然是基于字节读写数据的。Reader的常用方法:1.int read()：读取一个字符，返回的int”值低16”位有效。2.int read(char[] chs)：从该流中读取一个字符数组length个字符并存入该数组，返回值为实际读取到的字符量。Writer的常用方法:1.void write(int c)：写出一个字符,写出给定int值”低16”位表示的字符。2.void write(char[] chs)：将给定字符数组中所有字符写出。3.void write(String str)：给定的字符串写出。4.void write(char[] chs,int offset,int len)：将给定的字符数组中从offset处开始连续的len个字符写出。WriterWriter字符输出流，特点:以字符为单位写出数据。OutputStreamWriter:字符流的一个常用实现类。特点是可以按照指定的字符集将给定的字符串转换为对应的字节后写出。1234567891011121314151617public class OSWDemo &#123; public static void main(String[] args) throws IOException &#123; FileOutputStream fos = new FileOutputStream("osw.txt"); /* * 常用构造方法: * OutputStreamWriter(OutputStream out) * 按照系统默认字符集将字符串转换为字节后写出 * * OutputStreamWriter(OutputStream out,String charsetName) * 按照给定的字符集将字符串转换为字节后写出 */ OutputStreamWriter osw = new OutputStreamWriter(fos,"UTF-8"); osw.write("我爱北京天安门"); osw.write("天安门上太阳升"); osw.close(); &#125;&#125;ReaderReader字符输入流 特点:以字符为单位读取数据InputStreamReader是其常用实现类，作用是可以按照指定的字符集读取字符。123456789101112public class ISRDemo &#123; public static void main(String[] args) throws IOException &#123; FileInputStream fis = new FileInputStream("osw.txt"); InputStreamReader isr = new InputStreamReader(fis,"UTF-8"); int d = -1; while((d=isr.read())!=-1)&#123; System.out.print((char)d); &#125; isr.close(); &#125;&#125;转码转码：比如将UTF-8编码的文本文件转换为GBK编码的文本文件原理:使用UTF-8编码将每一个字符读取出来，再以GBK编码将字符写入另一个文件即可。123456789101112131415161718public class ChangeCharsetDemo &#123; public static void main(String[] args) throws IOException &#123; FileInputStream fis = new FileInputStream("osw.txt"); InputStreamReader isr = new InputStreamReader(fis,"UTF-8"); FileOutputStream fos= new FileOutputStream("osw_gbk.txt"); OutputStreamWriter osw = new OutputStreamWriter(fos,"GBK"); char[] data = new char[1024*5]; int len = -1; while((len = isr.read(data))!=-1)&#123; osw.write(data,0,len); &#125; System.out.println("转码完毕!"); osw.close(); isr.close(); &#125;&#125;PrintWriter缓冲字符输出流，特点是可以以行为单位写出字符串并且该流还具备自动行刷新功能。传统的缓冲字符输出流是BufferedWriter.由于PrintWriter在创建的时候内部使用了该流，并且PrintWriter还具有自动行刷新，所以比较常用。PrintWriter提供了若干构造方法，可以方便快速创建。123456789101112131415public class PWDemo &#123; public static void main(String[] args) throws IOException &#123; /* * PrintWriter可以直接创建基于文件的写操作: * PrintWriter(File file) * PrintWriter(String path) */ // File file=new File("pw.txt"); // PrintWriter pw = new PrintWriter(file,"UTF-8"); PrintWriter pw = new PrintWriter("pw.txt","UTF-8"); pw.println("我爱北京天安门"); pw.println("天安门上太阳升"); pw.close(); &#125;&#125;PrintWriter处理其他流的形式：1234567891011121314151617public class PWDemo2 &#123; public static void main(String[] args) throws IOException &#123; /* * PrintWriter提供了用于处理其他流的构造方法， * 既可以处理字符流，也可以处理字节流。 */ FileOutputStream fos = new FileOutputStream("pw2.txt"); /* * 若要按照指定字符集写出，需要中间再创建一个 * OSW来负责转字符集的操作。 */ OutputStreamWriter osw = new OutputStreamWriter(fos,"UTF-8"); PrintWriter pw = new PrintWriter(osw); pw.println("随便啦"); pw.close(); &#125;&#125;BufferedReaderjava.io.BufferedReader：缓冲字符输入流 特点:以行为单位读取字符串。1234567891011121314151617181920212223public class BRDemo &#123; public static void main(String[] args) throws IOException &#123; FileInputStream fis= new FileInputStream( "src" + File.separator + "IO" + File.separator + "BRDemo.java"); InputStreamReader isr = new InputStreamReader(fis); BufferedReader br = new BufferedReader(isr); /* * String readLine() * BufferedReader提供的该方法会读取若干字符，直到读取到 * 换行符为止，然后将换行符之前读取的这若干字符组成一个 * 字符串返回。需要注意，返回的字符串中是不包含换行符的！ * 若返回值为null,说明读取到文件末尾了。 */ String line = null; while((line = br.readLine())!=null)&#123; System.out.println(line); &#125; br.close(); &#125;&#125;]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java文件操作]]></title>
    <url>%2Fblog%2FJava%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C.html</url>
    <content type="text"><![CDATA[java.io.File：File的每一个实例用来表示硬盘上的一个文件或目录，我们通过File可以:1.访问一个文件或目录的属性信息，文件名，大小，修改日期，访问权限等。2.可以创建文件，删除文件，创建目录，删除目录。3.可以访问目录中的所有子项但是不能访问文件数据。基本操作在项目根目录新建test.txt文件，内容为hello world。以下为基本操作。123456789101112131415161718192021222324252627282930313233343536public class FileDemo1 &#123; public static void main(String[] args) &#123; /* * 在eclipse中，"."当前目录，指的是项目的根目录 * separator相当于”/” */ File file = new File("."+File.separator+"test.txt"); //获取文件名 String name = file.getName(); /* * 获取文件大小。返回值为一个long值，表示占用的字节量 * 中文以及中文状态下的标点符号都占用两个字节 * 英文及英文状态下的标点符号占用一个字节 */ long length = file.length(); // 获取文件最后修改时间 long time = file.lastModified(); // 查看文件是否具有可运行，可读，可写的权限 file.canExecute(); file.canRead(); file.canWrite(); // 判断当前File对象表示的是否为一个文件 boolean isFile = file.isFile(); // 判断当前File对象表示的是否为一个目录 boolean isDir = file.isDirectory(); //是否为一个隐藏文件 boolean isHidden = file.isHidden()); &#125;&#125;创建文件1234567891011public class FileDemo2 &#123; public static void main(String[] args) throws IOException &#123; // 在当前目录下创建一个文件demo.txt File file = new File("."+File.separator+"demo.txt"); if(!file.exists())&#123; file.createNewFile(); System.out.println("创建完毕!"); &#125; &#125;&#125;删除文件12345678910public class FileDemo3 &#123; public static void main(String[] args) &#123; File file = new File("."+File.separator+"demo.txt"); if(file.exists())&#123; file.delete(); System.out.println("删除完毕!"); &#125; &#125;&#125; ​创建目录123456789101112public class FileDemo4 &#123; public static void main(String[] args) &#123; // 当前目录下创建一个目录demo File dir = new File("demo"); if(!dir.exists())&#123; // 创建目录 dir.mkdir(); System.out.println("创建完毕!"); &#125; &#125;&#125;创建多级目录12345678910111213141516171819public class FileDemo5 &#123; public static void main(String[] args) &#123; // 在当前目录下创建目录a/b/c/d/e/f File dir = new File( "a"+File.separator + "b"+File.separator + "c"+File.separator + "d"+File.separator + "e"+File.separator + "f" ); if(!dir.exists())&#123; // mkdirs方法在创建当前目录的同时会将所有不存在的父目录 // 自动创建出来。 dir.mkdirs(); System.out.println("创建完毕！"); &#125; &#125;&#125;结果：删除目录只能删除空目录。12345678910public class FileDemo6 &#123; public static void main(String[] args) &#123; File dir = new File("demo"); if(dir.exists())&#123; // 删除目录，只能删除空目录，即: 目录中不能含有任何子项。 dir.delete(); System.out.println("删除完毕!"); &#125; &#125;&#125;listFiles获取一个目录下的所有子项。123456789public class FileDemo7 &#123; public static void main(String[] args) &#123; File dir = new File("."); File[] subs = dir.listFiles(); for(File sub : subs)&#123; System.out.println((sub.isFile()?"文件:":"目录:")+sub.getName()); &#125; &#125;&#125;Filefilter文件过滤器Filefilter：获取一个目录下符合条件的子项，需要使用文件过滤器来定义过滤条件。通常使用匿名内部类来实现。1234567891011121314151617181920212223242526public class FileDemo8 &#123; public static void main(String[] args) &#123; /* * 获取当前目录下所有名字是以"."开头的子项 * 使用匿名内部类 */ FileFilter filter = new FileFilter()&#123; public boolean accept(File file) &#123; String name = file.getName(); System.out.println("正在过滤:"+name); return name.startsWith("."); &#125; &#125;; File dir = new File("."); /* * 该重载的listFiles方法会将当前目录中的每 * 一个子项都交给过滤器，然后只保留满足过滤器 * 要求(为true)的子项 */ File[] subs = dir.listFiles(filter); for(File sub : subs)&#123; System.out.println(sub.getName()); &#125; &#125;&#125;输出：1234567891011正在过滤:.classpath正在过滤:.project正在过滤:.settings正在过滤:a正在过滤:build正在过滤:src正在过滤:test.txt正在过滤:WebContent.classpath.project.settings删除含有子项目录使用“递归”的方式删除含有子项的目录（删除上面创建的a目录）。123456789101112131415161718192021public class FileDemo9 &#123; public static void main(String[] args) &#123; File dir = new File("a"); deleteFile(dir); &#125; /** * 将给定的File表示的文件或目录删除 * @param file */ public static void deleteFile(File file)&#123; if(file.isDirectory())&#123; //先将其所有子项删除 File[] subs = file.listFiles(); for(File sub:subs)&#123; //递归 deleteFile(sub); &#125; &#125; file.delete(); &#125;&#125;读写文件数据写入：123456789101112131415161718public class RandomAccessFileDemo1 &#123; public static void main(String[] args) throws IOException &#123; /* * RandomAccessFile创建支持很多模式 * 常用的有: * "r":只读 * "rw":读写 */ RandomAccessFile raf= new RandomAccessFile("demo.dat","rw"); /* * void write(int d) * 向文件中写入一个字节，写的是该int值对应的2进制内容中的"低八位", * 范围255 */ raf.write(27); raf.close(); &#125;&#125;读取：12345678910111213public class RandomAccessFileDemo2 &#123; public static void main(String[] args) throws IOException &#123; RandomAccessFile raf = new RandomAccessFile("demo.dat","r"); /* * int read() * 读取一个字节，并以int(低八位)形式返回 * 若读取到文件末尾则返回值为-1 */ int d = raf.read(); System.out.println(d); // 27 raf.close(); &#125;&#125;批量读写void write(byte[] data)：批量写出字节。一次性将给定的字节数组中的所有字节写出。12345678910111213141516171819202122public class RandomAccessFileDemo3 &#123; public static void main(String[] args) throws IOException &#123; RandomAccessFile raf = new RandomAccessFile("demo.dat","rw"); String str = "摩擦摩擦，是魔鬼的步伐"; /* * byte[] getBytes() * String提供的该方法可以将当前字符串 * 按照系统默认的字符集转换为对应的一组字节 * * byte[] getBytes(String charset) * 按照给定的字符集将字符串转换为一组字节 * 字符集名称: * GBK:国标编码 中文2字节 * UTF-8:变长编码集，1-4个字节，中文3字节 * ISO8859-1:欧洲编码，不支持中文 */ byte[] data = str.getBytes("GBK"); raf.write(data); System.out.println("写出完毕"); raf.close(); &#125;&#125;int read(byte[] data)：一次性尝试读取给定字节数组长度的字节量，并存入该数组中，返回值为实际读取到的字节量，若返回值为-1,则表示这次没有读到任何数据(文件末尾了)。12345678910111213141516public class RandomAccessFileDemo4 &#123; public static void main(String[] args) throws IOException &#123; RandomAccessFile raf = new RandomAccessFile("demo.dat","r"); byte[] data = new byte[100]; int len = raf.read(data);//每次read的长度，不写默认为1 System.out.println("读到了"+len+"个字节");//读到了22个字节 /* * 该构造方法允许我们将给定的字节数组 * 中指定范围内的字节转换为对应的字符串 */ String str = new String(data,0,len,"GBK"); System.out.println(str);//摩擦摩擦，是魔鬼的步伐 raf.close(); &#125;&#125;复制文件实际上就是一读一写。12345678910111213141516171819public class CopyDemo &#123; public static void main(String[] args) throws IOException &#123; RandomAccessFile src = new RandomAccessFile("1.mp4","r"); RandomAccessFile desc = new RandomAccessFile("1_copy.mp4","rw" ); byte[] buf = new byte[1024*10]; int len = -1; while((len=src.read(buf))!=-1)&#123; /* * void write(byte[] data,int offset,int len) * 将当前数组中从offset指定位置开始，连续len * 个字节写出 */ desc.write(buf,0,len); &#125; src.close(); desc.close(); &#125;&#125;]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[定制JSP标签]]></title>
    <url>%2Fblog%2F%E5%AE%9A%E5%88%B6JSP%E6%A0%87%E7%AD%BE.html</url>
    <content type="text"><![CDATA[当JSTL自带标签无法满足我们的开发需求的时候，我们可以自定义标签。定制标签可以通过实现SimpleTag接口或者继承SimpleTagSupport类（SimpleTagSupport提供了SimpleTag接口默认实现）。标签的具体实现功能逻辑写在doTag()方法中，定制JSP标签的大致步骤分为两步：1.编写标签处理器2.注册标签SimpleTag标签处理器编写一个Java类，实现SimpleTag接口：12345678910111213141516171819202122232425262728public class MyFirstTag implements SimpleTag&#123; JspContext jspContext; @Override public void doTag() throws JspException, IOException &#123; System.out.println("doTag"); jspContext.getOut().print("This is my first tag."); &#125; @Override public JspTag getParent() &#123; return null; &#125; @Override public void setJspBody(JspFragment body) &#123; System.out.println(body); &#125; @Override public void setJspContext(JspContext jspContext) &#123; this.jspContext=jspContext; &#125; @Override public void setParent(JspTag parent) &#123; &#125;&#125;doTag方法中编写了定制标签要实现的功能。getParent，setParent方法只有标签嵌套在另一个标签的时候才被调用。setJspContext方法传递了一个JspContext对象，JspContext对象的getOut方法返回一个JspWriter。注册标签在WEB-INF文件夹下新建一个tlds文件夹，然后在该文件夹下新建一个mytags.tld文件：123456789101112131415&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;taglib xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee web-jsptaglibrary_2_1.xsd" version="2.1"&gt; &lt;description&gt;Simple tag examples&lt;/description&gt; &lt;tlib-version&gt;1.0&lt;/tlib-version&gt; &lt;short-name&gt;My First Taglib Example&lt;/short-name&gt; &lt;tag&gt; &lt;name&gt;firstTag&lt;/name&gt; &lt;tag-class&gt;MyTags.MyFirstTag&lt;/tag-class&gt; &lt;body-content&gt;empty&lt;/body-content&gt; &lt;/tag&gt;&lt;/taglib&gt;最主要的为tag标签，name标签名，tag-class为标签java类路径。在jsp页面中使用该标签：123456789&lt;%@ taglib uri="/WEB-INF/tlds/mytags.tld" prefix="mt"%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Testing my first tag&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;mt:firstTag/&gt;&lt;/body&gt;&lt;/html&gt;启动tomcat访问该jsp，页面显示This is my first tag. 控制台输出doTag。SimpleTagSupport另一种方法为继承SimpleTagSupport类，重写doTag方法，这里模拟一个时间格式化标签：12345678910111213public class DateFormatTag extends SimpleTagSupport&#123; private String fmt; public void setFmt(String fmt) &#123; this.fmt = fmt; &#125; public void doTag() throws IOException, JspException &#123; JspContext jspContext = getJspContext(); JspWriter out = jspContext.getOut(); SimpleDateFormat sdf = new SimpleDateFormat(fmt); out.print(sdf.format(new Date())); &#125;&#125;fmt为标签的属性，这里为时间格式化的格式。通过静态方法getJspContext可以获取JspContext对象。编写好便签处理器后，注册它：123456789&lt;tag&gt; &lt;name&gt;DateFormat&lt;/name&gt; &lt;tag-class&gt;MyTags.DateFormatTag&lt;/tag-class&gt; &lt;body-content&gt;empty&lt;/body-content&gt; &lt;attribute&gt; &lt;name&gt;fmt&lt;/name&gt; &lt;required&gt;true&lt;/required&gt; &lt;/attribute&gt;&lt;/tag&gt;​attribute标签定义了标签的属性。在jsp页面中进行测试：1234567891011121314&lt;%@ taglib uri="/WEB-INF/tlds/mytags.tld" prefix="mt"%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;test dateformat&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;mt:DateFormat fmt="yyyy-MM-dd HH:mm:ss"/&gt;&lt;br/&gt; &lt;mt:DateFormat&gt; &lt;jsp:attribute name="fmt"&gt; yyyy-MM-dd &lt;/jsp:attribute&gt; &lt;/mt:DateFormat&gt;&lt;/body&gt;&lt;/html&gt;两种方式给fmt属性赋值，启动tomcat访问该jsp页面，页面显示：JspFragmentJspFragment就是一段不包含scriplet的jsp代码段，JspFragment类有两个方法：getJspContext和invoke。getJspContext方法返回与这个JspFragment相关的JspContext，invoke方法用来执行片段，如果片段不含标签无需执行的话，则传递null。现定制一个select标签，任务是根据传入的以逗号分隔的字符串转为对应的下拉选框。select标签里的JspFragment内容为：1&lt;option value="$&#123;value&#125;"&gt;$&#123;text&#125;&lt;/option&gt;编写标签处理器：12345678910111213141516171819public class SelectTag extends SimpleTagSupport&#123; private String values; public void setValues(String values) &#123; this.values = values; &#125; public void doTag() throws IOException, JspException &#123; JspContext jspContext = getJspContext(); JspWriter out = jspContext.getOut(); String[] arr= values.split(","); out.print("&lt;select&gt;\n"); for(int i=0;i&lt;arr.length;i++)&#123; jspContext.setAttribute("value", i+1); jspContext.setAttribute("text", arr[i]); getJspBody().invoke(null); &#125; out.print("&lt;/select&gt;\n"); &#125;&#125;注册该标签：123456789&lt;tag&gt; &lt;name&gt;select&lt;/name&gt; &lt;tag-class&gt;MyTags.SelectTag&lt;/tag-class&gt; &lt;body-content&gt;scriptless&lt;/body-content&gt; &lt;attribute&gt; &lt;name&gt;values&lt;/name&gt; &lt;required&gt;true&lt;/required&gt; &lt;/attribute&gt;&lt;/tag&gt;因为标签包含JspFragment，所以body-content标签配置为scriptless。在jsp页面中测试该标签：1234567891011&lt;%@ taglib uri="/WEB-INF/tlds/mytags.tld" prefix="mt"%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;test selecttag&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;mt:select values="fuzhou,xiamen,longyan"&gt; &lt;option value="$&#123;value&#125;"&gt;$&#123;text&#125;&lt;/option&gt; &lt;/mt:select&gt;&lt;/body&gt;&lt;/html&gt;启动tomcat，访问该jsp页面，页面显示：查看源码：12345&lt;select&gt; &lt;option value="1"&gt;fuzhou&lt;/option&gt; &lt;option value="2"&gt;xiamen&lt;/option&gt; &lt;option value="3"&gt;longyan&lt;/option&gt;&lt;/select&gt;函数假如JSTL中的函数标签不能满足我们的实际需求，我们也可以自己编写。新建Function包，在包下创建StringFunction类：12345public class StringFunction &#123; public static String reverseString(String value)&#123; return new StringBuffer(value).reverse().toString(); &#125;&#125;注册该标签：在WEB-INF下的tlds下新建function.tld：123456789101112131415161718&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;taglib xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee web-jsptaglibrary_2_1.xsd" version="2.1"&gt; &lt;description&gt;Function tag examples&lt;/description&gt; &lt;tlib-version&gt;1.0&lt;/tlib-version&gt; &lt;function&gt; &lt;description&gt;Reverses a String&lt;/description&gt; &lt;name&gt;reverseString&lt;/name&gt; &lt;function-class&gt;Functions.StringFunction&lt;/function-class&gt; &lt;function-signature&gt; java.lang.String reverseString(java.lang.String) &lt;/function-signature&gt; &lt;/function&gt; &lt;/taglib&gt;name表示函数名。function-class为实现该函数的Java类的全类名。function-signature表示该函数的静态Java方法签名。在jsp中测试该EL函数：123456789&lt;%@ taglib uri="/WEB-INF/tlds/function.tld" prefix="fn"%&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Testing reverseString function&lt;/title&gt;&lt;/head&gt;&lt;body&gt; $&#123;fn:reverseString("Hello World")&#125;&lt;/body&gt;&lt;/html&gt;启动tomcat，访问该jsp，页面显示：《Servlet和JSP学习指南》学习笔记]]></content>
      <tags>
        <tag>servlet&amp;jsp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSP Standard Tag Library]]></title>
    <url>%2Fblog%2FJSP-Standard-Tag-Library.html</url>
    <content type="text"><![CDATA[JSTL（JSP Standard Tag Library）下载地址：https://jstl.java.net/。JSTL包含：1.JSTL API2.JSTL ImplementationJSP页面中使用JSTL，使用taglib指令引入：1&lt;%@ taglib rui="uri" prefix="prefix"%&gt;通用动作指令引入：1&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;out标签标记&lt;c:out&gt;具有以下属性：属性描述value*+ &nbsp;要运算的表达式default默认值escapeXmlTrue，如果标签转义特殊XML字符*表示属性是必需的，+号表示可以为表达式。默认情况下，excapeXml属性为true，意味着会将&lt;，&gt;，’，”和&amp;转换为&lt;，&gt;，&#039;和&amp;。set标签&lt;c:set&gt;标记具有以下属性：属性描述value+要创建的字符串，或要引用的限域对象，或新的属性值target+其属性应该被修改的限域对象目标property+要修改的属性名称var限域变量scope范围，默认为page如，创建一个page范围的foo变量，并赋值：1&lt;c:set var="foo" value="The wisest fool"/&gt;创建一个限域变量job，值为request范围的对象position，限域变量的范围为page：1&lt;c:set var="job" value="$&#123;requestScope.position&#125;" socpe="page"/&gt;设置address对象的city属性为fuzhou：1&lt;c:set target="$&#123;address&#125;" property="city" value="fuzhzou"/&gt;也可以这样写：123&lt;c:set target="$&#123;address&#125;" property="city"&gt; fuzhou&lt;/c:set&gt;remove标签&lt;c:remove&gt;标签具有以下属性：属性描述默认值var要删除的变量名Nonescope删除变量的作用域所有作用域如删除作用域为page的job限域变量：1&lt;c:remove var="job" scope="page"/&gt;条件式动作指令引入：1&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %&gt;if标签&lt;c:if&gt;标签具有以下属性：属性描述默认test*+条件计算Nonevar变量名称来存储条件的结果，Boolean类型Nonescopevar变量的作用域page如：1234&lt;c:set var="salary" scope="session" value="$&#123;2000*2&#125;"/&gt;&lt;c:if test="$&#123;salary &gt; 2000&#125;"&gt; My salary is: &lt;c:out value="$&#123;salary&#125;"/&gt;&lt;/c:if&gt;模拟if…else：123456&lt;c:if test="$&#123;param.user=='mrbird' &amp;&amp; password=='mrbird'&#125;"&gt; mrbird logged in successfully.&lt;/c:if&gt;&lt;c:if test="$&#123;!(param.user=='mrbird' &amp;&amp; password=='mrbird')&#125;"&gt; userName or password is wrong&lt;/c:if&gt;choose,when和otherwise该标签类似于Java中的switch和case关键字类似，使用方法如下：1234567891011&lt;c:choose&gt; &lt;c:when test="$&#123;param.user=="mrbird"&#125;"&gt; hi,mrbird. &lt;/c:when&gt; &lt;c:when test="$&#123;param.user=="jint"&#125;"&gt; hi,jint. &lt;/c:when&gt; &lt;c:otherwise&gt; hi,someone else. &lt;/c:otherwise&gt;&lt;/c:choose&gt;iterator动作指令forEach标签&lt;c:forEach&gt;标记具有以下属性：属性描述默认items+要迭代的对象集合Nonebegin+开始索引0end+结束索引Last elementstep+迭代步长1var当前迭代内容的限域变量名NonevarStatus保存迭代状态的限域变量名None其中，varStatus包含一些属性：1.current当前这次迭代的（集合中的）项2.index当前这次迭代从 0 开始的迭代索引3.count当前这次迭代从 1 开始的迭代计数4.first用来表明当前这轮迭代是否为第一次迭代的标志5.last用来表明当前这轮迭代是否为最后一次迭代的标志如循环输出books集合，并控制单双行表格样式：1234567891011121314151617&lt;table&gt; &lt;tr style="background:#ababff"&gt; &lt;td&gt;ISBN&lt;/td&gt; &lt;td&gt;Title&lt;/td&gt; &lt;/tr&gt; &lt;c:forEach item="$&#123;requestScope.books&#125;" var="book" vatStatus="status"&gt; &lt;c:if test="$&#123;status.count%2 == 0&#125;"&gt; &lt;tr style="background:#eeeeff"&gt; &lt;/c:if&gt; &lt;c:if test="$&#123;status.count%2 != 0&#125;"&gt; &lt;tr style="background:#dedeff"&gt; &lt;/c:if&gt; &lt;td&gt;$&#123;book.isbn&#125;&lt;/td&gt; &lt;td&gt;$&#123;book.title&#125;&lt;/td&gt; &lt;/tr&gt; &lt;/c:forEach&gt;&lt;/table&gt;简单的forEach标签示例：123&lt;c:forEach var="x" begin="1" end="5"&gt; &lt;c:out value="$&#123;x&#125;"/&gt;,&lt;/c:forEach&gt;页面输出1，2，3，4，5。forTokens标签forTokens标签使用的比较少，常用的例子：123&lt;c:forTokens items="Zara,nuha,roshy" delims="," var="name"&gt; &lt;c:out value="$&#123;name&#125;"/&gt;&lt;/c:forTokens&gt;这将产生以下输出结果：123Zaranuharoshy格式化动作指令引入：1&lt;%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %&gt;formatNumber标签&lt;fmt:formatNumber&gt;标签用于格式化数字，百分比和货币。&lt;fmt:formatNumber&gt;标签有如下属性：属性描述默认值value*+要显示的数字无type+NUMBER，CURRENCY，或 PERCENT类型Numberpattern+指定一个自定义的格式化模式用于输出无currencyCode+货币码（当type=”currency”时）取决于默认区域currencySymbol+货币符号 (当 type=”currency”时)取决于默认区域groupingUsed+是否对数字分组 (TRUE 或 FALSE)truemaxIntegerDigits+整型数最大的位数无minIntegerDigits+整型数最小的位数无maxFractionDigits+小数点后最大的位数无minFractionDigits+小数点后最小的位数无var存储格式化数字的变量Print to pagescopevar属性的作用域pagepattern属性包含的字符：符号描述0代表一位数字E使用指数格式#代表一位数字，若没有则显示0.小数点,数字分组分隔符;分隔格式-使用默认负数前缀%百分数?千分数¤货币符号，使用实际的货币符号代替X指定可以作为前缀或后缀的字符‘在前缀或后缀中引用特殊字符例子：1234567891011121314151617181920&lt;c:set var="balance" value="120000.2309" /&gt;格式化数字 (1): &lt;fmt:formatNumber value="$&#123;balance&#125;" type="currency"/&gt;格式化数字 (2): &lt;fmt:formatNumber type="number" maxIntegerDigits="3" value="$&#123;balance&#125;" /&gt;格式化数字 (3): &lt;fmt:formatNumber type="number" maxFractionDigits="3" value="$&#123;balance&#125;" /&gt;格式化数字 (4): &lt;fmt:formatNumber type="number" groupingUsed="false" value="$&#123;balance&#125;" /&gt;格式化数字 (5): &lt;fmt:formatNumber type="percent" maxIntegerDigits="3" value="$&#123;balance&#125;" /&gt;格式化数字 (6): &lt;fmt:formatNumber type="percent" minFractionDigits="10" value="$&#123;balance&#125;" /&gt;格式化数字 (7): &lt;fmt:formatNumber type="percent" maxIntegerDigits="3" value="$&#123;balance&#125;" /&gt;格式化数字 (8): &lt;fmt:formatNumber type="number" pattern="###.###E0" value="$&#123;balance&#125;" /&gt;美元 : &lt;fmt:setLocale value="en_US"/&gt; &lt;fmt:formatNumber value="$&#123;balance&#125;" type="currency"/&gt;结果：12345678910数字格式化:格式化数字 (1): ￥120,000.23格式化数字 (2): 000.231格式化数字 (3): 120,000.231格式化数字 (4): 120000.231格式化数字 (5): 023%格式化数字 (6): 12,000,023.0900000000%格式化数字 (7): 023%格式化数字 (8): 120E3美元 : $120,000.23formatDate标签&lt;fmt:formatDate&gt;标签用于使用不同的方式格式化日期。&lt;fmt:formatDate&gt;标签有如下属性：属性描述是否必要默认值value要显示的日期是无typeDATE, TIME, 或 BOTH否datedateStyleFULL, LONG, MEDIUM, SHORT, 或 DEFAULT否defaulttimeStyleFULL, LONG, MEDIUM, SHORT, 或 DEFAULT否defaultpattern自定义格式模式否无timeZone显示日期的时区否默认时区var存储格式化日期的变量名否显示在页面scope存储格式化日志变量的范围否页面&lt;fmt:formatDate&gt; 标签格式模式：代码描述实例G时代标志ADy不包含纪元的年份。如果不包含纪元的年份小于 10， 则显示不具有前导零的年份。2002M月份数字。一位数的月份没有前导零。April &amp; 04d月中的某一天。一位数的日期没有前导零。20h12 小时制的小时。一位数的小时数没有前导零。12H24 小时制的小时。一位数的小时数没有前导零。0m分钟。一位数的分钟数没有前导零。45s秒。一位数的秒数没有前导零。52S毫秒970E周几TuesdayD一年中的第几天180F一个月中的第几个周几2 (一个月中的第二个星期三)w一年中的第几周r27W一个月中的第几周2aa.m./p.m. 指示符PMk小时(12 小时制的小时)24K小时(24 小时制的小时)0z时区中部标准时间‘&nbsp;转义文本‘’&nbsp;单引号例子：1234567891011&lt;c:set var="now" value="&lt;%=new java.util.Date()%&gt;" /&gt;&lt;p&gt;日期格式化 (1): &lt;fmt:formatDate type="time" value="$&#123;now&#125;" /&gt;&lt;/p&gt;&lt;p&gt;日期格式化 (2): &lt;fmt:formatDate type="date" value="$&#123;now&#125;" /&gt;&lt;/p&gt;&lt;p&gt;日期格式化 (3): &lt;fmt:formatDate type="both" value="$&#123;now&#125;" /&gt;&lt;/p&gt;&lt;p&gt;日期格式化 (4): &lt;fmt:formatDate type="both" dateStyle="short" timeStyle="short" value="$&#123;now&#125;" /&gt;&lt;/p&gt;&lt;p&gt;日期格式化 (5): &lt;fmt:formatDate type="both" dateStyle="medium" timeStyle="medium" value="$&#123;now&#125;" /&gt;&lt;/p&gt;&lt;p&gt;日期格式化 (6): &lt;fmt:formatDate type="both" dateStyle="long" timeStyle="long" value="$&#123;now&#125;" /&gt;&lt;/p&gt;&lt;p&gt;日期格式化 (7): &lt;fmt:formatDate pattern="yyyy-MM-dd" value="$&#123;now&#125;" /&gt;&lt;/p&gt;结果：12345678日期格式化:日期格式化 (1): 11:19:43日期格式化 (2): 2016-6-26日期格式化 (3): 2016-6-26 11:19:43日期格式化 (4): 16-6-26 上午11:19日期格式化 (5): 2016-6-26 11:19:43日期格式化 (6): 2016年6月26日 上午11时19分43秒日期格式化 (7): 2016-06-26剩下的fmt标签较少使用，懒得记录。函数引入：1&lt;%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %&gt;contains函数fn:contains()函数的语法如下：123&lt;c:if test="$&#123;fn:contains(&lt;原始字符串&gt;, &lt;要查找的子字符串&gt;)&#125;"&gt; ...&lt;/c:if&gt; ​如，下面的EL表达式都返回true：123&lt;c:set var="myString" value="Hello World"/&gt;$&#123;fn:contains(myString,"Hello")&#125;$&#123;fn:contains("Stella Cadente","Cadente")&#125;containsIgnoreCase函数和contains类似，不区分大小写。endsWith函数判断以什么为结尾。startsWith函数escapeXml函数如：1$&#123;fn:escapeXml("Use &lt;br&gt; to change lines")&#125;显示为：1Use &lt;br&gt; to change linesindexOf函数fn:indexOf()函数返回一个字符串中指定子串的位置。fn:indexOf()函数的语法如下：1$&#123;fn:indexOf(&lt;原始字符串&gt;,&lt;子字符串&gt;)&#125;例子：12&lt;c:set var="string1" value="This is first String."/&gt;&lt;p&gt;Index: $&#123;fn:indexOf(string1, "first")&#125;&lt;/p&gt;结果：1Index: 8join函数fn:join()函数将一个数组中的所有元素使用指定的分隔符来连接成一个字符串。split函数fn:split()函数将一个字符串用指定的分隔符分裂为一个子串数组。join和split例子：1234&lt;c:set var="string1" value="www runoob com"/&gt;&lt;c:set var="string2" value="$&#123;fn:split(string1, ' ')&#125;" /&gt;&lt;c:set var="string3" value="$&#123;fn:join(string2, '-')&#125;" /&gt;&lt;p&gt;string3 字符串 : $&#123;string3&#125;&lt;/p&gt;结果为：1字符串为 : www-runoob-comlength函数replace函数fn:replace()函数将字符串中所有指定的子串用另外的字符串替换。fn:replace()函数的语法如下：1$&#123;fn:replace(&lt;原始字符串&gt;, &lt;被替换的字符串&gt;, &lt;要替换的字符串&gt;)&#125;例子：123&lt;c:set var="string1" value="I am from USA"/&gt;&lt;c:set var="string2" value="$&#123;fn:replace(string1, 'USA', 'China')&#125;" /&gt;&lt;p&gt;替换后的字符串 : $&#123;string2&#125;&lt;/p&gt;结果：1替换后的字符串 : I am from Chinasubstring函数fn:substring()函数返回字符串中指定开始和结束索引的子串。fn:substring()函数的语法如下：1$&#123;fn:substring(&lt;string&gt;, &lt;beginIndex&gt;, &lt;endIndex&gt;)&#125;例子：123&lt;c:set var="string1" value="This is first String."/&gt;&lt;c:set var="string2" value="$&#123;fn:substring(string1, 5, 15)&#125;" /&gt;&lt;p&gt;生成的子字符串为 : $&#123;string2&#125;&lt;/p&gt;结果：1生成的子字符串为 : is first SsubstringBefore函数fn:substringBefore()函数返回一个字符串中指定子串前面的部分。如：123&lt;c:set var="string1" value="This is first String."/&gt;&lt;c:set var="string2" value="$&#123;fn:substringBefore(string1, 'first')&#125;" /&gt;&lt;p&gt;生成的子字符串 : $&#123;string2&#125;&lt;/p&gt;结果：1生成的子字符串 : This issubstringAfter函数toLowerCase函数toUpperCase函数trim函数sql标签略。《Servlet和JSP学习指南》学习笔记]]></content>
      <tags>
        <tag>servlet&amp;jsp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Server Pages]]></title>
    <url>%2Fblog%2FJava-Server-Pages.html</url>
    <content type="text"><![CDATA[scripletJSP页面可以直接书写Java 代码，Java代码要用&lt;% %&gt;包裹起来，&lt;% %&gt;代码块也被成为scriplet。可以使用page指令的import导入Java类型，否则scriplet里的Java类必须使用全类名。如：123456789101112&lt;%@ page import="java.util.Date"%&gt;&lt;%@ page import="java.text.DataFormat"%&gt;&lt;html&gt; &lt;head&gt;&lt;title&gt;Today's date&lt;/title&gt;&lt;/head&gt; &lt;body&gt; &lt;% DateFormat df = DateFormat.getDateInstance(DateFormat.LONG); String s = df.format(new Date()); out.println("Today is " + s); %&gt; &lt;/body&gt;&lt;/html&gt;隐式对象对象描述requestHttpServletRequest类的实例responseHttpServletResponse类的实例outPrintWriter类的实例，用于把结果输出至网页上sessionHttpSession类的实例applicationServletContext类的实例，与应用上下文有关configServletConfig类的实例pageContextPageContext类的实例，提供对JSP页面所有对象以及命名空间的访问page类似于Java类中的this关键字ExceptionException类的对象，代表发生错误的JSP页面中对应的异常对象获取HttpServletRequest对象的userName参数：123&lt;% String userName = request.getParameter("userName");%&gt;PageContext实用方法为存取属性：setAttribute()和getAttribute()。setAttribute方法签名：1public abstract void setAttribute(String name, Object value, int scope);scope值可以取：PAGE_SCOPE, REQUEST_SCOPE, SESSION_SCOPE, APPLICATION_SCOPE。如，下面scriplet在ServletRequset中保存了一个属性：1234&lt;% //product is a Java object pageContext.setAttribute("product",product,pageContext.REQUEST.SCOPE);%&gt;等价于：123&lt;% request.setAttribute("product",product);%&gt;out对象类似于在HttpServletResponse中调用getWritter()之后得到的java.io.PrintWriter，如在页面输出Welcome：123&lt;% out.println("Welcome");%&gt;指令page指令常用指令表：属性定义language=”ScriptLanguage”指定JSP Container用什么语言来编译，目前只支持JAVA语言。默认为JAVAextends=”className”定义此JSP网页产生的Servlet是继承哪个import=”importList”定义此JSP网页要使用哪些Java APIsession=”true|false”决定此页面是否使用session对象。默认为truebuffer=”none|size in kb”决定输出流(Input stream)是否又缓冲区。默认为8kbautoFlush=”true|false”决定输出流的缓冲区慢了后是否需要自动清除，缓冲区慢了后会产生异常错误(Exception).默认为trueisThreadSafe=”true|false”是否支持线程。默认为trueerrorPage=”url”如果此页发生异常，网页会重新指向一个urlisErrorPage=”true|false”表示此页面是否为错误处理页面。默认为falsecontentType=”text/html;charset=gb2312”表示MIME类型和JSP的编码方式。笔者使用例左pageEncoding=”ISO-8859-1”编码方式。isELLgnored=”true|false”表示是否在此JSP页面中EL表达式。true则忽略，反之false则支持。默认为false &nbsp; &nbsp;设置jsp中用到的语言,用到的是java，也是目前唯一有效的设定：1&lt;%@ page language="java"%&gt;jsp页面所用到的类：1&lt;%@ page import="java.sql.*"% &gt;设置该jsp页面出现异常时所要转到的页面,如果没设定，容器将使用当前的页面显示错误信息：1&lt;%@ page errorPage="error.jsp"%&gt;设置该jsp页面是否作为错误显示页面,默认是false,如果设置为true,容器则会在当前页面生成一个exception对象：1&lt;%@ page isErrorPage="true"%&gt;设置页面文件格式和编码方式：1&lt;%@ page contentType="text/html;charset=utf-8"%&gt;设置容器以多线程还是单线程运行该jsp页面，默认是true,是多线程。设置为false,则以单线程的方式运行该jsp页面：1&lt;%@ page isThreadSafe="true"% &gt;设置该jsp页面是否可以用到session对象(jsp内置对象，为web容器创建),默认是true,能用到session.设置为false,则用不到：1&lt;%@ page session="true"% &gt;include指令语法：1&lt;%@ include file="url"%&gt;被引用的文件扩展名为jspf(JSP fragment)。脚本元素scriplet前面介绍了，这里不在赘述。表达式以&lt;%=开头，%&gt;结束：1Today is &lt;%=java.util.Calendar.getInstance().getTime()%&gt;等价于：1234Today is&lt;% out.println(java.util.Calendar.getInstance().getTime());%&gt;声明可以声明能够在JSP页面中实用的变量和方法，声明用&lt;%!%&gt;包裹起来，比如在JSP页面中声明一个getTodaysDate的方法：1234567891011&lt;%! public String getTodaysDate() &#123; return new java.util.Date(); &#125; %&gt;&lt;html&gt; &lt;head&gt;&lt;title&gt;Declarations&lt;/title&gt;&lt;/head&gt; &lt;body&gt; Today is &lt;%=getTodayDate()%&gt; &lt;/body&gt;&lt;/html&gt;我们可以利用声明覆盖实现类中的init和destory方法：12345678&lt;%! public void jspInit() &#123; System.out.println("jspInit ..."); &#125; public void jspDestory() &#123; System.out.println("jspDestory ..."); &#125;%&gt;关闭脚本为了页面的整洁性，现在一般用EL，JSTL取代脚本元素，我们可以设置关闭脚本元素：123456&lt;jsp-config&gt; &lt;jsp-property-group&gt; &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt; &lt;scripting-invalid&gt;true&lt;/scripting-invalid&gt; &lt;/jsp-property-group&gt; &lt;/jsp-config&gt;动作动作会被编译为执行某个操作的Java代码，例如访问某个Java对象，或者调用某个方法。useBean如：123456789&lt;html&gt; &lt;head&gt; &lt;title&gt;useBean&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;jsp:useBean id="today" class="java.util.Date"/&gt; &lt;%=today%&gt; &lt;/body&gt;&lt;/html&gt;运行页面后，会在浏览器输出当前日期和时间。存取属性有Employee JavaBean，现在页面中存取属性值：12345678910&lt;html&gt; &lt;head&gt; &lt;title&gt;getProperty and setProperty&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;jsp:useBean id="employee" class="com.mrbird.entity.Employee"/&gt; &lt;jsp:setProperty name="employee" property="firstName" value="Mrbird"/&gt; First Name:&lt;jsp:getProperty name="employee" property="firstName"/&gt; &lt;/body&gt;&lt;/html&gt;includeinclude动作用于动态地包含另一个资源，它可以包含另一个JSP页面，一个Servlet，一个静态HTML页面。12345678910 &lt;html&gt; &lt;head&gt; &lt;title&gt;Include Action&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;jsp:include page="jspf/menu.jsp"/&gt; &lt;jsp:param name="text" value="How are you?"/&gt; &lt;/jsp:include&gt; &lt;/body&gt;&lt;/html&gt;include动作和include指令区别：① 使用include指令所引用的东东是发生在页面转换的时候，include动作包含是发生在请求的时候。② 使用include指令时，被包含的文件扩展名是什么并不重要，而使用include动作时，文件扩展名必须为jsp，以便它能够作为一个JSP页面进行处理。forwardforward动作是将当前页面跳转到另外一个页面，比如：123&lt;jsp:forward page="jspf/login.jsp"&gt; &lt;jsp:param name="text" value="Please login"/&gt;&lt;/jsp:forward&gt;错误处理在可能发生异常的jsp页面设置异常页面路径：1&lt;%@ page errorPage="errorHandler.jsp"%&gt;errorHandler.jsp：1234567891011&lt;%@ page isErrorPage="true"%&gt;&lt;html&gt; &lt;head&gt;&lt;title&gt;Error&lt;/title&gt;&lt;/head&gt; &lt;body&gt; An error occurred.&lt;br/&gt; Error message: &lt;% out.println(exception.toString); %&gt; &lt;/body&gt;&lt;/html&gt;《Servlet和JSP学习指南》学习笔记]]></content>
      <tags>
        <tag>servlet&amp;jsp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nexus搭建私服]]></title>
    <url>%2Fblog%2FNexus%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%8D.html</url>
    <content type="text"><![CDATA[安装Nexus下载Nexus：http://pan.baidu.com/s/1miTmJB6 ，密码：2jh7解压后找到bin/jsw目录下选择对于的操作系统文件夹：如windows-x86-64，双击start-nexus.bat即可启动nexus，启动后浏览器访问loaclhost:8081/nexus/：点击右上角Log In登录，管理员账号密码 admin，admin123。Nexus仓库和仓库组Nexus内置仓库点击左侧的Repositories可看到：类型分为：group（仓库组），proxy（代理），hosted（宿主），virtual（虚拟）：Central：代理Maven中央仓库，策略为Release，因此只会下载和缓存中央仓库中的发行版本构件Releases：策略为Release的宿主类型仓库，用来部署组织内部的发行版本构件Snapshots：策略为Snapshots的宿主类型仓库，用来部署组织内部的快照版本构件Apache Snapshots：策略为Snapshots的代理仓库，用来代理Apache Maven仓库的快照版本构件3rd party：策略为Release的宿主类型仓库，用来部署无法从公共仓库获得的第三方发行版构件Public Repositories：该仓库组为上述所有策略为Release的仓库聚合并通过一致的地址提供服务Public Snapshot Repositories：该仓库组为上述所有策略为Snapshots的仓库聚合并通过一致的地址提供服务上述的几种仓库类型关系如下图所示：maven可以直接从宿主仓库和代理仓库下载构件，代理仓库会间接地从远程仓库下载并缓存构件。为了方便，maven可以从仓库组下载构件，仓库组没有实际的内容，它会转向其包含的宿主仓库或者代理仓库获得实际的构件。创建Nexus宿主仓库点击Repositories界面的Add按钮，选择Hosted Repository：Repository ID：仓库id，该值会被作为仓库路径的最后一项内容Repository Name：仓库名称Provider：仓库的格式，一般选默认的Maven2Repository Policy：配置仓库构件为快照类型还是发行类型Default Local Storage Location：仓库默认地址，自动根据id生成Override Local Storage Location：自定义仓库地址Deployment Policy：部署策略，有Disable Redeploy（同一构件只能部署一次），Allow Redeploy（允许重新部署），Readonly（禁止部署）Allow File Browsing：为true时以树形结构浏览仓库存储文件内容Include in Search：是否对该仓库进行索引并提供搜索Publish URL：是否通过URL提供服务，为false的时候，访问该仓库地址会得到HTTP 404 Not Found错误Not Found Cache TTL：如果某文件不存在，在这1440分钟内再次访问这个文件，直接返回不存在信息未完待续，懒得写]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven聚合与继承]]></title>
    <url>%2Fblog%2Fmaven%E8%81%9A%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF.html</url>
    <content type="text"><![CDATA[maven中聚合和继承是两个概念，两者的目的是不一样的。聚合是为了方便的快速构建项目，而继承是为了消除一些重复的配置。对于聚合模块来说，它知道有哪些模块被聚合了，但是那些被聚合的模块并不知道这个聚合模块的存在。对于继承关系的父pom来说，它不知道哪些被聚合的模块，但那些被聚合的模块必须知道自己的父pom是什么。聚合开发中，一个项目一般被分为多个模块，通过maven的聚合特性，我们可以创建一个父maven项目来管理所有的子模块。现有account-email和account-persist两个maven项目，我们创建一个account-parent项目将其聚合在一起。聚合有两种结构方式：1.父子结构：2.平行结构下面例子以平行结构为例。account-parent配置如下：12345678910&lt;groupId&gt;com.juvenxu.mvnbook.account&lt;/groupId&gt;&lt;artifactId&gt;account-parent&lt;/artifactId&gt;&lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;pom&lt;/packaging&gt;&lt;name&gt;Account Parent&lt;/name&gt; &lt;modules&gt; &lt;module&gt;../account-email&lt;/module&gt; &lt;module&gt;../account-persist&lt;/module&gt;&lt;/modules&gt;modules元素用于聚合子模块，packaging元素声明其打包方式为pom。对于一个聚合子模块的父模块，其打包方式必须为pom。对于平行结构来说，父模块的内容仅为一个pom文件。对父模块执行 mvn clean install命令：12345678910111213[INFO] ------------------------------------------------------------------------[INFO] Reactor Summary:[INFO] [INFO] Account Parent .................................... SUCCESS [0.447s][INFO] Account Email ..................................... SUCCESS [3.334s][INFO] Account Persist ................................... SUCCESS [1.582s][INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 5.489s[INFO] Finished at: Wed Oct 26 16:59:05 CST 2016[INFO] Final Memory: 17M/160M[INFO] ------------------------------------------------------------------------继承如果需要继承父模块pom中的一些配置，我们只需要在子模块pom中添加如下配置123456&lt;parent&gt; &lt;groupId&gt;com.juvenxu.mvnbook.account&lt;/groupId&gt; &lt;artifactId&gt;account-parent&lt;/artifactId&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;relativePath&gt;../account-parent/pom.xml&lt;/relativePath&gt;&lt;/parent&gt;通过parent元素指定其父模块，relativePath指向父模块的pom路径，其默认值为../pom.xml。父模块pom中声明的一些元素可以被子模块继承，常用的有：■ groupId：项目id，项目坐标的核心元素■ version：项目版本，项目坐标的核心元素■ description：项目的描述信息■ organization：项目的组织信息■ distributionManagement：项目的部署信息■ properties：自定义的maven属性■ dependencies：依赖■ dependencyManagement：依赖管理配置■ repositories：项目的仓库配置■ build：项目的源码目录配置，输出目录配置，插件配置，插件管理配置等依赖继承对于子模块共用的依赖，可以统一在父模块中声明，比如在父模块account-parent中配置dependencyManagement：12345678910111213141516171819202122232425262728293031323334&lt;properties&gt; &lt;springframework.version&gt;2.5.6&lt;/springframework.version&gt; &lt;junit.version&gt;4.7&lt;/junit.version&gt;&lt;/properties&gt;&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;$&#123;springframework.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;子模块使用这些依赖的时候，只需要简单的配置，如account-email的pom配置：1234567891011121314151617181920212223242526272829303132333435363738&lt;properties&gt; &lt;javax.mail.version&gt;1.4.1&lt;/javax.mail.version&gt; &lt;greenmail.version&gt;1.3.1b&lt;/greenmail.version&gt;&lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.mail&lt;/groupId&gt; &lt;artifactId&gt;mail&lt;/artifactId&gt; &lt;version&gt;$&#123;javax.mail.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.icegreen&lt;/groupId&gt; &lt;artifactId&gt;greenmail&lt;/artifactId&gt; &lt;version&gt;$&#123;greenmail.version&#125;&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt;&lt;/dependencies&gt;可发现，account-email的dependencies配置省去了version，对于junit还省去了scope。省去这些信息是因为account-email继承了父模块的dependencyManagement配置，完整的依赖声明已经包含在父pom中，子模块只需要声明简单的groupId和artifactId就可以找到对应的依赖。注意：虽然完整的依赖已经包含在父模块pom中了，但并不是说子模块完全不需要声明依赖了。比如子模块不声明spring-context-support依赖，那么该依赖不会被引入。插件继承在父模块account-parent的pom中配置pluginManagement元素：123456789101112131415161718192021&lt;build&gt; &lt;pluginManagement&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;source&gt;1.5&lt;/source&gt; &lt;target&gt;1.5&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt;&lt;/build&gt;子模块需要用到这些插件的时候，只需要简单的配置：123456789101112&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt;只需要在子模块中指定插件的groupId和artifactId就可以在父模块pom中找到对应的插件配置。《Maven实战》读书笔记]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSON小记]]></title>
    <url>%2Fblog%2FJSON%E5%B0%8F%E8%AE%B0.html</url>
    <content type="text"><![CDATA[JSON全称JavaScript Object Notation，是一种轻量级的数据交换格式，取名自JavaScript对象，但两者之间并没有什么直接的联系。JSON语法和JavaScript对象语法上区别如下表所示：对比内容JSONJS对象键名必须是加双引号可允许不加、加单引号、加双引号属性值只能是数值（10进制）、 字符串（双引号）、 布尔值和null， 也可以是数组或者符合JSON要求的对象， 不能是函数、NaN, Infinity, &nbsp;-Infinity和undefined什么都可以逗号问题最后一个属性后面不能有逗号可以数值前导0不能用，小数点后必须有数字没限制可以看到，相对于JS对象，JSON的格式更严格，所以大部分写的JS对象是不符合JSON的格式的。如：123456789101112131415161718192021var obj1 = &#123;&#125;; // 这只是 JS 对象 // 可把这个称做：JSON 格式的 JavaScript 对象 var obj2 = &#123;"width":100,"height":200,"name":"rose"&#125;; // 可把这个称做：JSON 格式的字符串var str1 = '&#123;"width":100,"height":200,"name":"rose"&#125;'; // 这个可叫 JSON 格式的数组，是 JSON 的稍复杂一点的形式var arr = [ &#123;"width":100,"height":200,"name":"rose"&#125;, &#123;"width":100,"height":200,"name":"rose"&#125;, &#123;"width":100,"height":200,"name":"rose"&#125;,]; // 这个可叫稍复杂一点的 JSON 格式的字符串 var str2='['+ '&#123;"width":100,"height":200,"name":"rose"&#125;,'+ '&#123;"width":100,"height":200,"name":"rose"&#125;,'+ '&#123;"width":100,"height":200,"name":"rose"&#125;,'+']';以下是JSON的一些转换方法。JavaScriptjs对象→json字符串转换函数JSON.stringify，函数签名如下所示：1JSON.stringify(value[, replacer [, space]])下面将分别展开带1~3个参数的用法：基本使用——仅需一个参数12345//创建js对象var obj = &#123;"name":"mrbird","age":24&#125;;//将此对象转成json字符串var str = JSON.stringify(obj);// "&#123;"name":"mrbird","age":24&#125;"第二个参数可以是函数，也可以是一个数组如果第二个参数是一个函数，那么序列化过程中的每个属性都会被这个函数转化和处理.如果第二个参数是一个数组，那么只有包含在这个数组中的属性才会被序列化到最终的JSON字符串中。如果第二个参数是null，那作用上和空着没啥区别，但是不想设置第二个参数，只是想设置第三个参数的时候，就可以设置第二个参数为null。这第二个参数若是函数：123456789101112131415161718var friend=&#123; "firstName": "Good", "lastName": "Man", "phone":"1234567", "age":18&#125;; var friendAfter=JSON.stringify(friend,function(key,value)&#123; if(key==="phone") return "(000)"+value; else if(typeof value === "number") return value + 10; else return value; //如果你把这个else分句删除，那么结果会是undefined&#125;); console.log(friendAfter); //输出：&#123;"firstName":"Good","lastName":"Man","phone":"(000)1234567","age":28&#125;第二个参数若是数组：12345678910111213var friend=&#123; "firstName": "Good", "lastName": "Man", "phone":"1234567", "age":18&#125;; //注意下面的数组有一个值并不是上面对象的任何一个属性名var friendAfter=JSON.stringify(friend,["firstName","address","phone"]); console.log(friendAfter); //&#123;"firstName":"Good","phone":"1234567"&#125;//指定的“address”由于没有在原来的对象中找到而被忽略如果第二个参数是一个数组，那么只有在数组中出现的属性才会被序列化进结果字符串，只要在这个提供的数组中找不到的属性就不会被包含进去，而这个数组中存在但是源JS对象中不存在的属性会被忽略，不会报错。第三个参数用于美化输出指定缩进用的空白字符，可以取以下几个值：· 是1-10的某个数字，代表用几个空白字符· 是字符串的话，就用该字符串代替空格，最多取这个字符串的前10个字符· 没有提供该参数等于设置成null，也等于设置一个小于1的数1234567891011121314151617181920212223242526272829303132333435363738394041424344454647var friend=&#123; "firstName": "Good", "lastName": "Man", "phone":&#123;"home":"1234567","work":"7654321"&#125;&#125;; //直接转化是这样的：//&#123;"firstName":"Good","lastName":"Man","phone":&#123;"home":"1234567","work":"7654321"&#125;&#125; var friendAfter=JSON.stringify(friend,null,4); console.log(friendAfter); /*&#123; "firstName": "Good", "lastName": "Man", "phone": &#123; "home": "1234567", "work": "7654321" &#125;&#125;*/ var friendAfter=JSON.stringify(friend,null,"HAHAHAHA"); console.log(friendAfter); /*&#123;HAHAHAHA"firstName": "Good", HAHAHAHA"lastName": "Man", HAHAHAHA"phone": &#123; HAHAHAHAHAHAHAHA"home": "1234567", HAHAHAHAHAHAHAHA"work": "7654321" HAHAHAHA&#125; &#125;*/ var friendAfter=JSON.stringify(friend,null,"WhatAreYouDoingNow"); console.log(friendAfter); /* 最多只取10个字符&#123;WhatAreYou"firstName": "Good", WhatAreYou"lastName": "Man", WhatAreYou"phone": &#123; WhatAreYouWhatAreYou"home": "1234567", WhatAreYouWhatAreYou"work": "7654321" WhatAreYou&#125; &#125;*/JSON.stringify函数有几个需要注意的地方：1.键名不是双引号的（包括没有引号或者是单引号），会自动变成双引号；字符串是单引号的，会自动变成双引号。2.最后一个属性后面有逗号的，会被自动去掉。3.非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中 这个好理解，也就是对非数组对象在最终字符串中不保证属性顺序和原来一致。4.布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值 也就是你的什么new String(“bala”)会变成”bala”，new Number(2017)会变成2017。5.undefined、任意的函数（其实有个函数会发生神奇的事，后面会说）以及 symbol值。出现在非数组对象的属性值中：在序列化过程中会被忽略。出现在数组中时：被转换成 null。1234JSON.stringify(&#123;x: undefined, y: function()&#123;return 1;&#125;, z: Symbol("")&#125;); //出现在非数组对象的属性值中被忽略："&#123;&#125;"JSON.stringify([undefined, Object, Symbol("")]); //出现在数组对象的属性值中，变成null："[null,null,null]"将JSON字符串解析为JS数据结构函数JSON.parse的签名如下：1JSON.parse(text[, reviver])如果第一个参数，即JSON字符串不是合法的字符串的话，那么这个函数会抛出错误。值得注意的是这里有一个可选的第二个参数，这个参数必须是一个函数，这个函数作用在属性已经被解析但是还没返回前，将属性处理后再返回。123456789101112131415161718192021222324252627282930313233343536373839404142var friend=&#123; "firstName": "Good", "lastName": "Man", "phone":&#123;"home":"1234567","work":["7654321","999000"]&#125;&#125;; //我们先将其序列化var friendAfter=JSON.stringify(friend); //'&#123;"firstName":"Good","lastName":"Man","phone":&#123;"home":"1234567","work":["7654321","999000"]&#125;&#125;' //再将其解析出来，在第二个参数的函数中打印出key和valueJSON.parse(friendAfter,function(k,v)&#123; console.log(k); console.log(v); console.log("----");&#125;);/*firstName Good ----lastName Man ----home 1234567 ----0 7654321 ----1 999000 ----work []----phone Object ---- Object ----*/仔细看一下这些输出，可以发现这个遍历是由内而外的，可能由内而外这个词大家会误解，最里层是内部数组里的两个值啊，但是输出是从第一个属性开始的，怎么就是由内而外的呢？这个由内而外指的是对于复合属性来说的，通俗地讲，遍历的时候，从头到尾进行遍历，如果是简单属性值（数值、字符串、布尔值和null），那么直接遍历完成，如果是遇到属性值是对象或者数组形式的，那么暂停，先遍历这个子JSON，而遍历的原则也是一样的，等这个复合属性遍历完成，那么再完成对这个属性的遍历返回。本质上，这就是一个深度优先的遍历。影响 JSON.stringify 的神奇函数——object.toJSON如果你在一个JS对象上实现了toJSON方法，那么调用JSON.stringify去序列化这个JS对象时，JSON.stringify会把这个对象的toJSON方法返回的值作为参数去进行序列化。1234567891011var info=&#123; "msg":"I Love You", "toJSON":function()&#123; var replaceMsg=new Object(); replaceMsg["msg"]="Go Die"; return replaceMsg; &#125;&#125;; JSON.stringify(info); //出si了，返回的是：'"&#123;"msg":"Go Die"&#125;"',说好的忽略函数呢这个函数就是这样子的。其实Date类型可以直接传给JSON.stringify做参数，其中的道理就是，Date类型内置了toJSON方法。Java下面是JSON和Java对象等的转换方法。准备工作，创建Emp实体类：1234567891011121314public class Emp implements Serializable &#123; private String name; private Integer age; public Emp() &#123; &#125; public Emp(String name, Integer age) &#123; super(); this.name = name; this.age = age; &#125; //get,set略&#125;java对象→json字符串123456789@Testpublic void test1() &#123; //1.获取Java对象 Emp e = new Emp("mrbird",24); //2.先将其转换成json对象(Map) JSONObject obj = JSONObject.fromObject(e); //3.在将json对象转成字符串 System.out.println(obj.toString());&#125;输出：1&#123;"age":24,"name":"mrbird"&#125;集合/数组→json字符串1234567891011@Testpublic void test2() &#123; //1.获取集合/数组 List&lt;Emp&gt; list = new ArrayList&lt;Emp&gt;(); list.add(new Emp("mrbird",24)); list.add(new Emp("leanote",33)); //2.先把集合转成json数组(List) JSONArray ary = JSONArray.fromObject(list); //3.把整个数组转成字符串 System.out.println(ary.toString());&#125;输出：1[&#123;"age":24,"name":"mrbird"&#125;,&#123;"age":33,"name":"leanote"&#125;]json字符串→java对象12345678910@Testpublic void test3() &#123; //1.获取json字符串 String str = "&#123;\"name\":\"mrbird\",\"age\":24&#125;"; //2.将此字符串转成json对象(Map) JSONObject obj = JSONObject.fromObject(str); //3.将json对象转换成Java对象(bean) Emp e = (Emp)JSONObject.toBean(obj, Emp.class); System.out.println(e.getName());&#125;输出：1mrbirdjson字符串转→List1234567891011121314151617@Testpublic void test4() &#123; //1.获取json字符串 String str = "[&#123;\"name\":\"mrbird\",\"age\":24&#125;," + "&#123;\"name\":\"leanote\",\"age\":33&#125;]"; //2.先将此字符串转成json数组(List) //当前List中存的是Map。 JSONArray ary = JSONArray.fromObject(str); //3.将List&lt;Map&gt;转成List&lt;Emp&gt; //JSONArray会自动实例化一个集合，然后将ary中的每一个Map转成Emp， //增加到这个新建的集合中 List&lt;Emp&gt; list = (List&lt;Emp&gt;)JSONArray.toCollection(ary, Emp.class); for(Emp e : list) &#123; System.out.println(e.getName()); &#125;&#125;参考文章 – JSON：如果你愿意一层一层剥开我的心，你会发现…这里水很深——深入理解JSON]]></content>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven生命周期和插件]]></title>
    <url>%2Fblog%2Fmaven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E6%8F%92%E4%BB%B6.html</url>
    <content type="text"><![CDATA[maven生命周期（lifecycle）对构建的过程进行了抽象和统一，实际的工作是由对应的插件（plugins）来完成的。maven生命周期maven生命周期可以分为三个部分：clean生命周期该周期的任务是清理项目，包含三个阶段：pre-clean执行清理前需要完成的工作clean清理上一次构建生成的文件post-clean执行清理后需要完成的工作default生命周期default生命周期定义了真正构建时需要的所有步骤。validate验证项目是正确的，所有必要的信息是可用的initialize初始化构建状态，例如：设置属性或创建目录generate-sources生成编译期的源代码。process-sources处理项目主资源文件。一般来说是对src/main/resources目录内容进行变量替换等工作后，复制到项目输出的主目录classpath目录中generate-resources生成包含在打包过程中的资源process-resources复制和处理资源到目标目录，准备打包compile编译项目的源代码process-classes处理编译后生成的class文件generate-test-sources生成编译期内的测试源代码process-test-sources处理测试源代码，如过滤一些值generate-test-resources创建测试资源process-test-resources复制测试资源到目标目录并处理test-compile编译测试源代码到测试目标目录process-test-classes处理编译测试代码后生成的class文件test使用合适的单元测试框架运行测试。 这些测试代码不会被打包和 部署prepare-package执行打包前需要的任何工作package接收编译好的代码，打包成可发布的格式，如jar，war等pre-integration-test执行集成测试之前所需的操作integration-test如果需要，可以将软件包处理和部署到可以运行集成测试的环境中post-integration-test执行集成测试之后所需的操作verify运行任何检查以验证程序包是否有效并符合质量标准install将程序包安装到maven本地仓库，供本地其他maven项目使用deploy将最终包复制到远程仓库，供其它开发人员和maven项目使用site生命周期site生命周期的作用是建立和发布项目站点。pre-site执行一些在生成项目站点之前所需要完成的工作site生成项目站点文档post-site执行一些在生成项目站点之后需要完成的工作site-deploy将生成的项目站点发布到服务器上maven生命周期是相互依赖的关系，如执行 mvn clean命令时，会执行pre-clean，clean阶段；执行mvn deploy会执行default生命周期前面的所有阶段。插件目标maven生命周期的各个阶段是和插件绑定在一起的，一个插件可以包含多个功能，每个功能对应生命周期的一个阶段，并称其为插件目标。如：maven-dependency-plugin包含插件目标：dependency：tree，dependency：list，dependency：analyze等。内置绑定插件maven在核心为一些主要的生命周期绑定了许多插件目标：clean生命周期阶段与插件绑定情况：生命周期阶段插件目标pre-cleanmaven-clean-plugin:cleancleanpost-cleandefault生命周期阶段与插件绑定情况及具体任务：生命周期阶段插件目标执行任务process-resourcesmaven-resources-plugin:resources复制主资源文件到输出 目录compilemaven-compiler-plugin:compile编译主代码到输出目录process-test-resourcesmaven-resources-plugin:testResources复制测试资源文件到输 出目录test-compilemaven-compiler-plugin:testCompile编译测试代码到输出目 录testmaven-surefire-plugin:test执行测试用例packagemaven-jar-plugin:jar创建项目jar包installmaven-install-plugin:install将项目输出构件安装到 本地仓库deploymaven-deploy-plugin:deploy将项目输出构件部署到 远程仓库site生命周期阶段与插件绑定情况：生命周期阶段插件目标pre-sitemaven-site-plugin:sitesitepost-sitesite-deploymaven-site-plugin:deploy如，对项目执行 mvn clean install 命令：1234567891011121314151617181920212223242526272829--- maven-clean-plugin:2.5:clean (default-clean) @ viswcm-project ---[INFO] Deleting D:\workspace\viswcm-project\target[INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ viswcm-project ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 0 resource[INFO] [INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ viswcm-project ---[INFO] Compiling 20 source files to D:\workspace\viswcm-project\target\classes[INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ viswcm-project ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] skip non existing resourceDirectory D:\workspace\viswcm-project\src\test\resources[INFO] [INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ viswcm-project ---[INFO] Nothing to compile - all classes are up to date[INFO] [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ viswcm-project ---[INFO] No tests to run.[INFO] [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ viswcm-project ---[INFO] Building jar: D:\workspace\viswcm-project\target\viswcm-project-0.0.1-SNAPSHOT.jar[INFO] [INFO] --- maven-install-plugin:2.4:install (default-install) @ viswcm-project ---[INFO] Installing D:\workspace\viswcm-project\target\viswcm-project-0.0.1-SNAPSHOT.jar to D:\64\m2\repository\com\visgreat\viswcm-project\0.0.1-SNAPSHOT\viswcm-project-0.0.1-SNAPSHOT.jar[INFO] Installing D:\workspace\viswcm-project\pom.xml to D:\64\m2\repository\com\visgreat\viswcm-project\0.0.1-SNAPSHOT\viswcm-project-0.0.1-SNAPSHOT.pom[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------其输出结果和上面的表格描述一致。自定义插件绑定除了maven内置绑定，我们还可以自行绑定某个插件到某个生命周期的某个阶段。比如要生成项目源码jar包，我们可以将maven-source-plugin插件配置到default生命周期的verify阶段：123456789101112131415161718&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt; &lt;version&gt;2.1.1&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;attach-sources&lt;/id&gt; &lt;phase&gt;verify&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;jar-no-fork&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt;上述配置描述了maven-source-plugin插件坐标外，还有插件执行配置executions元素下的每个execution子元素可以用来配置执行一个任务。这里配置了一个id为attach-sources的任务，通过phase元素，将其绑定到verify阶段上，再通过goals配置指定执行的插件目标。运行mvn verify：12[INFO] --- maven-source-plugin:2.1.1:jar-no-fork (attach-sources) @ viswcm-project --- [INFO] Building jar: D:\workspace\viswcm-project\target\viswcm-project-0.0.1-SNAPSHOT-sources.jar获取插件信息maven官方插件：http://maven.apache.org/plugins/index.htmlmaven官方插件下载地址：http://repo1.maven.org/maven2/org/apache/maven/plugins/配置插件仓库1234567891011121314&lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;central&lt;/id&gt; &lt;name&gt;Maven.Plugin.Repository&lt;/name&gt; &lt;url&gt;http://repo1.maven.org/maven2&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;releases&gt; &lt;updatePolicy&gt;never&lt;/updatePolicy&gt; &lt;/releases&gt; &lt;/pluginRepository&gt;&lt;/pluginRepositories&gt;《Maven实战》读书笔记]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven repository]]></title>
    <url>%2Fblog%2Fmaven-repository.html</url>
    <content type="text"><![CDATA[保存构件的地方即为repository（仓库）。仓库的分类maven仓库分为两类：本地仓库和远程仓库。当maven根据pom中定义的坐标寻找构件时，首先在本地仓库中寻找，当找不到时再从远程仓库寻找，都找不到时抛出异常。maven远程仓库还可进一步分类：本地仓库默认maven会在c盘创建一个.m2的本地仓库，如果要修改本地仓库地址，可以修改setting.xml文件：123&lt;settings&gt; &lt;localRepository&gt;D:\64\m2\repository&lt;/localRepository&gt;&lt;/settings&gt;远程仓库中央仓库使用解压软件打开%M2_HOME%/lib/maven-model-builder-3.1.1.jar，然后访问路径org/apache/maven/model/pom-4.0.0.xml，可看到：1234567891011&lt;repositories&gt; &lt;repository&gt; &lt;id&gt;central&lt;/id&gt; &lt;name&gt;Central Repository&lt;/name&gt; &lt;url&gt;http://repo.maven.apache.org/maven2&lt;/url&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt;&lt;/repositories&gt;包含这段配置的文件是所有maven项目都会继承的超级pom。上述配置中，snapshots子元素enabled的值为false，表示不从中央仓库下载快照版本的构件。私服私服是一种特殊的远程仓库，架设于局域网内。当maven需要下载构件时，先从私服寻找，私服中没有再从外部仓库下载。私服有许多显著的优点：■ 节省外网带宽■ 加速maven构件■ 部署第三方构件■ 提高稳定性，增强控制■ 降低中央仓库的负荷远程仓库配置如果默认的远程中央仓库无法满足需求，我们可以在pom中添加远程仓库的配置：1234567891011121314151617&lt;project&gt; ... &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;jboss&lt;/id&gt; &lt;name&gt;JBoss Repository&lt;/name&gt; &lt;url&gt;http://repository.jboss.com/maven2/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;/repository&gt; &lt;/repositories&gt;&lt;/project&gt;在repositories元素下，使用repository元素声明一个或多个远程仓库。上面的xml声明了一个id为jboss，名称为JBoss Repository的仓库。任何一个仓库的id是唯一的，maven自带的中央仓库使用的id为central，如果其他仓库的id也为central，那么它将覆盖自带的中央仓库。url指向仓库地址，一般该地址都是基于http协议。releases的enabled值为true，表示开启JBoss仓库的发布版本下载支持，snapshots的enabled值为false，表示关闭JBoss仓库的快照版本的下载支持。release和snapshots元素还可以配置另外两个子元素：12345&lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;updatePolicy&gt;daily&lt;/updatePolicy&gt; &lt;checksumPolicy&gt;ignore&lt;/checksumPolicy&gt;&lt;/snapshots&gt;updatePolicy元素配置maven从远程仓库检查更新的频率，默认值为daily。其他可用值有：never —— 从不检查更新，always —— 每次构建都检查更新，interval：X —— 每隔X分钟检查一次更新。用户也可以使用命令 mvn clean install -U强制更新。checksumPolicy元素用来配置当下载构件时，maven检验和验证失败时候的动作，默认为warn，即输出警告信息，ignore则为忽略错误。远程仓库认证如果远程仓库出于安全的考虑设置了用户名和密码，这时候我们必须在settings.xml中配置：12345678910&lt;settings&gt; ... &lt;servers&gt; &lt;server&gt; &lt;id&gt;my-proj&lt;/id&gt; &lt;username&gt;repo-user&lt;/username&gt; &lt;password&gt;repo_pwd&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt;&lt;/settings&gt;上述xml指定了id为my-proj的远程仓库的用户名和密码。部署至远程仓库如前所述，私服一大作用是可以部署第三方构件。无论是开发中生成的构件还是正式发布的构件，都需要部署到私服中供小组中的其他开发人员使用，在maven项目pom中配置：123456789101112131415161718&lt;project&gt; ... &lt;distributionManagement&gt; &lt;snapshotRepository&gt; &lt;id&gt;user-snapshot&lt;/id&gt; &lt;name&gt;User Porject Snapshot&lt;/name&gt; &lt;url&gt;http://192.168.10.217:8081/nexus/ content/repositories/snapshots/&lt;/url&gt; &lt;uniqueVersion&gt;true&lt;/uniqueVersion&gt; &lt;/snapshotRepository&gt; &lt;repository&gt; &lt;id&gt;user-release&lt;/id&gt; &lt;name&gt;User Porject Release&lt;/name&gt; &lt;url&gt;http://192.168.10.217:8081/nexus/ content/repositories/releases/&lt;/url&gt; &lt;/repository&gt; &lt;/distributionManagement&gt;&lt;/project&gt;上述xml明确指定了快照版本和发行版本的私服id和地址，如前所述，如果私服设置了账号密码，则应该在settings.xml中设置对应id的私服账号和密码，就本例来说，我们应该在settings.xml中设置：1234567891011121314&lt;settings&gt; &lt;servers&gt; &lt;server&gt; &lt;id&gt;user-release&lt;/id&gt; &lt;username&gt;deployment&lt;/username&gt; &lt;password&gt;deployment123&lt;/password&gt; &lt;/server&gt; &lt;server&gt; &lt;id&gt;user-snapshot&lt;/id&gt; &lt;username&gt;deployment&lt;/username&gt; &lt;password&gt;deployment123&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt;&lt;/settings&gt;配置正确后，可以运行命令mvn clean deploy将项目构建输出的构件部署到对应的远程仓库。快照版本版本元素version中添加SNAPSHOT标识，表明该构件为快照版本。SNAPSHOT版本的构件发布到私服的过程中，maven会自动加上时间戳。另一位开发者从该私服获取这个构件的时候，maven会自动获取时间戳最新的构件。快照版本只应该在组织内部依赖使用，项目不应该依赖于任何组织外部的快照版本依赖。因为快照版本的不稳定性会对项目造成潜在的危险。镜像如果仓库B可以提供仓库A存储的所有内容，那么就可以认为B是A的一个镜像。maven默认的远程中央仓库由于服务器不在中国，所以访问速度可能会慢些，这时候可以再settings.xml中配置一个镜像：1234567891011&lt;settings&gt; ... &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;maven.net.cn&lt;/id&gt; &lt;name&gt;one of the central mirrors in china&lt;/name&gt; &lt;url&gt;http://maven.net.cn/content/groups/public&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt; &lt;/mirrors&gt;&lt;/settings&gt;&lt;mirrorOf&gt;的值为central，表示该配置为中央仓库的镜像。任何对于中央仓库的请求都会本转至该镜像。镜像常用于私服。由于私服可以代理任何外部的公共仓库，所以可以说私服就是所有仓库的镜像。如：12345678910&lt;settings&gt; ... &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;url&gt;http://192.168.10.217:8081/nexus/content/groups/public/&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt;&lt;/settings&gt;&lt;mirrorOf&gt;的值为*号，表示http://192.168.10.217:8081/nexus/content/groups/public/是所有外部仓库的镜像。任何对远程仓库的请求都会被转到这个地址。&lt;mirrorOf&gt;的配置：■ &lt;mirrorOf&gt;*&lt;mirrorOf&gt;：匹配所有的远程仓库■ &lt;mirrorOf&gt;external:*&lt;mirrorOf&gt;：匹配所有不在本机上的远程仓库■ &lt;mirrorOf&gt;repo1,repo2&lt;mirrorOf&gt;：匹配仓库repo1和repo2■ &lt;mirrorOf&gt;*,!repo1&lt;mirrorOf&gt;：匹配除了repo1之外的所有远程仓库镜像仓库完全屏蔽了被镜像仓库，当镜像仓库停止服务的时候，maven仍无法访问被镜像仓库，因而将无法下载构建。仓库搜索服务下面列出几个目前能用的maven坐标服务：1.The Centrl Repository：http://search.maven.org/2.Maven Repository：http://www.mvnrepository.com/3.Nexus Repository Manager：https://repository.sonatype.org/#welcome《Maven实战》读书笔记]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[svn总结]]></title>
    <url>%2Fblog%2Fsvn%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[SVN是Subversion的简称，是一个开放源代码的版本控制系统，相较于RCS、CVS，它采用了分支管理系统，它的设计目标就是取代CVS。互联网上很多版本控制服务已从CVS迁移到Subversion。说得简单一点SVN就是用于多个人共同开发同一个项目，共用资源的目的。服务端安装visualsvn下载地址：https://www.visualsvn.com/downloads/，选择：下载后开始安装，一路next，直到：选择仓库地址和端口号，然后继续next即可。客户端安装tortoisesvn下载地址：https://tortoisesvn.net/downloads.html，安装过程一路next即可。tortoisesvn语言包，tortoisesvn下载地址下面可选择安装对应的语言包：服务端配置新增repository仓库打开VisualSvn server,如下图所示新建一个repository：填写仓库名称：新建完后左边目录如下图所示：创建项目文件夹右键新建好的MyRepository，选择新建 → Floder…：填写Floder名称：点击ok即可。创建完后：创建用户这里我们创建两个开发者账号：developer1和developer2，两个测试人员：tester1和tester2。点击Users → Create User：创建好developer1后再执行同样操作创建剩余的账号，创建完后如图所示：创建用户群这里我们建立两个群：开发者群和测试人员群：点击Groups → Create Group…：点击Add按钮向群中添加用户：点击ok后就创建好了developer群并添加了相关人员，创建测试群操作一样，创建好后如下图所示：设置权限右击项目文件夹Project1，选择properties：弹出框点击Add添加用户群：点击ok后如下图所示设置用户群权限：因为测试人员不参与开发，所以将其权限设置为Read Only即可。使用tortoisesvn导入项目右击需要导入的项目，选择导入：弹出框：其中URL来源于之前在服务端新建的项目文件夹的URL地址，获取方法为：点击确定后即可向服务器导入项目：使用tortoisesvn导出项目在需要导出项目的路径下右键选择SVN检出，然后弹出：点击确定后弹出账号密码填写框，这里我们分别使用develop1和developer2检出：检出后：SVN提交在developer1文件夹下新建一个readme.txt文件，然后选中该文件右击选择加入：完成后会发现readme.txt上新增了一个加号的图标：此文件可以提交到SVN库里了。选中文件右键选择SVN提交：可以在信息框里填写修改信息，点击确定后readme.txt即可被提交到SVN库：SVN更新developer1提交了新文件，现在在developer2文件夹下更新此文件：右键developer2文件夹，选择SVN更新，弹出填写账号密码框，填写developer2账号密码即可。更新后developer2文件夹同步了readme.txt文件：解决冲突冲突来源：比如developer1修改了readme.txt文件的内容，并且提交了。这时候developer2并没有去更新developer1提交的内容，修改的文件也为readme.txt，developer2修改完提交时就会发现版本冲突了，如下图所示：冲突的文件被标记问感叹号，并且多出了3个文件。解决冲突有两种办法：1.选择冲突文件，右键选择SVN还原，这样项目就会被还原到你修改前的状态。这种做法缺点显而易见，那就是你修改部分的代码变没了，所以选择这种方法前，请注意备份好自己修改部分的源代码。2.选择冲突文件，右键选择编辑冲突：红色部分即为冲突部分，可以和提交此文件的开发者商量，将商量好后的代码放置于已合并部分即可：点击保存后，多出来的3个文件本删除了，这时候将readme.txt提交即可。验证权限使用tester1的账号导出项目后，在项目里添加一个modify.txt文件，然后加入，提交：操作限制。]]></content>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[maven坐标与依赖]]></title>
    <url>%2Fblog%2Fmaven%E5%9D%90%E6%A0%87%E4%B8%8E%E4%BE%9D%E8%B5%96.html</url>
    <content type="text"><![CDATA[坐标在maven中，任何构件都有明确定义的坐标。这些坐标是通过一些元素定义的，下面是nexus-indexer的坐标定义：1234&lt;groupId&gt;org.sonatype.nexus&lt;/groupId&gt;&lt;artifactId&gt;nexus-indexer&lt;/artifactId&gt;&lt;version&gt;2.0.0&lt;/version&gt;&lt;packing&gt;jar&lt;/packing&gt;groupId：定义当前maven项目隶属的实际项目，一般由公司前缀+隶属项目名称组成artifactId：定义当前maven项目模块，一般由隶属项目名称+当前maven模块名称组成version：版本号packing：打包方式。有jar，war等，默认为jar classifier：定义构件输出的一些附属构件。本例主构件输出nexus-indexer-2.0.0.jar，附属构件比如有：nexus-indexer-2.0.0-javadoc.jar，nexus-indexer-2.0.0-source.jar等依赖配置除了上面的基本坐标定义，依赖还可以包含：123456789101112131415161718192021&lt;project&gt; ... &lt;dependency&gt; &lt;dependency&gt; &lt;groupId&gt;... &lt;/groupId&gt; &lt;artifactId&gt;... &lt;/artifactId&gt; &lt;version&gt;... &lt;/version&gt; &lt;type&gt;... &lt;/type&gt; &lt;scope&gt;... &lt;/scope&gt; &lt;optional&gt;... &lt;/optional&gt; &lt;exclusions&gt; &lt;exclusion&gt; ... &lt;/exclusion&gt; ... &lt;/exclusions&gt; &lt;/dependency&gt; ... &lt;/dependency&gt; ...&lt;/project&gt;type：依赖的类型，对应坐标中的packing，默认为jar，一般不用声明scope：依赖的范围optional：标记依赖是否可选，若为true则为可选依赖。可选依赖不能传递exclusions：用来排除传递性依赖依赖范围在一个maven项目中主要有三个classpath：编译classpath，测试classpath，运行时classpath。下表列出了依赖范围和classpath的关系：依赖范围（Scope）对于编译classpath有效对于测试classpath有效对于运行时classpath有效例子compile√√√spring-coretest×√×JUnitprovided√√×servlet-apiruntime×√√JDBC驱动实现system√√×本地的，Maven仓库外的 类库文件compile：编译依赖范围test：测试依赖范围provided：已提供依赖范围runtime：运行时依赖范围system：系统依赖范围import：导入依赖范围传递性依赖现有pom如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.juven.mvnbook.account&lt;/groupId&gt; &lt;artifactId&gt;account-email&lt;/artifactId&gt; &lt;name&gt;Account Email&lt;/name&gt; &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;4.3.3.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;4.3.3.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;4.3.3.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;4.3.3.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.mail&lt;/groupId&gt; &lt;artifactId&gt;mail&lt;/artifactId&gt; &lt;version&gt;1.4.7&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.7&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.icegreen&lt;/groupId&gt; &lt;artifactId&gt;greenmail&lt;/artifactId&gt; &lt;version&gt;1.5.2&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt;上面的xml中有一个org.springframework：spring-core.4.3.3.RELEASE.jar依赖。在中央仓库查看其xml，会发现其还包含了：123456&lt;dependency&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;version&gt;1.2&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt;该依赖的范围为compile，而spring-core依赖没有直接声明依赖范围，默认为compile。现在account-email有一个compile范围的spring-core依赖，spring-core有一个compile范围的comms-logging依赖，所以comms-logging会成为account-email的compile范围的传递性依赖。现假设A依赖于B，B依赖于C，那么A相对于B是第一直接依赖，B相对于C是第二直接依赖，A相对于C是传递性依赖，其依赖范围按下表定义：compiletestprovidedruntimecompilecompile——compiletesttest——testprovidedprovided—providedprovidedruntimeruntime——runtime表中，第一列是第一直接依赖范围，第一行是第二直接依赖范围，交叉部分是最终传递性依赖范围。依赖调解依赖调解有两个原则：1.路径最近的优先现在有如下两个依赖：A → B → C → X（1.0.0）A → B → X（1.2.1）A有两个版本的传递性依赖X，因为X（1.2.1）路径较短，所以最终X（1.2.1）会被解析使用。2.第一声明者优先现在有如下两个依赖：A → B → X（1.0.0）A → B → X（1.2.1）两个版本X的依赖路径一样长，这时候谁被解析取决于谁先定义！排除依赖使用compile:tree查看依赖树：123456789101112131415[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ account-email ---[INFO] com.juven.mvnbook.account:account-email:jar:1.0.0-SNAPSHOT[INFO] +- org.springframework:spring-core:jar:4.3.3.RELEASE:compile[INFO] | \- commons-logging:commons-logging:jar:1.2:compile[INFO] +- org.springframework:spring-beans:jar:4.3.3.RELEASE:compile[INFO] +- org.springframework:spring-context:jar:4.3.3.RELEASE:compile[INFO] | +- org.springframework:spring-aop:jar:4.3.3.RELEASE:compile[INFO] | \- org.springframework:spring-expression:jar:4.3.3.RELEASE:compile[INFO] +- org.springframework:spring-context-support:jar:4.3.3.RELEASE:compile[INFO] +- javax.mail:mail:jar:1.4.7:compile[INFO] | \- javax.activation:activation:jar:1.1:compile[INFO] +- junit:junit:jar:4.7:test[INFO] \- com.icegreen:greenmail:jar:1.5.2:test[INFO] +- com.sun.mail:javax.mail:jar:1.5.6:test[INFO] \- org.slf4j:slf4j-api:jar:1.7.21:test如上所述的，spring-core隐式依赖于commons-logging，如果不想传递此依赖，可以为spring-core添加exclusions元素：1234567891011&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;4.3.3.RELEASE&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;commons-logging&lt;/groupId&gt; &lt;artifactId&gt;commons-logging&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt;再次执行dependency:tree命令：1234567891011121314[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ account-email ---[INFO] com.juven.mvnbook.account:account-email:jar:1.0.0-SNAPSHOT[INFO] +- org.springframework:spring-core:jar:4.3.3.RELEASE:compile[INFO] +- org.springframework:spring-beans:jar:4.3.3.RELEASE:compile[INFO] +- org.springframework:spring-context:jar:4.3.3.RELEASE:compile[INFO] | +- org.springframework:spring-aop:jar:4.3.3.RELEASE:compile[INFO] | \- org.springframework:spring-expression:jar:4.3.3.RELEASE:compile[INFO] +- org.springframework:spring-context-support:jar:4.3.3.RELEASE:compile[INFO] +- javax.mail:mail:jar:1.4.7:compile[INFO] | \- javax.activation:activation:jar:1.1:compile[INFO] +- junit:junit:jar:4.7:test[INFO] \- com.icegreen:greenmail:jar:1.5.2:test[INFO] +- com.sun.mail:javax.mail:jar:1.5.6:test[INFO] \- org.slf4j:slf4j-api:jar:1.7.21:test可发现spring-core已经不依赖于commons-logging了，当然这里只是单纯演示排除依赖，commons-logging对于Spring框架是必须的。归类依赖在上述的pom中，spring的版本都为4.3.3.RELEASE版本，而且对于一个框架来说，其各个模块的版本一般都是一样的，这里我们可以统一声明其版本，然后引用即可：123456789101112131415161718192021222324&lt;properties&gt; &lt;springframework.version&gt;4.3.3.RELEASE&lt;/springframework.version&gt;&lt;/properties&gt;...&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;springframework.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;springframework.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;springframework.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;$&#123;springframework.version&#125;&lt;/version&gt;&lt;/dependency&gt;这样在以后更新spring版本的时候，只需要修改properties即可。优化依赖除了使用dependency:tree命令外，还可使是dependency:list查看所有依赖：dependency:list12345678910111213141516[INFO] --- maven-dependency-plugin:2.8:list (default-cli) @ account-email ---[INFO] [INFO] The following files have been resolved:[INFO] org.springframework:spring-beans:jar:4.3.3.RELEASE:compile[INFO] org.springframework:spring-context-support:jar:4.3.3.RELEASE:compile[INFO] org.slf4j:slf4j-api:jar:1.7.21:test[INFO] junit:junit:jar:4.7:test[INFO] com.sun.mail:javax.mail:jar:1.5.6:test[INFO] com.icegreen:greenmail:jar:1.5.2:test[INFO] commons-logging:commons-logging:jar:1.2:compile[INFO] org.springframework:spring-aop:jar:4.3.3.RELEASE:compile[INFO] javax.activation:activation:jar:1.1:compile[INFO] javax.mail:mail:jar:1.4.7:compile[INFO] org.springframework:spring-core:jar:4.3.3.RELEASE:compile[INFO] org.springframework:spring-context:jar:4.3.3.RELEASE:compile[INFO] org.springframework:spring-expression:jar:4.3.3.RELEASE:compile使用dependency:analyze分析依赖：1234567[INFO] &lt;&lt;&lt; maven-dependency-plugin:2.8:analyze (default-cli) @ account-email &lt;&lt;&lt;[INFO] [INFO] --- maven-dependency-plugin:2.8:analyze (default-cli) @ account-email ---[WARNING] Unused declared dependencies found:[WARNING] org.springframework:spring-core:jar:4.3.3.RELEASE:compile[WARNING] org.springframework:spring-beans:jar:4.3.3.RELEASE:compile[INFO] ------------------------------------------------------------------------《Maven实战》读书笔记]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用m2eclipse创建maven项目]]></title>
    <url>%2Fblog%2F%E4%BD%BF%E7%94%A8m2eclipse%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE.html</url>
    <content type="text"><![CDATA[新建maven项目新建一个maven project，填写Group Id，Artifact Id：点击finish后项目目录下自动生成了pom.xml文件（Project Object Model，项目对象模型）：1234567891011121314151617181920212223242526&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;mrbird.leanote.com&lt;/groupId&gt; &lt;artifactId&gt;hello_maven&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;hello_maven&lt;/name&gt; &lt;url&gt;http://maven.apache.org&lt;/url&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.7&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;&lt;groupId&gt;定义了项目属于哪个组，一般为公司域名加组名。&lt;artifactId&gt;定义了当前maven项目在组中的唯一id。&lt;version&gt;定义了当前项目的版本。&lt;name&gt;定义了更为友好的项目名称。&lt;dependencies&gt;包含一个或多个&lt;dependency&gt;，上面代码添加了一个依赖——groupId为junit，artifactId为junit，version为4.7。通过这段声明，maven能够自动下载junit-4.7.jar。编写主代码在src/main/java目录下的mrbird.leanote.com.hello_maven包下新建HelloMaven.java：12345678910public class HelloMaven &#123; public String sayHello()&#123; return "Hello Maven"; &#125; public static void main(String[] args)&#123; System.out.print( new HelloMaven().sayHello() ); &#125;&#125;进行maven进行编译，右击项目→Run As→Maven build…：然后点击run：12345678910111213141516171819202122[INFO] Scanning for projects...[INFO] [INFO] ------------------------------------------------------------------------[INFO] Building hello_maven 0.0.1-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ hello_maven ---[INFO] Deleting F:\workspaces\Spring\hello_maven\target[INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ hello_maven ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] skip non existing resourceDirectory F:\workspaces\Spring\hello_maven\src\main\resources[INFO] [INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ hello_maven ---[INFO] Compiling 1 source file to F:\workspaces\Spring\hello_maven\target\classes[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 2.443s[INFO] Finished at: Mon Oct 17 13:12:43 CST 2016[INFO] Final Memory: 11M/115M[INFO] ------------------------------------------------------------------------clean告诉maven清理输出目录target/，compile告诉maven编译项目主代码。从上面的输出可以看出，maven首先执行了celan任务，删除target/目录。接着执行resource任务，将项目主代码编译至F:\workspaces\Spring\hello_maven\target\classes目录。编写测试代码在src/test/java目录下的mrbird.leanote.com.hello_maven包下新建HelloMavenTest.java：123456789public class HelloMavenTest&#123; @Test public void testSayHello() &#123; HelloMaven helloMaven = new HelloMaven(); String result = helloMaven.sayHello(); assertEquals( "Hello Maven", result ); &#125;&#125;调用maven执行测试，右击项目→Run As→Maven build…输入clean test→run：12345678910111213141516171819202122232425262728293031323334353637383940414243[INFO] Scanning for projects...[INFO] [INFO] ------------------------------------------------------------------------[INFO] Building hello_maven 0.0.1-SNAPSHOT[INFO] ------------------------------------------------------------------------[INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ hello_maven ---[INFO] Deleting F:\workspaces\Spring\hello_maven\target[INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ hello_maven ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] skip non existing resourceDirectory F:\workspaces\Spring\hello_maven\src\main\resources[INFO] [INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ hello_maven ---[INFO] Compiling 1 source file to F:\workspaces\Spring\hello_maven\target\classes[INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ hello_maven ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] skip non existing resourceDirectory F:\workspaces\Spring\hello_maven\src\test\resources[INFO] [INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ hello_maven ---[INFO] Compiling 1 source file to F:\workspaces\Spring\hello_maven\target\test-classes[INFO] [INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ hello_maven ---[INFO] Surefire report directory: F:\workspaces\Spring\hello_maven\target\surefire-reports ------------------------------------------------------- T E S T S-------------------------------------------------------Running mrbird.leanote.com.hello_maven.HelloMavenTestTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.056 sec Results : Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 2.794s[INFO] Finished at: Mon Oct 17 13:32:08 CST 2016[INFO] Final Memory: 13M/151M[INFO] ------------------------------------------------------------------------测试通过。打包运行compile和test之后，执行package。右击项目→Run As→Maven build…输入clean package→run：123456789101112131415161718192021...------------------------------------------------------- T E S T S-------------------------------------------------------Running mrbird.leanote.com.hello_maven.HelloMavenTestTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.078 sec Results : Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ hello_maven ---[INFO] Building jar: F:\workspaces\Spring\hello_maven\target\hello_maven-0.0.1-SNAPSHOT.jar[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 4.254s[INFO] Finished at: Mon Oct 17 13:53:15 CST 2016[INFO] Final Memory: 13M/139M[INFO] ------------------------------------------------------------------------打包成功，已经生成了jar包。如果要让别的maven项目能够引用HelloMaven，则还需执行 clean install：12345678910111213141516171819202122232425...------------------------------------------------------- T E S T S-------------------------------------------------------Running mrbird.leanote.com.hello_maven.HelloMavenTestTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 sec Results : Tests run: 1, Failures: 0, Errors: 0, Skipped: 0 [INFO] [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ hello_maven ---[INFO] Building jar: F:\workspaces\Spring\hello_maven\target\hello_maven-0.0.1-SNAPSHOT.jar[INFO] [INFO] --- maven-install-plugin:2.4:install (default-install) @ hello_maven ---[INFO] Installing F:\workspaces\Spring\hello_maven\target\hello_maven-0.0.1-SNAPSHOT.jar to C:\Users\Administrator\.m2\repository\mrbird\leanote\com\hello_maven\0.0.1-SNAPSHOT\hello_maven-0.0.1-SNAPSHOT.jar[INFO] Installing F:\workspaces\Spring\hello_maven\pom.xml to C:\Users\Administrator\.m2\repository\mrbird\leanote\com\hello_maven\0.0.1-SNAPSHOT\hello_maven-0.0.1-SNAPSHOT.pom[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 4.486s[INFO] Finished at: Mon Oct 17 14:01:13 CST 2016[INFO] Final Memory: 14M/138M[INFO] ------------------------------------------------------------------------该操作会将该项目打包后的jar和pom文件拷贝到本地maven仓库。因为主方法中有main方法，默认打包生成的jar包是不能运行的，如：12F:\workspaces\Spring\hello_maven&gt;java -jar target/hello_maven-0.0.1-SNAPSHOT.jartarget/hello_maven-0.0.1-SNAPSHOT.jar中没有主清单属性为了生成可执行的jar，需要借助maven-shade-plugin，在pom中配置：1234567891011121314151617181920212223242526&lt;build&gt;&lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt; &lt;version&gt;1.2.1&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;shade&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;transformers&gt; &lt;transformer implementation="org.apache.maven.plugins.shade. resource.ManifestResourceTransformer"&gt; &lt;mainClass&gt;mrbird.leanote.com.hello_maven.HelloMaven&lt;/mainClass&gt; &lt;/transformer&gt; &lt;/transformers&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt;配置mainClass为mrbird.leanote.com.hello_maven.HelloMaven。再次执行clean install操作，然后执行jar：12F:\workspaces\Spring\hello_maven&gt;java -jar target/hello_maven-0.0.1-SNAPSHOT.jarHello Maven《Maven实战》读书笔记]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[环境变量设置]]></title>
    <url>%2Fblog%2F%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE.html</url>
    <content type="text"><![CDATA[JDK1.JAVA_HOME：1C:\Program Files\Java\jdk1.8.0_602.Path：1%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin3.CLASSPATH :1.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar检测：1234567C:\Users\Administrator&gt;echo %java_home%C:\Program Files\Java\jdk1.8.0_60 C:\Users\Administrator&gt;java -versionjava version "1.8.0_60"Java(TM) SE Runtime Environment (build 1.8.0_60-b27)Java HotSpot(TM) 64-Bit Server VM (build 25.60-b23, mixed mode)MAVEN1.M2_HOME：1D:\Program Files\apache-maven-3.1.12.Path：1%M2_HOME%\bin测试：12345678910C:\Users\Administrator&gt;echo %m2_home%D:\Program Files\apache-maven-3.1.1 C:\Users\Administrator&gt;mvn -vApache Maven 3.1.1 (0728685237757ffbf44136acec0402957f723d9a)Maven home: D:\Program Files\apache-maven-3.1.1Java version: 1.8.0_60, vendor: Oracle CorporationJava home: C:\Program Files\Java\jdk1.8.0_60\jreDefault locale: zh_CN, platform encoding: GBKOS name: "windows 10", version: "10.0", arch: "amd64", family: "dos"]]></content>
      <tags>
        <tag>环境变量</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring 事务管理]]></title>
    <url>%2Fblog%2FSpring-%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86.html</url>
    <content type="text"><![CDATA[在SimpleJdbcTemplate的UserDaoImpl中的addUser()方法中手动制造一个NullPointerException异常：123456789public void addUser(User user) &#123; Map&lt;String, Object&gt; params=new HashMap&lt;String, Object&gt;(); params.put("name", user.getName()); params.put("age", user.getAge()); params.put("pwd", user.getPassword()); jdbcTemplate.update(SQL_INSERT_USER, params); String a = null; a.toString();&#125;测试addUser()方法：123456789101112public class TestJdbc &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); UserDao dao=ac.getBean("userDao",UserDao.class); User u=new User(); u.setName("testUser"); u.setAge("24"); u.setPassword("123456"); dao.addUser(u); &#125;&#125;执行时，控制台抛出NullPointerException异常，但是数据插入成功了么？查询数据库：123456SQL&gt; select * from lzp.userinfo; USERI NAME AGE PWD----- ---------- --- ----------8 testUser 24 1234564 SCOTT 25 123456发现虽然addUser()方法抛出了异常，但是数据还是被成功的插入，这违背了事务的ACID原则。Spring提供了对事务管理的支持。这里仅介绍声明式事务。选择事务管理器JDBC事务管理器如果应用程序中直接使用JDBC来进行持久化，那么应该选择DataSourceTransactionManager作为事务管理器：1234&lt;bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource" /&gt;&lt;/bean&gt;Hibernate事务管理器如果应用程序的持久化是通过Hibernate来实现的，那么应该选择HibernateTransactionManager作为事务管理器：1234&lt;bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"&gt; &lt;property name="sessionFactory" ref="sessionFactory" /&gt;&lt;/bean&gt;事务五大属性传播行为传播行为（propagation behavior）定义了客户端与被调用方法之间的事务边界。即何时要创建一个事务，或者何时使用已有的事务：传播行为含义PROPAGATION_MANDATORY表示该方法必须在事务中进行，如果当前事务不存在，则会 抛出一个异常PROPAGATION_NESTED如果当前已存在一个事务，那么该方法在嵌套事务中运行。 嵌套事务可以独立于当前事务进行单独地提交或回滚。如 果当前事务不存在，那么行为和 PROPAGATION_REQUIRED一样PROPAGATION_NEVER表示当前方法不运行在事务上下文中。如果当前正有一个 事务在运行，则会抛出异常PROPAGATION_NOT_SUPPORTED表示该方法不应该运行在事务上下文中，如果存在当前事 务，在该方法运行期间，当前事务会被挂起PROPAGATION_REQUIRED表示当前方法必须运行在事务中，如果事务不存在，则启 动一个新的事务PROPAGATION_REQUIRED_NEW表示当前方法必须运行在它自己的事务中。一个新的事务 将启动。如果存在当前事务，当前事务会被挂起PROPAGATION_SUPPORTS表示当前方法不需要事务上下文，但是如果存在当前事务 的话，那么该方法会在这个事务中运行&nbsp;&nbsp;隔离级别隔离级别（isolation level）定义了一个事务可能受其他并发事务的影响程度。并发操作相同的数据可能产生一些问题：1.脏读（Dirty reads）—— 发生在一个事务读取了另一个事务改写后但未提交的数据，如果改写被回滚了，那么第一个事务获取的数据就是“脏”的。2.不可重复读（Nonrepeatable read）—— 一个事务执行两次以上相同查询得到不同的数据。这通常是另外一个事务在此期间更新了数据。3.幻读（Phantom read）—— 一个事务读取了几行数据，另一个事务插入了几条数据，当第一个事务再次读取时发现多了几条原本没有的数据。隔离级别如下表所示：隔离级别含义ISOLATION_DEFAULT使用后端数据库默认的隔离级别ISOLATION_READ_UNCOMMITTED允许读取尚未提交的数据表更。可能导致脏读，不可重复 读，幻读ISOLATION_READ_COMMITTED允许读取并发事务已经提交的数据，可以阻止脏读，但不 可重复读，幻读仍可能发生ISOLATION_REPEATABLE_READ对同一字段的多次读取结果一致，除非数据是本事务自己 修改的。可以阻止脏读，不可重复读，但仍可能发生幻读REPEATABLE_SERIALIZABLE完全服从事务的ACID原则，避免脏读，不可重复读，幻读可以看出，ISOLATION_READ_UNCOMMITTED隔离级别是最低的，可能导致脏读，不可重复读，幻读。REPEATABLE_SERIALIZABLE隔离级别最高，但是这会降低数据读取速率，它通常是通过完全锁定事务相关的数据库表来实现的。只读只读（read-only） 如果事务只读数据库进行读操作，那么设置该属性为true可以给数据库执行优化措施。因为只读是在事务启动，由数据库实施的，所以对那些具备启动一个新的事务的传播行为（PROPAGATION_REQUIRED，PROPAGATION_REQUIRED_NEW和PROPAGATION_NESTED）才有意义。设置只读还会使Hibernate的flush模式被设置为FLUSH_NEVER。事务超时超时（timeout）假如事务运行时间过长，则会影响效率，所以可以设置超时属性，超时后执行自动回滚。因为超时时钟会在事务开启时启动，所以只有对那些具备启动一个新的事务的传播行为（PROPAGATION_REQUIRED，PROPAGATION_REQUIRED_NEW和PROPAGATION_NESTED）才有意义。回滚原则默认情况遇到运行期异常就回滚。回滚原则可以定义遇到哪些异常不回滚。XML中定义事务使用tx命名空间配置：123456&lt;tx:advice id="txAdvice" transaction-manager="transactionManager"&gt; &lt;tx:attributes&gt; &lt;tx:method name="add*" propagation="REQUIRED"/&gt; &lt;tx:method name="*" propagation="SUPPORTS" read-only="true"/&gt; &lt;/tx:attributes&gt;&lt;/tx:advice&gt;transaction-manager为上述的事务管理器。&lt;tx:method&gt;元素为某个（某些）name属性指定的方法定义事务参数。&lt;tx:method&gt;有多个属性来帮助定义方法的事务策略，这些属性对于上述的事务五大属性：属性含义isolation指定隔离级别propagation指定传播原则read-only指定事务为只读回滚原则：rollback-forno-rollback-forrollback-for指定事务为哪些检查型异常回滚no-rollback-for指定事务对哪些异常继续运行而不回滚timeout设定事务超时时间我们还需设定哪些Bean应该被通知，使用aop定义一个通知器（advisor）：12345&lt;aop:config&gt; &lt;aop:advisor pointcut="execution(* *..UserDaoImpl.*(..))" advice-ref="txAdvice"/&gt;&lt;/aop:config&gt;advice-ref属性引用了名为txAdvice的通知。现在测试添加事务后的addUser()方法：123456789101112public class TestTransaction &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); UserDao dao=ac.getBean("userDao",UserDao.class); User u=new User(); u.setName("testTx"); u.setAge("30"); u.setPassword("123456"); dao.addUser(u); &#125;&#125;控制台抛出异常：12Exception in thread "main" java.lang.NullPointerException at com.spring.dao.UserDaoImpl.addUser(UserDaoImpl.java:51)查询数据：123456SQL&gt; select * from lzp.userinfo; USERI NAME AGE PWD----- ---------- --- ----------8 testUser 24 1234564 SCOTT 25 123456可以发现testTx并没有被插入。注解事务除了使用XML定义事务，我们还可以注解事务，通过声明：1&lt;tx:annotation-driven transaction-manager="transactionManager"/&gt;&lt;tx:annotation-driven&gt;告诉Spring检查上下文中所有使用@Transaction注解的Bean，不管这个注解是在类级别上还是方法级别上。使用注解修改UserDaoImpl：12345678910111213141516@Repository("userDao")@Transactional(propagation=Propagation.SUPPORTS,readOnly=true)public class UserDaoImpl implements UserDao &#123; //... @Transactional(propagation=Propagation.REQUIRED,readOnly=false) public void addUser(User user) &#123; Map&lt;String, Object&gt; params=new HashMap&lt;String, Object&gt;(); params.put("name", user.getName()); params.put("age", user.getAge()); params.put("pwd", user.getPassword()); jdbcTemplate.update(SQL_INSERT_USER, params); String a=null; a.toString(); &#125; //...&#125;再次运行testTransaction()方法，抛出异常后查询数据库：123456SQL&gt; select * from lzp.userinfo; USERI NAME AGE PWD----- ---------- --- ----------8 testUser 24 1234564 SCOTT 25 123456可发现和XML配置事务效果是一样的。《Spring In Action》读书笔记]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[各进制数的转换]]></title>
    <url>%2Fblog%2F%E5%90%84%E8%BF%9B%E5%88%B6%E6%95%B0%E7%9A%84%E8%BD%AC%E6%8D%A2.html</url>
    <content type="text"><![CDATA[总结备忘。十进制转二进制方法为：十进制数除2取余法，即十进制数除2，余数为权位上的数，得到的商值继续除2，依此步骤继续向下运算直到商为0为止。12345678217/2 = 108 ---- 1108/2 = 54 ---- 054/2 = 27 ---- 027/2 = 13 ---- 113/2 = 6 ---- 16/2 = 3 ---- 03/2 = 1 ---- 11/2 = 0 ---- 1所以十进制217转二进制数为 11011001。js转换：12&gt; parseInt("217").toString(2);&gt; "11011001"二进制转十进制方法为：把二进制数按权展开、相加即得十进制数。$$ 11011001=1\times2^0+1\times2^3+1\times2^4+1\times2^6+1\times2^7=1+8+16+64+128=217 $$js转换：12&gt; parseInt("11011001",2);&gt; 217二进制转八进制方法为：3位二进制数按权展开相加得到1位八进制数。（注意事项，3位二进制转成八进制是从右到左开始转换，不足时补0）。$$ 11011001=(011)(011)(001)=(1\times2^0+1\times2^1)(t\times2^0+1\times2^1)(t\times2^0)=331 $$js转换：12&gt; parseInt("11011001",2).toString(8);&gt; "331"八进制转二进制方法为：八进制数每个位上的数分别转换为三位二进制，顺序从右往左。$$ 331=(3)(3)(1)=(011)(011)(001)=11011001 $$js转换：12&gt; parseInt('331',8).toString(2);&gt; "11011001"二进制转十六进制方法为：与二进制转八进制方法近似，八进制是取三合一，十六进制是取四合一。（注意事项，4位二进制转成十六进制是从右到左开始转换，不足时补0）。$$ 11011001=(1101)(1001)=(1\times2^0+1\times2^2+1\times2^3)(1\times2^0+1\times2^3)=(13)(9)=d9 $$js转换：12&gt; parseInt('11011001',2).toString(16);&gt; "d9"十六进制转二进制方法为：十六进制数每个位上的数分别转换为四位二进制，顺序从右往左。$$ d9=(d)(9)=(13)(9)=(1101)(1001)=11011001 $$js转换：12&gt; parseInt('d9',16).toString(2);&gt; "11011001"十进制转八进制方法和十进制转二进制类似：123150/8 = 18 ---- 618/8 = 2 ---- 22/8 = 0 ---- 2js转换：12&gt; parseInt(150).toString(8);&gt; "226"八进制转十进制方法：把八进制数按权展开、相加即得十进制数。$$ 226=2\times8^2+2\times8^1+6\times8^0=128=16=6=150 $$js转换：12&gt; parseInt('226',8);&gt; 150十进制转十六进制方法和十进制转二进制类似：12150/16 = 9 ---- 69/16 = 0 ---- 9js转换：12&gt; parseInt(150).toString(16);&gt; "96"十六进制转十进制方法：把八进制数按权展开、相加即得十进制数。$$ 96=9\times16^1+6\times16^0=144+16=150 $$js转换：12&gt; parseInt('96',16);&gt; 150]]></content>
      <tags>
        <tag>进制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring SimpleJdbcTemplate]]></title>
    <url>%2Fblog%2FSpring-SimpleJdbcTemplate.html</url>
    <content type="text"><![CDATA[Spring提供了JDBC模板，代替了JDBC繁琐操作。使用Spring JDBC模板我们不再需要手动去关闭连接，抛出的异常也更为明确。准备工作数据库创建表：123456create table userinfo ( userid varchar2(5) not null, name varchar2(10), age varchar2(3), pwd varchar2(10))创建序列：1create sequence user_seq start with 1 increment by 1;配置数据源连接池新建一个数据库配置文件db.properties：123username=oraclepassword=123456url=jdbc:oracle:thin:/localhost:1521/orcl在Spring配置文件读取db.properties1&lt;util:properties id="db" location="classpath:db.properties" /&gt;配置连接池：1234567891011&lt;bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"&gt; &lt;property name="driverClassName" value="oracle.jdbc.OracleDriver"/&gt; &lt;!-- SpEL读取 --&gt; &lt;property name="url" value="#&#123;db.url&#125;"/&gt; &lt;property name="username" value="#&#123;db.username&#125;"/&gt; &lt;property name="password" value="#&#123;db.password&#125;"/&gt; &lt;property name="initialSize" value="5"/&gt; &lt;property name="maxActive" value="10"/&gt;&lt;/bean&gt;除了上述配置属性，下表列出了BasicDataSource的一些常用属性：池配置属性所指定的内容initialSize池启动时创建的连接数量maxActive同一时间可以从池中分配的最多连接数，如果设置为0，表示无限制maxIdle池里不会被释放的最多空闲连接数。如果设置为0，表示无限制maxOpenPreparedStatements在同一时间能够从语句池中分配的预处理语句的最大数量。如果设置 为0，表示无限制maxWait在抛出异常之前，池等待连接回收的最大时间 (当没有可用连接时)。 如果设置为-1，表示无限等待minEvictableIdleTimeMillis连接在池中保持空闲而不被回收的最大时间minIdle在不创建新连接的情况下，池中保持空闲的最小连接数poolPreparedStatements是否对预处理语句进行池管理（布尔类型）使用JdbcTemplate在Spring配置文件中配置JdbcTemplate：1234&lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate"&gt; &lt;constructor-arg ref="dataSource"/&gt;&lt;/bean&gt;新建一个User类，用于存储查询结果：1234567public class User &#123; private Integer userId; private String name; private String age; private String password; // get,set略&#125;新建UserDao interface，定义基本的增删改查方法：1234567public interface UserDao &#123; void addUser(User user); void deleteUser(Integer userId); void updateUser(User user); User selectUser(Integer userId); List&lt;User&gt; selectAll();&#125;新建UserDao实现类UserDaoImpl：12345678// DAO注解@Repository("userDao")public class UserDaoImpl implements UserDao &#123; // 注入JdbcTemplate @Resource private SimpleJdbcTemplate jdbcTemplate; // ......&#125;增加用户实现addUser()方法：12345678910private static final String SQL_INSERT_USER = "insert into userinfo (userid,name,age,pwd) " + "values (user_seq.nextval,?,?,?)";public void addUser(User user) &#123; Object[] params = &#123; user.getName(), user.getAge(), user.getPassword() &#125;; jdbcTemplate.update(SQL_INSERT_USER, params);&#125;上述SQL使用了索引参数，这使得我们不得不严格按照参数的顺序来定义参数。SimpleJdbcTemplate支持使用命名参数的SQL。修改addUser()方法：12345678910private static final String SQL_INSERT_USER = "insert into userinfo (userid,name,age,pwd) " + "values (user_seq.nextval,:name,:age,:pwd)";public void addUser(User user) &#123; Map&lt;String, Object&gt; params=new HashMap&lt;String, Object&gt;(); params.put("name", user.getName()); params.put("age", user.getAge()); params.put("pwd", user.getPassword()); jdbcTemplate.update(SQL_INSERT_USER, params);&#125;现在，参数的顺序已经不重要了，只要参数名称对应上就行。测试：123456789101112public class TestJdbc &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); UserDao dao=ac.getBean("userDao",UserDao.class); User user=new User(); user.setName("SCOTT"); user.setAge("25"); user.setPassword("123456"); dao.addUser(user); &#125;&#125;查询数据库：12345SQL&gt; select * from lzp.userinfo where name='SCOTT'; USERI NAME AGE PWD----- ---------- --- ----------5 SCOTT 25 123456删除用户实现deleteUser()方法：12345private static final String SQL_DELETE_USER = "delete from userinfo where userid=?";public void deleteUser(Integer userId) &#123; jdbcTemplate.update(SQL_DELETE_USER, userId);&#125;测试：12345678public class TestJdbc &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); UserDao dao=ac.getBean("userDao",UserDao.class); dao.deleteUser(5); &#125;&#125;查询数据库，SCOTT已被删除：123456SQL&gt; select * from lzp.userinfo; USERI NAME AGE PWD----- ---------- --- ----------6 JANE 24 1234567 MIKE 28 123456查询单个用户实现selectUser()方法：1234567891011121314151617private static final String SQL_SELECT_USER = "select * from userinfo where userid = ?";public User selectUser(Integer userId) &#123; return jdbcTemplate.queryForObject( SQL_SELECT_USER, new ParameterizedRowMapper&lt;User&gt;() &#123; public User mapRow(ResultSet rs, int rowNum) throws SQLException &#123; User user = new User(); user.setUserId(rs.getInt("userId")); user.setName(rs.getString("name")); user.setAge(rs.getString("age")); user.setPassword(rs.getString("pwd")); return user; &#125; &#125;, userId);&#125;测试：1234567891011public class TestJdbc &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); UserDao dao=ac.getBean("userDao",UserDao.class); User user=new User(); user=dao.selectUser(6); System.out.println(user.getName()); // JANE &#125;&#125;查询所有用户实现selectAll()方法：12345678910111213141516private static final String SQL_SELECT_All_USER = "select * from userinfo"; public List&lt;User&gt; selectAll() &#123; return jdbcTemplate.query( SQL_SELECT_All_USER, new ParameterizedRowMapper&lt;User&gt;() &#123; public User mapRow(ResultSet rs, int rowNum) throws SQLException &#123; User user = new User(); user.setUserId(rs.getInt("userId")); user.setName(rs.getString("name")); user.setAge(rs.getString("age")); user.setPassword(rs.getString("pwd")); return user; &#125; &#125;);&#125;测试：1234567891011public class TestJdbc &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); UserDao dao=ac.getBean("userDao",UserDao.class); List&lt;User&gt; list=dao.selectAll(); for(User u:list)&#123; System.out.println(u.getName()); &#125; &#125;&#125;输出：12JANEMIKE修改用户实现updateUser()方法：12345678private static final String SQL_UPDATE_USER = "update userinfo set age=:age where userid=:userid";public void updateUser(User user) &#123; Map&lt;String, Object&gt; params=new HashMap&lt;String, Object&gt;(); params.put("userid", user.getUserId()); params.put("age", user.getAge()); jdbcTemplate.update(SQL_UPDATE_USER, params);&#125;测试：1234567891011public class TestJdbc &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); UserDao dao=ac.getBean("userDao",UserDao.class); User user=new User(); user.setUserId(6); user.setAge("100"); dao.updateUser(user); &#125;&#125;查询数据库，可发现值已被修改：123456SQL&gt; select * from lzp.userinfo; USERI NAME AGE PWD----- ---------- --- ----------6 JANE 100 1234567 MIKE 28 123456Spring JDBC DAO支持类除了向DAO中注入simpleJdbcTemplate外，我们还可以通过继承Spring提供的SimpleJdbcDaoSupport类：123public class UserDaoImpl extends SimpleJdbcDaoSupport implements UserDao &#123; //... &#125;获取simpleJdbcTemplate对象可通过静态方法：getSimpleJdbcTemplate()。《Spring In Action》读书笔记]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery 事件函数]]></title>
    <url>%2Fblog%2FjQuery-%E4%BA%8B%E4%BB%B6%E5%87%BD%E6%95%B0.html</url>
    <content type="text"><![CDATA[页面载入ready()当DOM载入就绪可以查询及操纵时绑定一个要执行的函数。这个方法纯粹是对向window.load事件注册事件的替代方法。有一个参数对jQuery函数的引用会传递到这个ready事件处理函数中。可以给这个参数任意起一个名字，并因此可以不再担心命名冲突而放心地使用$别名。可以在同一个页面中无限次地使用$(document).ready()事件。其中注册的函数会按照（代码中的）先后顺序依次执行。示例：在DOM加载完成时运行的代码，可以这样写：123$(document).ready(function()&#123; // 在这里写你的代码...&#125;);使用 $(document).ready() 的简写，同时内部的 jQuery 代码依然使用 $ 作为别名，而不管全局的 $ 是什么。123$(function($) &#123; // 你可以在这里继续使用$作为别名...&#125;); ​事件处理on(eve,[sel],[data],fn)on()方法在被选元素及子元素上添加一个或多个事件处理程序。自 jQuery 版本 1.7 起，on() 方法是 bind()、live() 和 delegate() 方法的新的替代品。该方法给 API 带来很多便利，我们推荐使用该方法，它简化了 jQuery 代码库。语法：1$(selector).on(event,childSelector,data,function,map)参数描述event必需。规定要从被选元素移除的一个或多个事件或命名空间。由空格分隔多个事件值。必须是有效的事件。childSelector可选。规定只能添加到指定的子元素上的事件处理程序（且不是选择器本身，比如已废弃的 delegate() 方法）。data可选。规定传递到函数的额外数据。function可选。规定当事件发生时运行的函数。map规定事件映射 ( {event:function, event:function, …}) ，包含要添加到元素的一个或多个事件，以及当事件发生时运行的函数。示例：单击文本时，显示文本的内容：123$("p").on("click", function()&#123; alert( $(this).text() );&#125;);取消表单提交操作，并通过返回false防止事件冒泡：1$("form").on("submit", false)通过使用.preventDefault()取消默认操作：123$("form").on("submit", function(event) &#123; event.preventDefault();&#125;);使用.stopPropagation()停止事件冒泡，而不会阻止表单提交：123$("form").on("submit", function(event) &#123; event.stopPropagation();&#125;);off(eve,[sel],[fn])off() 方法通常用于移除通过 on() 方法添加的事件处理程序。自 jQuery 版本 1.7 起，off() 方法是 unbind()、die() 和 undelegate() 方法的新的替代品。该方法给 API 带来很多便利，我们推荐使用该方法，它简化了 jQuery 代码库。语法：1$(selector).off(event,selector,function(eventObj),map)参数描述event必需。规定要从被选元素移除的一个或多个事件或命名空间。由空格分隔多个事件值。必须是有效的事件。selector可选。规定添加事件处理程序时最初传递给 on() 方法的选择器。function(eventObj)可选。规定当事件发生时运行的函数。map规定事件映射 ( {event:function, event:function, …}) ，包含要添加到元素的一个或多个事件，以及当事件发生时运行的函数。示例：从所有段落中删除所有事件处理函数：1$("p").off()从所有段落中删除所有单击函数：1$("p").off( "click", "**" )通过传递第三个参数，只删除一个先前绑定的处理函数：12345678910var foo = function () &#123; // code to handle some kind of event&#125;; // ... now foo will be called when paragraphs are clicked ...$("body").on("click", "p", foo); // ... foo will no longer be called.$("body").off("click", "p", foo);通过其命名空间解除所有委派的事件处理函数：123456789101112var validate = function () &#123; // code to validate form entries&#125;; // delegate events under the ".validator" namespace$("form").on("click.validator", "button", validate); $("form").on("keypress.validator", "input[type='text']", validate); // remove event handlers in the ".validator" namespace $("form").off(".validator");bind(type,[data],fn)为每个匹配元素的特定事件绑定事件处理函数。与其相反的函数为unbind()。语法：1$(selector).bind(event,data,function,map)参数描述event必需。规定添加到元素的一个或多个事件。由空格分隔多个事件值。必须是有效的事件。data可选。规定传递到函数的额外数据。function必需。规定当事件发生时运行的函数。map规定事件映射 ( {event:function, event:function, …}) ，包含要添加到元素的一个或多个事件，以及当事件发生时运行的函数。示例：当每个段落被点击的时候，弹出其文本：123$("p").bind("click", function()&#123; alert( $(this).text() );&#125;);同时绑定多个事件类型：123$('#foo').bind('mouseenter mouseleave', function() &#123; $(this).toggleClass('entered');&#125;);同时绑定多个事件类型/处理程序：12345$("button").bind(&#123; click:function()&#123;$("p").slideToggle();&#125;, mouseover:function()&#123;$("body").css("background-color","red");&#125;, mouseout:function()&#123;$("body").css("background-color","#FFFFFF");&#125; &#125;);你可以在事件处理之前传递一些附加的数据：1234function handler(event) &#123; alert(event.data.foo);&#125;$("p").bind("click", &#123;foo: "bar"&#125;, handler);通过返回false来取消默认的行为并阻止事件起泡：1$("form").bind("submit", function() &#123; return false; &#125;)通过使用 preventDefault() 方法只取消默认的行为：123$("form").bind("submit", function(event)&#123; event.preventDefault();&#125;);通过使用 stopPropagation() 方法只阻止一个事件起泡：123$("form").bind("submit", function(event)&#123; event.stopPropagation();&#125;); ​one(type,[data],fn)one() 方法为被选元素添加一个或多个事件处理程序，并规定当事件发生时运行的函数。当使用 one() 方法时，每个元素只能运行一次事件处理程序函数。语法：1$(selector).one(event,data,function)参数描述event必需。规定添加到元素的一个或多个事件。由空格分隔多个事件值。必须是有效的事件。data可选。规定传递到函数的额外数据。function必需。规定当事件发生时运行的函数。示例：当所有段落被第一次点击的时候，显示所有其文本。123$("p").one("click", function()&#123; alert( $(this).text() );&#125;); ​trigger(type,[data])trigger() 方法触发被选元素上指定的事件以及事件的默认行为（比如表单提交）。这个函数也会导致浏览器同名的默认行为的执行。比如，如果用trigger()触发一个’submit’，则同样会导致浏览器提交表单。如果要阻止这种默认行为，应返回false。示例：页面一加载就执行button的click函数：12345$(document).ready(function()&#123; $("button").click(function()&#123; alert("123"); &#125;).trigger("click");&#125;);提交第一个表单，但不用submit()1$("form:first").trigger("submit")给一个事件传递参数1234$("p").click( function (event, a, b) &#123; // 一个普通的点击事件时，a和b是undefined类型 // 如果用下面的语句触发，那么a指向"foo",而b指向"bar"&#125; ).trigger("click", ["foo", "bar"]);下面的代码可以显示一个”Hello World”123$("p").bind("myEvent", function (event, message1, message2) &#123; alert(message1 + ' ' + message2);&#125;).trigger("myEvent", ["Hello","World!"]); ​triggerHandler(type, [data])这个方法与trigger()类似，但不会执行浏览器默认动作，也不会产生事件冒泡。事件委派live(type, [data], fn)jQuery 给所有匹配的元素附加一个事件处理函数，即使这个元素是以后再添加进来的也有效。这个方法是基本是的 .bind() 方法的一个变体。使用 .bind() 时，选择器匹配的元素会附加一个事件处理函数，而以后再添加的元素则不会有。为此需要再使用一次 .bind() 才行。比如说：123&lt;body&gt; &lt;div class="clickme"&gt;Click here&lt;/div&gt;&lt;/body&gt;可以给这个元素绑定一个简单的click事件：123$('.clickme').bind('click', function() &#123; alert("Bound handler called.");&#125;);当点击了元素，就会弹出一个警告框。然后，想象一下这之后有另一个元素添加进来了。1$('body').append('&lt;div class="clickme"&gt;Another target&lt;/div&gt;');尽管这个新的元素也能够匹配选择器 “.clickme” ，但是由于这个元素是在调用 .bind() 之后添加的，所以点击这个元素不会有任何效果。.live() 就提供了对应这种情况的方法。如果我们是这样绑定click事件的：123$('.clickme').live('click', function() &#123; alert("Live handler called."); &#125;);然后再添加一个新元素：1$('body').append('&lt;div class="clickme"&gt;Another target&lt;/div&gt;');然后再点击新增的元素，他依然能够触发事件处理函数。从 jQuery 1.7 开始，不再建议使用 .live() 方法。请使用 .on() 来添加事件处理。与其作用相反的函数为die()。delegate(sel,[t],[d],fn)delegate() 方法为指定的元素（属于被选元素的子元素）添加一个或多个事件处理程序，并规定当这些事件发生时运行的函数。使用 delegate() 方法的事件处理程序适用于当前或未来的元素（比如由脚本创建的新元素）。语法：1$(selector).delegate(childSelector,event,data,function)参数描述childSelector必需。规定要添加事件处理程序的一个或多个子元素。event必需。规定添加到元素的一个或多个事件。由空格分隔多个事件值。必须是有效的事件。data可选。规定传递到函数的额外数据。function必需。规定当事件发生时运行的函数。示例：当点击鼠标时，隐藏或显示 p 元素：HTML 代码:1234&lt;div&gt; 这是一个段落。 &lt;button&gt;请点击这里&lt;/button&gt;&lt;/div&gt;jQuery 代码:123$("div").delegate("button","click",function()&#123; $("p").slideToggle();&#125;); ​delegate这个方法可作为live()方法的替代，使得每次事件绑定到特定的DOM元素。以下两段代码是等同的:12345678$("table").delegate("td", "hover", function()&#123; $(this).toggleClass("hover");&#125;);$("table").each(function()&#123; $("td", this).live("hover", function()&#123; $(this).toggleClass("hover"); &#125;); &#125;); ​与其相反的函数是undelegate()。事件切换hover([over,]out)当鼠标移动到一个匹配的元素上面时，会触发指定的第一个函数。当鼠标移出这个元素时，会触发指定的第二个函数。示例：鼠标悬停的表格加上特定的类：12345678$("td").hover( function () &#123; $(this).addClass("hover"); &#125;, function () &#123; $(this).removeClass("hover"); &#125;); ​下面连段代码效果相同：12$("td").bind("mouseenter mouseleave",handlerInOut);$("td").hover(handlerInOut);toggle([s],[easing],[fn])toggle() 方法在被选元素上进行 hide() 和 show() 之间的切换。如：在所有 元素上进行隐藏和显示之间的切换：123$("button").click(function()&#123; $("p").toggle();&#125;);该方法检查被选元素的可见状态。如果一个元素是隐藏的，则运行 show()，如果一个元素是可见的，则运行 hide() - 这会造成一种切换的效果。带参数语法：1$(selector).toggle(speed,easing,callback)参数描述speed可选。规定隐藏/显示效果的速度。 可能的值：毫秒“slow”“fast”easing可选。规定在动画的不同点上元素的速度。默认值为 “swing”。 可能的值：“swing” - 在开头/结尾移动慢，在中间移动快“linear” - 匀速移动callback可选。toggle() 方法执行完之后，要执行的函数。1秒之内动态隐藏和显示p元素：123$("button").click(function()&#123; $("p").toggle(1000);&#125;);1秒之内动态隐藏和显示p元素，并执行回调函数：12345$("button").click(function()&#123; $("p").toggle(1000,function()&#123; alert("toggle() 方法已完成!"); &#125;); ​&#125;);toggle(fn1,fn2...fnN)函数也可以用于几个函数间的切换，现有如下代码：123456789$("panel h5.head").bind("click",function()&#123; var $content=$(this).next("div.content"); if($content.is(":visible"))&#123; $content.hide(); &#125;else&#123; $content.show(); &#125; &#125;);使用toggle改写：1234567$("panel h5.head").toggle( function()&#123; $(this).next("div.content").show(); &#125;,function()&#123; $(this).next("div.content").hide(); &#125;);事件blur([[data],fn])当元素失去焦点时触发 blur 事件。示例：触发所有段落的blur事件：1$("p").blur();任何段落失去焦点时弹出一个 “Hello World!”在每一个匹配元素的blur事件中绑定的处理函数：1$("p").blur( function () &#123; alert("Hello World!"); &#125; ); ​change([[data],fn])当元素的值改变时发生 change 事件（仅适用于表单字段）。示例：当&lt;input&gt;文本值发生改变，且失去焦点或者按Enter键的时候触发：123$("input").change(function()&#123; alert("文本已被修改");&#125;);注意，在输入过程中，虽然值不断改变，但不会触发change()，除非&lt;input&gt;失去焦点或者按Enter键的时候触发。click([[data],fn])略。dblclick([[data],fn])略。error([[data],fn])当元素遇到错误（没有正确载入）时，发生 error 事件。如：图片加载错误时，替换为文本提示：123$("img").error(function()&#123; $("img").replaceWith("&lt;p&gt;图片加载错误!&lt;/p&gt;");&#125;);focus([[data],fn])当元素获得焦点时，触发 focus 事件。可以通过鼠标点击或者键盘上的TAB导航触发。这将触发所有绑定的focus函数。示例：当页面加载后将 id 为 ‘login’ 的元素设置焦点：123$(document).ready(function()&#123; $("#login").focus();&#125;);使人无法使用文本框：123$("input[type=text]").focus(function()&#123; this.blur();&#125;); ​focusin([data],fn)当元素（或在其内的任意元素）获得焦点时发生 focusin 事件。当在元素或在其内的任意元素上发生 focus 事件时，focusin() 方法添加要运行的函数。与 focus() 方法不同的是，focusin()方法在任意子元素获得焦点时也会触发。例如，现有div：1234&lt;div style="border: 1px solid black;padding:10px;"&gt; First name: &lt;input type="text"&gt;&lt;br&gt; Last name: &lt;input type="text"&gt;&lt;/div&gt;div子元素&lt;input&gt;获得焦点时，改变div的颜色：123$("div").focusin(function()&#123; $(this).css("background-color","#FFFFCC");&#125;);focusout([data],fn)与foucusin相反。keydown([[data],fn])当键盘或按钮被按下时，发生 keydown 事件。例如：在页面内对键盘按键做出回应，可以使用如下代码：12345678$(window).keydown(function(event)&#123; switch(event.which) &#123; // ... // 不同的按键可以做不同的事情 // 不同的浏览器的keycode不同 // ... &#125;&#125;);keypress([[data],fn])keydown：用户在键盘上按下某按键是发生。一直按着某按键则会不断触发（opera浏览器除外）。keypress：用户按下一个按键，并产生一个字符时发生（也就是不管类似shift、alt、ctrl之类的键，就是说用户按了一个能在屏幕上输出字符的按键keypress事件才会触发）。一直按着某按键则会不断触发。keyup([[data],fn])当按钮被松开时，发生 keyup 事件。mousedown([[d,fn])当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。mousedown 与 click 事件不同，mousedown 事件仅需要按键被按下，而不需要松开即可发生。鼠标按键可以为左键右键和滚轮。mouseup([[data],fn])与mousedown()相反。例子：当鼠标指向&lt;div&gt;并按下鼠标按键时，以及松开时触发事件：HTML：1&lt;div&gt;在这个 div 元素中按下和释放鼠标按钮。&lt;/div&gt;jQuery：123456$("div").mouseup(function()&#123; $(this).after("释放鼠标按钮。");&#125;);$("div").mousedown(function()&#123; $(this).after("按下鼠标按钮。");&#125;);mouseenter([[data],fn])当鼠标指针穿过元素时，会发生 mouseenter 事件。该事件大多数时候会与 mouseleave 事件一起使用。mouseleave([[data],fn])当鼠标指针离开元素时，会发生 mouseleave 事件。该事件大多数时候会与 mouseenter 事件一起使用。例子：当鼠标指针进入 &lt;p&gt; 元素时，设置背景色为黄色，离开时设置为灰色：HTML：1&lt;p&gt;鼠标移动到该段落。&lt;/p&gt;jQuery：123456$("p").mouseenter(function()&#123; $("p").css("background-color","yellow");&#125;);$("p").mouseleave(function()&#123; $("p").css("background-color","lightgray");&#125;);mouseover([[d],fn])当鼠标指针位于元素上方时，会发生 mouseover 事件。该事件大多数时候会与 mouseout 事件一起使用。注释：与 mouseenter 事件不同，不论鼠标指针穿过被选元素或其子元素，都会触发 mouseover 事件。mouseout([[data],fn])当鼠标指针从元素上移开时，发生 mouseout 事件。mousemove([[data],fn])当鼠标指针在指定的元素中移动时，就会发生 mousemove 事件。例子：获得鼠标指针在页面中的位置：123$(document).mousemove(function(event)&#123; $("span").text(event.pageX + ", " + event.pageY);&#125;);resize([[data],fn])当调整浏览器窗口的大小时，发生 resize 事件。例子：HTML：1&lt;p&gt;窗口重置了 &lt;span&gt;0&lt;/span&gt; 次大小。&lt;/p&gt;jQuery：123$(window).resize(function()&#123; $("span").text(x+=1);&#125;);scroll([[data],fn])当用户滚动指定的元素时，会发生 scroll 事件。对元素滚动的次数进行计数：123$("div").scroll(function()&#123; $("span").text(x+=1);&#125;);select([[data],fn])当 textarea 或文本类型的 input 元素中的文本被选择时，会发生 select 事件。123$("input").select(function()&#123; alert("文本已选中!");&#125;);submit([[data],fn])当提交表单时，会发生 submit 事件。该事件只适用于表单元素。如果你要阻止表单提交:123$("form").submit( function () &#123; return false;&#125;); ​unload([[data],fn])当用户离开页面时，会发生 unload 事件。当发生以下情况下，会触发 unload 事件：1.点击某个离开页面的链接2.在地址栏中键入了新的 URL3.使用前进或后退按钮4.关闭浏览器窗口5.重新加载页面unload() 方法只应用于 window 对象。123$(window).unload(function()&#123; alert("Goodbye!");&#125;);]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery 文档处理]]></title>
    <url>%2Fblog%2FjQuery-%E6%96%87%E6%A1%A3%E5%A4%84%E7%90%86.html</url>
    <content type="text"><![CDATA[内部插入append(content|fn)向每个匹配的元素内部追加内容。示例：向所有段落中追加一些HTML标记：HTML 代码：1&lt;p&gt;I would like to say: &lt;/p&gt;jQuery 代码：1$("p").append("&lt;b&gt;Hello&lt;/b&gt;")结果：1&lt;p&gt;I would like to say: &lt;b&gt;Hello&lt;/b&gt;&lt;/p&gt;​appendTo(content)把所有匹配的元素追加到另一个指定的元素元素集合中。 实际上，使用这个方法是颠倒了常规的$(A).append(B)的操作，即不是把B追加到A中，而是把A追加到B中。示例1：把所有段落追加到div元素中。HTML 代码：12&lt;p&gt;I would like to say: &lt;/p&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt; ​jQuery 代码：1$("p").appendTo("div")结果：12&lt;div&gt;&lt;p&gt;I would like to say: &lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p&gt;I would like to say: &lt;/p&gt;&lt;/div&gt; ​示例2：新建段落追加div中并加上一个classHTML 代码：1&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt; ​jQuery 代码：12345$("&lt;p/&gt;") .appendTo("div") .addClass("test") .end() .addClass("test2"); ​结果：12&lt;div&gt;&lt;p class="test test2"&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p class="test"&gt;&lt;/p&gt;&lt;/div&gt;prepend(content)向每个匹配的元素内部前置内容。示例1：向所有段落中前置一些HTML标记代码。HTML 代码：1&lt;p&gt;I would like to say: &lt;/p&gt;jQuery 代码：1$("p").prepend("&lt;b&gt;Hello&lt;/b&gt;");结果：1&lt;p&gt;&lt;b&gt;Hello&lt;/b&gt;I would like to say: &lt;/p&gt;示例2：将一个DOM元素前置入所有段落。HTML 代码：1234&lt;p&gt;I would like to say: &lt;/p&gt;&lt;p&gt;I would like to say: &lt;/p&gt;&lt;b class="foo"&gt;Hello&lt;/b&gt;&lt;b class="foo"&gt;Good Bye&lt;/b&gt;jQuery 代码：1$("p").prepend( $(".foo")[0] );结果：123&lt;p&gt;&lt;b class="foo"&gt;Hello&lt;/b&gt;I would like to say: &lt;/p&gt;&lt;p&gt;&lt;b class="foo"&gt;Hello&lt;/b&gt;I would like to say: &lt;/p&gt;&lt;b class="foo"&gt;Good Bye&lt;/b&gt; ​prependTo(content)把所有匹配的元素前置到另一个、指定的元素元素集合中。实际上，使用这个方法是颠倒了常规的$(A).prepend(B)的操作，即不是把B前置到A中，而是把A前置到B中。示例1：HTML 代码：1&lt;p&gt;I would like to say: &lt;/p&gt;&lt;div id="foo"&gt;&lt;/div&gt;jQuery 代码：1$("p").prependTo("#foo");结果：1&lt;div id="foo"&gt;&lt;p&gt;I would like to say: &lt;/p&gt;&lt;/div&gt; ​外部插入after(content|fn)在每个匹配的元素之后插入内容。示例1：在所有段落之后插入一些HTML标记代码。HTML 代码：1&lt;p&gt;I would like to say: &lt;/p&gt;jQuery 代码：1$("p").after("&lt;b&gt;Hello&lt;/b&gt;");结果：1&lt;p&gt;I would like to say: &lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt; ​示例2：在所有段落之后插入一个DOM元素。HTML 代码：1&lt;b id="foo"&gt;Hello&lt;/b&gt;&lt;p&gt;I would like to say: &lt;/p&gt;jQuery 代码：1$("p").after( $("#foo")[0] );结果：1&lt;p&gt;I would like to say: &lt;/p&gt;&lt;b id="foo"&gt;Hello&lt;/b&gt; ​示例3：在所有段落中后插入一个jQuery对象(类似于一个DOM元素数组)。HTML 代码：1&lt;b&gt;Hello&lt;/b&gt;&lt;p&gt;I would like to say: &lt;/p&gt;jQuery 代码：1$("p").after( $("b") );结果：1&lt;p&gt;I would like to say: &lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt; ​insertAfter(content)把所有匹配的元素插入到另一个、指定的元素元素集合的后面。实际上，使用这个方法是颠倒了常规的$(A).after(B)的操作，即不是把B插入到A后面，而是把A插入到B后面。示例：把所有段落插入到一个元素之后。与 $(&quot;#foo&quot;).after(&quot;p&quot;)相同HTML 代码：1&lt;p&gt;I would like to say: &lt;/p&gt;&lt;div id="foo"&gt;Hello&lt;/div&gt;jQuery 代码：1$("p").insertAfter("#foo");结果：1&lt;div id="foo"&gt;Hello&lt;/div&gt;&lt;p&gt;I would like to say: &lt;/p&gt; ​before(content|fn)在每个匹配的元素之前插入内容。示例：在所有段落之前插入一些HTML标记代码。HTML 代码：1&lt;p&gt;I would like to say: &lt;/p&gt;jQuery 代码：1$("p").before("&lt;b&gt;Hello&lt;/b&gt;");结果：1&lt;b&gt;Hello&lt;/b&gt;&lt;p&gt;I would like to say: &lt;/p&gt;insertBefore(content)把所有匹配的元素插入到另一个、指定的元素元素集合的前面。实际上，使用这个方法是颠倒了常规的$(A).before(B)的操作，即不是把B插入到A前面，而是把A插入到B前面。示例：把所有段落插入到一个元素之前。与 $(&quot;#foo&quot;).before(&quot;p&quot;)相同。HTML 代码：1&lt;div id="foo"&gt;Hello&lt;/div&gt;&lt;p&gt;I would like to say: &lt;/p&gt;jQuery 代码：1$("p").insertBefore("#foo");结果：1&lt;p&gt;I would like to say: &lt;/p&gt;&lt;div id="foo"&gt;Hello&lt;/div&gt; ​包裹wrap(html|element|fn)把所有匹配的元素用其他元素的结构化标记包裹起来。示例：html参数描述：把所有的段落用一个新创建的div包裹起来jQuery 代码：1$("p").wrap("&lt;div class='wrap'&gt;&lt;/div&gt;");elem参数描述：用ID是”content”的div将每一个段落包裹起来jQuery 代码：1$("p").wrap(document.getElementById('content'));回调函数描述：用原先div的内容作为新div的class，并将每一个元素包裹起来HTML 代码：1234&lt;div class="container"&gt; &lt;div class="inner"&gt;Hello&lt;/div&gt; &lt;div class="inner"&gt;Goodbye&lt;/div&gt;&lt;/div&gt;jQuery 代码：123$('.inner').wrap(function() &#123; return '&lt;div class="' + $(this).text() + '" /&gt;';&#125;);结果：12345678&lt;div class="container"&gt; &lt;div class="Hello"&gt; &lt;div class="inner"&gt;Hello&lt;/div&gt; &lt;/div&gt; &lt;div class="Goodbye"&gt; &lt;div class="inner"&gt;Goodbye&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; ​unwrap()这个方法将移出元素的父元素。这能快速取消 .wrap()方法的效果。匹配的元素（以及他们的同辈元素）会在DOM结构上替换他们的父元素。示例：HTML 代码：12345&lt;div&gt; &lt;p&gt;Hello&lt;/p&gt; &lt;p&gt;cruel&lt;/p&gt; &lt;p&gt;World&lt;/p&gt;&lt;/div&gt;jQuery 代码：1$("p").unwrap()结果：123&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;cruel&lt;/p&gt;&lt;p&gt;World&lt;/p&gt; ​wrapAll(html|ele)将所有匹配的元素用单个元素包裹起来。示例：html描述：用一个生成的div将所有段落包裹起来。HTML代码：123&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;cruel&lt;/p&gt;&lt;p&gt;World&lt;/p&gt; ​jQuery 代码：1$("p").wrapAll("&lt;div&gt;&lt;/div&gt;");结果：12345&lt;div&gt; &lt;p&gt;Hello&lt;/p&gt; &lt;p&gt;cruel&lt;/p&gt; &lt;p&gt;World&lt;/p&gt;&lt;/div&gt; ​elem描述：用一个生成的div将所有段落包裹起来jQuery 代码：1$("p").wrapAll(document.createElement("div")); ​wrapInner(htm|ele|fn)将每一个匹配的元素的子内容(包括文本节点)用一个HTML结构包裹起来。示例：参数html描述：把所有段落内的每个子内容加粗jQuery 代码：1$("p").wrapInner("&lt;b&gt;&lt;/b&gt;");参数elem描述：把所有段落内的每个子内容加粗jQuery 代码：1$("p").wrapInner(document.createElement("b"));回调函数描述：用原先div的内容作为新div的class，并将每一个元素包裹起来HTML 代码：1234&lt;div class="container"&gt; &lt;div class="inner"&gt;Hello&lt;/div&gt; &lt;div class="inner"&gt;Goodbye&lt;/div&gt;&lt;/div&gt;jQuery 代码：123$('.inner').wrapInner(function() &#123; return '&lt;div class="' + $(this).text() + '" /&gt;';&#125;);结果：12345678&lt;div class="container"&gt; &lt;div class="inner"&gt; &lt;div class="Hello"&gt;Hello&lt;/div&gt; &lt;/div&gt; &lt;div class="inner"&gt; &lt;div class="Goodbye"&gt;Goodbye&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;替换replaceWith(content|fn)将所有匹配的元素替换成指定的HTML或DOM元素。示例1：把所有的段落标记替换成加粗的标记。HTML 代码：1&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;cruel&lt;/p&gt;&lt;p&gt;World&lt;/p&gt;jQuery 代码：1$("p").replaceWith("&lt;b&gt;Paragraph. &lt;/b&gt;");结果：1&lt;b&gt;Paragraph. &lt;/b&gt;&lt;b&gt;Paragraph. &lt;/b&gt;&lt;b&gt;Paragraph. &lt;/b&gt; ​示例2：用第一段替换第三段，你可以发现他是移动到目标位置来替换，而不是复制一份来替换。HTML 代码：12345&lt;div class="container"&gt; &lt;div class="inner first"&gt;Hello&lt;/div&gt; &lt;div class="inner second"&gt;And&lt;/div&gt; &lt;div class="inner third"&gt;Goodbye&lt;/div&gt;&lt;/div&gt;jQuery 代码：1$('.third').replaceWith($('.first'));结果：1234&lt;div class="container"&gt; &lt;div class="inner second"&gt;And&lt;/div&gt; &lt;div class="inner first"&gt;Hello&lt;/div&gt;&lt;/div&gt; ​replaceAll(selector)用匹配的元素替换掉所有 selector匹配到的元素。和 replaceWith() 相反。示例：把所有的段落标记替换成加粗标记HTML 代码：1&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;cruel&lt;/p&gt;&lt;p&gt;World&lt;/p&gt;jQuery 代码：1$("&lt;b&gt;Paragraph. &lt;/b&gt;").replaceAll("p");结果：1&lt;b&gt;Paragraph. &lt;/b&gt;&lt;b&gt;Paragraph. &lt;/b&gt;&lt;b&gt;Paragraph. &lt;/b&gt; ​删除empty()删除匹配的元素集合中所有的子节点。示例：把所有段落的子元素（包括文本节点）删除HTML 代码：1&lt;p&gt;Hello, &lt;span&gt;Person&lt;/span&gt; &lt;a href="#"&gt;and person&lt;/a&gt;&lt;/p&gt;jQuery 代码：1$("p").empty();结果：1&lt;p&gt;&lt;/p&gt; ​remove([expr])从DOM中删除所有匹配的元素。这个方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。但除了这个元素本身得以保留之外，其他的比如绑定的事件，附加的数据等都会被移除。示例1：从DOM中把所有段落删除HTML 代码：1&lt;p&gt;Hello&lt;/p&gt; how are &lt;p&gt;you?&lt;/p&gt;jQuery 代码：1$("p").remove();结果：1how are示例2：从DOM中把带有hello类的段落删除。HTML 代码：1&lt;p class="hello"&gt;Hello&lt;/p&gt; how are &lt;p&gt;you?&lt;/p&gt;jQuery 代码：1$("p").remove(".hello");结果：1how are &lt;p&gt;you?&lt;/p&gt; ​detach([expr])从DOM中删除所有匹配的元素。 这个方法不会把匹配的元素从jQuery对象中删除，因而可以在将来再使用这些匹配的元素。与remove()不同的是，所有绑定的事件、附加的数据等都会保留下来。复制clone([Even[,deepEven]])克隆匹配的DOM元素并且选中这些克隆的副本。示例1：克隆所有b元素（并选中这些克隆的副本），然后将它们前置到所有段落中。HTML 代码:1&lt;b&gt;Hello&lt;/b&gt;&lt;p&gt;, how are you?&lt;/p&gt;jQuery 代码:1$("b").clone().prependTo("p");结果:1&lt;b&gt;Hello&lt;/b&gt;&lt;p&gt;&lt;b&gt;Hello&lt;/b&gt;, how are you?&lt;/p&gt;示例2：创建一个按钮，他可以复制自己，并且他的副本也有同样功能。HTML 代码:1&lt;button&gt;Clone Me!&lt;/button&gt;jQuery 代码:123$("button").click(function()&#123; $(this).clone(true).insertAfter(this);&#125;); ​]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用注解配置AOP切面]]></title>
    <url>%2Fblog%2F%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEAOP%E5%88%87%E9%9D%A2.html</url>
    <content type="text"><![CDATA[注解切面除了使用XML配置AOP切面，我们还可以使用更简洁的注解配置。现使用注解修改Audience类：123456789101112131415161718192021222324252627282930313233343536import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.AfterReturning;import org.aspectj.lang.annotation.AfterThrowing;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.springframework.stereotype.Component;@Component@Aspectpublic class Audience &#123; // 声明切点 @Pointcut("execution(* com.spring.entity.Performer.perform(..))") public void performance()&#123; &#125; // 表演之前 @Before("performance()") public void takeSeats()&#123; System.out.println("观众入座"); &#125; // 表演之前 @Before("performance()") public void turnOffCellPhones()&#123; System.out.println("关闭手机"); &#125; // 表演之后 @AfterReturning("performance()") public void applaud()&#123; System.out.println("啪啪啪啪啪"); &#125; // 表演失败后 @AfterThrowing("performance()") public void failure()&#123; System.out.println("坑爹，退钱！"); &#125;&#125;@Aspect使得Audience成为了切面。为了让Spring识别改注解，我们还需在XML中添加&lt;aop:aspectj-autoproxy/&gt;。&lt;aop:aspectj-autoproxy/&gt;将在Spring应用上下文中创建一个AnnotationAwareAspectJAutoProxyCreator类，它会自动代理@Aspect标注的Bean：1&lt;aop:aspectj-autoproxy proxy-target-class="true" /&gt;实例化kenny，输出：123456观众入座关闭手机唱：May Rain吹萨克斯啪啪啪啪啪和XML配置AOP效果一样。在这途中遇到错误：1：error at ::0 can't find referenced pointcut XXX网络上的说法是JDK不匹配造成的，我原来用的JDK1.7匹配的是aspectjrt.1.6和aspectjweaver.1.6,因此会报错。 如果要使用AspectJ完成注解切面需要注意下面的JDK与AspectJ的匹配：JDK1.6 —— aspectJ1.6JDK1.7 —— aspectJ1.7.3+aspectJ1.7下载链接：密码：6wd7注解环绕通知使用@Around注解环绕通知：123456789101112131415161718192021222324@Component@Aspectpublic class Audience &#123; // 声明切点 @Pointcut("execution(* com.spring.entity.Performer.perform(..))") public void performance()&#123; &#125; @Around("performance()") public void watch(ProceedingJoinPoint joinpoint)&#123; try&#123; System.out.println("观众入座"); System.out.println("关闭手机"); long start=System.currentTimeMillis(); // 执行被通知的方法！ joinpoint.proceed(); long end=System.currentTimeMillis(); System.out.println("啪啪啪啪啪"); System.out.println("表演耗时："+(end-start)+" milliseconds"); &#125;catch(Throwable t)&#123; System.out.println("坑爹，退钱！"); &#125; &#125;&#125;实例化kenny，输出：123456观众入座关闭手机唱：May Rain吹萨克斯啪啪啪啪啪表演耗时：30 milliseconds注解传递参数修改Magician类：123456789101112131415161718192021222324import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.springframework.stereotype.Component;@Component@Aspectpublic class Magician implements MindReader&#123; private String thoughts; // 声明参数化切点 @Pointcut("execution(* com.spring.entity." + "Thinker.thinkOfSomething(String)) &amp;&amp; args(thoughts)") public void thinking(String thoughts) &#123; &#125; // 把参数传递给通知 @Before("thinking(thoughts)") public void interceptThoughts(String thoughts) &#123; System.out.println("侦听志愿者的心声"); this.thoughts=thoughts; &#125; public String getThoughts() &#123; return thoughts; &#125;&#125;&lt;aop:pointcut&gt;变为@Pointcut注解，&lt;aop:before&gt;变为@Before注解。测试：12345678910public class TestIntercept &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); Volunteer volunteer = (Volunteer) ac.getBean("volunteer"); volunteer.thinkOfSomething("演出真精彩！"); Magician magician = (Magician) ac.getBean("magician"); System.out.println("志愿者心里想的是："+magician.getThoughts()); &#125;&#125;输出：12侦听志愿者的心声志愿者心里想的是：演出真精彩！通过注解引入新的方法之前通过在XML中配置AOP切面的方法为Bean引入新的方法，现在改用注解的方式来实现：新建一个ContestantIntroducer类：123456789101112import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.DeclareParents;import org.springframework.stereotype.Component;@Component@Aspectpublic class ContestantIntroducer &#123; @DeclareParents( value = "com.spring.entity.Performer+", defaultImpl = OutstandingContestant.class) public static Contestant contestant;&#125;@DeclareParents注解代替了之前的&lt;aop:declare-parents&gt;标签。 @DeclareParents注解由三个部分组成：1.value属性等同于&lt;aop:declare-parents&gt;的types-matching属性。它标识应该被引入指定接口的Bean。2.defaultImpl属性等同于&lt;aop:declare-parents&gt;的default-impl属性。它标识该类所引入接口的实现。3.由@DeclareParents注解所标注的static属性制订了将被引入的接口。测试：12345678910public class Play &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); Instrumentalist kenny = (Instrumentalist)ac.getBean("kenny"); kenny.perform(); Contestant kenny1=(Contestant) ac.getBean("kenny"); kenny1.receiveAward(); &#125;&#125;输出：1234567观众入座关闭手机唱：May Rain吹萨克斯啪啪啪啪啪表演耗时：27 milliseconds参加颁奖典礼《Spring In Action》读书笔记]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在Spring XML中声明切面]]></title>
    <url>%2Fblog%2F%E5%9C%A8Spring-XML%E4%B8%AD%E5%A3%B0%E6%98%8E%E5%88%87%E9%9D%A2.html</url>
    <content type="text"><![CDATA[在Spring AOP中，需要使用AspectJ的切点表达式语言来定义切点。下表列出了Spring AOP所支持的AspectJ切点指示器：AspectJ指示器描述arg()限制连接点匹配参数为指定类型的执行方法@args()限制连接点匹配参数由指定注解标注的执行方法execution()用于匹配是连接点的执行方法this()限制连接点匹配AOP代理的Bean引用的指定类型的类target()限制连接点匹配目标对象为执行类型的类@target()限制连接点匹配特定的执行对象，这些对象对应的类要具备指定类型的注解within()限制连接点匹配指定的类型@within()限制连接点匹配指定注解所标注的类型(当使用Spring AOP时，方法定义在由指定的注解所标注的类里)@annotation()限制匹配带有指定注解连接点编写切点如下所示的切点表达式表示当Instrument的play()方法执行时会触发通知。1execution(* com.spring.entity.Instrument.play(..))使用execution()指示器选择Instrument的play()方法。方法表达式以*开始，表示返回任意类型的返回值。然后指定了全限定类名和方法名。对于参数列表(..)标识切点选择任意的pay()方法，无论方法的入参是什么。使用Spring的Bean()指示器Spring2.5引入了新的bean()指示器。如：1execution(* com.spring.entity.Instrument.play()) and bean(eddie)表示，执行Instrument的play()方法时应用通知，并且Bean的ID为eddie。XML中配置AOP在Spring XML中配置AOP使用元素，下表概述了AOP配置元素。AOP配置元素描述&lt;aop:advisor&gt;定义AOP通知器&lt;aop:after&gt;定义AOP后置通知(不管被通知的方法是否执行成功)&lt;aop:after-returning&gt;定义AOP after-returning通知&lt;aop:after-throwing&gt;定义AOP after-throwing通知&lt;aop:around&gt;定义AOP环绕通知&lt;aop:aspect&gt;定义切面&lt;aop:aspectj-autoproxy&gt;启用@AspectJ注解驱动切面&lt;aop:before&gt;定义AOP前置通知&lt;aop:config&gt;顶层的AOP配置元素&lt;aop:declare-parents&gt;为被通知的对象引入额外的接口，并透明的实现&lt;aop:pointcut&gt;定义切点为了演示Spring AOP，现在定义一个观众类 Audience：123456789101112131415161718public class Audience &#123; // 表演之前 public void takeSeats()&#123; System.out.println("观众入座"); &#125; // 表演之前 public void turnOffCellPhones()&#123; System.out.println("关闭手机"); &#125; // 表演之后 public void applaud()&#123; System.out.println("啪啪啪啪啪"); &#125; // 表演失败后 public void failure()&#123; System.out.println("坑爹，退钱！"); &#125;&#125;在Spring XML中配置该Bean：1&lt;bean id="audience" class="com.spring.entity.Audience"/&gt;声明前置和后置通知将audience Bean变成一个切面：12345678910111213141516&lt;aop:config&gt; &lt;aop:aspect ref="audience"&gt; &lt;aop:before pointcut= "execution(* com.spring.entity.Performer.perform(..))" method="takeSeats"/&gt; &lt;aop:before pointcut= "execution(* com.spring.entity.Performer.perform(..))" method="turnOffCellPhones"/&gt; &lt;aop:after-returning pointcut= "execution(* com.spring.entity.Performer.perform(..))" method="applaud"/&gt; &lt;aop:after-throwing pointcut= "execution(* com.spring.entity.Performer.perform(..))" method="failure"/&gt; &lt;/aop:aspect&gt;&lt;/aop:config&gt;四个切点的表达式完全一样，我们可以简化上述写法：1234567891011121314&lt;aop:config&gt; &lt;aop:aspect ref="audience"&gt; &lt;aop:pointcut id="performance" expression="execution(* com.spring.entity.Performer.perform(..))"/&gt; &lt;aop:before pointcut-ref="performance" method="takeSeats"/&gt; &lt;aop:before pointcut-ref="performance" method="turnOffCellPhones"/&gt; &lt;aop:after-returning pointcut-ref="performance" method="applaud"/&gt; &lt;aop:after-throwing pointcut-ref="performance" method="failure"/&gt; &lt;/aop:aspect&gt;&lt;/aop:config&gt;再次实例化kenny：12345678public class Play &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); Instrumentalist kenny=(Instrumentalist)ac.getBean("kenny"); kenny.perform(); &#125;&#125;结果发现报错：12Exception in thread "main" java.lang.ClassCastException: com.sun.proxy.$Proxy8 cannot be cast to...原因暂时还不晓得…😢解决办法，在&lt;aop:config&gt;元素添加proxy-target-class=&quot;true&quot;：123&lt;aop:config proxy-target-class="true"&gt; //...&lt;/aop:config&gt;输出：12345观众入座关闭手机唱：May Rain吹萨克斯啪啪啪啪啪现在在Instrumentalist的perform()方法里制造一个异常：12345public void perform() &#123; System.out.println("唱："+song+""); instrument = null; instrument.play();&#125;实例化kenny输出：12345观众入座关闭手机唱：May Rain坑爹，退钱！Exception in thread "main" java.lang.NullPointerException声明环绕通知如果不使用成员变量，那么在前置通知和后置通知之间共享信息是非常麻烦的。可以使用环绕通知代替前置通知和后置通知，现在在Audience类里添加一个新的方法：123456789101112131415 public void watch(ProceedingJoinPoint joinpoint)&#123; try&#123; System.out.println("观众入座"); System.out.println("关闭手机"); long start=System.currentTimeMillis(); // 执行被通知的方法！ joinpoint.proceed(); long end=System.currentTimeMillis(); System.out.println("啪啪啪啪啪"); System.out.println("表演耗时："+(end-start)+"milliseconds"); &#125;catch(Throwable t)&#123; System.out.println("坑爹，退钱！"); &#125;&#125;对于新的方法，我们使用了ProceedingJoinPoint作为参数，这个对象可以在通知里调用被通知的方法！！我们要把控制转给被通知的方法时，必须调用ProceedingJoinPoint的proceed()方法。修改&lt;aop:config&gt;元素：123456789&lt;aop:config proxy-target-class="true"&gt; &lt;aop:aspect ref="audience"&gt; &lt;aop:pointcut id="performance" expression="execution(* com.spring.entity.Performer.perform(..))"/&gt; &lt;aop:around pointcut-ref="performance" method="watch"/&gt; &lt;/aop:aspect&gt;&lt;/aop:config&gt;实例化kenny输出：123456观众入座关闭手机唱：May Rain吹萨克斯啪啪啪啪啪表演耗时：20 milliseconds假如不调用ProceedingJoinPoint的proceed()方法发现输出为：1234观众入座关闭手机啪啪啪啪啪表演耗时：0 milliseconds这样我们使用AOP就没啥意义了。我们甚至可以重复调用ProceedingJoinPoint的proceed()方法，重复执行perform()方法，输出：12345678910观众入座关闭手机唱：May Rain吹萨克斯唱：May Rain吹萨克斯唱：May Rain吹萨克斯啪啪啪啪啪表演耗时：22 milliseconds为通知传递参数定义一个新的参赛者，他是一个读心者，由MindReader接口所定义：1234public interface MindReader &#123; void interceptThoughts(String thoughts); String getThoughts();&#125;魔术师Magician实现该接口：1234567891011public class Magician implements MindReader&#123; private String thoughts; public void interceptThoughts(String thoughts) &#123; System.out.println("侦听志愿者的心声"); this.thoughts=thoughts; &#125; public String getThoughts() &#123; return thoughts; &#125;&#125;再定义一个Magician所要侦听的志愿者，首先定义一个思考者接口：123public interface Thinker &#123; void thinkOfSomething(String thoughts);&#125;志愿者Volunteer实现该接口：123456789public class Volunteer implements Thinker&#123; private String thoughts; public void thinkOfSomething(String thoughts) &#123; this.thoughts=thoughts; &#125; public String getThoughts()&#123; return thoughts; &#125;&#125;接下来使用Spring AOP传递Volunteer的thoughts参数，以此实现Magician的侦听。。。:1234567891011&lt;bean id="magician" class="com.spring.entity.Magician"/&gt;&lt;aop:config proxy-target-class="true"&gt; &lt;aop:aspect ref="magician"&gt; &lt;aop:pointcut id="thinking" expression=" execution(* com.spring.entity.Volunteer.thinkOfSomething(String)) and args(thoughts)"/&gt; &lt;aop:before pointcut-ref="thinking" method="interceptThoughts" arg-names="thoughts"/&gt; &lt;/aop:aspect&gt;&lt;/aop:config&gt;arg-names属性传递了参数给interceptThoughts()方法。测试：12345678910public class TestIntercept &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); Volunteer volunteer = (Volunteer) ac.getBean("volunteer"); volunteer.thinkOfSomething("演出真精彩！"); Magician magician = (Magician) ac.getBean("magician"); System.out.println("志愿者心里想的是："+magician.getThoughts()); &#125;&#125;输出：12侦听志愿者的心声志愿者心里想的是：演出真精彩！通过切面引入新的方法现在假设要给Performer派生类添加一个新的方法，传统做法是找到所有派生类，让后逐个增加新的方法或者实现。这不但很累而且假设第三方实现没有源码的话，这个过程会变得很困难。幸好，通过Spring AOP可以不必入侵性地改变原有地实现。比如，现在要给所有演出者添加一个receiveAward()方法：新增一个接口Contestant：123public interface Contestant &#123; void receiveAward();&#125;由OutstandingContestant实现：12345public class OutstandingContestant implements Contestant&#123; public void receiveAward() &#123; System.out.println("参加颁奖典礼"); &#125;&#125;XML：12345678&lt;aop:config proxy-target-class="true"&gt; &lt;aop:aspect&gt; &lt;aop:declare-parents types-matching="com.spring.entity.Performer+" implement-interface="com.spring.entity.Constentant" default-impl="com.spring.entity.OutstandingContestant"/&gt; &lt;/aop:aspect&gt;&lt;/aop:config&gt;或者：123456789&lt;bean id="contestantDelegate" class="com.spring.entity.OutstandingContestant"/&gt;&lt;aop:config proxy-target-class="true"&gt; &lt;aop:aspect&gt; &lt;aop:declare-parents types-matching="com.spring.entity.Performer+" implement-interface="com.spring.entity.Contestant" delegate-ref="contestantDelegate"/&gt; &lt;/aop:aspect&gt;&lt;/aop:config&gt;types-matching指定所要添加新方法的派生类实现的接口，implement-interface指定要实现新的接口，default-impl指定这个接口的实现类。测试：12345678910public class Play &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); Instrumentalist kenny=(Instrumentalist)ac.getBean("kenny"); kenny.perform(); Contestant kenny1=(Contestant) ac.getBean("kenny"); kenny1.receiveAward(); &#125;&#125;输出：123唱：May Rain吹萨克斯参加颁奖典礼《Spring In Action》读书笔记]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AOP术语]]></title>
    <url>%2Fblog%2FAOP%E6%9C%AF%E8%AF%AD.html</url>
    <content type="text"><![CDATA[在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。—— 百度百科通知(Advice)在AOP中，切面的工作被称为通知。通知定义了切面是什么以及何时使用。Spring切面可以应用5中类型的通知：Before —— 在方法被调用之前调用通知。After —— 在方法完成之后调用通知，无论方法是否执行成功。After-returning —— 在方法成功执行之后调用通知。After-throwing —— 在方法抛出异常以后调用通知。Around —— 通知包裹了被通知的方法，在被通知的方法调用之前和调用之后执行自定义的行为。连接点(Joinpoint)连接点是在应用执行过程中能够插入切面的一个点。这个点可以是调用方法时，抛出异常时，甚至是修改一个字段时。切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为。切点(Pointcut)切点的定义会匹配通知所要织入的一个或多个连接点。我们通常使用明确的类和方法名称来指定这些切点，或是利用正则表达式定义匹配的类和方法名称模式来指定这些切点。切面(Aspect)切面是通知和切点的结合。通知和切点共同定义了关于切面的全部内容 —— 它是什么，在何时和何处完成其功能。引入(Introduction)引入允许我们向现有的类添加新的方法和属性。织入(Weaving)织入是将切面应用到目标对象来创建新的代理对象的过程。切面在指定的连接点被织入到目标对象中。在目标对象的生命周期里有多个点可以进行织入：编译器 —— 切面在目标类编译时被织入。类加载期 —— 切面在目标类加载到JVM时被织入。运行期 —— 切面在应用运行的某个时候被织入。Spring AOP就是以这种方式织入切面的。]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring 自动检测Bean]]></title>
    <url>%2Fblog%2FSpring-%E8%87%AA%E5%8A%A8%E6%A3%80%E6%B5%8BBean.html</url>
    <content type="text"><![CDATA[开启自动检测开启自动检测Bean有两种方式：XML配置&lt;context:annotation-config&gt;虽然消除了&lt;property&gt;和&lt;constructor-arg&gt;元素，但我们仍需使用&lt;bean&gt;元素显示定义Bean。&lt;context:component-scan&gt;除了完成与&lt;context:annotation-config&gt;一样的工作还可以自动检测Bean和定义Bean。在Spring XML中配置：12&lt;context:component-scan base-package="com.spring.entity"&gt;&lt;/context:component-scan&gt;base-package指定了扫描的路径。Java配置1234567import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.Configuration; @Configuration@ComponentScanpublic class InstrumentConfig&#123;&#125;@ComponentScan会扫描与该类相同包下的所有带有@Component注解的类。如果想明确指出扫描路径，可以配置value：1@ComponentScan(basePackages="com.spring")也可以配置多个扫描路径：1@ComponentScan(basePackages=&#123;"com.spring.entity","com.spring.dao"&#125;)除了指定扫描路径，我们也可以指定扫描的类型：1@ComponentScan(basePackageClasses=&#123;Piano.class,Guitar.class&#125;)为自动检测标注Bean注解类型：@Component —— 通用的构造型注解，标识该类为Spring组件。@Controller —— 标识将该类定义为Spring MVC Controller组件。@Repository —— 标识将该类定义为数据仓库。@Service —— 标识将该类定义为服务。通过标注这些注解，Spring才知道哪些类要被注册为Spring Bean。如，使用@Component标注Guitar类：123456@Componentpublic class Guitar implements Instrument&#123; public void play() &#123; System.out.println("弹奏吉他"); &#125; &#125;Spring扫描com.spring.entity包时，会发现使用@Component注解所标注的Guitar，并自动将其注册为Spring Bean。Bean的ID默认为无限定首字母小写类名，也就是guitar。我们也可以显式设定ID：1234567891011121314151617181920212223242526272829@Component("kenny")public class Instrumentalist implements Performer&#123; @Value("May Rain") private String song; @Autowired @Qualifier("guitar") private Instrument instrument; public Instrumentalist() &#123; &#125; public void perform() &#123; System.out.println("唱："+song+""); instrument.play(); &#125; //注入歌曲 public String getSong() &#123; return song; &#125; public void setSong(String song) &#123; this.song = song; &#125; public Instrument getInstrument() &#123; return instrument; &#125; //注入乐器 public void setInstrument(Instrument instrument) &#123; this.instrument = instrument; &#125;&#125;也可以使用@Named(&quot;kenny&quot;)代替@Component(&quot;kenny&quot;)，但一般我们还是使用@Component(&quot;kenny&quot;)比较直观。然后实例化kenny Bean：12345678public class Play &#123; public static void main(String[] args) &#123; ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml"); Instrumentalist kenny=(Instrumentalist)ac.getBean("kenny"); kenny.perform(); &#125;&#125;输出：12唱：May Rain弹奏吉他现在在XML中没有任何&lt;bean&gt;元素，也实现了和先前一样的效果。在这个过程中，遇到了两个问题：12345678Exception in thread "main" org.springframework.beans.factory.BeanDefinitionStoreException: Failed to read candidate component class: file [F:\workspaces\Spring\Spring2\build\classes\com\spring\entity\Guitar.class]; nested exception is org.springframework.core.NestedIOException: ASM ClassReader failed to parse class file - probably due to a new Java class file version that isn't supported yet: file [F:\workspaces\Spring\Spring2\build\classes\com\spring\entity\Guitar.class]; nested exception is java.lang.IllegalArgumentException通过查阅资料，发现有位老外给出了解释：Note that the Java 8 bytecode level (-target 1.8, as required by -source 1.8) is only fully supported as of Spring Framework 4.0. In particular, Spring 3.2 based applications need to be compiled with a maximum of Java 7 as the target, even if they happen to be deployed onto a Java 8 runtime. Please upgrade to Spring 4 for Java 8 based applications.于是将jdk改为1.7版本。修改后又遇到异常：12Exception in thread "main" java.lang.UnsupportedClassVersionError: ...原来是jdk版本和jvm版本不一致所致。右键项目–&gt;properties–&gt;java compiler –&gt; Enable project specific settings –&gt;将compiler compliance level设置为1.7，至此问题都解决了。过滤组件扫描&lt;context:component-scan&gt;默认扫描指定路径下通过@Component标注的Bean。假如现在我们只要把Instrument所派生的类注册为Spring Bean，我们不得不去查看所有java代码，一个一个的给Instrument派生类添加@Component注解，假如有第三方实现了Instrument，其源码我们还看不到，这时候添加@Component注解就变得非常困难甚至不可能。幸好，我们还可以给&lt;context:component-scan&gt;元素添加过滤行为：通过为其配置&lt;context:include-filter&gt;和&lt;context:exclude-filter&gt;子元素。比如：123456&lt;context:component-scan base-package="com.spring.entity"&gt; &lt;context:include-filter type="assignable" expression="com.spring.entity.Instrument"/&gt; &lt;context:exclude-filter type="annotation" expression="com.spring.entity.SkipIt"/&gt;&lt;/context:component-scan&gt;其中，过滤器类型有5种：过滤器类型描述annotation过滤器扫描使用指定注解所标注的那些类，通过expression属性指定要扫描的注解assignable过滤器扫描派生于expression属性所指定类型的那些类aspectj过滤器扫描与expression属性所指定的AspectJ表达式所匹配的那些类custom使用自定义的org.springframework.core.type.TypeFilter实现类，该类由expression 属性指定regex过滤器扫描类的名称与expression属性所指定的正则表达式所匹配的类com.spring.entity.SkipIt自定义限定器：123456@Target(&#123;ElementType.FIELD,ElementType.PARAMETER,ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Qualifierpublic @interface SkipIt &#123; &#125;com.spring.entity目录下有三个类派生于Instrument：Piano，Saxophone，Guitar。现在用@SkipIt标注Piano和Guitar类：123456@SkipItpublic class Piano implements Instrument&#123; public void play() &#123; System.out.println("钢琴声响起"); &#125;&#125;123456@SkipItpublic class Guitar implements Instrument&#123; public void play() &#123; System.out.println("弹奏吉他"); &#125; &#125;Saxophone不做任何标注：12345public class Saxophone implements Instrument&#123; public void play() &#123; System.out.println("吹萨克斯"); &#125;&#125;实例化kenny，输出：12唱：May Rain吹萨克斯非常方便！《Spring In Action》读书笔记]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring 自动装配Bean]]></title>
    <url>%2Fblog%2FSpring-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8DBean.html</url>
    <content type="text"><![CDATA[为了简化XML配置，Spring提供了自动装配（autowiring）。四种类型自动装配byName自动装配byName自动装配遵循约定：为属性自动装配ID与该属性的名字相同的Bean。例如，将先前的kenny例子：1234&lt;bean id="kenny" class="com.spring.entity.Instrumentalist"&gt; &lt;property name="instrument" ref="saxophone"&gt;&lt;/property&gt; &lt;property name="song" value="May Rain"/&gt;&lt;/bean&gt;改为：123&lt;bean id="kenny" class="com.spring.entity.Instrumentalist" autowire="byName"&gt; &lt;property name="song" value="May Rain"/&gt;&lt;/bean&gt;通过autowire属性，Spring就可以利用此信息自动装配kenny的剩下的instrument属性了。配置一个id为”instrument”的Bean：1&lt;bean id="instrument" class="com.spring.entity.Saxophone"/&gt;这样，saxophone就自动装配给kenny的instrument属性了。当找不到时，则该属性不进行装配。如果多个Instrumentalist Bean都被配置为byName自动装配，那他们将会演奏同一个乐器。byType自动装配byType自动装配通过寻找哪一个Bean的类型与属性的类型相匹配。如果找到多个与需要装配的属性类型相匹配的Bean，Spring会直接抛出异常。所以，应用只允许存在一个类型相匹配的Bean。但在实际中，XML中可能存在多个类型一样的Bean，为了解决这种情况，Spring提供了两种解决方法：① 为自动装配标识一个首选Bean使用&lt;bean&gt;元素的primary属性。如果只有一个自动装配的候选Bean的primary属性设置为true，那么其将被优先选择。比如设置saxophone为首选Bean：1&lt;bean id="saxophone" class="com.spring.entity.Saxophone" primary="true"/&gt;也可以使用@Primary注解。 ② 取消某个Bean自动装配的候选资格使用方法为设置Bean的autowire-candidate属性为false即可：1&lt;bean id="saxophone" class="com.spring.entity.Saxophone" autowire-candidate="false"/&gt;constructor自动装配如果通过构造器注入配置Bean，那么可以移除&lt;constructor-arg&gt;元素。如将先前的duke配置：1&lt;bean id="duke" class="com.spring.entity.Juggler" autowire="constructor"/&gt;通过autowire=&quot;constructor&quot;声明，Spring会去获取Juggler某个构造器的所有参数类型，然后再XML中寻找与其类型匹配的Bean。so，constructor自动装配与byType自动装配具有相同的局限性。autodetect自动装配detect 英[dɪˈtekt] 美[dɪˈtɛkt] vt. 查明，发现; 洞察; 侦察，侦查; [电子学] 检波1&lt;bean id="duke" class="com.spring.entity.Juggler" autowire="autodetect"/&gt;通过该声明，Spring首次尝试使用constructor自动装配，失败的话再次尝试使用byType自动装配。默认自动装配通过配置&lt;beans&gt;元素上增加一个default-autowire属性：123456789101112131415161718192021222324252627&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd" default-autowire="byType"&gt; &lt;!--Bean declarations go here --&gt;&lt;/beans&gt;这样的话，Spring配置文件里的所有Bean都将使用byType自动装配，除非Bean自己配置了autowire属性。混合装配一个Bean可以同时使用自动装配和显示装配，如：12345&lt;bean id="kenny" class="com.spring.entity.Instrumentalist" autowire="byType"&gt; &lt;property name="song" value="May Rain"/&gt; &lt;property name="instrument" ref="saxophone"&gt;&lt;/property&gt;&lt;/bean&gt;混合使用可以避免当自动装配失败的时候，使用显示装配覆盖自动装配。使用constructor自动装配时，不能混合使用constructor自动装配策略和元素。使用注解装配1&lt;context:annotation-config/&gt;annotation 英[ˌænə’teɪʃn] 美[ˌænə’teɪʃn] n. 注释;&lt;context:annotation-config/&gt;可以消除Spring中的&lt;property&gt;和&lt;constructor-arg&gt;元素。注意，我们还是得使用&lt;bean&gt;元素显示定义Bean。@Autowired例如，在Instrumentalist的setInstrument()方法进行标注：12345//注入乐器@Autowiredpublic void setInstrument(Instrument instrument) &#123; this.instrument = instrument;&#125;这样，我们可以移除用来定义Instrumentalist的instrument属性所对应的&lt;property&gt;元素了。通过@Autowired注解，Spring会通过byType自动装配。假如@Autowired注解标注于属性，我们可以删除setter方法：12@Autowiredprivate Instrument instrument;@Autowired也可以标注于构造器，这样XML文件中可以省去&lt;constructor-arg&gt;元素配置Bean：1234@Autowiredpublic Instrumentalist(Instrument instrument) &#123; this.instrument=instrument;&#125;当多个构造器都通过@Autowired注解的时候，Spring就会从所有满足装配条件的构造器中选择出参数最多的那个。可选的自动装配：通过@Autowired标注的属性或者参数必须是可装配的。假如匹配失败，则抛出NoSuchBeanDefinitionException异常。假如属性不一定要装配，null值也可以接收的话，我们可以设置required=fasle来让自动装配变为可选：12@Autowired(required=false)private Instrument instrument;当使用构造器装配时，只有一个构造器可以将@Autowired的required属性设置为true，其余的只能设置为false。限定歧义性依赖：如果通过@Autowired注解匹配到好几个Bean，为了鉴别哪一个是我们需要的，我们可以在@Autowired注解下添加@Qualifier注解：qualifier 英[ˈkwɒlɪfaɪə(r)] 美[ˈkwɑ:lɪfaɪə(r)] n. 合格者，已取得资格的人; [语] 修饰语; 预选赛，资格赛123@Autowired@Qualifier("guitar")private Instrument instrument;如上所示，@Qualifier注解将尝试注入ID为”guitar”的Bean。除了通过Bean的ID来匹配，我们还可以修改guitar Bean配置：123&lt;bean class="com.spring.entity.Guitar"&gt; &lt;qualifier value="Stringed"/&gt;&lt;/bean&gt;&lt;qualifier&gt;元素限定了guitar Bean是一个弦乐器(stringed)。这时候可以将上面的注解修改为：123@Autowired@Qualifier("Stringed")private Instrument instrument;创建自定义的限定器：首先，通过如下代码创建自定义的限定器：123456789101112import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;import org.springframework.beans.factory.annotation.Qualifier; @Target(&#123;ElementType.FIELD,ElementType.PARAMETER,ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Qualifierpublic @interface StringedInstrument &#123; &#125;这样，我们在guitar类上添加此限定器：123456@StringedInstrumentpublic class Guitar implements Instrument&#123; public void play() &#123; System.out.println("弹奏吉他"); &#125; &#125;在自动装配的instrument属性进行限定：123@Autowired@StringedInstrumentprivate Instrument instrument;这样guitar就会被装配的instrument属性里！假如匹配到多个Bean，需要进一步的缩小范围，继续定义自定义限定器即可！@InjectMaven依赖：123456&lt;!-- https://mvnrepository.com/artifact/javax.inject/javax.inject --&gt;&lt;dependency&gt; &lt;groupId&gt;javax.inject&lt;/groupId&gt; &lt;artifactId&gt;javax.inject&lt;/artifactId&gt; &lt;version&gt;1&lt;/version&gt;&lt;/dependency&gt;为了规范各种依赖注入框架的编程模型，JCP(Java Community Process)发布了Java依赖注入规范，简称为JCR-330。Spring 3.0开始兼容该依赖注入模型。@Inject注解几乎可以完全替代@Autowired。如：12@Injectprivate Instrument instrument;@Inject也可以标注于属性，方法和构造器，不过@Inject没有required属性，所以@Inject注解所标注的依赖关系必须存在，否则抛出异常。限定@Inject所标注的属性类似于前面的@Qualifier，@Inject所对应的是@Named注解：123@Inject@Named("piano")private Instrument instrument;创建自定义的JSR-330 Qualifier通过下面的代码创建一个新的@NewStringedInstrument注解：123456789101112import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;import javax.inject.Qualifier; @Target(&#123;ElementType.FIELD,ElementType.PARAMETER,ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Qualifierpublic @interface NewStringedInstrument &#123; &#125;和前面的自定义限定器唯一的区别就是@Qualifier注解的导入声明。在注解中使用SpEL表达式Spring3.0 引入了@Value，其可以注解装配String类型和基本类型的值。比如，我们通过@Value注解传入一个String类型的值：12@Value("May Rain")private String song;这样”May Rain”就被注入到song属性中了。我们还可以结合SpEL表达式：12@Value("#&#123;systemProperties.myFavoriteSong&#125;")private String song;@ResourceMaven依赖：123456&lt;!-- https://mvnrepository.com/artifact/javax.annotation/jsr250-api --&gt;&lt;dependency&gt; &lt;groupId&gt;javax.annotation&lt;/groupId&gt; &lt;artifactId&gt;jsr250-api&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt;&lt;/dependency&gt;@Resource注解是JSR-250发布的注解。与@Autowired和@Inject不同的是，@Resource注解不能用于构造器！@Resource注解默认使用byName自动装配！@Resource有两个中重要的属性：name和type ，而Spring将@Resource注解的name属性解析为bean的 名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用 byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。byName：12@Resource(name="piano")private Instrument instrument;byType：12@Resource(type=Instrument.class)private Instrument instrument;《Spring In Action》读书笔记]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpEL表达式]]></title>
    <url>%2Fblog%2FSpEL%E8%A1%A8%E8%BE%BE%E5%BC%8F.html</url>
    <content type="text"><![CDATA[Spring3引入了Spring表达式语言(Spring Expression Language，SpEL)。前面介绍的注入都是编写Spring配置文件的时候就确定了的。而SpEL它通过运行期间执行的表达式将值装配到Bean的属性或者构造器参数中。SpEL有许多特性：1.使用Bean的ID来引用Bean2.调用方法和访问对象的属性3.对值进行算数，关系和逻辑运算4.正则表达式匹配5.集合操作SpEL的基本使用字面值最简单的SpEL表达式仅包含一个字面值。假设现在某个类的count属性的值为5，我们用SpEL表达式表示：1&lt;property name="count" value="#&#123;5&#125;"/&gt;#{ }符号会提醒Spring，里面的内容是一个SpEL表达式。它们还可以与非SpEL表达式混用：1&lt;property name="message" value="the value is #&#123;5&#125;"/&gt;Java基本数据类型都可以出现在SpEL表达式中。表达式中的数字也可以使用科学记数法：1&lt;property name="salary" value="#&#123;1e4&#125;"/&gt;引用Bean , Properties和方法SpEL表达式能够通过其他Bean的ID进行引用。如：1&lt;constructor-arg value="#&#123;deceivedByLife&#125;"/&gt;其等价于：1&lt;constructor-arg ref="deceivedByLife"/&gt;carl参赛者是一位模仿高手，kenny唱什么歌，弹奏什么乐器，他就唱什么歌，弹奏什么乐器：1234567&lt;bean id="kenny" class="com.spring.entity.Instrumentalist" p:song="May Rain" p:instrument-ref="piano"/&gt;&lt;bean id="carl" class="com.spring.entity.Instrumentalist"&gt; &lt;property name="instrument" value="#&#123;kenny.instrument&#125;"/&gt; &lt;property name="song" value="#&#123;kenny.song&#125;"/&gt;&lt;/bean&gt;As you can see，属性的值由key和value组成。key指定kenny&lt;bean&gt; 的id，value指定kenny&lt;bean&gt;的song属性。其等价于执行下面的代码：12Instrumentalist carl = new Instrumentalist();carl.setSong(kenny.getSong());除了访问类的属性，SpEL表达式还可以访问类的方法。假设现在有个SongSelector类，该类有个selectSong()方法，这样的话carl就可以不用模仿别人，开始唱songSelector所选的歌了：1&lt;property name="song" value="#&#123;SongSelector.selectSong()&#125;"/&gt;carl有个癖好，歌曲名不是大写的他就浑身难受，我们现在要做的就是仅仅对返回的歌曲调用toUpperCase()方法：1&lt;property name="song" value="#&#123;SongSelector.selectSong().toUpperCase()&#125;"/&gt;注意：这里我们不能确保不抛出NullPointerException，为了避免这个讨厌的问题，我们可以使用SpEL的null-safe存取器1&lt;property name="song" value="#&#123;SongSelector.selectSong()?.toUpperCase()&#125;"/&gt;yes，就是这么简单。?.符号会确保左边的表达式不会为null，如果为null的话就不会调用toUpperCase()方法了。操作类在SpEL表达式中，使用T()运算符会调用类的作用域和方法。例如，我们要调用java.lang.Math的PI值：1&lt;property name="pi" value="#&#123;T(java.lang.Math).PI&#125;"/&gt;获取0~1随机数：1&lt;property name="random" value="#&#123;T(java.lang.Math).random()&#125;"/&gt;在SpEL值上执行操作SpEL提供了几种运算符：运算符类型运算符算数运算+, -, *, /, %, ^关系运算&lt;, &gt;, ==, &lt;=, &gt;=, lt, gt, eq, le, ge逻辑运算and, or, not, !条件运算?:(ternary), ?:(Elvis)正则表达式matches算数运算加法运算：1&lt;property name="add" value="#&#123;counter.total+42&#125;"/&gt;加号还可以用于字符串拼接：1&lt;property name="blogName" value="#&#123;my blog name is+' '+mrBird &#125;"/&gt;^运算符执行幂运算，其余算数运算符和Java一毛一样，这里不再赘述。关系运算判断一个Bean的某个属性是否等于100：1&lt;property name="eq" value="#&#123;counter.total==100&#125;"/&gt;返回值是boolean类型。关系运算符唯一需要注意的是：在Spring XML配置文件中直接写&gt;=和&lt;=会报错。因为这”&lt;”和”&gt;”两个符号在XML中有特殊的含义。所以实际使用时，最号使用文本类型代替符号：运算符符号文本类型等于==eq小于&lt;lt小于等于&lt;=le大于&gt;gt大于等于&gt;=ge如：1&lt;property name="eq" value="#&#123;counter.total le 100&#125;"/&gt;逻辑运算SpEL表达式提供了多种逻辑运算符，其含义和Java也是一毛一样，只不过符号不一样罢了。使用and运算符：1&lt;property name="largeCircle" value="#&#123;shape.kind == 'circle' and shape.perimeter gt 10000&#125;"/&gt;两边为true时才返回true。其余操作一样，只不过非运算有not和!两种符号可供选择。非运算：1&lt;property name="outOfStack" value="#&#123;!product.available&#125;"/&gt;条件运算条件运算符类似于Java的三目运算符：12&lt;property name="instrument" value="#&#123;songSelector.selectSong() == 'May Rain' ? piano:saxphone&#125;"/&gt;当选择的歌曲为”May Rain”的时候，一个id为piano的Bean将装配到instrument属性中，否则一个id为saxophone的Bean将装配到instrument属性中。注意区别piano和字符串“piano”！一个常见的三目运算符的使用场合是判断是否为null值：1&lt;property name="song" value="#&#123;kenny.song !=null ? kenny.song:'Jingle Bells'&#125;"/&gt;这里，kenny.song引用重复了两次，SpEL提供了三目运算符的变体来简化表达式：1&lt;property name="song" value="#&#123;kenny.song !=null ?:'Jingle Bells'&#125;"/&gt;在以上示例中，如果kenny.song不为null，那么表达式的求值结果是kenny.song否则就是“Jingle Bells”。正则表达式验证邮箱：12&lt;property name="email" value="#&#123;admin.email matches '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.com'&#125;"/&gt;虽然这个邮箱正则不够健壮，但对于演示matches来说足够啦。在SpEL中筛选集合为了展示SpEL操作集合的方法，我们创建一个City类：1234567891011121314151617181920212223public class City &#123; private String name; private String state; private int population; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getState() &#123; return state; &#125; public void setState(String state) &#123; this.state = state; &#125; public int getPopulation() &#123; return population; &#125; public void setPopulation(int population) &#123; this.population = population; &#125;&#125;同样，我们在Spring容器中使用&lt;util:list&gt;元素配置一个包含City对象的List集合：123456789101112131415161718&lt;util:list id="cities"&gt; &lt;bean class="com.spring.entity.City" p:name="Chicago" p:state="IL" p:population="2853114"/&gt; &lt;bean class="com.spring.entity.City" p:name="Atlanta" p:state="GA" p:population="537958"/&gt; &lt;bean class="com.spring.entity.City" p:name="Dallas" p:state="TX" p:population="1279910"/&gt; &lt;bean class="com.spring.entity.City" p:name="Houston" p:state="TX" p:population="2242193"/&gt; &lt;bean class="com.spring.entity.City" p:name="Odessa" p:state="TX" p:population="90943"/&gt; &lt;bean class="com.spring.entity.City" p:name="El Paso" p:state="TX" p:population="613190"/&gt; &lt;bean class="com.spring.entity.City" p:name="Jal" p:state="NM" p:population="1996"/&gt; &lt;bean class="com.spring.entity.City" p:name="Las Cruces" p:state="NM" p:population="91865"/&gt;&lt;/util:list&gt;访问集合成员定义一个ChoseCity类：123456789public class ChoseCity &#123; private City city; public void setCity(City city) &#123; this.city = city; &#125; public City getCity() &#123; return city; &#125;&#125;选取集合中的某一个成员，并赋值给city属性中：123&lt;bean id="choseCity" class="com.spring.entity.ChoseCity"&gt; &lt;property name="city" value="#&#123;cities[0]&#125;"/&gt;&lt;/bean&gt;实例化这个Bean：12345678public class ChoseaCity &#123; public static void main(String[] args) &#123; String conf="applicationContext.xml"; ApplicationContext ac=new ClassPathXmlApplicationContext(conf); ChoseCity c=(ChoseCity)ac.getBean("choseCity"); System.out.println(c.getCity().getName()); &#125;&#125;输出：1Chicago随机的选择一个city：123&lt;bean id="choseCity" class="com.spring.entity.ChoseCity"&gt; &lt;property name="city" value="#&#123;cities[T(java.lang.Math).random()*cities.size()]&#125;"/&gt;&lt;/bean&gt;中括号[]运算符始终通过索引访问集合中的成员。[]运算符同样可以用来获取java.util.Map集合中的成员。例如，假设City对象以其名字作为键放入Map集合中，在这种情况下，我们可以像下面那样获取键为Dallas的entry：1&lt;property name="chosenCity" value="#&#123;cities['Dallas']&#125;"/&gt;[]运算符的另一种用法是从java.util.Properties集合中取值。例如，假设我们需要通过&lt;util:properties&gt;元素在Spring中加载一个properties配置文件：1&lt;util:properties id="settings" loaction="classpath:settings.properties"/&gt;现在要在这个配置文件Bean中访问一个名为twitter.accessToken的属性：1&lt;property name="accessToken" value="#&#123;settings['twitter.accessToken']&#125;"/&gt;[]运算符同样可以通过索引来得到某个字符串的某个字符，例如下面的表达式将返回s：1'This is a test'[3]查询集合成员如果我们想从城市cities集合中查询出人口大于10000的城市，在SpEL中只需要用一个查询运算符 .?[]就可以简单做到。修改choseCity类：12345678910public class ChoseCity &#123; private List&lt;City&gt; city; public List&lt;City&gt; getCity() &#123; return city; &#125; public void setCity(List&lt;City&gt; city) &#123; this.city = city; &#125;&#125;修改Bean：123&lt;bean id="choseCity" class="com.spring.entity.ChoseCity"&gt; &lt;property name="city" value="#&#123;cities.?[population gt 100000]&#125;"/&gt;&lt;/bean&gt;实例化该Bean：12345678910public class ChoseCitys &#123; public static void main(String[] args) &#123; String conf="applicationContext.xml"; ApplicationContext ac=new ClassPathXmlApplicationContext(conf); ChoseCity c=(ChoseCity)ac.getBean("choseCity"); for(City city:c.getCity())&#123; System.out.println(city.getName()); &#125; &#125;&#125;输出：12345ChicagoAtlantaDallasHoustonEl PasoSpEL还提供了其他两种查询运算符：.^[]和.$[]，从集合查询中查出第一个匹配项和最后一个匹配项。例如查询第一个符合查询条件的城市：1&lt;property name="firstBigCity" value="#&#123;cities.^[population gt 100000]&#125;"/&gt;投影集合集合投影就是从集合的每一个成员中选择特定的属性放入到一个新的集合中。SpEL的投影运算符.![]完全可以做到这一点。例如，我们仅需要包含城市名称的一个String类型的集合：1&lt;property name="cityNames" value="#&#123;cities.![name]&#125;"/&gt;再比如，得到城市名字加州名的集合：1&lt;property name="cityNames" value="#&#123;cities.![name+','+state]&#125;"/&gt;把符合条件的城市的名字和州名作为一个新的集合：1&lt;property name="cityNames" value="#&#123;cities.?[population gt 100000].![name+','+state]&#125;"/&gt;总之SpEL非常强大，但SpEL最终也只是一个字符串，不易于测试，也没IDE语法检查的支持。所以：建议不要把过多的逻辑放入SpEL表达式中。《Spring In Action》读书笔记]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Bean生命周期]]></title>
    <url>%2Fblog%2FSpring-Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html</url>
    <content type="text"><![CDATA[传统的Java应用，Bean的生命周期很简单。使用Java关键字new进行Bean的实例化，然后该Bean就可以使用了。一旦该Bean不再被使用，则有GC选择回收。相比之下，在Spring容器中，Bean的生命周期要细腻的多，大致过程如下图所示：1.Spring对Bean进行实例化；2.Spring将值和对Bean的引用注入进Bean对应的属性中；3.如果Bean实现了BeanNameAware接口，Spring将Bean的ID传递给setBeanName()接口方法；4.如果Bean实现了BeanFactoryAware接口，Spring将调用setBeanFactory()接口方法，将BeanFactory容器实例传入；5.如果Bean实现了ApplicationContextAware接口，Spring将调用setApplicationContext()接口方法，将应用上下文的引用传入；6.如果Bean实现了BeanPostProcessor接口，Spring将调用它们的postProcessBeforeInitialization()接口方法；7.如果Bean实现了InitializingBean接口，Spring将调用它们的afterPropertiesSet()接口方法。类似的，如果Bean使用init-method声明了初始化方法，该方法也会被调用。8.如果Bean实现了BeanPostProcessor接口，Spring将调用它们的postProcessAfterInitialization()方法；9.此时此刻，Bean已经准备就绪，可以被使用了。它们将一直驻留在Spring容器中，直到容器被销毁；10.如果Bean实现了DisposableBean接口，Spring将调用它的destroy()接口方法。同样，如果Bean使用destroy-method声明了销毁方法，该方法也会被调用；]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Setter方法注入]]></title>
    <url>%2Fblog%2FSpring-Setter%E6%96%B9%E6%B3%95%E6%B3%A8%E5%85%A5.html</url>
    <content type="text"><![CDATA[Spring除了构造器注入，还可以通过类的set()方法注入。为了演示这个过程，现在有请下一位参赛者kenny。kenny是一位天赋异禀的乐器演奏者，现定义一个乐器演奏师类：1234567891011121314151617181920212223242526272829public class Instrumentalist implements Performer&#123; private String song; private Instrument instrument; public Instrumentalist() &#123; &#125; public void perform() &#123; System.out.println("唱："+song+""); instrument.play(); &#125; public String screamSong()&#123; return song; &#125; public String getSong() &#123; return song; &#125; //注入歌曲 public void setSong(String song) &#123; this.song = song; &#125; public Instrument getInstrument() &#123; return instrument; &#125; //注入乐器 public void setInstrument(Instrument instrument) &#123; this.instrument = instrument; &#125;&#125;乐器Instrument接口：123public interface Instrument&#123; public void play();&#125;setter注入简单值可以通过InstrumentList类的默认构造器来实例化该Bean，但没有给song和instrument属性赋值的话显然没有什么意义。Spring可以用&lt;property&gt;元素给属性Song注入值：123&lt;bean id="kenny" class="com.spring.entity.Instrumentalist"&gt; &lt;property name="song" value="May Rain"/&gt;&lt;/bean&gt;name为属性名，value为属性值。引用其他的Bean有了歌曲，kenny现在还差乐器。定义一个piano类，实现Instrument接口：12345public class Piano implements Instrument&#123; public void play() &#123; System.out.println("钢琴声响起"); &#125;&#125;有了piano类，现在我们在Spring容器中定义这个钢琴类：1&lt;bean id="piano" class="com.spring.entity.Piano"/&gt;有了钢琴，现在我们把钢琴交给kenny，修改kenny的&lt;bean&gt;配置：1234&lt;bean id="kenny" class="com.spring.entity.Instrumentalist"&gt; &lt;property name="song" value="May Rain"/&gt; &lt;property name="piano" ref="piano"&gt;&lt;/property&gt;&lt;/bean&gt;ref属性指向之前定义的piano&lt;bean&gt;。现在我们让kenny正式上台表演：1234567public class Play &#123; public static void main(String[] args) &#123; ApplicationContext ac=new ClassPathXmlApplicationContext("applicationContext.xml"); Instrumentalist kenny=(Instrumentalist)ac.getBean("kenny"); kenny.perform(); &#125;&#125;输出：123开灯唱：May Rain钢琴声响起注入内部Beankenny是一个占有欲很强的人，他不希望自己的钢琴被别人使用。这时候我们不能像上面那样引用piano&lt;bean&gt;了，因为这样任何一个&lt;bean&gt;都可以引用它。现在修改kenny的&lt;bean&gt;：123456&lt;bean id="kenny" class="com.spring.entity.Instrumentalist"&gt; &lt;property name="song" value="May Rain"/&gt; &lt;property name="instrument" &gt; &lt;bean class="com.spring.entity.Piano"/&gt; &lt;/property&gt;&lt;/bean&gt;如你所见，内部Bean是直接声明一个&lt;bean&gt;元素作为&lt;property&gt;元素的子节点而定义的。同样，构造器注入也支持内部Bean的声明。 细心的你 会发现内部Bean没有定义id属性，实际上在这里定义id属性是完全合法的，只不过对于内部Bean，id属性显然不重要了。使用Spring P装配属性&lt;property&gt;元素的写法可以更简略，只需在&lt;beans&gt;加入如下代码：1xmlns:p="http://www.springframework.org/schema/p"通过这段代码，我们可以使用p:作为&lt;bean&gt;元素的所有属性的前缀来装配Bean的属性。现修改kenny的&lt;bean&gt;配置：123&lt;bean id="kenny" class="com.spring.entity.Instrumentalist" p:song="May Rain" p:instrument-ref="piano"/&gt;装配集合当配置集合类型的Bean属性时，Spring提供了相应的集合配置元素：集合元素用途&lt;list&gt;装配list类型的值，允许重复&lt;set&gt;装配set类型的值，不允许重复&lt;map&gt;装配map类型的值，名称和值可以是任意类型&lt;props&gt;装配properties类型的值，名称和值都必须是String类型为了展示Spring装配集合，现在有请下一位参赛者hank。hank是一位才华横溢的一人乐队，可以同时演奏多种乐器。现定义一个OneManBan类：1234567891011121314public class OneManBan implements Performer&#123; private Collection&lt;Instrument&gt; instruments; //注入instruments集合 public void setInstruments(Collection&lt;Instrument&gt; instruments) &#123; this.instruments = instruments; &#125; public void perform() &#123; for(Instrument ins:instruments)&#123; ins.play(); &#125; &#125;&#125;装配List,Set和Array现在再定义两个乐器类，并在Spring容器中定义它：12&lt;bean id="saxophone" class="com.spring.entity.Saxophone"/&gt;&lt;bean id="guitar" class="com.spring.entity.Guitar"/&gt;现在把所有乐器都装配给hank：123456789&lt;bean id="hank" class="com.spring.entity.OneManBan"&gt; &lt;property name="instruments"&gt; &lt;list&gt; &lt;ref bean="saxophone"/&gt; &lt;ref bean="piano"/&gt; &lt;ref bean="guitar"/&gt; &lt;/list&gt; &lt;/property&gt;&lt;/bean&gt;还可以使用其他的Spring设置元素设置&lt;list&gt;的成员。包括&lt;value&gt;，&lt;bean&gt;，&lt;/null&gt;甚至&lt;list&gt;。实际上，instruments属性只要是java.util.collection的实现类型都可以使用&lt;list&gt;，如：1java.util.List&lt;Instrument&gt; instruments;或者：1Instrument[] instruments;&lt;set&gt;元素的使用与&lt;list&gt;完全一致，唯一区别在于&lt;set&gt;元素的成员都是唯一的。现在实例化hank查看输出：1234开灯吹萨克斯钢琴声响起弹奏吉他装配Map集合如果instruments属性是一个Map集合的话，我们又该如何装配呢？现修改OneManBan类：1234567891011121314151617public class OneManBan implements Performer&#123; private Map&lt;String,Instrument&gt; instruments; public OneManBan() &#123; &#125; public void perform() &#123; for(String key:instruments.keySet())&#123; System.out.print(key+": "); Instrument ins=instruments.get(key); ins.play(); &#125; &#125; public void setInstruments(Map&lt;String, Instrument&gt; instruments) &#123; this.instruments = instruments; &#125;&#125;hank&lt;bean&gt;修改如下：123456789&lt;bean id="hank" class="com.spring.entity.OneManBan"&gt; &lt;property name="instruments"&gt; &lt;map&gt; &lt;entry key="saxophone" value-ref="saxophone"/&gt; &lt;entry key="piano" value-ref="piano"/&gt; &lt;entry key="guitar" value-ref="guitar"/&gt; &lt;/map&gt; &lt;/property&gt;&lt;/bean&gt;&lt;map&gt;的&lt;entry&gt;由key和value组成：属性用途key键为Stringkey-ref键为Spring容器中其他Bean的引用value值为Stringvalue-ref值为Spring容器中其他Bean的引用装配Properties集合当key和value都是String类型的时候，我们可以使用Properties来代替Map修改OneManBan：12345678910111213141516public class OneManBan implements Performer&#123; private Properties instruments; public OneManBan() &#123; &#125; public void perform() &#123; for(Object key:instruments.keySet())&#123; System.out.print(key+": "); String ins=instruments.getProperty(key.toString()); System.out.println(ins); &#125; &#125; public void setInstruments(Properties instruments) &#123; this.instruments = instruments; &#125;&#125;修改&lt;bean&gt;:123456789&lt;bean id="hank" class="com.spring.entity.OneManBan"&gt; &lt;property name="instruments"&gt; &lt;props&gt; &lt;prop key="saxophone" &gt;play the saxophone&lt;/prop&gt; &lt;prop key="piano"&gt;play the piano&lt;/prop&gt; &lt;prop key="guitar"&gt;play the guitar&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt;&lt;/bean&gt;《Spring In Action》读书笔记]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring 构造器注入]]></title>
    <url>%2Fblog%2FSpring-%E6%9E%84%E9%80%A0%E5%99%A8%E6%B3%A8%E5%85%A5.html</url>
    <content type="text"><![CDATA[从Spring3.0开始，Spring可以通过注解的方式来配置Bean。这里先介绍以传统的XML配置式来配置Bean。用一场选秀比赛来模拟Spring装备Bean过程。一场比赛中，需要一些参赛者来参加比赛，为此我们定义一个Performer接口：123public interface Performer &#123; public void perform();&#125;参赛选手都实现了这个Performer接口。以下为一个典型的Spring XML配置文件(Spring容器，Spring上下文)：1234567891011121314151617181920212223242526&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd"&gt; &lt;!--Bean declarations go here --&gt;&lt;/beans&gt;在&lt;beans&gt;元素内，我们可以配置所有Spring配置信息以及&lt;bean&gt;元素的声明。除此之外，Spring还自带了包括&lt;beans&gt;在内的10大命名空间：命名空间用途aop为声明切面以及将@AspectJ注解的类代理为Spring切面提供了配置元素beans&nbsp;&nbsp;&nbsp;&nbsp;支持声明Bean和装配Bean，是Spring最核心也是最原始的命名空间context为配置Spring应用上下文提供了配置元素，包括自动检测和自动装配Bean，注入非Spring直接管理的对象jee&nbsp;&nbsp;&nbsp;&nbsp;提供了与Java EE API的集成，例如JNDI和EJBjms为声明消息驱动的POJO提供了配置元素lang支持配置由Groovy，JRuby或BeanShell等脚本实现的Beanmvc启动Spring MVC的能力，例如面向注解的控制器，视图控制器和拦截器oxm支持Spring的对象到XML映射配置tx提供声明事务配置util提供各种各样的工具类元素，包括把集合配置为Bean，支持属性占位符元素回归比赛，第一位参赛者是一个Juggler(杂技师)，声明一个Juggler Bean：12345678910111213public class Juggler implements Performer&#123; private int beanBags=3; public Juggler() &#123; &#125; public Juggler(int beanBags) &#123; this.beanBags = beanBags; &#125; public void perform() &#123; System.out.println("throws "+beanBags+" beanBags"); &#125;&#125;Juggler实现了Performer接口，默认可以同时抛出三个豆袋子。也可以通过有参构造器改变袋子数量。现在有请第一位叫duke的杂技师上场！在applicationContext.xml文件中配置Duke：1&lt;bean id="duke" class="com.spring.entity.Juggler"/&gt;id表明他叫duke，class表明他是一个juggler。现在让duke上台表演：12345678public class Show &#123; public static void main(String[] args) &#123; String conf="applicationContext.xml"; ApplicationContext ac=new ClassPathXmlApplicationContext(conf); Juggler duke=(Juggler)ac.getBean("duke"); duke.perform(); //扔了 3 个豆袋子 &#125;&#125;构造器注入评委觉得这并没有什么难度，于是duke决定一次性扔15个豆袋子！修改duke&lt;bean&gt;的配置：123&lt;bean id="duke" class="com.spring.entity.Juggler"&gt; &lt;constructor-arg value="15" /&gt;&lt;/bean&gt;也可以使用c-命名空间代替&lt;constructor-arg&gt;标签，要使用它的话，现在XML顶部声明其模式：1xmlns:c="http://www.springframework.org/schema/c"上面的配置可以改为：1&lt;bean id="duke" class="com.spring.entity.Juggler" c:beanBags="15"&gt;或者：1&lt;bean id="duke" class="com.spring.entity.Juggler" c:_0="15"&gt;像这种只有一个参数的话也可以写为：1&lt;bean id="duke" class="com.spring.entity.Juggler" c:_="15"&gt;Juggler类有两个构造器，无参和有参。当没有声明&lt;constructor-arg&gt;的时候，Spring将默认使用无参的构造方法。现在，我们将&lt;constructor-arg&gt;的value设置位15的时候，Spring使用有参构造方法来改变属性beanBags的值。再次表演，输出：12扔了 15 个豆袋子掌声雷动。稍等！duke说他还会边扔袋子变朗诵诗歌！为此我们定义一个PoeticJuggler（会朗诵的杂技师）：1234567891011121314151617181920public class PoeticJuggler extends Juggler&#123; //诗歌属性 private Poem poem; public PoeticJuggler(Poem poem) &#123; this.poem = poem; &#125; public PoeticJuggler(int beanBags,Poem poem) &#123; //继承豆袋子属性 super(beanBags); this.poem = poem; &#125; public void perform()&#123; //继承扔袋子技能 super.perform(); System.out.println("边朗诵..."); //朗诵诗歌 poem.recite(); &#125;&#125;诗歌接口：123public interface Poem &#123; public void recite();&#125;duke最喜欢的是普希金的《假如生活欺骗了你》，为此我们定义一个DeceivedByLife类，实现Poem接口：123456789101112131415161718192021public class DeceivedByLife implements Poem&#123; private static String[] LINES = &#123; "假如生活欺骗了你，", "不要悲伤，不要心急！", "忧郁的日子里须要镇静：", "相信吧，快乐的日子将会来临！", "心儿永远向往着未来；", "现在却常是忧郁。", "一切都是瞬息，一切都将会过去；", "而那过去了的，就会成为亲切的怀恋"&#125;; public DeceivedByLife()&#123; &#125; //朗诵诗歌 public void recite() &#123; for(int i=0;i&lt;LINES.length;i++)&#123; System.out.println(LINES[i]); &#125; &#125; &#125;在Spring容器里配置这首诗歌：1&lt;bean id="deceivedByLife" class="com.spring.entity.DeceivedByLife"/&gt;现在duke是一个poeticJuggler了，为此我们修改duke的&lt;bean&gt;配置：1234&lt;bean id="poeticDuke" class="com.spring.entity.PoeticJuggler"&gt; &lt;constructor-arg value="15"/&gt; &lt;constructor-arg ref="deceivedByLife"/&gt;&lt;/bean&gt;c-命名空间写法：123&lt;bean id="poeticDuke" class="com.spring.entity.PoeticJuggler" c:_beanBags="15" c:_poem-ref="deceivedByLife"/&gt;或者：123&lt;bean id="poeticDuke" class="com.spring.entity.PoeticJuggler" c:_0="15" c:_1-ref="deceivedByLife"/&gt;当Spring碰到deceivedByLife和poeticDuke的&lt;bean&gt;声明时，它所执行的逻辑本质和下面的Java代码是一样的：12Poem deceivedByLife = new DeceivedByLife();Performer duke = new PoeticJuggler(15,deceivedByLife);现在，duke再次进行了表演：12345678public class Show &#123; public static void main(String[] args) &#123; String conf="applicationContext.xml"; ApplicationContext ac=new ClassPathXmlApplicationContext(conf); Juggler duke=(PoeticJuggler)ac.getBean("poeticDuke"); duke.perform(); &#125;&#125;输出：12345678910扔了 15 个豆袋子边朗诵...假如生活欺骗了你，不要悲伤，不要心急！忧郁的日子里须要镇静：相信吧，快乐的日子将会来临！心儿永远向往着未来；现在却常是忧郁。一切都是瞬息，一切都将会过去；而那过去了的，就会成为亲切的怀恋掌声再次雷动。通过工厂方法创建Bean有时候，一个类没有公开的构造方法，这时候就不能使用构造器注入了。Spring支持&lt;bean&gt;元素的factory-method方法来装配Bean。创建一个舞台类：12345678910111213141516public class Stage &#123; private Stage()&#123; &#125; //延迟加载实例 public static class stageSingletonHolder&#123; static Stage instance=new Stage(); &#125; //返回实例 public static Stage getInstance()&#123; return stageSingletonHolder.instance; &#125; public void createStage()&#123; System.out.println("创造一个舞台"); &#125;&#125;Stage作为一个单例类，没有公开的构造方法，相反，静态方法getInstance()每次调用都返回一个相同的Stage实例。&lt;bean&gt;元素的factory-method属性允许我们调用一个静态方法，从而代替构造方法来创建一个类的实例。在Spring上下文中配置Stage&lt;bean&gt;：1&lt;bean id="stage" class="com.spring.entity.Stage" factory-method="getInstance"/&gt;现在从Spring容器中获取这个&lt;bean&gt;：12345678public class CreateStage &#123; public static void main(String[] args) &#123; String conf="applicationContext.xml"; ApplicationContext ac=new ClassPathXmlApplicationContext(conf); Stage stage=(Stage)ac.getBean("stage"); stage.createStage(); &#125;&#125;输出：1创造一个舞台Bean作用域所有Spring Bean默认都是单例的。如果现在要创建一个”门票”类，每个人的门票肯定是不一样的。为了让Spring每次请求都产生一个新的实例，我们可以定义如下ticket&lt;bean&gt;：1&lt;bean id="ticket" class="com.spring.entity.Ticket" scope="prototype"/&gt;除了prototype，Spring还提供了其他几个作用域选项：作用域定义singleton在每一个spring容器中，一个Bean定义只有一个对象实例（默认）prototype允许Bean的定义可以被实例化任意次（每次调用都创建一个新的实例）request在一次HTTP请求中，每个Bean定义对应一个实例。该作用域仅在基于Web的Spring上下文中才有效session在一个HTTP Session中，每个Bean定义对应一个实例。该作用域仅在基于Web的Spring上下文中才有效global-session在一个全局HTTP Session中，每个Bean定义对应一个实例。该作用域仅在Protlet上下文中才有效Spring的单例Bean只能保证在每个应用上下文中只有一个Bean实例。没有人能够阻止你使用传统的方式实例化同一个Bean，或者你甚至可以定义几个声明来实例化同一个Bean。初始化和销毁Bean为Bean定义初始化和销毁操作，只需要使用init-method和destroy-method参数来配置&lt;bean&gt;元素。init-method属性指定了在初始化Bean时要调用的方法。destroy-method属性指定了Bean从容器移除之前要调用的方法。现在定义一个灯光类Light：12345678public class Light &#123; void turnOnTheLight()&#123; System.out.println("开灯"); &#125; void turnOffTheLight()&#123; System.out.println("关灯"); &#125;&#125;在容器中配置该Bean：12&lt;bean id="light" class="com.spring.entity.Light" init-method="turnOnTheLight" destroy-method="turnOffTheLight"/&gt;加载容器，以此来实例化light：123456789public class LightControl &#123; public static void main(String[] args) &#123; String conf="applicationContext.xml"; //加载容器 ApplicationContext ac=new ClassPathXmlApplicationContext(conf); //关闭容器 ((ClassPathXmlApplicationContext)ac).close(); &#125;&#125;输出：123开灯...关灯我们还可以定义默认的init-method和destroy-method。如果上下文中Bean定义了名字相同的初始化和销毁方法，我们可以统一配置default-init-method和default-destroy-method：12345678910111213141516171819202122232425262728&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:util="http://www.springframework.org/schema/util" xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd" default-init-method="turnOnTheLight" default-destroy-method="turnOffTheLight"&gt; &lt;!--Bean declarations go here --&gt;&lt;/beans&gt;为Bean定义初始化和销毁的方法是让Bean实现Spring的InitializingBean和DisposableBean接口。InitializingBean声明了一个afterPropertiesSet()方法作为初始化方法。DisposableBean声明了一个destroy()方法作为销毁方法。在Spring容器中无需任何配置。修改Light类：12345678public class Light implements InitializingBean,DisposableBean&#123; public void afterPropertiesSet() throws Exception &#123; System.out.println("开灯"); &#125; public void destroy() throws Exception &#123; System.out.println("关灯"); &#125;&#125; ​这种方法的缺点显而易见了：实现Spring的接口意味着Bean与Spring的API产生了耦合。所以这种方法并不推荐！《Spring In Action》读书笔记]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery选择器总结]]></title>
    <url>%2Fblog%2FjQuery%E9%80%89%E6%8B%A9%E5%99%A8%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[jQuery选择器和CSS选择器一样，并在其基础上做出了拓展。可在此页面上练习jQuery选择器：http://mrbird.leanote.com/single/jQuery-Selectors-Lab-Page基本选择器选择器描述返回示例#id根据给定的id匹配一个元素单个元素$(“#test”)选取id为test的元素.class根据给定的类名匹配元素集合元素$(“.test”)选取所有class为test的元素element根据给定的元素名匹配元素集合元素$(“p”)选取所有&lt;p&gt;元素*匹配所有元素集合元素$(“*”)选取所有元素selector1,selector2 ……，selectorN将每一个选择器匹配到的元素合并后一起返回集合元素$(“div,span,p.myClass”)选取所有&lt;div&gt;，&lt;span&gt;和 拥有class为myClass的&lt;p&gt;标签的一组元素层次选择器选择器描述返回示例$(“ancestor descendant”)选取ancestor元素里的所有descendant（后代）元素集合元素$(“div span”)选取&lt;div&gt;里的所有的&lt;span&gt;元素$(“parent&gt;child”)选取parent元素下的child元素与\$(“ancestor descendant”)有区别，\$(“ancestor descendant”)选择的是后代元素集合元素$(“div&gt;span”)选取&lt;div&gt;元素下元素名是&lt;span&gt;的子元素$(“prev+next”)选取紧接在prev元素后的next元素集合元素$(“.one+div”)选取class为one的下一个&lt;div&gt;同辈元素$(“prev~siblings”)选取prev元素之后的所有siblings元素集合元素$(“#two~div”)选取id为two的元素后的 所有&lt;div&gt;同辈元素过滤选择器jQuery过滤选择器规则同CSS中的伪类选择器，都以一个冒号(:)开头。按照不同的过滤规则，过滤选择器可以分为基本过滤器，内容过滤器，可见性过滤器，属性过滤器，子元素过滤器和表单对象属性过滤选择器。基本过滤选择器选择器&nbsp;描述返回示例:first选取第一个元素单个元素$(“div:first”)选取所有&lt;div&gt;元素中第一个&lt;div&gt;元素:last选取最后一个元素单个元素$(“div:last”)选取所有&lt;div&gt;元素中最后一个&lt;div&gt;元素:not(selector)去除所有与给定选择器匹配的 元素集合元素$(“input:not(.myClass)”)选取class不是myClass的&lt;input&gt; 元素:even选取索引是偶数的所有元素， 索引从0开始集合元素$(“input:even”)选取索引是偶数的&lt;input&gt;元素:odd选取索引是奇数的所有元素， 索引从0开始集合元素$(“input:odd”)选取索引是奇数的&lt;input&gt;元素:eq(index)选取索引等于index的元素， (index)从0开始集合元素$(“input:eq(1)”)选取索引等于1的&lt;input&gt;元素:gt(index)选取索引大于index的元素， (index)从0开始集合元素$(“input:gt(1)”)选取索引大于1的&lt;input&gt;元素（注：大于1，而不包括1）:lt(index)选取索引小于index的元素， (index)从0开始集合元素$(“input:lt(1)”)选取索引小于1的&lt;input&gt;元素（注：小于1，而不包括1）:header选取所有的标题元素，如h1， h2等集合元素$(“:header”)选取网页中所有header，如h1,h2…:animated选取当前正在执行动画的元素集合元素$(“div:animate”)选取正在执行动画的&lt;div&gt;元素:focus获取当前获取焦点的元素集合元素$(“input:focus”)获取当前获取焦点的&lt;input&gt;元素:root选择文档的根元素单个元素$(“:root”)获取当前文档的根元素:lang(language)只选择采用特定语言的元素集合元素$(“p:lang(en)”)选取带有以 “en” 开头的lang 属性值的所有 &lt;p&gt; 元素内容过滤选择器选择器描述返回示例:contains(text)选取含有文本内容为”text”的元素集合元素$(“div:contents(‘我’)”)选取含有文本我的&lt;div&gt;元素:empty选取不包含子元素和文本的空元素集合元素$(“div:empty”)选取不包含子元素(包括文本元素)的 &lt;div&gt;元素:has(selector)选取含有选择器所匹配的元素的元素集合元素$(“div:has(p)”)选取含有&lt;p&gt;元素的&lt;div&gt;元素:parent选取含有子元素或文本的元素集合元素$(“div:parent”)选取拥有子元素（包括文本元素）的 &lt;div&gt;元素可见性过滤选择器选择器描述返回示例:hidden选取所有不可见元素集合元素\$(“:hidden”)选取所有不可见元素。包括&lt;input type=”hidden/“&gt;，&lt;div sytle=”dispaly:none;”&gt;和&lt;div&gt;等元素。如果只想选取&lt;input&gt;元素，可以使用\$(“input:hidden”):visible选取所有可见元素集合元素$(“input:visible”)选取所有可见的&lt;div&gt;元素属性过滤选择器选择器描述返回示例[attribute]选取拥有此属性的元素集合元素$(“div[id]”)选取拥有属性id的元素[attribute=value]选取属性的值为value的元素集合元素$(“div[title=test]”)选取属性title为”test”的&lt;div&gt;元素[attribute!=value]选取属性的值不等于value的元素集合元素$(“div[title!=test]”)选取属性title不等于”test”的&lt;div&gt;元素（注意：没有属性title的&lt;div&gt;元素也会被选取）[attribute^=value]选取属性的值以value开始的元素集合元素$(“div[title^=test]”)选取属性title以”test”开始的&lt;div&gt;[attribute$=value]选取属性的值以value结束的元素集合元素\$(“div[title$=test]”)选取属性title以”test”结束的&lt;div&gt;[attribute*=value]选取属性的值含有value的元素集合元素$(“div[title*=test]”)选取属性title含有”test”的&lt;div&gt;[attribute|=value]选取属性等于给定字符串或以该字符串为前缀（该字符串后跟一个“_“）的元素集合元素$(“div[title|=’en’]”)选取属性tite等于en或以en为前缀（该字符串后跟一个连字符”_“）的元素[attribute~=value]选取属性用空格分隔的值中包含一个给定值的元素集合元素$(“div[title~=’uk’]”)选取属性title用空格分隔的值中包含字符uk的元素[attribute1][attribute2][attributeN]复合属性选择器满足多个条件，每选择一次，范围缩小一次集合元素\$(“div[id][title$=’test’]”)选取拥有属性id，并且属性title以”test”结束的&lt;div&gt;元素子元素过滤选择器选择器描述返回示例:nth-child(index/even/odd/equation)选取每个父元素下的第index个子元素或者奇偶元素（index从1开始）集合元素:eq(index)只匹配一个元素，而:nth-child将为每一个父元素匹配子元素，并且:nth-child(index)的index是从1开始的，而eq(index)是从0开始的:nth-last-child(index/even/odd/equation)选取父元素下的倒数第n个子元素或符合特定顺序规则的元素&nbsp;集合元素&nbsp;:nth-last-child(2)表示作为父元素的倒数第2个子元素；:nth-last-child(3n)表示匹配作为父元素倒数顺序的第3n个子元素的元素（n表示包括0在内的自然数）:first-child选取每个父元素的第一个子元素集合元素:first只返回一个元素，而:first-child选择符将为每个父元素匹配子元素。例如$(“ul li:fisrt-child”)选取每个&lt;ul&gt;中的第一个&lt;li&gt;元素:last-child选取每个父元素的最后一个子元素集合元素:last只返回一个元素，而:last-child选择符将为每个父元素匹配子元素。例如$(“ul li:last-child”)选取每个&lt;ul&gt;中的末尾&lt;li&gt;元素:only-child如果某个元素是它父元素中唯一的子元素，那么将会被匹配。如果父元素中含有其他元素，那么不会被匹配集合元素$(“ul li:only-child”)在&lt;ul&gt;中选取是唯一子元素的&lt;li&gt;元素:only-of-type匹配作为父元素唯一一个该类型的子元素的元素，将其封装为jQuery对象并返回。集合元素$(“li:only-of-type”)选取li父元素下的唯一的一个li元素:first-fo-type匹配作为父元素的第一个该类型的子元素的元素，将其封装为jQuery对象并返回集合元素\$(“span:first-of-type”)选取span父元素下的第一个span元素，等价于\$(“span:nth-of-type(1)”):last-of-type匹配作为父元素的最后一个该类型的子元素的元素，将其封装为jQuery对象并返回&nbsp;集合元素\$(“span:last-of-type”)选取span父元素下的最后一个span元素，等价于\$(“span:nth-last-of-type(1)”):nth-of-type(index/even/odd/equation)匹配作为父元素的同类型子元素中的第n个(或符合特定顺序的)元素，将其封装为jQuery对象并返回&nbsp;集合元素&nbsp; $(“span:nth-of-type(2)”)选取span父元素下的第二个span元素:nth-last-of-type(index/even/odd/equation)匹配作为父元素的同类型子元素中的倒数第n个（或符合特定倒数顺序的）元素，将其封装为jQuery对象并返回&nbsp;集合元素$(“span:nth-last-of-type(2)”)选取span父元素下的倒数第二个span元素:nth-child()选择器是很常见的子元素过滤选择器，详细功能如下：(1) :nth-child(even)能选取每个父元素下的索引值是偶数的元素。(2) :nth-child(odd)能选取每个父元素下的索引值是奇数的元素。(3) :nth-child(2)能选取每个父元素下的索引值等于2的元素。(4) :nth-child(3n)能选取每个父元素下的索引值是3的倍数的元素。(n从1开始)另外，关于:only-child和:only-of-type的区别可以看下面这个例子：1234567891011&lt;ul&gt; &lt;span id="span"&gt;span&lt;/span&gt; &lt;li id="li1"&gt;li1&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt; &lt;li id="li2"&gt;li2&lt;/li&gt;&lt;/ul&gt;&lt;script&gt; console.log($("li:only-child")); console.log($("li:only-of-type"));&lt;/script&gt;打印结果：表单对象属性过滤选择器此选择器主要是对所选择的表单元素进行过滤，例如选择被选中的下拉框，多选框等元素。选择器描述返回示例:enabled选取所有可用元素集合元素$(“#form1:enabled”)选取id为form1的表单内所有可用元素:disabled选取所有不可用元素集合元素$(“#form2:disabled”)选取id为form2的表单内所有不可用元素:checked选取所有被选中的元素（单选框，复选框）集合元素$(“input:checked”)选取所有被选中的&lt;input&gt;元素:selected选取所有被选中的选项元素（下拉列表）集合元素$(“select option:selected”)选取所有被选中的选项元素表单选择器选择器描述返回示例:input选取所有&lt;input&gt;，&lt;textarea&gt;,&lt;select&gt;和&lt;button&gt;元素集合元素$(“:input”)选取所有&lt;input&gt;，&lt;textarea&gt;，&lt;select&gt;和&lt;button&gt;元素:text选取所有的单行文本框集合元素$(“:text”)选取所有的单行文本框:password选取所有的密码框集合元素$(“:password”)选取所有的密码框:radio选取所有的单选框集合元素$(“:radio”)选取所有的单选框:checkbox选取所有的多选框集合元素$(“:checkbox”)选取所有的多选框:submit选取所有的提交按钮集合元素$(“:submit”)选取所有的提交按钮:image选取所有的图像按钮集合元素$(“:image”)选取所有的图像按钮:reset选取所有的重置按钮集合元素$(“:reset”)选取所有的重置按钮:button选取所有的按钮集合元素$(“:button”)选取所有的按钮:file选取所有的上传域集合元素$(“:file”)选取所有的上传域:hidden选取所有的不可见元素集合元素同前所述]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解決jQuery和其他库的冲突]]></title>
    <url>%2Fblog%2F%E8%A7%A3%E6%B1%BAjQuery%E5%92%8C%E5%85%B6%E4%BB%96%E5%BA%93%E7%9A%84%E5%86%B2%E7%AA%81.html</url>
    <content type="text"><![CDATA[jQuery库在其他库之后导入在其他库和jQuery库都被加载完毕后，可以任何时候调用jQuery.noConflict()函数来将变量\$的使用权移交给其他JavaScript库。示例如下：1234567891011121314151617181920// ...省略其他代码&lt;p id="pp"&gt;Test-prototype(将被隐藏)&lt;/p&gt;&lt;p &gt;Test-jQuery(将被绑定单击事件)&lt;/p&gt;&lt;!-- 引入 prototype --&gt;&lt;script src="lib/prototype.js" type="text/javascript"&gt;&lt;/script&gt;&lt;!-- 引入 jQuery --&gt;&lt;script src="../../scripts/jquery.js" type="text/javascript"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;jQuery.noConflict(); //将变量$的控制权让渡给prototype.jsjQuery(function()&#123; //使用jQuery jQuery("p").click(function()&#123; alert( jQuery(this).text() ); &#125;);&#125;); $("#pp").style.display = 'none'; //使用prototype.js隐藏元素&lt;/script&gt; &lt;/body&gt;// ...省略其他代码然后，就可以在程序里使用jQuery()函数作为jQuery对象的制造工厂。此外，还有另外一种选择。如果想确保jQuery’不会与其他库冲突，但又想自定义一个快捷方式。可以进行如下操作：123456789101112// ...省略其他代码&lt;script type="text/javascript"&gt;var $j = jQuery.noConflict(); //自定义一个比较短快捷方式$j(function()&#123; //使用jQuery，利用自定义快捷方式——$j $j("p").click(function()&#123; alert( $j(this).text() ); &#125;);&#125;); $("#pp").style.display = 'none'; //使用prototype.js隐藏元素&lt;/script&gt;// ...省略其他代码可以自定义备用名称，例如jq，\$j等。如果不想自定义名称，还想继续使用\$符号，又不能与其他js库冲突的话，可以使用以下两种办法：其一：12345678910&lt;script type="text/javascript"&gt;jQuery.noConflict(); //将变量$的控制权让渡给prototype.jsjQuery(function($)&#123; //使用jQuery设定页面加载时执行的函数 $("p").click(function()&#123; //在函数内部继续使用 $() 方法 alert( $(this).text() ); &#125;);&#125;); $("#pp").style.display = 'none'; //使用prototype&lt;/script&gt;其二：123456789101112&lt;script type="text/javascript"&gt;jQuery.noConflict(); //将变量$的控制权让渡给prototype.js(function($)&#123; //定义匿名函数并设置形参为$ $(function()&#123; //匿名函数内部的$均为jQuery $("p").click(function()&#123; //继续使用 $() 方法 alert($(this).text()); &#125;); &#125;);&#125;)(jQuery); //执行匿名函数且传递实参jQuery $("#pp").style.display = 'none'; //使用prototype&lt;/script&gt;jQuery库在其他库之前导入如果jQuery库在其他库之前就导入了，那么可以直接使用“jQuery”来做一些jQuery的工作，同时，可以使用\$()方法作为其他库的快捷方式。无需调用jQuery.noConflict()函数。示例如下：12345678910111213141516171819&lt;!-- 引入 jQuery --&gt;&lt;script src="../../scripts/jquery.js" type="text/javascript"&gt;&lt;/script&gt;&lt;!-- 引入 prototype --&gt;&lt;script src="lib/prototype.js" type="text/javascript"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p id="pp"&gt;Test-prototype(将被隐藏)&lt;/p&gt;&lt;p &gt;Test-jQuery(将被绑定单击事件)&lt;/p&gt; &lt;script type="text/javascript"&gt;jQuery(function()&#123; //直接使用 jQuery ,没有必要调用"jQuery.noConflict()"函数。 jQuery("p").click(function()&#123; alert( jQuery(this).text() ); &#125;);&#125;); $("#pp").style.display = 'none'; //使用prototype&lt;/script&gt;&lt;/body&gt;]]></content>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 反射机制]]></title>
    <url>%2Fblog%2FJava-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6.html</url>
    <content type="text"><![CDATA[JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。—-百度百科动态：运行期间动态绑定执行规则。静态：编译以后就已经确定的执行过程。动态加载类到方法区1234567891011public void test1()&#123; String str = new String("Hello"); Class cls = String.class; //动态获取 String类型的方法信息： Method[] all = cls.getDeclaredMethods(); //Method 代表方法的信息 // method.getName 可以获取方法的名称 for (Method method : all) &#123; System.out.println(method.getName()); &#125;&#125;创建对象过程1.Java 将类加载到方法区（自动完成）2.利用类创建对象。内存中有一个String对象，方法区中还有类的信息！通过Class对象可以获取类的相关信息。动态获取类的信息动态获取类的方法信息Foo类（package：demo）：12345678910//编译以后是 demo.Foo.class//类的全名是 demo.Fooclass Foo&#123; public int test()&#123; return 5; &#125; public double test1()&#123; return 5d; &#125;&#125;动态获取Foo类的方法：1234567891011121314151617181920@Testpublic void testClassForName()&#123; /* * 动态的加载类信息到方法区 * 并且返回对应的Class对象！ * Class 对象可以访问类的全部信息！ * * 将className对应的类文件，从磁盘中加载 * 内存方法区，返回这个类的信息 */ String className = "demo.Foo"; try &#123; Class cls = Class.forName(className); Method[] all = cls.getDeclaredMethods(); for (Method method : all) &#123; System.out.println(method.getName()); &#125; &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace();&#125;输出：12testtest1 ​动态获取类的属性信息Eoo类：1234567891011121314151617class Eoo&#123; int id; String name; double salary; String meno; public Eoo()&#123; &#125; public Eoo(int id, String name, double salary, String meno) &#123; super(); this.id = id; this.name = name; this.salary = salary; this.meno = meno; &#125; // get，set略&#125;动态获取Eoo类的属性：1234567891011121314151617@Testpublic void testField()throws Exception &#123; /* * 动态获取一个类的全部属性信息 * 1 动态加载一个类到方法区 * 2 动态获取类的属性信息 */ String className = "demo.Eoo"; //动态加载类 Class cls = Class.forName(className); //动态获取类声明的属性信息 Field[] all = cls.getDeclaredFields(); for (Field field : all) &#123; //getName 获取属性的名字 System.out.print(field.getName()+" "); &#125;&#125;输出：1id name salary meno动态获取类的构造器信息123456789101112131415161718@Testpublic void testCon() throws Exception&#123; /* * 1 动态加载类 */ String className = "demo.Eoo"; Class cls = Class.forName(className); Constructor[] all = cls.getDeclaredConstructors(); for (Constructor c : all) &#123; System.out.print(c.getName()); //获取构造器的参数类型列表 // Parameter 参数 Type类型 // Class[] 代表所有参数的类型列表 Class[] types = c.getParameterTypes(); System.out.println(Arrays.toString(types)); &#125;&#125;输出：12demo.Eoo[]demo.Eoo[int, class java.lang.String, double, class java.lang.String] ​动态创建对象调用无参构造器创建对象如果没有无参数构造器，将发生异常！Class 提供了方法 newInstance()。123456789101112131415161718@Testpublic void testNewInstance() throws Exception&#123; /* * 动态调用无参数构造器创建对象 * 1 动态加载类 * 2 利用class 的方法 newInstance 执行 * 无参数构造器常见对象 * 注意：类必须有无参数，否则出异常 */ String className = "java.util.Date"; Class cls = Class.forName(className); // cls.newInstance()调用无参数构造器创建对象 Object obj = cls.newInstance(); System.out.println(obj); //静态的创建对象！编译已经就固定了！ Date date = new Date();&#125;输出：1Fri Sep 16 20:04:55 CST 2016调用有参构造器创建对象如果没有对应有参数构造器！将发生异常！参数传递错误、将发生异常！123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * 调用 className 类名对应的类的有参数构造器，paramTypes 代表对应构造器的参数列表 * className + paramTypes 共同决定调用哪个构造器！执行构造器还需要具体的参数params */public Object create(String className,Class[] paramTypes,Object[] params) throws Exception&#123; // 动态加载类 // 动态获取指定参数类型的构造器 // 执行这个构造器，传递 params 参数。 Class cls = Class.forName(className); //getDeclaredConstructor 在类信息中查找 //给定参数类型的构造器信息 Constructor c = cls.getDeclaredConstructor(paramTypes); //执行构造器 c.newInstance() 方法，创建对象 //返回值就是这个构造器创建的对象 Object obj = c.newInstance(params); return obj;&#125;@Testpublic void testCreate() throws Exception &#123; String className = "java.util.Date"; //类型列表==Class类型的数组 Class[] paramTypes = &#123;long.class&#125;; //实际参数列表 Object[] params=&#123;-1000L*60*60*24*365&#125;; Object obj = create(className, paramTypes, params); System.out.println(obj); //思考：如何动态调用 new String("Hello"); className = "java.lang.String"; /* * &#123;&#125; 只能拥有声明变量时候直接初始化 * 不能用于赋值语句！ * 赋值语句可以使用 new Object[]&#123;"Hello"&#125; */ paramTypes = new Class[]&#123;String.class&#125;; params = new Object[]&#123;"Hello"&#125;; obj = create(className, paramTypes, params); System.out.println(obj);//Hello //思考：如何动态调用 new String(byte[],"utf-8"); obj = create("java.lang.String", new Class[]&#123;byte[].class, String.class&#125;, new Object[]&#123;new byte[]&#123;65,66,67,68&#125;, "UTF-8"&#125;); System.out.println(obj);&#125;输出：123Wed Jan 01 08:00:00 CST 1969HelloABCD ​动态获取类的属性值实现过程（如何利用反射API实现动态属性访问）：1.找到对象的类型信息（方法区）2.在信息中找属性信息（Field）3.在对象上获取属性的值！类Goo：123456789101112public class Goo &#123; public int id; public String name; public Goo() &#123; &#125; public Goo(int id, String name) &#123; super(); this.id = id; this.name = name; &#125;&#125;动态获取属性的值：12345678910111213141516171819202122232425262728293031323334353637383940 /** * 获取obj对象的 fieldName 对应属性的值 * @param obj * @param fieldName * @return 属性值 */public Object get(Object obj, String fieldName)throws Exception&#123; //1 获取类信息 /* * Java 中对象的getClass()方法可以获取 对象的类型信息！ * Java 中 有3种方法可以获取Class信息 * 1. 类名.class 获取类信息(静态) * 2. Class.forName("类名") 获取类信息 动态 * 3. obj.getClass() 获取类信息。运行期间，通过当前对象获取类信息 */ Class cls = obj.getClass(); //找到属性: /* * getDeclaredField 按照属性名在cls中查找 * 类信息。 当属性没有找到时候，抛出异常！ */ Field field = cls.getDeclaredField(fieldName); //在对象上获取属性的值！ /* * get方法：在一个对象上获取属性的值，对象上没有对应的属性，抛出异常 */ Object value = field.get(obj); return value;&#125; @Testpublic void testGetField()throws Exception &#123; /* * 动态获取对象的属性 */ Goo goo = new Goo(5, "Tom"); Object v1 = get(goo, "id"); Object v2 = get(goo, "name"); System.out.println(v1+" "+v2);&#125;输出：15 Tom动态调用类的方法12345678910111213@Testpublic void testinvoke()throws Exception&#123; List&lt;String&gt; list=new ArrayList&lt;String&gt;(); list.add("tom"); list.add("jack"); // 动态获取类信息 Class cls = list.getClass(); // 通过方法名和参数类型找到对应的方法 Method method = cls.getDeclaredMethod("remove", new Class[]&#123;int.class&#125;); // 调用方法，传递对象和具体参数 Object value=method.invoke(list,new Object[]&#123;0&#125;); System.out.println(value); //tom&#125;反射的意义常见的框架的底层都是使用反射实现的！如：Spring MyBatis Struts2 Hibernate …现有application.xml文件：12345&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans&gt; &lt;bean id="date" class="java.util.Date"&gt;&lt;/bean&gt; &lt;bean id="list" class="java.util.ArrayList"&gt;&lt;/bean&gt;&lt;/beans&gt;模拟Spring框架的getBean()方法：123456789101112131415161718192021222324252627282930313233343536public class ApplicationContext &#123; private HashMap&lt;String, Object&gt; map= new HashMap&lt;String, Object&gt;(); public ApplicationContext(String xml) &#123; SAXReader reader = new SAXReader(); try&#123; //读取xml InputStream in = this.getClass().getClassLoader().getResourceAsStream(xml); Document doc = reader.read(in); //解析XML内容 获取全部的&lt;bean&gt; List&lt;Element&gt; beans = doc.getRootElement().elements(); for (Element e : beans) &#123; //e 是每个 &lt;bean&gt; 元素 String id = e.attributeValue("id"); String className = e.attributeValue("class"); //利用反射创建对象 Class cls = Class.forName(className); Object obj = cls.newInstance(); //对象缓存到 map中 map.put(id, obj); &#125; &#125;catch(Exception e)&#123; e.printStackTrace(); throw new RuntimeException(e); &#125; &#125; public Object getBean(String id)&#123; return map.get(id); &#125; public static void main(String[] args) &#123; String conf = "application.xml"; ApplicationContext ac = new ApplicationContext(conf); Object o = ac.getBean("date"); System.out.println(o); //Fri Sep 16 21:30:07 CST 2016 &#125;&#125;]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle SQL常用函数]]></title>
    <url>%2Fblog%2FOracle-SQL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0.html</url>
    <content type="text"><![CDATA[文中例子涉及到的表数据：1234567891011121314151617181920SQL&gt; select empno,ename,job, hiredate,sal,deptno,comm from lzp.emp; EMPNO ENAME JOB HIREDATE SAL DEPTNO COMM---------- ---------- --------- -------------- ------- ---------- ---------- 7369 SMITH CLERK 17-12月-80 800 20 null 7499 ALLEN SALESMAN 20-2月 -81 3100 30 300 7521 WARD SALESMAN 22-2月 -81 1250 30 500 7566 JONES MANAGER 02-4月 -81 2975 20 null 7654 MARTIN SALESMAN 28-9月 -81 8000 30 1400 7698 BLAKE MANAGER 01-5月 -81 2850 30 null 7782 CLARK MANAGER 09-6月 -81 2450 10 null 7788 SCOTT ANALYST 19-4月 -87 3000 20 null 7839 KING PRESIDENT 17-11月-81 5000 10 null 7844 TURNER SALESMAN 08-9月 -81 1500 30 0 7876 ADAMS CLERK 23-5月 -87 1100 20 null 7900 JAMES CLERK 03-12月-81 950 30 null 7902 FORD ANALYST 03-12月-81 3000 20 null 7934 MILLER CLERK 23-1月 -82 1300 10 null 已选择14行。字符函数字符串截取12345SQL&gt; select substr('mrbird',3,6) from dual; SUBS----bird查找子串位置12345SQL&gt; select instr('mrBird','Bird') from dual; INSTR('MRBIRD','BIRD')---------------------- 3字符串连接123456789101112/* 1. || */SQL&gt; select 'mr'||'Bird'as result from dual; RESULT------mrBird/* 2.concat */SQL&gt; select concat('mr','Bird') as result from dual; RESULT------mrBird去除空格1234567891011SQL &gt; SELECT LTRIM (' mrBird') l, RTRIM ('mrBird ') r, TRIM (' mrBird ') TFROM dual; L R T------ ------ ------mrBird mrBird mrBird去除前缀和后缀1234567891011SQL &gt; SELECT TRIM (LEADING 'M' FROM 'MMMMMmrBird') s1, TRIM (TRAILING 'D' FROM 'mrBirdDDDD') s2, TRIM ('M' FROM 'MMMmrBirdMMMM') s3FROM dual; S1 S2 S3------ ------ ------mrBird mrBird mrBird计算字符串长度12345SQL&gt; select length('mrbird') from dual; LENGTH('MRBIRD')---------------- 6initcap（首字母变大写） ,lower（变小写）,upper（变大写）12345SQL&gt; select initcap('mrbird') s1,lower('MRBIRD') s2,upper('mrbird') s3 from dual; S1 S2 S3------ ------ ------Mrbird mrbird MRBIRD替换12345SQL&gt; select replace('mrXiaoniao','Xiaoniao','Bird') from dual; REPLAC------mrBirddecode[实现if ..then 逻辑] 注:第一个是表达式,最后一个是不满足任何一个条件的值123456789101112131415161718192021222324SQL&gt; SELECT DECODE ( deptno, 10, '人力资源部', 20, '软件开发部', 30, '市场部', '其他神秘部门' ) deptName, deptno, enameFROM lzp.empWHERE empno &gt;= 7900; DEPTNAME DEPTNO ENAME------------ ---------- ----------市场部 30 JAMES软件开发部 20 FORD人力资源部 10 MILLERcase[实现switch ..case 逻辑]12345678910111213141516171819202122232425262728293031SQL&gt; SELECT CASEWHEN sal &lt; 2000 THEN '被剥削的人'WHEN sal &lt; 3000 THEN '被压榨的人'WHEN sal &lt; 5000 THEN '普通的人'ELSE '努力的人'END meno, sal, enameFROM lzp.empWHERE deptno = 30ORDER BY sal ASC; MENO SAL ENAME---------- ---------- ----------被剥削的人 950 JAMES被剥削的人 1250 WARD被剥削的人 1500 TURNER被压榨的人 2850 BLAKE普通的人 3100 ALLEN努力的人 8000 MARTIN 已选择6行。十进制和ASCII互相转换12345SQL&gt; select ascii('A'),chr(65) from dual; ASCII('A') C---------- - 65 A日期函数TO_DATE格式(以时间: 2007-11-02 13:45:25 为例)Yearyy &nbsp; &nbsp;two digits两位年显示值:07yyythree digits三位年显示值:007yyyyfour digits四位年显示值:2007Monthmm &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;number&nbsp;两位月&nbsp;显示值:11mon&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;abbreviated字符集表示显示值:11月,若是英文版,显示nov&nbsp;monthspelled out字符集表示显示值:11月,若是英文版,显示novemberDaydd &nbsp; &nbsp; &nbsp;&nbsp;number当月第几天显示值:02ddd&nbsp;&nbsp;number当年第几天显示值:306dy &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;abbreviated &nbsp; &nbsp;当周第几天简写&nbsp;显示值:星期五,若是英文版,显示fridayspelled out当周第几天全写显示值:星期五,若是英文版,显示fridayddspthspelled out当月第几天英文显示值:secondHourhh &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;two digits12小时进制&nbsp;显示值:01hh24two digits24小时进制显示值:13Minute &nbsp;&nbsp;mi/mm &nbsp; &nbsp;&nbsp;two digits60进制显示值:45Secondss &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;two digits60进制显示值:25OthersQ &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;digit季度显示值:4WWdigit当年第几周&nbsp;显示值:44Wdigit当月第几周显示值:124小时格式下时间范围为： 0:00:00 - 23:59:59….12小时格式下时间范围为： 1:00:00 - 12:59:59 ….日期字符串相互转换时间转字符串:Year：1234567891011SQL&gt; SELECT TO_CHAR (SYSDATE, 'yy') yy, TO_CHAR (SYSDATE, 'yyy') yyy, TO_CHAR (SYSDATE, 'yyyy') yyyyFROM dual; YY YYY YYYY-- --- ----16 016 2016Month：1234567891011SQL&gt;SELECT TO_CHAR (SYSDATE, 'mm') mm, TO_CHAR (SYSDATE, 'mon') mon, TO_CHAR (SYSDATE, 'month') monthFROM dual; MM MON MONTH-- -------- ------09 9月 9月Day：12345678910111213SQL&gt;SELECT TO_CHAR (SYSDATE, 'dd') dd, TO_CHAR (SYSDATE, 'ddd') ddd, TO_CHAR (SYSDATE, 'dy') dy, TO_CHAR (SYSDATE, 'day') DAY, TO_CHAR (SYSDATE, 'ddspth') ddspthFROM dual; DD DDD DY DAY DDSPTH-- --- ------------ --------- --------------06 250 tue tuesday sixthHour：12345678910SQL&gt;SELECT TO_CHAR (SYSDATE, 'hh') hh, TO_CHAR (SYSDATE, 'hh24') hh24FROM dual; HH HH24-- --05 17Minute,Second略季度，周：1234567891011SQL&gt;SELECT TO_CHAR (SYSDATE, 'Q') Q, TO_CHAR (SYSDATE, 'WW') WW, TO_CHAR (SYSDATE, 'W') WFROM dual; Q WW W- -- -3 36 1字符串转时间：12345SQL&gt; select to_date('2016-09-06','yyyy-MM-dd') time from dual; TIME--------------06-9月 -16next_day返回下个星期的日期,day为1-7或星期日-星期六,1表示星期日，也可以用英文表示星期。12345SQL&gt; select next_day(sysdate,'monday') time from dual; TIME--------------12-9月 -16两个日期相差天数12345SQL&gt; select floor(sysdate - to_date('20020405','yyyymmdd')) time from dual; TIME---------- 5268months_between123456789101112SQL&gt; SELECT MONTHS_BETWEEN ( TO_DATE ('2016-09-01', 'yyyy-MM-dd'), TO_DATE ('2016-01-01', 'yyyy-MM-dd') ) monthsFROM dual; MONTHS---------- 8round [舍入到最接近的日期]（day:舍入到最接近的星期日）12345678910111213SQL&gt; SELECT SYSDATE S1, ROUND (SYSDATE) S2, ROUND (SYSDATE, 'year') YEAR, ROUND (SYSDATE, 'month') MONTH, ROUND (SYSDATE, 'day') DAYFROM dual; S1 S2 YEAR MONTH DAY-------------- -------------- -------------- -------------- --------------07-9月 -16 07-9月 -16 01-1月 -17 01-9月 -16 04-9月 -16计算时间差注:oracle时间差是以天数为单位,所以换算成年月,日123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566SQL&gt;SELECT FLOOR ( TO_NUMBER ( SYSDATE - TO_DATE ( '2007-11-02 15:55:03', 'yyyy-mm-dd hh24:mi:ss' ) ) / 365 ) AS spanYearsFROM dual; SPANYEARS---------- 8SQL&gt;SELECT CEIL ( MONTHS_BETWEEN ( SYSDATE, TO_DATE ( '2007-11-02 15:55:03', 'yyyy-mm-dd hh24:mi:ss' ) ) ) AS spanMonthsFROM dual; SPANMONTHS---------- 107SQL&gt;SELECT FLOOR ( TO_NUMBER ( SYSDATE - TO_DATE ( '2007-11-02 15:55:03', 'yyyy-mm-dd hh24:mi:ss' ) ) ) AS spanDaysFROM dual; SPANDAYS---------- 3231SQL&gt;SELECT FLOOR ( TO_NUMBER ( SYSDATE - TO_DATE ( '2007-11-02 15:55:03', 'yyyy-mm-dd hh24:mi:ss' ) ) * 24 ) AS spanHoursFROM dual; SPANHOURS---------- 77562/* 分秒略，以此类推 */查找月的最后一天12345SQL&gt; select last_day(sysdate) from dual; LAST_DAY(SYSDA--------------30-9月 -16ADD_MONTHS(date，i)对给定的日期加上给定的月，查看每个员工入职20周年1234567891011121314151617181920SQL&gt; select ename,add_months(hiredate,12*20) from lzp.emp; ENAME ADD_MONTHS(HIR---------- --------------SMITH 17-12月-00ALLEN 20-2月 -01WARD 22-2月 -01JONES 02-4月 -01MARTIN 28-9月 -01BLAKE 01-5月 -01CLARK 09-6月 -01SCOTT 19-4月 -07KING 17-11月-01TURNER 08-9月 -01ADAMS 23-5月 -07JAMES 03-12月-01FORD 03-12月-01MILLER 23-1月 -02已选择14行。EXTRACT单独获取指定时间的年或月或日12345SQL&gt; select extract(year from sysdate) from dual; EXTRACT(YEARFROMSYSDATE)------------------------ 2016数字函数取整函数（ceil 向上取整,floor 向下取整）12345SQL&gt; select ceil(66.6) N1,floor(66.6) N2 from dual; N1 N2---------- ---------- 67 66取幂(power) 和 求平方根(sqrt)12345SQL&gt; select power(3,2) N1,sqrt(9) N2 from dual; N1 N2---------- ---------- 9 3求余12345SQL&gt; select mod(9,5) from dual; MOD(9,5)---------- 4返回固定小数位数 （round:四舍五入，trunc:直接截断）12345SQL&gt; select round(66.667,2) N1,trunc(66.667,2) N2 from dual; N1 N2---------- ---------- 66.67 66.66返回值的符号（正数返回为1,负数为-1）12345SQL&gt; select sign(-32),sign(293) from dual; SIGN(-32) SIGN(293)---------- ---------- -1 1LEAST、GREATEST两个函数都可以有多个参数值，但参数类型必须一致，返回结果是参数列表中最大或最小的值。 在比较之前，在参数列表中第二个以后的参数会被隐含的转换为第一个参数的数据类型，所以如果可以转换，则继续比较，如果不能转换将会报错。12345SQL&gt; select least(1,2,3),greatest(sysdate,'01-10月-16') from dual; LEAST(1,2,3) GREATEST(SYSDA------------ -------------- 1 01-10月-16其他函数vsize: 返回表达式所需的字节数12345SQL&gt; select vsize('mrBird123') from dual; VSIZE('MRBIRD123')------------------ 9nvl(ex1,ex2):ex1值为空则返回ex2,否则返回该值本身ex1（常用） 例：如果雇员没有佣金，将显示0，否则显示佣金1234567891011121314151617181920SQL&gt; select comm,nvl(comm,0) from lzp.emp; COMM NVL(COMM,0)---------- ----------- 0 300 300 500 500 0 1400 1400 0 0 0 0 0 0 0 0 0 0 已选择14行。nullif(ex1,ex2):1234567891011121314SQL&gt; select nullif(88,88) from dual; NULLIF(88,88)------------- SQL&gt; select nullif(88,123) from dual; NULLIF(88,123)-------------- 88SQL&gt; select nullif('mrBird','mrBird') from dual; NULLIF------nvl2(ex1,ex2,ex3) :如果ex1不为空，显示ex2,否则显示ex3注：部分内容来自脚本之家]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
        <tag>Oracle 11g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java Encryption - Decryption]]></title>
    <url>%2Fblog%2FJava-Encryption-Decryption.html</url>
    <content type="text"><![CDATA[开发中，经常要对一些敏感内容进行加密，这时候可以用到javax.crypto.Cipher类提供加密和解密功能。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144public class EncryptionDecryption &#123; //设置默认密匙 private static String strDefaultKey = "defaultKey"; //加密 private Cipher encryptCipher = null; //解密 private Cipher decryptCipher = null; /** * 将byte数组转换为表示16进制值的字符串， 如：byte[]&#123;8,18&#125;转换为：0813和 * public static byte[]hexStr2ByteArr(String strIn) 互为可逆的转换过程 * @param arrB 需要转换的byte数组 * @return 转换后的字符串 * @throws Exception */ public static String byteArr2HexStr(byte[] arrB) throws Exception &#123; int iLen = arrB.length; // 每个byte用两个字符才能表示，所以字符串的长度是数组长度的两倍 StringBuffer sb = new StringBuffer(iLen * 2); for (int i = 0; i &lt; iLen; i++) &#123; int intTmp = arrB[i]; // 把负数转换为正数 while (intTmp &lt; 0) &#123; intTmp = intTmp + 256; &#125; // 小于0F的数需要在前面补0 if (intTmp &lt; 16) &#123; sb.append("0"); &#125; sb.append(Integer.toString(intTmp, 16)); &#125; return sb.toString(); &#125; /** * 将表示16进制值的字符串转换为byte数组和public static String * byteArr2HexStr(byte[] arrB)互为可逆的转换过程 * @param strIn 需要转换的字符串 * @return 转换后的byte数组 * @throws Exception */ public static byte[] hexStr2ByteArr(String strIn) throws Exception &#123; byte[] arrB = strIn.getBytes(); int iLen = arrB.length; // 两个字符表示一个字节，所以字节数组长度是字符串长度除以2 byte[] arrOut = new byte[iLen / 2]; for (int i = 0; i &lt; iLen; i = i + 2) &#123; String strTmp = new String(arrB, i, 2); arrOut[i / 2] = (byte) Integer.parseInt(strTmp, 16); &#125; return arrOut; &#125; /** * 默认构造方法，使用默认密钥 * @throws Exception */ public EncryptionDecryption() throws Exception &#123; this(strDefaultKey); &#125; /** * 指定密钥构造方法 * @param strKey 指定的密钥 * @throws Exception */ public EncryptionDecryption(String strKey) throws Exception &#123; Security.addProvider(new com.sun.crypto.provider.SunJCE()); Key key = getKey(strKey.getBytes()); encryptCipher = Cipher.getInstance("DES"); encryptCipher.init(Cipher.ENCRYPT_MODE, key); decryptCipher = Cipher.getInstance("DES"); decryptCipher.init(Cipher.DECRYPT_MODE, key); &#125; /** * 加密字节数组 * @param arrB 需加密的字节数组 * @return 加密后的字节数组 * @throws Exception */ public byte[] encrypt(byte[] arrB) throws Exception &#123; return encryptCipher.doFinal(arrB); &#125; /** * 加密字符串 * * @param strIn 需加密的字符串 * @return 加密后的字符串 * @throws Exception */ public String encrypt(String strIn) throws Exception &#123; return byteArr2HexStr(encrypt(strIn.getBytes())); &#125; /** * 解密字节数组 * @param arrB 需解密的字节数组 * @return 解密后的字节数组 * @throws Exception */ public byte[] decrypt(byte[] arrB) throws Exception &#123; return decryptCipher.doFinal(arrB); &#125; /** * 解密字符串 * @param strIn 需解密的字符串 * @return 解密后的字符串 * @throws Exception */ public String decrypt(String strIn) throws Exception &#123; try &#123; return new String(decrypt(hexStr2ByteArr(strIn))); &#125; catch (Exception e) &#123; return ""; &#125; &#125; /** * 从指定字符串生成密钥，密钥所需的字节数组长度为8位 不足8位时后面补0，超出 * 8位只取前8位 * @param arrBTmp 构成该字符串的字节数组 * @return 生成的密钥 * @throws java.lang.Exception */ private Key getKey(byte[] arrBTmp) throws Exception &#123; // 创建一个空的8位字节数组（默认值为0） byte[] arrB = new byte[8]; // 将原始字节数组转换为8位 for (int i = 0; i &lt; arrBTmp.length &amp;&amp; i &lt; arrB.length; i++) &#123; arrB[i] = arrBTmp[i]; &#125; // 生成密钥 Key key = new javax.crypto.spec.SecretKeySpec(arrB, "DES"); return key; &#125;&#125;测试：1234567891011121314public static void main(String[] args) &#123; try &#123; //设置密匙 EncryptionDecryption ed=new EncryptionDecryption("mrbird"); //加密 System.out.println(ed.encrypt("testEncryption")); //a9eb83878c22e90a23dcc32a0333e5e8 //解密 System.out.println(ed.decrypt("a9eb83878c22e90a23dcc32a0333e5e8")); //testEncryption &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle数据库与实例]]></title>
    <url>%2Fblog%2FOracle%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%AE%9E%E4%BE%8B.html</url>
    <content type="text"><![CDATA[通常，“Oracle数据库”既指存储在硬盘上的内部存有数据的数据文件，也指用来管理这些数据文件的内存结构。实际上，“数据库”归属于数据文件，“实例”则归属于内存结构。图1-1展示了oracle实例与数据库的关系。一个实例由系统全局内存区域（System Global Area，SGA）以及一系列后台进程组成。每个链接到数据库的用户都是通过一个客户端进程进行管理，客户端进程与服务器进程相联结，每个服务器进程都会被分配一块私有的内存区域，该区域称为程序共享内存区域或进程共享内存区域（Process Global Area，PGA）。图1-1 实例与数据库关系图 SGA共享池共享池是Oracle缓存数据的地方。执行过的每一条SQL语句在共享池都存有解析后的内容。而存放这些内容的区域称为库高速缓存。在每一条SQL语句执行之前，Oracle都会查看库高速缓存中是否已存在相同的SQL语句。存在的话直接从里面读取该信息，而非再解析一遍。共享池还存储所有Oracle数据库对象信息，存储该信息的区域称为数据字典缓存区域。共享池内存有限，已加载的语句不能长时间存放在其中。基本思想是保留那些使用最频繁以及最近使用的语句。库高速缓存每一条SQL语句执行之前都将被解析并存入到库高速缓存中。解析包括验证语法，检验提及对象，确认对象用户权限。检验过后，下一个步骤就是执行软解析或者硬解析。软解析：库高速缓存解析每一条sql，判断之前是否执行过该语句，如果是，Oracle将取回之前解析的信息并重用。硬解析：如果该语句之前没有执行过，Oracle将执行所有工作来为当前的sql语句生成执行计划，并将其保存在缓存中以备将来重用。由此可见，软解析效率远比硬解析效率高得多！完全相同的语句有三条SQL语句：12345678910111213141516171819202122232425262728SQL&gt; select employee_id,first_name,last_name from hr.employees where department_id = 60; EMPLOYEE_ID FIRST_NAME LAST_NAME----------- -------------------- ------------------------- 103 Alexander Hunold 104 Bruce Ernst 105 David Austin 106 Valli Pataballa 107 Diana LorentzSQL&gt; SELECT EMPLOYEE_ID,FIRST_NAME,LAST_NAME FROM HR.EMPLOYEES WHERE DEPARTMENT_ID = 60; EMPLOYEE_ID FIRST_NAME LAST_NAME----------- -------------------- ------------------------- 103 Alexander Hunold 104 Bruce Ernst 105 David Austin 106 Valli Pataballa 107 Diana Lorentz SQL&gt; select /*a_comment*/ employee_id,first_name,last_name from hr.employees where department_id = 60; EMPLOYEE_ID FIRST_NAME LAST_NAME----------- -------------------- ------------------------- 103 Alexander Hunold 104 Bruce Ernst 105 David Austin 106 Valli Pataballa 107 Diana Lorentz三条SQL语句的执行结果完全一致。但他们是完全一样的SQL语句么？查看V$sql视图：1234567SQL&gt; select sql_id,hash_value,executions from v$sql where upper(sql_text) like '%EMPLOYEES%'; SQL_ID HASH_VALUE EXECUTIONS------------- ---------- ----------3g8h969j7cgdd 1651916205 13j0qbm7gx8jwz 3755231135 1ary9nccpyyqmb 737106539 1从结果来看，这三条SQL并不一样，因为它们并不是严格一致的。完全相同的SQL语句必须 大小写字母一致，空格位置一致，注释内容位置完全一致。可以通过绑定变量的方式来代替常量：123456789101112131415161718192021222324252627282930313233343536373839SQL&gt; variable v_dept numberSQL&gt; exec :v_dept :=10 SQL&gt; select employee_id,first_name,last_name from hr.employees where department_id = :v_dept; EMPLOYEE_ID FIRST_NAME LAST_NAME----------- -------------------- ------------------------- 200 Jennifer Whalen /*--------------------------------------------------------*/SQL&gt; exec :v_dept :=20 SQL&gt; select employee_id,first_name,last_name from hr.employees where department_id = :v_dept; EMPLOYEE_ID FIRST_NAME LAST_NAME----------- -------------------- ------------------------- 201 Michael Hartstein 202 Pat Fay /*--------------------------------------------------------*/SQL&gt; exec :v_dept :=30 SQL&gt; select employee_id,first_name,last_name from hr.employees where department_id = :v_dept; EMPLOYEE_ID FIRST_NAME LAST_NAME----------- -------------------- ------------------------- 114 Den Raphaely 115 Alexander Khoo 116 Shelli Baida 117 Sigal Tobias 118 Guy Himuro 119 Karen Colmenares /*--------------------------------------------------------*/SQL&gt; select sql_id,hash_value,executions from v$sql where upper(sql_text) like '%V_DEPT%'; SQL_ID HASH_VALUE EXECUTIONS------------- ---------- ----------6qsnhnb7dbdra 3470112490 3由此可见，库高速缓存只存储了一条语句，并执行了三次。锁存器Oracle只有获得了锁存器后才可以从库高速缓存或其他内存中读取信息。锁存器可以避免库高速缓存同时被两个会话修改，一个会话在读取库高速缓存信息之前，都会获得一个锁存器，另一个会话必须等到上一个会话释放锁存器。自旋如Oracle判断当前sql是否已经存在库高速缓存中时必须先获得锁存器，如果此时锁存器不是空闲的，Oracle会迭代轮询，查看锁存器是否可用。经过一段时间（_spin_count=2000）锁存器仍不可用的话，该请求会被暂时挂起，直到下一次获得cpu时间片。SGA缓冲区缓存存储数据块。块是Oracle进行操作的最小的单位，包含数据行，索引或用来排序的临时数据（也包含块自身信息）。Oracle必须读取块来获取sql需要的数据行。缓冲区块的管理也遵循LRU(Least Recently Used)原则，同时也有个叫接触计数器（touch-count）的东西，记录块被使用的次数，被访问越频繁的块存活时间越长。在验证块是否存在缓冲区缓存的过程中，也需要获得锁存器。如果一个sql查询所需数据不在缓冲区缓存的块中，就必须读取操作系统硬盘来获取这些信息，然后存放到缓冲区缓存的块中。逻辑读取：Oracle从缓冲区缓存块中读取数据；物理读取：缓冲区缓存块中没有数据，Oracle从硬盘中读取数据的过程。Eg:1.清除共享池和缓冲区缓存（硬解析和物理读取）：123456789101112131415161718192021SQL&gt; alter system set events 'immediate trace name flush_cache';系统已更改。SQL&gt; alter system flush shared_pool;系统已更改。SQL&gt; set autotrace traceonly statisticsSQL&gt;SQL&gt; select * from hr.employees where department_id=60; 统计信息---------------------------------------------------------- 976 recursive calls 0 db block gets 237 consistent gets 23 physical reads 0 redo size 1320 bytes sent via SQL*Net to client 359 bytes received via SQL*Net from client 2 SQL*Net roundtrips to/from client 9 sorts (memory) 0 sorts (disk) 5 rows processed2.仅清除缓冲区缓存（软解析和物理读取）：12345678910111213141516171819202122SQL&gt; set autotrace offSQL&gt;SQL&gt; alter system set events 'immediate trace name flush_cache'; 系统已更改。SQL&gt; set autotrace traceonly statisticsSQL&gt;SQL&gt; select * from hr.employees where department_id=60; 统计信息---------------------------------------------------------- 0 recursive calls 0 db block gets 4 consistent gets 2 physical reads 0 redo size 1320 bytes sent via SQL*Net to client 359 bytes received via SQL*Net from client 2 SQL*Net roundtrips to/from client 0 sorts (memory) 0 sorts (disk) 5 rows processed ​3.都不清除（软解析和逻辑读取）：123456789101112131415SQL&gt; select * from hr.employees where department_id=60; 统计信息---------------------------------------------------------- 0 recursive calls 0 db block gets 4 consistent gets 0 physical reads 0 redo size 1320 bytes sent via SQL*Net to client 359 bytes received via SQL*Net from client 2 SQL*Net roundtrips to/from client 0 sorts (memory) 0 sorts (disk) 5 rows processed ​结果证明，当执行的查询只需要软解析和逻辑读取数据块的时候，所消耗的资源是最少的！]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
        <tag>Oracle 11g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript时间格式化]]></title>
    <url>%2Fblog%2FJavaScript%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%8C%96.html</url>
    <content type="text"><![CDATA[有时候后台传送的时间格式是这样的：1471881600000，或者通过new Date( )生成的时间格式是这样的：Tue Aug 30 2016 16:32:38 GMT+0800 (中国标准时间)。JavaScript没有类似于java的SimpleDateFormat( )函数，这时候可以自己写一个函数代替：1234567891011121314151617181920212223//时间格式化Date.prototype.Format = function (fmt) &#123; var o = &#123; "M+": this.getMonth() + 1, "d+": this.getDate(), "h+": this.getHours(), "m+": this.getMinutes(), "s+": this.getSeconds(), "q+": Math.floor((this.getMonth() + 3) / 3), "S": this.getMilliseconds() &#125;; if (/(y+)/.test(fmt))&#123; fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "") .substr(4 - RegExp.$1.length)); &#125; for (var k in o)&#123; if (new RegExp("(" + k + ")").test(fmt))&#123; fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length))); &#125; &#125; return fmt;&#125;调用方式：new Date( ).Format(&quot;yyyy-MM-dd&quot;);]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dom4j解析和生成xml文件]]></title>
    <url>%2Fblog%2Fdom4j%E8%A7%A3%E6%9E%90%E5%92%8C%E7%94%9F%E6%88%90xml%E6%96%87%E4%BB%B6.html</url>
    <content type="text"><![CDATA[解析xml大致步骤：1: 创建SAXReader；2: 使用SAXReader解析指定的xml文档信息，并返回对应Document对象。Document对象中就包含了该xml文中的所有信息以及结构了。3: 根据文档结构将xml描述的树状信息读取到 。现有emp.xml文件，内容如下：123456789101112131415161718192021222324252627282930313233&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;list&gt; &lt;emp id="1"&gt; &lt;name&gt;提利昂·兰尼斯特&lt;/name&gt; &lt;age&gt;25&lt;/age&gt; &lt;gender&gt;男&lt;/gender&gt; &lt;salary&gt;5000&lt;/salary&gt; &lt;/emp&gt; &lt;emp id="2"&gt; &lt;name&gt;卡丽熙&lt;/name&gt; &lt;age&gt;27&lt;/age&gt; &lt;gender&gt;女&lt;/gender&gt; &lt;salary&gt;6000&lt;/salary&gt; &lt;/emp&gt; &lt;emp id="3"&gt; &lt;name&gt;琼恩·雪诺&lt;/name&gt; &lt;age&gt;28&lt;/age&gt; &lt;gender&gt;男&lt;/gender&gt; &lt;salary&gt;7000&lt;/salary&gt; &lt;/emp&gt; &lt;emp id="4"&gt; &lt;name&gt;布兰·斯塔克&lt;/name&gt; &lt;age&gt;22&lt;/age&gt; &lt;gender&gt;男&lt;/gender&gt; &lt;salary&gt;8000&lt;/salary&gt; &lt;/emp&gt; &lt;emp id="5"&gt; &lt;name&gt;nightKing&lt;/name&gt; &lt;age&gt;26&lt;/age&gt; &lt;gender&gt;未知&lt;/gender&gt; &lt;salary&gt;9000&lt;/salary&gt; &lt;/emp&gt;&lt;/list&gt;新建一个emp实体类，用于接收解析数据：12345678910111213141516171819public class Emp &#123; private int id; private String name; private int age; private String gender; private int salary; public Emp()&#123; &#125; public Emp(int id,String name,int age,String gender,int salary)&#123; super(); this.id = id; this.name = name; this.age = age; this.gender = gender; this.salary = salary; &#125; //get,set略&#125;123456789101112131415161718192021222324252627282930313233343536373839public class ParseXmlDemo &#123; public static List getXml()&#123; try &#123; SAXReader reader=new SAXReader(); Document doc=reader.read(new File("emp.xml")); List&lt;Emp&gt; list=new ArrayList&lt;Emp&gt;(); /* * 解析第一步，获取根标签（根元素） * 这里获取的根标签就相当于是&lt;list&gt;...&lt;/list&gt; * 那对标签。 */ Element root=doc.getRootElement(); //获取名为"emp"的标签 List&lt;Element&gt; elementList=root.elements("emp"); //遍历每一个emp标签 for(Element empEle:elementList)&#123; //获取name String name=empEle.elementText("name"); int age=Integer.parseInt(empEle.elementText("age")); String gender=empEle.elementText("gender"); int salary=Integer.parseInt(empEle.elementText("salary")); //属性 Attribute attr=empEle.attribute("id"); int id=Integer.parseInt(attr.getValue()); Emp emp=new Emp(id,name,age,gender,salary); list.add(emp); &#125; return list; &#125; catch (Exception e) &#123; // TODO: handle exception System.out.println(e.toString()); &#125; return null;&#125; public static void main(String[] args) &#123; List list=ParseXmlDemo.getXml(); System.out.println(list.toString()); &#125;&#125;输出结果：123451,提利昂·兰尼斯特,25,男,5000, 2,卡丽熙,27,女,6000,3,琼恩雪诺,28,男,7000, 4,布兰斯塔克,22,男,8000, 5,nightKing,26,未知,9000生成xml大致步骤：1: 创建一个Document对象，表示一个空的xml文档；2: 向Document中添加根元素；3: 按照目标xml文档的结构顺序向根元素中添加子元素来组建该结构；4: 创建XMLWriter；5: 设置低级流；6: 使用XMLWriter将Document写出来生成 该文档 。1234567891011121314151617181920212223242526272829303132333435363738394041424344public class WriteXmlDemo &#123; public static void main(String[] args) &#123; try &#123; List&lt;Emp&gt; list= new ArrayList&lt;Emp&gt;(); list.add(new Emp(1,"鸣人",25,"男",4000)); list.add(new Emp(2,"小樱",27,"女",6000)); list.add(new Emp(3,"佐助",28,"男",7000)); list.add(new Emp(4,"雏田",22,"女",8000)); list.add(new Emp(5,"卡卡西",26,"男",90001)); Document doc = DocumentHelper.createDocument(); //生成根元素 Element root = doc.addElement("list"); for(Emp emp : list)&#123; //根标签下添加子标签 Element empEle= root.addElement("emp"); //向emp标签中添加子标签name Element nameEle= empEle.addElement("name"); //标签赋值 nameEle.addText(emp.getName()); Element ageEle = empEle.addElement("age"); ageEle.addText(emp.getAge()+""); Element genderEle = empEle.addElement("gender"); genderEle.addText(emp.getGender()); Element salaryEle = empEle.addElement("salary"); salaryEle.addText(emp.getSalary()+""); //添加属性 empEle.addAttribute("id", emp.getId()+""); &#125; //org.dom4j.XMLWriter XMLWriter writer = new XMLWriter( OutputFormat.createPrettyPrint()); /* * 向文件myemp.xml中写出数据 */ FileOutputStream fos= new FileOutputStream("myemp.xml"); writer.setOutputStream(fos); writer.write(doc); writer.close(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125;生成myemp.xml：12345678910111213141516171819202122232425262728293031323334&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;list&gt; &lt;emp id="1"&gt; &lt;name&gt;鸣人&lt;/name&gt; &lt;age&gt;25&lt;/age&gt; &lt;gender&gt;男&lt;/gender&gt; &lt;salary&gt;4000&lt;/salary&gt; &lt;/emp&gt; &lt;emp id="2"&gt; &lt;name&gt;小樱&lt;/name&gt; &lt;age&gt;27&lt;/age&gt; &lt;gender&gt;女&lt;/gender&gt; &lt;salary&gt;6000&lt;/salary&gt; &lt;/emp&gt; &lt;emp id="3"&gt; &lt;name&gt;佐助&lt;/name&gt; &lt;age&gt;28&lt;/age&gt; &lt;gender&gt;男&lt;/gender&gt; &lt;salary&gt;7000&lt;/salary&gt; &lt;/emp&gt; &lt;emp id="4"&gt; &lt;name&gt;雏田&lt;/name&gt; &lt;age&gt;22&lt;/age&gt; &lt;gender&gt;女&lt;/gender&gt; &lt;salary&gt;8000&lt;/salary&gt; &lt;/emp&gt; &lt;emp id="5"&gt; &lt;name&gt;卡卡西&lt;/name&gt; &lt;age&gt;26&lt;/age&gt; &lt;gender&gt;男&lt;/gender&gt; &lt;salary&gt;90001&lt;/salary&gt; &lt;/emp&gt;&lt;/list&gt;]]></content>
      <tags>
        <tag>Java</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java读取和修改ini文件]]></title>
    <url>%2Fblog%2FJava%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%AE%E6%94%B9ini%E6%96%87%E4%BB%B6.html</url>
    <content type="text"><![CDATA[项目开发中，一般将系统级的配置放在ini配置文件里，项目启动时，通过java读取ini里的变量值，然后发送到页面上。如红色警戒的ra2.ini配置文件：12345678910111213141516171819202122232425262728[MultiPlayer]PreferredGameTypeID = 111111 PreferredScenarioIndex=0Locale=0StoreNick=yesPortBase=1255PortPool=9415PhoneIndex=-1WOLLimitResolution=noLastNickSlot=-1Handle=5b,4e,65,77,20,50,6c,61,79,65,72,5d,Color=2ColorEx=-1Side=AmericansSideEx=-1GameMode=2 [Options]GameSpeed=0Difficulty=0ScrollMethod=0ScrollRate=0AutoScroll=yesDetailLevel=2SidebarCameoText=yesUnitActionLines=yesShowHidden=yesToolTips=yes读取和修改方法：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126public final class javaReadIniUtil &#123; /** * 从ini配置文档中读取变量的值 * @param file 配置文档的路径 * @param section 要获取的变量所在段名称 * @param variable 要获取的变量名称 * @param defaultValue 变量名称不存在时的默认值 * @return 变量的值 * @throws IOException 抛出文档操作可能出现的io异常 */ public static String getProfileString(String file, String section, String variable, String defaultValue) throws IOException &#123; String strLine, value = ""; BufferedReader bufferedReader = new BufferedReader(new FileReader(file)); boolean isInSection = false; try &#123; while ((strLine = bufferedReader.readLine()) != null) &#123; strLine = strLine.trim(); Pattern p; Matcher m; p = Pattern.compile("\\["+section+"\\]"); m = p.matcher((strLine)); if (m.matches()) &#123; p = Pattern.compile("\\["+section+"\\]"); m = p.matcher(strLine); if (m.matches()) &#123; isInSection = true; &#125; else &#123; isInSection = false; &#125; &#125; if (isInSection == true) &#123; strLine = strLine.trim(); String[] strArray = strLine.split("="); if (strArray.length == 1) &#123; value = strArray[0].trim(); if (value.equalsIgnoreCase(variable)) &#123; value = ""; return value; &#125; &#125; else if (strArray.length == 2) &#123; value = strArray[0].trim(); if (value.equalsIgnoreCase(variable)) &#123; value = strArray[1].trim(); return value; &#125; &#125; else if (strArray.length &gt; 2) &#123; value = strArray[0].trim(); if (value.equalsIgnoreCase(variable)) &#123; value = strLine .substring(strLine.indexOf("=") + 1).trim(); return value; &#125; &#125; &#125; &#125; &#125; finally &#123; bufferedReader.close(); &#125; return defaultValue; &#125; /** * 修改ini配置文档中变量的值 * @param file 配置文档的路径 * @param section 要修改的变量所在段名称 * @param variable 要修改的变量名称 * @param value 变量的新值 * @throws IOException 抛出文档操作可能出现的io异常 */ public static boolean setProfileString(String file, String section,String variable, String value)throws IOException&#123; String fileContent, allLine, strLine, newLine, remarkStr; String getValue; BufferedReader bufferedReader = new BufferedReader(new FileReader(file)); boolean isInSection = false; fileContent = ""; try &#123; while ((allLine = bufferedReader.readLine()) != null) &#123; allLine = allLine.trim(); strLine = allLine; Pattern p; Matcher m; p = Pattern.compile("\\["+section+"\\]"); m = p.matcher((strLine)); if (m.matches()) &#123; p = Pattern.compile("\\["+section+"\\]"); m = p.matcher(strLine); if (m.matches()) &#123; isInSection = true; &#125; else &#123; isInSection = false; &#125; &#125; if (isInSection == true) &#123; strLine = strLine.trim(); String[] strArray = strLine.split("="); getValue = strArray[0].trim(); if (getValue.equalsIgnoreCase(variable)) &#123; newLine = getValue + " = " + value + " "; fileContent += newLine + "\r\n"; while((allLine = bufferedReader.readLine())!= null)&#123; fileContent += allLine + "\r\n"; &#125; bufferedReader.close(); BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file, false)); bufferedWriter.write(fileContent); bufferedWriter.flush(); bufferedWriter.close(); return true; &#125; &#125; fileContent += allLine + "\r\n"; &#125; &#125; catch (IOException ex) &#123; throw ex; &#125; finally &#123; bufferedReader.close(); &#125; return false; &#125; &#125;测试程序：123456789101112// 修改ini值public static void main(String[] args) &#123; try &#123; javaReadIniUtil.setProfileString( "resource/ra2.ini", "MultiPlayer", "GameMode", "mr_bird")); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;值已被改变：12345678910111213141516[MultiPlayer]PreferredGameTypeID = 111111PreferredScenarioIndex=0Locale=0StoreNick=yesPortBase=1255PortPool=9415PhoneIndex=-1WOLLimitResolution=noLastNickSlot=-1Handle=5b,4e,65,77,20,50,6c,61,79,65,72,5d,Color=2ColorEx=-1Side=AmericansSideEx=-1GameMode = mr_bird读取[MultiPlayer]的GameMode变量值123456789101112public static void main(String[] args) &#123; try &#123; System.out.println( readIniUtil.getProfileString( "resource/ra2.ini", "MultiPlayer", "GameMode", "default")); //mr_bird &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; ​]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java.math.BigDecimal类常用方法]]></title>
    <url>%2Fblog%2FJava-math-BigDecimal%E7%B1%BB%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.html</url>
    <content type="text"><![CDATA[在编程中，当我们需要得到精确的运算结果的时候，+，-，*，/ 已经不能满足我们的需求，比如：1234System.out.println(0.1+0.2); //0.30000000000000004System.out.println(0.3-0.2); //0.09999999999999998System.out.println(0.1*0.2); //0.020000000000000004System.out.println(1.2/3); //0.39999999999999997简单的运算结果却不符合我们的预期。Java提供了一个叫BigDecimal的类，该类支持任何精度的定点数，可以用它来精确计算货币值。java.math.BigDecimal类共有四个构造方法：1.BigDecimal(int) —-int类型转为BigDecimal类型2.BigDecimal(double) —-double类型转为BigDecimal类型3.BigDecimal(long) —-long类型转为BigDecimal类型4.BigDecimal(string) —-string类型转为BigDecimal类型实际使用中，一般使用BigDecimal(string)构造方法。因为将string类型转为BigDecimal的结果是可预知的。相反，如通过构造方法BigDecimal(0.1) 将0.1转为BigDecimal类型：1System.out.println(new BigDecimal(0.1)); //0.1000000000000000055511151...因为0.1并不能精确的表示为double而通过BigDecimal(string)我们可以得到预期的转换结果：1System.out.println(new BigDecimal("0.1")); //0.1常用方法：1.加法：123456BigDecimal add=new BigDecimal("0.1").add(new BigDecimal("0.2"));System.out.println(add); //0.3//保留两位有效数字BigDecimal add1=new BigDecimal("0.1") .add(new BigDecimal("0.22222222222"),new MathContext(2));System.out.println(add1); //0.322.减法：123456BigDecimal sub=new BigDecimal("0.3").subtract(new BigDecimal("0.1"));System.out.println(sub); //0.2//保留两位有效数字BigDecimal sub=new BigDecimal("0.3") .subtract(new BigDecimal("0.111111111"),new MathContext(2));System.out.println(sub); //0.193.乘法：123456BigDecimal mul=new BigDecimal("0.1").multiply(new BigDecimal("0.2"));System.out.println(mul); //0.02//保留两位有效数字BigDecimal mul1=new BigDecimal("0.1") .multiply(new BigDecimal("0.2222222222"),new MathContext(2));System.out.println(mul1); //0.0224.除法：12345678910BigDecimal div=new BigDecimal("1.2").divide(new BigDecimal("3"));System.out.println(div); //0.4//保留两位有效数字BigDecimal div1=new BigDecimal("1") .divide(new BigDecimal("3"),new MathContext(2));System.out.println(div1); //0.33//四舍五入，保留两位小数BigDecimal div2=new BigDecimal("2") .divide(new BigDecimal("3"), 2, RoundingMode.HALF_UP);System.out.println(div2); //0.675.比较大小：123456789//小于，返回-1int result=new BigDecimal("0.1").compareTo(new BigDecimal("0.2"));System.out.println(result); //-1 //等于，返回 0int result=new BigDecimal("0.2").compareTo(new BigDecimal("0.2"));System.out.println(result); //0//大于，返回 1int result=new BigDecimal("0.3").compareTo(new BigDecimal("0.2"));System.out.println(result); //1]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EasyUI等待加载动画 [转]]]></title>
    <url>%2Fblog%2FEasyUI%E7%AD%89%E5%BE%85%E5%8A%A0%E8%BD%BD%E5%8A%A8%E7%94%BB-%E8%BD%AC.html</url>
    <content type="text"><![CDATA[使用方法:1.开启:MaskUtil.mask();2.关闭:MaskUtil.unmask();3.MaskUtil.mask(‘其它提示文字…’);123456789101112131415161718192021222324252627282930var MaskUtil = (function()&#123; var $mask,$maskMsg; var defMsg = '正在处理，请稍待。。。'; function init()&#123; if(!$mask)&#123; $mask = $("&lt;div class=\"datagrid-mask mymask\"&gt;&lt;/div&gt;").appendTo("body"); &#125; if(!$maskMsg)&#123; $maskMsg = $("&lt;div class=\"datagrid-mask-msg mymask\"&gt;"+defMsg+"&lt;/div&gt;") .appendTo("body").css(&#123;'font-size':'12px'&#125;); &#125; $mask.css(&#123;width:"100%",height:$(document).height()&#125;); var scrollTop = $(document.body).scrollTop(); $maskMsg.css(&#123; left:( $(document.body).outerWidth(true) - 190 ) / 2 , top:( ($(window).height() - 45) / 2 ) + scrollTop &#125;); &#125; return &#123; mask:function(msg)&#123; init(); $mask.show(); $maskMsg.html(msg||defMsg).show(); &#125;, unmask:function()&#123; $mask.hide(); $maskMsg.hide(); &#125; &#125;&#125;());转自：AXE博客]]></content>
      <tags>
        <tag>EasyUI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[仿Windows界面的JFileChooser]]></title>
    <url>%2Fblog%2F%E4%BB%BFWindows%E7%95%8C%E9%9D%A2%E7%9A%84JFileChooser.html</url>
    <content type="text"><![CDATA[1234567891011121314151617181920try &#123; UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());&#125; catch (Exception e1) &#123; e1.printStackTrace();&#125;String out = new SimpleDateFormat("yyMMddhhmmss").format(new Date());JFileChooser fc = new JFileChooser();//设置默认文件名fc.setSelectedFile(new File("项目内容表" + out + ".xls"));fc.setDialogType(JFileChooser.FILES_ONLY);fc.setDialogTitle("选择保存路径");fc.setMultiSelectionEnabled(false);int result = fc.showSaveDialog(fc);if (result == JFileChooser.APPROVE_OPTION) &#123; //保存 //your code here&#125; else &#123; //取消 //your code here&#125;如图：更换图标：重写其父类JFrame：123JFrame jf=new JFrame();ImageIcon imgIcon = new ImageIcon(ProExportUtil.class.getResource("icon.png"));jf.setIconImage(imgIcon.getImage());将上面13行代码改为：1int result = fc.showSaveDialog(jf);效果如图所示：]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[onClick事件和onDblClick 事件并存的解决方法 [转]]]></title>
    <url>%2Fblog%2FonClick%E4%BA%8B%E4%BB%B6%E5%92%8ConDblClick-%E4%BA%8B%E4%BB%B6%E5%B9%B6%E5%AD%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95-%E8%BD%AC.html</url>
    <content type="text"><![CDATA[最近项目中遇到了在同一DOM元素上需要添加 onclick 和 ondblclick 2个事件，如果按照正常的方式添加处理，结果发现只会执行onclick，而不会执行 ondblclick；这时我们需要对2个事件的处理函数稍作处理就可以实现2个事件并存了，代码如下：12345678910111213141516171819202122&lt;script type="text/javascript"&gt; var clickTimer = null; function _click()&#123; if(clickTimer) &#123; window.clearTimeout(clickTimer); clickTimer = null; &#125; clickTimer = window.setTimeout(function()&#123; // your click process code here alert("你单击了我"); &#125;, 300); &#125; function _dblclick()&#123; if(clickTimer) &#123; window.clearTimeout(clickTimer); clickTimer = null; &#125; // your click process code here alert("你双击了我"); &#125; &lt;/script&gt;处理思想就是：利用定时器延迟执行onclick事件，这样在双击过程中会取消中途触发的单击事件。转自山哥]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Apache POI导出Excel文件]]></title>
    <url>%2Fblog%2FApache-POI%E5%AF%BC%E5%87%BAExcel%E6%96%87%E4%BB%B6.html</url>
    <content type="text"><![CDATA[Apache POI 是用Java编写的免费开源的跨平台的 Java API，Apache POI提供API给Java程式对Microsoft Office格式档案读和写的功能。Apache POI 中提供的几大部分的作用：1.HSSF － 提供读写Microsoft Excel XLS格式档案的功能。2.XSSF － 提供读写Microsoft Excel OOXML XLSX格式档案的功能。3.HWPF － 提供读写Microsoft Word DOC格式档案的功能。4.HSLF － 提供读写Microsoft PowerPoint格式档案的功能。5.HDGF － 提供读Microsoft Visio格式档案的功能。6.HPBF － 提供读Microsoft Publisher格式档案的功能。7.HSMF － 提供读Microsoft Outlook格式档案的功能。使用Apache POI导出Excel表格文件大致如下几个步骤：1.创建新的Excel工作薄：1HSSFWorkbook workbook = new HSSFWorkbook(); ​2.创建一个工作表，如“员工表”：1HSSFSheet sheet = workbook.createSheet("员工表"); ​3.创建行：1HSSFRow row = sheet.createRow(0); //0表示索引为0的位置，也就是左上角4.创建列（也就是每一行的单元格）:1HSSFCell cell = row.createCell((short) 0); ​5.创建文件流，输出Excel，输出后关闭流以下是具体实例：Excel工具类(ExcelUtil)：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899public class ExcelUtil &#123; private HSSFWorkbook wb = null; private HSSFSheet sheet = null; /** * @param wb * @param sheet */ public ExcelUtil(HSSFWorkbook wb, HSSFSheet sheet) &#123; super(); this.wb = wb; this.sheet = sheet; &#125; public HSSFSheet getSheet() &#123; return sheet; &#125; public void setSheet(HSSFSheet sheet) &#123; this.sheet = sheet; &#125; public HSSFWorkbook getWb() &#123; return wb; &#125; public void setWb(HSSFWorkbook wb) &#123; this.wb = wb; &#125; /** * 创建通用EXCEL头部 * * @param headString 头部显示的字符 * @param colSum 该报表的列数 */ @SuppressWarnings("deprecation") public void createNormalHead(String headString, int colSum) &#123; // 设置第一行 HSSFRow row = sheet.createRow(0); HSSFCell cell = row.createCell(0); row.setHeight((short) 350); // 定义单元格为字符串类型 cell.setCellType(HSSFCell.ENCODING_UTF_16); // 设置Excel表格标题 cell.setCellValue(new HSSFRichTextString(headString)); // 指定合并区域 sheet.addMergedRegion(new Region(0,(short) 0,0,(short) colSum)); // 设置单元格样式 HSSFCellStyle cellStyle = wb.createCellStyle(); // 指定单元格居中对齐 cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER); cellStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER); // 指定单元格自动换行 cellStyle.setWrapText(true); // 设置单元格字体 HSSFFont font = wb.createFont(); font.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL); font.setFontName("微软雅黑"); font.setFontHeight((short) 250); cellStyle.setFont(font); cell.setCellStyle(cellStyle); &#125; /** * 创建单元格方法 * * @param wb HSSFWorkbook * @param row HSSFRow * @param col short型的列索引 * @param align 对齐方式 * @param val 列值 */ public void cteateCell(HSSFWorkbook wb, HSSFRow row, int col, String val) &#123; HSSFCell cell = row.createCell(col); cell.setCellType(HSSFCell.ENCODING_UTF_16); cell.setCellValue(new HSSFRichTextString(val)); HSSFCellStyle cellStyle = wb.createCellStyle(); cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER); cellStyle.setVerticalAlignment(HSSFCellStyle.VERTICAL_CENTER); HSSFFont font = wb.createFont(); font.setBoldweight(HSSFFont.BOLDWEIGHT_NORMAL); font.setFontName("微软雅黑"); cellStyle.setFont(font); cell.setCellStyle(cellStyle); &#125; /** * 输入EXCEL文件 * * @param fileName 文件名 */ public void outputExcel(String fileName) &#123; FileOutputStream fos = null; try &#123; fos = new FileOutputStream(new File(fileName)); wb.write(fos); fos.close(); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125;&#125;Excel表格文件生成类：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566public class ExportExcelClient &#123; // 创建一个新的Excel工作簿 private static HSSFWorkbook wb = new HSSFWorkbook(); // 创建一个新的工作表 private static HSSFSheet sheet = wb.createSheet(); private static Session session = null; public static void main(String[] args) &#123; ExcelUtil exportExcel = new ExcelUtil(wb, sheet); session = SessionUtil.getSession(); // 查询列名 String column_names = "select COLUMN_NAME from USER_TAB_COLS where TABLE_NAME = 'SYS_OBJECT_TYPE'"; List&lt;String&gt; list = session.createSQLQuery(column_names).list(); // 列数 Integer column_nums = list.toArray().length; exportExcel.createNormalHead("查询结果表", column_nums - 1); // 1.设置Excel表表头 HSSFRow row = sheet.createRow(1); HSSFCellStyle cellStyle = wb.createCellStyle(); // 设置表头背景色 cellStyle.setFillForegroundColor(HSSFColor.LIGHT_GREEN.index); cellStyle.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND); // 设置表头字体 HSSFFont font = wb.createFont(); font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD); font.setFontName("微软雅黑"); cellStyle.setFont(font); // 设置表头列名 for (int i = 0; i &lt; column_nums; i++) &#123; HSSFCell cell = row.createCell((short) i); cell.setCellType(HSSFCell.CELL_TYPE_STRING); cell.setCellValue(list.toArray()[i].toString()); cell.setCellStyle(cellStyle); &#125; // 2.填值 // 统计总共有几行数据 String count = "select count(*) from SYS_OBJECT_TYPE"; Integer num = Integer.valueOf(session.createSQLQuery(count).uniqueResult().toString()); // 查询出表格内容 String sql = "select * from SYS_OBJECT_TYPE"; Query q = session.createSQLQuery(sql); @SuppressWarnings("unchecked") List&lt;Object&gt; data = q.list(); // 循环向Excel表格填充数据 // 每一行 for (int i = 2; i &lt; num; i++) &#123; HSSFRow row1 = sheet.createRow((short) i); // 每一列 for (int j = 0; j &lt; column_nums; j++) &#123; ortExcel.cteateCell(wb, row1, (short) j, ((Object[]) data.get(i))[j] == null ? "" :((Object[]) data.get(i))[j].toString()); // 设置列的宽度根据内容自适应 sheet.autoSizeColumn((short) j); &#125; &#125; String out = new SimpleDateFormat("yyMMddhhmmss").format(new Date()); // 3.输出xls exportExcel.outputExcel("d:\\查询结果" + out + ".xls"); session.close(); &#125;&#125;效果如下图所示：附录一：相关jar包链接:百度网盘 密码：wow5附录二：HSSFColor颜色对照表：]]></content>
      <tags>
        <tag>POI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[上传下载demo]]></title>
    <url>%2Fblog%2F%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BDdemo.html</url>
    <content type="text"><![CDATA[附件上传下载的基本过程主要包含两个步骤：1.通过IO流将附件上传/下载到对应的文件夹内；2.将附件对应的信息（经过处理后的附件名，格式，大小等）保存到数据库。下图是此次demo的效果图（默认用户id为1）：数据库附件表SYS_ANNEX：123456789101112 create table SYS_ANNEX ( ANNEX_ID VARCHAR2(20) not null, --附件id AREA_ID NUMBER(5), BUSI_TYPE_ID NUMBER(5), --业务类型id，这里我们默认为1 ANNEX_KEY VARCHAR2(20) not null, NAME VARCHAR2(100) not null, --附件名 USER_ID NUMBER(12) not null, --用户id，这里我们默认为1 CREATE_DATE DATE not null, --创建时间 STATE_ID NUMBER(5) not null, STATE_DATE DATE not null, constraint PK_SYS_ANNEX primary key (ANNEX_ID));Session工具类，用来创建查询：1234567891011121314public class SessionUtil &#123; private static SessionFactory sf; static&#123; Configuration conf=new Configuration(); conf.configure("hibernate.cfg.xml"); sf=conf.buildSessionFactory(); &#125; public static Session getSession()&#123; return sf.openSession(); &#125; public static SessionFactory getSf()&#123; return sf; &#125;&#125;上传模块servlet：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152public class UploadHandleServlet extends HttpServlet &#123; public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // 得到上传文件的保存目录，将上传的文件存放于WEB-INF目录下，不允许外界直接访问， // 保证上传文件的安全 String savePath = this.getServletContext().getRealPath("/WEB-INF/upload"); // 上传时生成的临时文件保存目录 String tempPath = this.getServletContext().getRealPath("/WEB-INF/temp"); File tmpFile = new File(tempPath); if (!tmpFile.exists()) &#123; // 创建临时目录 tmpFile.mkdir(); &#125; // 消息提示 String message = ""; try &#123; // 使用Apache文件上传组件处理文件上传步骤： // 1、创建一个DiskFileItemFactory工厂 DiskFileItemFactory factory = new DiskFileItemFactory(); // 设置工厂的缓冲区的大小，当上传的文件大小超过缓冲区的大小时，就会生成一个 // 临时文件存放到指定的临时目录当中。设置缓冲区的大小为100KB，如果不指定， // 那么缓冲区的大小默认是10KB factory.setSizeThreshold(1024 * 100); // 设置上传时生成的临时文件的保存目录 factory.setRepository(tmpFile); // 2、创建一个文件上传解析器 ServletFileUpload upload=new ServletFileUpload(factory); // 解决上传文件名的中文乱码 upload.setHeaderEncoding("UTF-8"); // 3、判断提交上来的数据是否是上传表单的数据 if (!ServletFileUpload.isMultipartContent(request)) &#123; // 按照传统方式获取数据 return; &#125; // 设置上传单个文件的大小的最大值，目前是设置为1024*1024*100字节， // 也就是100MB upload.setFileSizeMax(1024 * 1024 * 100); // 设置上传文件总量的最大值，最大值=同时上传的多个文件的大小的 // 最大值的和，目前设置为1000MB upload.setSizeMax(1024 * 1024 * 1000); // 4、使用ServletFileUpload解析器解析上传数据，解析结果返回的 // 是一个List&lt;FileItem&gt;集合，每一个FileItem对应一个Form表单的 // 输入项 List&lt;FileItem&gt; list = upload.parseRequest(request); for (FileItem item : list) &#123; // 如果fileitem中封装的是普通输入项的数据 if (item.isFormField()) &#123; String name = item.getFieldName(); // 解决普通输入项的数据的中文乱码问题 String value = item.getString("UTF-8"); &#125; else &#123;// 如果fileitem中封装的是上传文件 // 得到上传的文件名称， String filename = item.getName(); System.out.println(filename); if (filename == null || filename.trim().equals("")) &#123; continue; &#125; // 注意：不同的浏览器提交的文件名是不一样的，有些浏览器提交上来的 // 文件名是带有路径的，如： c:\a\b\1.txt，而有些只是单纯的文件名， // 如：1.txt，处理获取到的上传文件的文件名的路径部分，只保留文件 // 名部分 filename = filename.substring(filename.lastIndexOf("\\") + 1); // 得到上传文件的扩展名 String fileExtName = filename.substring(filename.lastIndexOf(".") + 1); // 如果需要限制上传的文件类型，那么可以通过文件的扩展名来判断上传的 // 文件类型是否合法 System.out.println( "上传的文件的扩展名是：" + fileExtName); // 获取item中的上传文件的输入流 InputStream in = item.getInputStream(); // 得到文件保存的名称 String saveFilename = makeFileName(filename); // 得到文件的保存目录 String realSavePath = savePath; // 创建一个文件输出流 FileOutputStream out = new FileOutputStream(realSavePath+ "\\"+ saveFilename); // 创建一个缓冲区 byte buffer[] = new byte[1024]; // 判断输入流中的数据是否已经读完的标识 int len = 0; // 循环将输入流读入到缓冲区当中，(len=in.read(buffer))&gt;0就 // 表示in里面还有数据 while ((len = in.read(buffer)) &gt; 0) &#123; // 使用FileOutputStream输出流将缓冲区的数据写入到指定的 // 目录(savePath + "\\"+ filename)中 out.write(buffer, 0, len); &#125; // 关闭输入流 in.close(); // 关闭输出流 out.close(); // 删除处理文件上传时生成的临时文件 item.delete(); message = "文件上传成功！"; // 文件上传成功后，将对应的信息保存到数据库SYS_ANNEX表 Integer userId = Integer.valueOf(request.getParameter("userId")); Date date = new Date(System.currentTimeMillis()); String annexId = System.currentTimeMillis() + ""; String annexKey = userId + ""; Session session = SessionUtil.getSession(); String sql = "insert INTO SYS_ANNEX VALUES(ANNEX_SEQ.nextval,"; sql+="1,1,?,?,?,sysdate,1,sysdate)"; SQLQuery query = session.createSQLQuery(sql); query.setString(0, annexKey); query.setString(1, saveFilename); query.setInteger(2, userId); Transaction ts = session.beginTransaction(); try &#123; query.executeUpdate(); ts.commit(); System.out.println("插入成功"); &#125; catch (HibernateException e) &#123; e.printStackTrace(); ts.rollback(); System.out.println("插入失败"); &#125; finally &#123; session.close(); &#125; &#125; &#125; &#125; catch (FileUploadBase .FileSizeLimitExceededException e) &#123; e.printStackTrace(); request.setAttribute( "message", "单个文件超出最大值！"); return; &#125; catch (FileUploadBase.SizeLimitExceededException e) &#123; e.printStackTrace(); request.setAttribute( "message","上传文件的总大小超出限制的最大值！"); return; &#125; catch (Exception e) &#123; message = "文件上传失败！"; e.printStackTrace(); &#125; request.setAttribute("message", message); &#125; /** * @Method: makeFileName * @Description: 生成上传文件的文件名，文件名以：uuid+"_"+文件的原始名称 * @param filename文件的原始名称 * @return uuid+"_"+文件的原始名称 */ private String makeFileName(String filename) &#123; // 为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名 return UUID.randomUUID().toString() + "_" + filename; &#125; &#125;展示当前（用户id为1，业务类型id为1）的所有附件的servlet：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public class ListFileServlet extends HttpServlet &#123; public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; Integer userId = Integer.valueOf(request.getParameter("userId")); Integer busiTypeId = Integer.valueOf(request.getParameter("busiTypeId")); // 获取上传文件的目录 String uploadFilePath = this.getServletContext() .getRealPath("/WEB-INF/upload"); // 存储要下载的文件名 Map&lt;String, String&gt; fileNameMap = new HashMap&lt;String, String&gt;(); // 递归遍历filepath目录下的所有文件和目录，将文件的文件名存储到map集合中 listfile(new File(uploadFilePath),fileNameMap,userId,busiTypeId); // File既可以代表一个文件也可以代表一个目录 Iterator&lt;Map.Entry&lt;String, String&gt;&gt; it = fileNameMap.entrySet().iterator(); while (it.hasNext()) &#123; Map.Entry&lt;String, String&gt; entry = it.next(); &#125; // 将Map集合发送到listfile.jsp页面进行显示 request.setAttribute("fileNameMap", fileNameMap); request.getRequestDispatcher("/listfile.jsp").forward(request, response); &#125; /** * @Method: listfile * @Description: 递归遍历指定目录下的所有文件 * @param file：即代表一个文件，也代表一个文件目录 * @param map：存储文件名的Map集合 */ public void listfile(File file, Map&lt;String, String&gt; map,Integer userId, Integer busiTypeId)&#123; Session session = SessionUtil.getSession(); String sql = "select name from SYS_ANNEX where user_id=?" sql += "and busi_type_id=?"; SQLQuery query = session.createSQLQuery(sql); query.setInteger(0, userId); query.setInteger(1, busiTypeId); List&lt;String&gt; list = query.list(); for (String fileName : list) &#123; /** * 处理文件名，上传后的文件是以uuid_文件名的形式去重新命 * 名的，去除文件名的uuid_部分file.getName().indexOf("_") * 检索字符串中第一次出现"_"字符的位置，如果文件名 * 类似于：9349249849-88343-8344_多啦A梦.avi那么 * file.getName().substring(file.getName().indexOf("_")+1) * 处理之后就可以得到多啦A梦.avi部分 */ String realName = fileName.substring(fileName.indexOf("_") + 1); // file.getName()得到的是文件的原始名称，这个名称是 // 唯一的，因此可以作为key，realName是处理过后的名称， // 有可能会重复 map.put(fileName, realName); &#125; session.close(); &#125; &#125;下载servlet：12345678910111213141516171819202122232425262728293031323334353637383940public class DownLoadServlet extends HttpServlet &#123; public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // 得到要下载的文件名 String fileName = request.getParameter("filename"); // 上传的文件都是保存在/WEB-INF/upload目录下的子目录当中 String fileSaveRootPath = this.getServletContext() .getRealPath("/WEB-INF/upload"); // 通过文件名找出文件的所在目录 String path = fileSaveRootPath; // 得到要下载的文件 File file = new File(path + "\\" + fileName); // 如果文件不存在 if (!file.exists()) &#123; request.setAttribute("message", "您要下载的资源已被删除！"); return; &#125; // 处理文件名 String realname = fileName.substring(fileName.indexOf("_") + 1); // 设置响应头，控制浏览器下载该文件 response.setHeader("content-disposition", "attachment;filename=" + URLEncoder.encode(realname, "UTF-8")); // 读取要下载的文件，保存到文件输入流 FileInputStream in = new FileInputStream(path + "\\" + fileName); // 创建输出流 OutputStream out = response.getOutputStream(); // 创建缓冲区 byte buffer[] = new byte[1024]; int len = 0; // 循环将输入流中的内容读取到缓冲区当中 while ((len = in.read(buffer)) &gt; 0) &#123; // 输出缓冲区的内容到浏览器，实现文件下载 out.write(buffer, 0, len); &#125; // 关闭文件输入流 in.close(); // 关闭输出流 out.close(); &#125;&#125;删除servlet：123456789101112131415161718192021222324252627282930313233343536public class DeleteFileServlet extends HttpServlet&#123; @Override protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; //获取文件名 String fileName = request.getParameter("fileName"); // 数据库删除记录 Session session=SessionUtil.getSession(); String sql="delete from SYS_ANNEX where name=?"; SQLQuery query=session.createSQLQuery(sql); query.setString(0,fileName); Transaction ts=session.beginTransaction(); try&#123; query.executeUpdate(); ts.commit(); &#125;catch(HibernateException e)&#123; e.printStackTrace(); ts.rollback(); return; &#125;finally&#123; session.close(); &#125; // 数据库成功删除记录后，再从硬盘里删除文件 //上传的文件都是保存在/WEB-INF/upload目录下的子目录当中 String fileSaveRootPath = this.getServletContext() .getRealPath("/WEB-INF/upload"); //通过文件名找出文件的所在目录 String path = fileSaveRootPath; //得到要删除的文件 File file = new File(path + "\\" + fileName); //删除文件 file.delete(); &#125;&#125;上传页面upload.jsp：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111&lt;%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%&gt;&lt;%@taglib prefix="c_rt" uri="http://java.sun.com/jstl/core_rt" %&gt; &lt;!DOCTYPE HTML&gt; &lt;html&gt; &lt;style&gt; table&#123; margin:auto; &#125; &lt;/style&gt; &lt;head&gt; &lt;title&gt;文件上传&lt;/title&gt; &lt;script type="text/javascript" src="js/jquery.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript"&gt; $(function()&#123; //页面一加载调用onLoad()函数读取附件 onLoad(); $("#submit").click(function()&#123; //将form表单附件格式化 var formData = new FormData($("#form")[0]); var userId=$("#userId").val().trim(); var location="http://localhost:8080/file/servlet/"; location+="UploadHandleServlet?userId="+userId; $.ajax(&#123; //调用上传servlet url:location, type:"post", data:formData, async: false, cache: false, contentType: false, processData: false, success:function()&#123; //成功后清除上传附件模块内容 $("#file").empty(); AddMore(); //调用onLoad()函数，刷新 onLoad(); &#125; &#125;); &#125;); //onLoad()函数调用listfileServlet,读取当前用户下的所有附件 function onLoad()&#123; $.ajax(&#123; url:"http://localhost:8080/file/listfile", type:"post", //模拟用户id为1，业务类型id为1 data:&#123;"userId":1,"busiTypeId":1&#125;, success:function(fileNameMap)&#123; //将读取到的fileMap展示出来 $("#fileLoad").html(fileNameMap); &#125; &#125;); &#125;&#125;); &lt;/script&gt; &lt;script type="text/javascript"&gt; function AddMore()&#123; var more = document.getElementById("file"); var br = document.createElement("br"); var input = document.createElement("input"); var button = document.createElement("input"); input.type = "file"; input.name = "file"; input.id="file"; button.type = "button"; button.value = "删除"; more.appendChild(input); more.appendChild(button); more.appendChild(br); button.onclick = function()&#123; more.removeChild(br); more.removeChild(input); more.removeChild(button); &#125;;&#125; &lt;/script&gt; &lt;/head&gt; &lt;body &gt; &lt;form action="http://localhost:8080/file/servlet/UploadHandleServlet" enctype="multipart/form-data" method="post" id="form"&gt; &lt;table border="1" &gt; &lt;tr&gt; &lt;td&gt;用户ID:&lt;/td&gt; &lt;td&gt;&lt;input type="text" name="userId" id="userId" value="1"/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;附件:&lt;/td&gt; &lt;td id="file"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan="2" align="center"&gt; &lt;input type="button" value="增加附件" onclick="AddMore()"&gt; &lt;input type="button" value="提交" id="submit"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;附件下载:&lt;/td&gt; &lt;td id="fileLoad"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt; &lt;script type="text/javascript"&gt; AddMore(); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;展示页面listfile.jsp，供ajax调用：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;%@ page language="java" import="java.util.*" pageEncoding="UTF-8"%&gt;&lt;%@taglib prefix="c_rt" uri="http://java.sun.com/jstl/core_rt" %&gt;&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;style&gt; #method &#123; float:right; margin-right:2px; &#125;&lt;/style&gt;&lt;script type="text/javascript"&gt; $(function()&#123; //删除 $(".delete").click(function()&#123; var name=$(this).attr("name"); var location="http://localhost:8080/file/servlet/DeleteFileServlet"; $.ajax(&#123; url:location, type:"post", data:&#123;"fileName":name&#125;, success:function()&#123; onLoad(); &#125; &#125;); &#125;); function onLoad()&#123; $.ajax(&#123; url:"http://localhost:8080/file/listfile", type:"post", data:&#123;"userId":1,"busiTypeId":1&#125;, success:function(fileNameMap)&#123; $("#fileLoad").html(fileNameMap); &#125; &#125;); &#125;&#125;); &lt;/script&gt;&lt;head&gt; &lt;title&gt;下载文件页面，供ajax返回调用&lt;/title&gt;&lt;/head&gt; &lt;body&gt;&lt;!-- 遍历fileNameMap集合 --&gt;&lt;c_rt:forEach var="me" items="$&#123;fileNameMap&#125;"&gt; &lt;c_rt:url value="/servlet/DownLoadServlet" var="downurl"&gt; &lt;c_rt:param name="filename" value="$&#123;me.key&#125;"&gt;&lt;/c_rt:param&gt; &lt;/c_rt:url&gt; &lt;c_rt:url value="/servlet/DeleteFileServlet" var="deleteurl"&gt; &lt;c_rt:param name="filename" value="$&#123;me.key&#125;"&gt;&lt;/c_rt:param&gt; &lt;/c_rt:url&gt; $&#123;me.value&#125; &lt;span id="method"&gt; &lt;a href="$&#123;downurl&#125;" id="downLoad"&gt;下载&lt;/a&gt; &lt;a href="javascript:void(0)" class="delete" name="$&#123;me.key&#125;"&gt;删除&lt;/a&gt; &lt;/span&gt;&lt;br/&gt;&lt;/c_rt:forEach&gt;&lt;/body&gt;&lt;/html&gt;剩下的只需在web.xml中配置这几个servlet，以及配置hibernate.cfg.xml即可 。jar包：链接:百度网盘 密码：q75g]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle树查询]]></title>
    <url>%2Fblog%2FOracle%E6%A0%91%E6%9F%A5%E8%AF%A2.html</url>
    <content type="text"><![CDATA[oracle树查询的最重要的就是select…start with…connect by…prior语法了。依托于该语法，我们可以将一个表形结构的以树的顺序列出来。在下面列述了oracle中树型查询的常用查询方式以及经常使用的与树查询相关的oracle特性函数等，在这里只涉及到一张表中的树查询方式而不涉及多表中的关联等。1.准备测试表和测试数据：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162--菜单目录结构表create table tb_menu( id number(10) not null, --主键id title varchar2(50), --标题 parent number(10) --parent id) --父菜单insert into tb_menu(id, title, parent) values(1, '父菜单1',0);insert into tb_menu(id, title, parent) values(2, '父菜单2',0);insert into tb_menu(id, title, parent) values(3, '父菜单3',0);insert into tb_menu(id, title, parent) values(4, '父菜单4',0);insert into tb_menu(id, title, parent) values(5, '父菜单5',0);--一级菜单insert into tb_menu(id, title, parent) values(6, '一级菜单6',1);insert into tb_menu(id, title, parent) values(7, '一级菜单7',1);insert into tb_menu(id, title, parent) values(8, '一级菜单8',1);insert into tb_menu(id, title, parent) values(9, '一级菜单9',2);insert into tb_menu(id, title, parent) values(10, '一级菜单10',2);insert into tb_menu(id, title, parent) values(11, '一级菜单11',2);insert into tb_menu(id, title, parent) values(12, '一级菜单12',3);insert into tb_menu(id, title, parent) values(13, '一级菜单13',3);insert into tb_menu(id, title, parent) values(14, '一级菜单14',3);insert into tb_menu(id, title, parent) values(15, '一级菜单15',4);insert into tb_menu(id, title, parent) values(16, '一级菜单16',4);insert into tb_menu(id, title, parent) values(17, '一级菜单17',4);insert into tb_menu(id, title, parent) values(18, '一级菜单18',5);insert into tb_menu(id, title, parent) values(19, '一级菜单19',5);insert into tb_menu(id, title, parent) values(20, '一级菜单20',5);--二级菜单insert into tb_menu(id, title, parent) values(21, '二级菜单21',6);insert into tb_menu(id, title, parent) values(22, '二级菜单22',6);insert into tb_menu(id, title, parent) values(23, '二级菜单23',7);insert into tb_menu(id, title, parent) values(24, '二级菜单24',7);insert into tb_menu(id, title, parent) values(25, '二级菜单25',8);insert into tb_menu(id, title, parent) values(26, '二级菜单26',9);insert into tb_menu(id, title, parent) values(27, '二级菜单27',10);insert into tb_menu(id, title, parent) values(28, '二级菜单28',11);insert into tb_menu(id, title, parent) values(29, '二级菜单29',12);insert into tb_menu(id, title, parent) values(30, '二级菜单30',13);insert into tb_menu(id, title, parent) values(31, '二级菜单31',14);insert into tb_menu(id, title, parent) values(32, '二级菜单32',15);insert into tb_menu(id, title, parent) values(33, '二级菜单33',16);insert into tb_menu(id, title, parent) values(34, '二级菜单34',17);insert into tb_menu(id, title, parent) values(35, '二级菜单35',18);insert into tb_menu(id, title, parent) values(36, '二级菜单36',19);insert into tb_menu(id, title, parent) values(37, '二级菜单37',20);--三级菜单insert into tb_menu(id, title, parent) values(38, '三级菜单38',21);insert into tb_menu(id, title, parent) values(39, '三级菜单39',22);insert into tb_menu(id, title, parent) values(40, '三级菜单40',23);insert into tb_menu(id, title, parent) values(41, '三级菜单41',24);insert into tb_menu(id, title, parent) values(42, '三级菜单42',25);insert into tb_menu(id, title, parent) values(43, '三级菜单43',26);insert into tb_menu(id, title, parent) values(44, '三级菜单44',27);insert into tb_menu(id, title, parent) values(45, '三级菜单45',28);insert into tb_menu(id, title, parent) values(46, '三级菜单46',28);insert into tb_menu(id, title, parent) values(47, '三级菜单47',29);insert into tb_menu(id, title, parent) values(48, '三级菜单48',30);insert into tb_menu(id, title, parent) values(49, '三级菜单49',31);insert into tb_menu(id, title, parent) values(50, '三级菜单50',31);commit;parent字段存储的是上级id，如果是顶级父节点，该parent为0。2.树操作我们从最基本的操作，逐步列出树查询中常见的操作，所有查询出来的节点以家族中的辈份作比方。查找树中的所有顶级父节点假设这个树是个目录结构，那么第一个操作总是找出所有的顶级节点，再根据该节点找到其下属节点。123456789SQL&gt; select * from tb_menu m where m.parent=0; ID TITLE PARENT---------- -------------------------------------------------- ---------- 1 父菜单1 0 2 父菜单2 0 3 父菜单3 0 4 父菜单4 0 5 父菜单5 0查找一个节点的直属子节点如果查找的是直属子类节点，也是不用用到树型查询的。1234567SQL&gt; select * from tb_menu m where m.parent=1; ID TITLE PARENT---------- -------------------------------------------------- ---------- 6 一级菜单6 1 7 一级菜单7 1 8 一级菜单8 1查找一个节点所有直属子节点1234567891011121314151617181920SQL&gt; select * from tb_menu m start with m.id=1 connect by m.parent=prior m.id; ID TITLE PARENT---------- -------------------------------------------------- ---------- 1 父菜单1 0 6 一级菜单6 1 21 二级菜单21 6 38 三级菜单38 21 22 二级菜单22 6 39 三级菜单39 22 7 一级菜单7 1 23 二级菜单23 7 40 三级菜单40 23 24 二级菜单24 7 41 三级菜单41 24 8 一级菜单8 1 25 二级菜单25 8 42 三级菜单42 25 已选择14行。这个查找的是id为1的节点下的所有直属子类节点，包括子辈的和孙子辈的所有直属节点。查找一个节点的直属父节点如果查找的是节点的直属父节点，也是不用用到树型查询的。12345678910111213141516SQL&gt;SELECT c. ID, c.title, P . ID parent_id, P .title parent_titleFROM tb_menu c, tb_menu PWHERE c. PARENT = P . IDAND c. ID = 6; ID TITLE PARENT_ID PARENT_TITLE---------- --------------------- ---------- --------------------------- 6 一级菜单6 1 父菜单1查找一个节点所有直属父节点12345678SQL&gt; select * from tb_menu m start with m.id=38 connect by prior m.parent=m.id; ID TITLE PARENT---------- -------------------------------------------------- ---------- 38 三级菜单38 21 21 二级菜单21 6 6 一级菜单6 1 1 父菜单1 0这里查找的就是id为1的所有直属父节点，打个比方就是找到一个人的父亲、祖父等。但是值得注意的是这个查询出来的结果的顺序是先列出子类节点再列出父类节点，姑且认为是个倒序吧。上面列出两个树型查询方式，第3条语句和第5条语句，这两条语句之间的区别在于prior关键字的位置不同，所以决定了查询的方式不同。 当parent = prior id时，数据库会根据当前的id迭代出parent与该id相同的记录，所以查询的结果是迭代出了所有的子类记录；而prior parent = id时，数据库会跟据当前的parent来迭代出与当前的parent相同的id的记录，所以查询出来的结果就是所有的父类结果。以下是一系列针对树结构的更深层次的查询，这里的查询不一定是最优的查询方式，或许只是其中的一种实现而已。查询一个节点的兄弟节点12345678910111213141516171819202122--m.parent=m2.parent--&gt;同一个父亲SQL&gt; SELECT * FROM tb_menu MWHERE EXISTS ( SELECT * FROM tb_menu m2 WHERE M . PARENT = m2. PARENT AND m2. ID = 6 ); ID TITLE PARENT---------- -------------------------------------------------- ---------- 8 一级菜单8 1 7 一级菜单7 1 6 一级菜单6 1查询与一个节点同级的节点如果在表中设置了级别的字段，那么在做这类查询时会很轻松，同一级别的就是与那个节点同级的，在这里列出不使用该字段时的实现：12345678910111213141516171819202122232425262728293031323334353637SQL&gt; WITH tmp AS ( SELECT A .*, LEVEL leaf FROM tb_menu A START WITH A . PARENT = 0 CONNECT BY A . PARENT = PRIOR A . ID) SELECT *FROM tmpWHERE leaf = ( SELECT leaf FROM tmp WHERE ID = 50 ); ID TITLE PARENT LEAF---------- ----------------------------------------- ---------- ---------- 38 三级菜单38 21 4 39 三级菜单39 22 4 40 三级菜单40 23 4 41 三级菜单41 24 4 42 三级菜单42 25 4 43 三级菜单43 26 4 44 三级菜单44 27 4 45 三级菜单45 28 4 46 三级菜单46 28 4 47 三级菜单47 29 4 48 三级菜单48 30 4 49 三级菜单49 31 4 50 三级菜单50 31 4 已选择13行。这里使用两个技巧，一个是使用了level来标识每个节点在表中的级别，还有就是使用with语法模拟出了一张带有级别的临时表。查询一个节点父节点的兄弟节点12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455SQL&gt; WITH tmp AS ( SELECT tb_menu.*, LEVEL lev FROM tb_menu START WITH PARENT = 0 CONNECT BY PARENT = PRIOR ID) SELECT b.*FROM tmp b, ( SELECT * FROM tmp WHERE ID = 21 AND lev = 2 ) AWHERE b.lev = 1UNION ALL SELECT * FROM tmp WHERE PARENT = ( SELECT DISTINCT x. ID FROM tmp x, --祖父 tmp y, --父亲 ( SELECT * FROM tmp WHERE ID = 21 AND lev &gt; 2 ) z --儿子 WHERE y. ID = z. PARENT AND x. ID = y. PARENT ); ID TITLE PARENT LEV---------- ---------------------------------------- ---------- ---------- 6 一级菜单6 1 2 7 一级菜单7 1 2 8 一级菜单8 1 2这里查询分成以下几步。首先，将第7个一样，将全表都使用临时表加上级别；其次，根据级别来判断有几种类型，以上文中举的例子来说，有三种情况：（1）当前节点为顶级节点，即查询出来的lev值为1，那么它没有上级节点，不予考虑。（2）当前节点为2级节点，查询出来的lev值为2，那么就只要保证lev级别为1的就是其上级节点的兄弟节点。（3）其它情况就是3以及以上级别，那么就要选查询出来其上级的上级节点（祖父），再来判断祖父的下级节点都是属于该节点的上级节点的兄弟节点。最后，就是使用union将查询出来的结果进行结合起来，形成结果集。查询一个节点父节点的同级节点这个其实跟第7种情况是相同的。1234567891011121314151617181920SQL&gt; WITH tmp AS ( SELECT A .*, LEVEL leaf FROM tb_menu A START WITH A . PARENT = 0 CONNECT BY A . PARENT = PRIOR A . ID) SELECT *FROM tmpWHERE leaf = (SELECT leaf FROM tmp WHERE ID = 6) - 1; ID TITLE PARENT LEAF---------- ------------------------------------------- ---------- ---------- 1 父菜单1 0 1 2 父菜单2 0 1 3 父菜单3 0 1 4 父菜单4 0 1 5 父菜单5 0 1基本上，常见的查询在里面了，不常见的也有部分了。其中，查询的内容都是节点的基本信息，都是数据表中的基本字段，但是在树查询中还有些特殊需求，是对查询数据进行了处理的，常见的包括列出树路径等。补充一个概念，对于数据库来说，根节点并不一定是在数据库中设计的顶级节点，对于数据库来说，根节点就是start with开始的地方。下面列出的是一些与树相关的特殊需求。名称要列出名称全部路径这里常见的有两种情况，一种是从顶级列出，直到当前节点的名称（或者其它属性）；一种是从当前节点列出，直到顶级节点的名称（或其它属性）。举地址为例：国内的习惯是从省开始、到市、到县、到居委会的，而国外的习惯正好相反。 从顶部开始：1234567891011SQL&gt; SELECT SYS_CONNECT_BY_PATH (title, '/')FROM tb_menuWHERE ID = 50 START WITH PARENT = 0 CONNECT BY PARENT = PRIOR ID; SYS_CONNECT_BY_PATH(TITLE,'/')----------------------------------------------------/父菜单3/一级菜单14/二级菜单31/三级菜单50从当前节点开始：123456789101112SQL&gt; SELECT SYS_CONNECT_BY_PATH (title, '/')FROM tb_menu START WITH ID = 50 CONNECT BY PRIOR PARENT = ID; SYS_CONNECT_BY_PATH(TITLE,'/')------------------------------------------------------ /三级菜单50/三级菜单50/二级菜单31/三级菜单50/二级菜单31/一级菜单14/三级菜单50/二级菜单31/一级菜单14/父菜单3在这里我又不得不放个牢骚了。oracle只提供了一个sys_connect_by_path函数，却忘了字符串的连接的顺序。在上面的例子中，第一个sql是从根节点开始遍历，而第二个sql是直接找到当前节点，从效率上来说已经是千差万别，更关键的是第一个sql只能选择一个节点，而第二个sql却是遍历出了一颗树来。再次ps一下。sys_connect_by_path函数就是从start with开始的地方开始遍历，并记下其遍历到的节点，start with开始的地方被视为根节点，将遍历到的路径根据函数中的分隔符，组成一个新的字符串，这个功能还是很强大的。列出当前节点的根节点。在前面说过，根节点就是start with开始的地方。12345678910111213SQL&gt; SELECT CONNECT_BY_ROOT title, tb_menu.*FROM tb_menu START WITH ID = 50 CONNECT BY PRIOR PARENT = ID; CONNECT_BY_ROOTTITLE ID TITLE PARENT----------------------------------------------------------------三级菜单50 50 三级菜单50 31三级菜单50 31 二级菜单31 14三级菜单50 14 一级菜单14 3三级菜单50 3 父菜单3 0connect_by_root函数用来列的前面，记录的是当前节点的根节点的内容。列出当前节点是否为叶子这个比较常见，尤其在动态目录中，在查出的内容是否还有下级节点时，这个函数是很适用的。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960SELECT CONNECT_BY_ISLEAF, tb_menu.*FROM tb_menu START WITH PARENT = 0 CONNECT BY PARENT = PRIOR ID; CONNECT_BY_ISLEAF ID TITLE PARENT----------------- ---------- --------------------------------------- ---------- 0 1 父菜单1 0 0 6 一级菜单6 1 0 21 二级菜单21 6 1 38 三级菜单38 21 0 22 二级菜单22 6 1 39 三级菜单39 22 0 7 一级菜单7 1 0 23 二级菜单23 7 1 40 三级菜单40 23 0 24 二级菜单24 7 1 41 三级菜单41 24 0 8 一级菜单8 1 0 25 二级菜单25 8 1 42 三级菜单42 25 0 2 父菜单2 0 0 9 一级菜单9 2 0 26 二级菜单26 9 1 43 三级菜单43 6 0 10 一级菜单10 2 0 27 二级菜单27 10 1 44 三级菜单44 27 0 11 一级菜单11 2 0 28 二级菜单28 11 1 45 三级菜单45 28 1 46 三级菜单46 28 0 3 父菜单3 0 0 12 一级菜单12 3 0 29 二级菜单29 12 1 47 三级菜单47 29 0 13 一级菜单13 3 0 30 二级菜单30 13 1 48 三级菜单48 30 0 14 一级菜单14 3 0 31 二级菜单31 14 1 49 三级菜单49 31 1 50 三级菜单50 31 0 4 父菜单4 0 0 15 一级菜单15 4 1 32 二级菜单32 15 0 16 一级菜单16 4 1 33 二级菜单33 16 0 17 一级菜单17 4 1 34 二级菜单34 17 0 5 父菜单5 0 0 18 一级菜单18 5 1 35 二级菜单35 18 0 19 一级菜单19 5 1 36 二级菜单36 19 0 20 一级菜单20 5 1 37 二级菜单37 20 已选择50行。]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
        <tag>Oracle 11g</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用JFinal快速搭建 Java web项目]]></title>
    <url>%2Fblog%2F%E4%BD%BF%E7%94%A8JFinal%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA-Java-web%E9%A1%B9%E7%9B%AE.html</url>
    <content type="text"><![CDATA[JFinal是一个基于Java的极速Web开发框架，其核心设计目标是开发迅速、代码量少、学习简单、功能强大、轻量级、易扩展、Restful，在拥有Java语言所有优势的同时再拥有Ruby、Python等动态语言的开发效率。1.在eclipse中新建Jfinal项目 导入jfinal-1.8-bin.jar 和 jfinal-2.2-bin-with-src.jar；2.新建JfinalConfig类，用来配置Jfinal：1234567891011121314151617181920212223242526272829303132333435363738394041424344public class JfinalConfig extends JFinalConfig&#123; /* * 配置常量值 */ @Override public void configConstant(Constants arg0) &#123; //设置开发模式为true arg0.setDevMode(true); //设置编码格式 arg0.setEncoding("utf-8"); //设置视图类型 arg0.setViewType(ViewType.JSP); &#125; /* * 配置处理器 */ @Override public void configHandler(Handlers arg0) &#123; //配置项目contextPath,以便在jsp页面直接获取项目访问路径 arg0.add(new ContextPathHandler("basepath")); &#125; /* * 配置拦截器，项目里需要拦截器的话在这里配置 */ @Override public void configInterceptor(Interceptors arg0) &#123; // TODO Auto-generated method stub &#125; /* * 配置插件，通常用来配置对数据库的支持 */ @Override public void configPlugin(Plugins arg0) &#123; // TODO Auto-generated method stub &#125; /* * 配置路由，类似于struts的action */ @Override public void configRoute(Routes arg0) &#123; //访问路径为项目根路径时，调用JfinalController arg0.add("/", JfinalController.class); &#125; &#125;3.在web.xml中配置JfinalConfig，以此在启动Tomcat的时候初始化JfinalConfig这个入口：12345678910111213141516171819202122&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-ap.xsd" version="2.5"&gt; &lt;filter&gt; &lt;filter-name&gt;jfinal&lt;/filter-name&gt; &lt;filter-class&gt;com.jfinal.core.JFinalFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;configClass&lt;/param-name&gt; &lt;param-value&gt;com.vis.config.JfinalConfig&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;jfinal&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt;&lt;/web-app&gt;4.创建登陆页面 login.jsp 和主页 index.jsp：login.jsp：1234567891011121314151617&lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;&lt;html&gt; &lt;head&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt; &lt;title&gt;login page&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 跳转到JfinalController login方法 --&gt; &lt;form action="$&#123;basepath &#125;/login" id="body"&gt; &lt;p&gt;input userName:&lt;/p&gt; &lt;input type="text" name="userName" id="userName"/&gt; &lt;input type="submit" value="login"/&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;index.jsp：12345678910111213 &lt;%@ page language="java" contentType="text/html; charset=utf-8" pageEncoding="utf-8"%&gt;&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;&lt;title&gt;my index&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;!-- 获取userName --&gt; &lt;h3&gt;welcome back,$&#123;userName &#125;&lt;/h3&gt;&lt;/body&gt;&lt;/html&gt;5.创建JfinalController，用来响应jsp页面的请求：12345678910111213public class JfinalController extends Controller&#123; //设置默认访问页面 public void index()&#123; this.render("login.jsp"); &#125; //访问路径为 basepath/login时调用此方法 public void login()&#123; String userName=this.getPara("userName"); this.setAttr("userName", userName); //取到userName后跳转到index.jsp this.render("index.jsp"); &#125;&#125;至此，一个简单的Java web项目搭建完了，将项目部署到Tomcat中，并启动，在浏览器中输入访问路径：localhost:8080/Jfinal/：]]></content>
      <tags>
        <tag>JFinal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atom编辑器添加酷炫动画]]></title>
    <url>%2Fblog%2FAtom%E7%BC%96%E8%BE%91%E5%99%A8%E6%B7%BB%E5%8A%A0%E9%85%B7%E7%82%AB%E5%8A%A8%E7%94%BB.html</url>
    <content type="text"><![CDATA[由于没有安装完整依赖库或者那堵伟大的墙的原因，使得原本只是安装一个Package的操作变得不那么简单。这里介绍一种100%安装成功的方法：1.首先安装node.js：https://nodejs.org/en/。2.然后下载 activate-power-mode-master 并解压到 C:\Users\Administrator\.atom\packages目录下。3.使用CMD命令切换到activate-power-mode-master文件夹下，执行npm命令：123C:\Users\Administrator\.atom\packages\activate-power-mode-master&gt;npm install lodashC:\Users\Administrator\.atom\packages\activate-power-mode-master&gt;npm install lodash.randomC:\Users\Administrator\.atom\packages\activate-power-mode-master&gt;npm install lodash.throttle执行命令之后，打开Atom编辑器，Ctrl+Alt+O开启就可以看到酷炫的动画啦。如果想关闭震动效果的话，修改activate-power-mode-master/lib/activate-power-mode.coffee文件68行为：1if @getConfig "screenShake.disabled"附上一张效果图：]]></content>
      <tags>
        <tag>Atom</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Ajax向服务端传送form表单数据]]></title>
    <url>%2Fblog%2F%E4%BD%BF%E7%94%A8Ajax%E5%90%91%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BC%A0%E9%80%81form%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE.html</url>
    <content type="text"><![CDATA[今天在做附件Demo的时候，发现form表单的submit按钮会自动刷新页面，但在很多情况下，页面的刷新会很大程度影响体验。于是想到用Ajax来代替submit向服务端发送数据，网络上的说法是通过JQuery的serialize()方法序列化表单，但实验之后发现该方法只能传递一般的参数，上传的文件并不能被序列化传递到服务端。继续查找资料发现可以使用formData方法来使用Ajax请求向服务端上传form表单附件：HTML代码：1234567891011121314151617181920212223&lt;form action="http://localhost:8080/file/servlet/UploadHandleServlet" enctype="multipart/form-data" method="post" id="form"&gt; &lt;table border="1" &gt; &lt;tr&gt; &lt;td&gt;用户名:&lt;/td&gt; &lt;td&gt;&lt;input type="text" name=userName/&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;附件:&lt;/td&gt; &lt;td id="file"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan="2" align="center"&gt; &lt;input type="button" value="增加附件" onclick="AddMore()"&gt; &lt;input type="button" value="提交" id="submit"&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;附件下载:&lt;/td&gt; &lt;td id="fileLoad"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/form&gt;JS代码：123456789101112131415$("#submit").click(function()&#123; var formData = new FormData($("#form")[0]); $.ajax(&#123; url:"http://localhost:8080/file/servlet/UploadHandleServlet", type:"post", data:formData, async: false, cache: false, contentType: false, processData: false, success:function()&#123; // something to do... &#125; &#125;); &#125;);]]></content>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle 经典试题集]]></title>
    <url>%2Fblog%2FOracle-%E7%BB%8F%E5%85%B8%E8%AF%95%E9%A2%98%E9%9B%86.html</url>
    <content type="text"><![CDATA[一份很好的Oracle SQL试题集🙌。准备工作：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465create table student( sno varchar2(10) primary key, sname varchar2(20), sage number(2), ssex varchar2(5));create table teacher( tno varchar2(10) primary key, tname varchar2(20));create table course( cno varchar2(10), cname varchar2(20), tno varchar2(20), constraint pk_course primary key (cno,tno));create table sc( sno varchar2(10), cno varchar2(10), score number(4,2), constraint pk_sc primary key (sno,cno));/*******初始化学生表的数据******/insert into student values ('s001','张三',23,'男');insert into student values ('s002','李四',23,'男');insert into student values ('s003','吴鹏',25,'男');insert into student values ('s004','琴沁',20,'女');insert into student values ('s005','王丽',20,'女');insert into student values ('s006','李波',21,'男');insert into student values ('s007','刘玉',21,'男');insert into student values ('s008','萧蓉',21,'女');insert into student values ('s009','陈萧晓',23,'女');insert into student values ('s010','陈美',22,'女');commit;/******************初始化教师表***********************/insert into teacher values ('t001', '刘阳');insert into teacher values ('t002', '谌燕');insert into teacher values ('t003', '胡明星');commit;/***************初始化课程表****************************/insert into course values ('c001','J2SE','t002');insert into course values ('c002','Java Web','t002');insert into course values ('c003','SSH','t001');insert into course values ('c004','Oracle','t001');insert into course values ('c005','SQL SERVER 2005','t003');insert into course values ('c006','C#','t003');insert into course values ('c007','JavaScript','t002');insert into course values ('c008','DIV+CSS','t001');insert into course values ('c009','PHP','t003');insert into course values ('c010','EJB3.0','t002');commit;/***************初始化成绩表***********************/insert into sc values ('s001','c001',78.9);insert into sc values ('s002','c001',80.9);insert into sc values ('s003','c001',81.9);insert into sc values ('s004','c001',60.9);insert into sc values ('s001','c002',82.9);insert into sc values ('s002','c002',72.9);insert into sc values ('s003','c002',81.9);insert into sc values ('s001','c003','59');commit;1、查询“c001”课程比“c002”课程成绩高的所有学生的成绩信息；12345678SQL&gt; select a.* from 2 (select * from sc a where a.cno = 'c001') a, 3 (select * from sc b where b.cno = 'c002') b 4 where a.sno=b.sno and a.score &gt; b.score;SNO CNO SCORE---------- ---------- ----------s002 c001 80.9或者：1234567SQL&gt; select * from sc a 2 where a.cno = 'c001' 3 and exists (select * from sc b where b.cno='c002' and a.score &gt; b.score and a.sno = b.sno);SNO CNO SCORE---------- ---------- ----------s002 c001 80.92、查询平均成绩大于60分的同学的学号和平均成绩；12345678SQL&gt; select sno,avg(score) from sc group by sno having avg(score) &gt; 60;SNO AVG(SCORE)---------- ----------s003 81.9s004 60.9s001 73.6s002 76.93、查询所有同学的学号、姓名、选课数、总成绩；1234567891011121314151617SQL&gt; SELECT a.sno, a.sNAME,sum(score),count(b.cno) 2 FROM student a, sc b 3 WHERE a.sno = b.sno(+) 4 group by a.sno,sname;SNO SNAME SUM(SCORE) COUNT(B.CNO)---------- -------------------- ---------- ------------s009 陈萧晓 0s005 王丽 0s001 张三 220.8 3s008 萧蓉 0s003 吴鹏 163.8 2s004 琴沁 60.9 1s007 刘玉 0s006 李波 0s010 陈美 0s002 李四 153.8 24、查询姓“刘”的老师的个数：12345SQL&gt; select count(1) from TEACHER where TNAME LIKE '刘%'; COUNT(1)---------- 1]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle basis]]></title>
    <url>%2Fblog%2FOracle-basis.html</url>
    <content type="text"><![CDATA[Oracle数据类型NUMBERNUMBER表示数字类型，经常被定义成NUMBER（P，S）形式，其中：P表示数字的总位数；S表示小数点后面的位数。如：Sal NUMBER(6,2)：表示Sal列中的数据，整数位最大为4位，小数位最大位数是2位，也就是最大取值：9999.99。P不写为*号的时候代表默认38。CHARCHAR表示固定长度的字符类型，经常被定义成CHAR（N）形式， N表示占用的字节数，N的最大取值是2000。例如在表Emp中的Ename列的定义如下：Ename CHAR(20)：表示Ename列中最多可存储20个字节的字符串，并且占用的空间是固定的20个字节。VARCHAR2VARCHAR2表示变长的字符类型，定义格式是VARCHAR2（N）， N表示最多可占用的字节数，最大长度是4000字节。例如在表Emp中的JOB列的定义如下： JOB VARCHAR2(100)：表示JOB列中最多可存储长度为100个字节的字符串。根据其中保存的数据长度，占用的空间是变化的，最大占用空间为100个字节。CHAR和VARCHAR2的区别CHAR和VARCHAR2类型CHAR和VARCHAR2类型都是用来表示字符串数据类型，用来在表中存放字符串信息， 比如姓名、职业、地址等。CHAR存放定长字符，如果数据存不满定长长度，则补齐空格；VARCHAR2存放变长字符，实际数据有多少长度则占用多少。如保存字符串’HELLOWORLD’，共10个英文字母：CHAR(100)： 10个字母，补齐90个空格，实际占用100个字节。VARCHAR2(100) ：10个字母，实际占用10个字节。CHAR类型浪费空间换取查询时间的缩短，VARCHAR2节省空间查询时间较CHAR类型要长。字符串按照自然顺序排序。CHAR和VARCHAR2的存储编码字符串在数据库中存储的默认单位是字节，也可显式指定为字符。如：CHAR(10)，等价于 CHAR(10 BYTE)。如果指定单位为字符：CHAR(10 CHAR)，20个字节。VARCHAR2(10)， 等价于VARCHAR2（10 BYTE）。指定单位为字符：VARCHAR2(10 CHAR)，20个字节。CHAR和VARCHAR2的最大长度CHAR类型的最大取值为2000字节，也就是定义为CHAR（2000）。其中最多保存2000个英文字符，1000个汉字（GBK）。VARCHAR2最大取值为4000字节，也就是VARCHAR2（4000），最多保存4000个英文字符，2000个汉字（GBK）。CHAR如果不指定长度，默认为1个字节， VARCHAR2必须指定长度。DATEDATE用于定义日期时间的数据，长度是7个字节，默认格式是：DD-MON-RR， 例如：“11-APR-71”。如果是中文环境，是“11-4月-71”这种形式。例如在表Emp中的Hiredate列的定义如下：Hiredate DATE：表示Hiredate列中存放的是日期数据。LONG和CLOB类型LONG类型可以认为是VARCHAR2的加长版，用来存储变长字符串，最多达2GB的字符串数据，但是LONG类型有诸多限制，所以不建议使用：每个表只能有一个LONG类型列；不能作为主键；不能建立索引；不能出现在查询条件中等CLOB用来存储定长或变长字符串，最多达4GB的字符串数据，ORACLE建议开发中使用CLOB替代LONG类型。SQL分类SQL（Structured Query Language）是结构化查询语言的缩写。可分为：数据定义语言（DDL Data Definition Language）：用于建立，修改和删除数据库对象。包含：CREATE：创建表或其他对象的结构。ALTER: 修改表或其他对象的结构。DROP：删除表或其他对象的结构。TRUNCATE：删除表数据，保留表结构。CREATE语句创建表格：12345678910111213141516171819202122SQL&gt; create table employee ( 2 id NUMBER(10) not null, 3 name VARCHAR2(20), 4 gender CHAR(1), 5 birth DATE, 6 salary NUMBER(6,2), 7 job VARCHAR2(30), 8 deptno NUMBER(2) 9 );表已创建。SQL&gt; desc employee; 名称 是否为空? 类型 ----------------------------------------- -------- ---------------------------- ID NOT NULL NUMBER(10) NAME VARCHAR2(20) GENDER CHAR(1) BIRTH DATE SALARY NUMBER(6,2) JOB VARCHAR2(30) DEPTNO NUMBER(2)修改表名：123SQL&gt; RENAME employee TO employee1;表已重命名。增加列：在建表之后，要给表增加列可以使用ALTER TABLE的ADD子句实现。如在employee1表最后面增加一列：123456789101112131415SQL&gt; ALTER TABLE employee1 ADD(hiredate DATE DEFAULT SYSDATE);表已更改。SQL&gt; desc employee1 名称 是否为空? 类型 ----------------------------------------- -------- ---------------------------- ID NOT NULL NUMBER(10) NAME VARCHAR2(20) GENDER CHAR(1) BIRTH DATE SALARY NUMBER(6,2) JOB VARCHAR2(30) DEPTNO NUMBER(2) HIREDATE DATE删除列：删除employee1表中的hiredate列：123SQL&gt; ALTER TABLE employee1 DROP(hiredate);表已更改。删除所有表数据，保留结构：123SQL&gt; truncate TABLE employee1;表被截断。TRUNCATE TABLE在功能上与不带WHERE子句的DELETE语句相同：二者均删除表中的全部行。但TRUNCATE TABLE比DELETE速度快，且使用的系统和事务日志资源少。DELETE语句每次删除一行，并在事务日志中为所删除的每行记录一项。修改列：建表之后，可以改变表中列的数据类型、长度和默认值，注意这种修改仅对以后插入的数据有效，另外如果表中已经有数据的情况下，把长度由大改小，有可能不成功，比如原来的类型是VARCHAR2(100)，其中已经存放了100个字节长度的数据，如果要改为VARCHAR2(80)，则不会修改成功。修改表employee1的列job，并增加默认值的设置：123SQL&gt; ALTER TABLE employee1 MODIFY(job VARCHAR2(40) DEFAULT 'manager');表已更改。删除表：1234567SQL&gt; drop table employee1;表已删除。SQL&gt; desc employee1;ERROR:ORA-04043: 对象 employee1 不存在数据操纵语言（DML Data Manipulation Language）：用于改变数据表中的数据，和事务相关，执行完后需要通过事务控制语句提交后才真正的将改变应用到数据库中。包括：INSERT：将数据插入到数据表中。UPDATE：更新数据表中已存在的数据。DELETE：删除数据表中的数据。事务控制语言（TCL Transaction Control Language）：用来维护数据一致性的语句。包括：COMMIT：提交，确认已经进行的数据改变。ROLLBACK：回滚，取消已经进行的数据改变。SAVEPOINT：保存点，使当前的事务可以回退到指定的保存点，便于取消部分改变。数据查询语言（DQL Data Query Language）：用来查询需要的数据。SELECT语句。数据控制语言（DCL Data Control Language）：用于执行权限的授予与回收工作。包括：GRANT：授予，用于给用户或角色授予权限。REVOKE：用于收回用户或角色的权限。CREATE USER：创建用户。SQL基础查询FROM子句SELECT用于指定要查询的列，FROM指定要从哪个表中查询。如果要查询所有列，可以在SELECT后面使用*号，如果只查询特定的列，可以直接在SELECT后面指定列名，列名之间用逗号隔开。列的别名当我们查询的内容不是一个单纯的列，可能是一个函数，或者表达式，那么在结果集中该字段对应的字段名就是这个函数或者表达式。这样不够清晰，为此我们可以单独指定别名，这样在结果集中该字段的名字就是这个别名。若想显示自己想要的内容，使用双引号。其中”AS”可以省略。123456789101112131415SQL&gt; SELECT ename,sal*12 as "年薪",job from emp;ENAME 年薪 JOB---------- ---------- ---------SMITH 9600 CLERKALLEN 19200 SALESMANWARD 15000 SALESMANJONES 35700 MANAGERMARTIN 15000 SALESMANBLAKE 34200 MANAGERCLARK 29400 MANAGERSCOTT 36000 ANALYSTKING 60000 PRESIDENTTURNER 18000 SALESMANADAMS 13200 CLERKAND,OR与和或。AND优先级高于OR，可以用括号提高优先级。123456789101112131415161718SQL&gt; select ename,sal,job from emp where sal &gt; 1000 or job = 'CLERK';ENAME SAL JOB---------- ---------- ---------SMITH 800 CLERKALLEN 1600 SALESMANWARD 1250 SALESMANJONES 2975 MANAGERMARTIN 1250 SALESMANBLAKE 2850 MANAGERCLARK 2450 MANAGERSCOTT 3000 ANALYSTKING 5000 PRESIDENTTURNER 1500 SALESMANADAMS 1100 CLERKJAMES 950 CLERKFORD 3000 ANALYSTMILLER 1300 CLERKLIKE用于模糊查询，支持两个通配符，%：表示0到多个字符，_表示一个字符。1234567SQL&gt; select ename,sal,job from emp where ename like '_L%';ENAME SAL JOB---------- ---------- ---------ALLEN 1600 SALESMANBLAKE 2850 MANAGERCLARK 2450 MANAGERIN,NOT IN在WHERE子句中可以用比较操作符IN(list)来取出符合列表范围中的数据。其中的参数list表示值列表，当列或表达式匹配于列表中的任何一个值时，条件为TRUE，该条记录则被显示出来。IN也可以理解为一个范围比较操作符，只不过这个范围是一个指定的值列表，NOT IN(list)取出不符合此列表中的数据记录。123456789101112SQL&gt; select ename,sal,job from emp where job in('CLERK','SALESMAN');ENAME SAL JOB---------- ---------- ---------SMITH 800 CLERKALLEN 1600 SALESMANWARD 1250 SALESMANMARTIN 1250 SALESMANTURNER 1500 SALESMANADAMS 1100 CLERKJAMES 950 CLERKMILLER 1300 CLERKBETWEEN AND1234567891011SQL&gt; select ename,sal,job from emp where sal between 1500 and 3000;ENAME SAL JOB---------- ---------- ---------ALLEN 1600 SALESMANJONES 2975 MANAGERBLAKE 2850 MANAGERCLARK 2450 MANAGERSCOTT 3000 ANALYSTTURNER 1500 SALESMANFORD 3000 ANALYSTANY,ALL当我们需要判断内容&gt;，&gt;=，&lt;，&lt;=一个列表中的多个值时，需要结合ANY或ALL来使用。ANY(LIST)：大于列表中其中之一即可，即大于最小的；ALL(LIST)：大于列表中所有，即大于最大的。列表中的内容通常不是固定值，而是一个查询结果集，所以常在子查询中，与IN道理一样。如查询谁的薪水比FORD高？如果有多个同名，比任何一个叫FORD的人高就行：12345SQL&gt; select ename from emp where sal &gt; any(select sal from emp where ename = 'FORD');ENAME----------KING查询条件中使用表达式和函数当查询需要对选出的字段进行进一步计算，可以在数字列上使用算术表达式(+、-、*、/)。表达式符合四则运算的默认优先级，如果要改变优先级可以使用括号。算术运算主要是针对数字类型的数据，对日期类型的数据可以做加减操作，表示在一个日期值上加或减一个天数。查询条件中不能使用聚合函数！查询条件中使用算数表达式，查询年薪大于5w元的员工记录：12345SQL&gt; select ename,sal,job from emp where sal*12 &gt; 50000;ENAME SAL JOB---------- ---------- ---------KING 5000 PRESIDENTORDER BY使用ORDER BY字句：用于对结果即按照指定的字段的值升序或者降序进行排序。ASC：升序，默认也是ASC；DESC：降序。查看工资排名：123456789101112131415161718SQL&gt; select ename,sal,job from emp order by sal;ENAME SAL JOB---------- ---------- ---------SMITH 800 CLERKJAMES 950 CLERKADAMS 1100 CLERKWARD 1250 SALESMANMARTIN 1250 SALESMANMILLER 1300 CLERKTURNER 1500 SALESMANALLEN 1600 SALESMANCLARK 2450 MANAGERBLAKE 2850 MANAGERJONES 2975 MANAGERSCOTT 3000 ANALYSTFORD 3000 ANALYSTKING 5000 PRESIDENT若排序的字段中有NULL值，NULL被视为最大值。当多个字段进行排序时， 每个字段可以分别指定升降序，并且排序顺序按照第一个字段优先排序，只有第一个字段值相同时才按照第二个字段排序，以此类推。12345678910111213141516171819SQL&gt; select ename,sal,job,deptno from emp 2 order by deptno desc,sal desc;ENAME SAL JOB DEPTNO---------- ---------- --------- ----------BLAKE 2850 MANAGER 30ALLEN 1600 SALESMAN 30TURNER 1500 SALESMAN 30WARD 1250 SALESMAN 30MARTIN 1250 SALESMAN 30JAMES 950 CLERK 30FORD 3000 ANALYST 20SCOTT 3000 ANALYST 20JONES 2975 MANAGER 20ADAMS 1100 CLERK 20SMITH 800 CLERK 20KING 5000 PRESIDENT 10CLARK 2450 MANAGER 10MILLER 1300 CLERK 10聚合函数（分组函数，组函数）查询时需要做一些数据统计，比如：查询职员表中各部门职员的平均薪水，各部门的员工人数。当需要统计的数据并不能在职员表里直观列出，而是需要根据现有的数据计算得到结果，这种功能可以使用聚合函数来实现，即：将表的全部数据划分为几组数据，每组数据统计出一个结果。因为是多行数据参与运算返回一行结果，也称作分组函数、多行函数、集合函数。用到的关键字：GOURP BY 按什么分组。HAVING 进一步限制分组结果。聚合函数是忽略NULL值的。1、MAX和MIN用来取得列或表达式的最大、最小值，可以用来统计任何数据类型，包括数字、字符和日期。计算最早和最晚的入职时间，参数是日期：12345SQL&gt; select max(hiredate),min(hiredate) from emp;MAX(HIREDATE) MIN(HIREDATE)-------------- --------------23-5月 -87 17-12月-802、AVG和SUMAVG和SUM函数用来统计列或表达式的平均值和和值，这两个函数只能操作数字类型，并忽略NULL值。统计所有员工的总工资和平均工资：12345SQL&gt; select avg(sal) avg_sal,sum(sal) sum_sal from emp; AVG_SAL SUM_SAL---------- ----------2073.21429 290253、COUNTCOUNT函数用来计算表中的记录条数，同样忽略NULL值。例如获取职员表中一共有多少名职员记录：12345SQL&gt; select count(1) from emp; COUNT(1)---------- 14分组1、GROUP BY子句其是为聚合函数服务的，可以在统计数据时细化分组。他允许将某个字段值一样的记录看成一组，然后进行统计。而不是将整张表所有记录看成一组，那么每组可以出一个统计结果。查看每个部门的最高工资，最低工资：12345678SQL&gt; select deptno "部门", max(sal) "最高工资",min(sal) "最低工资" 2 from emp group by deptno; 部门 最高工资 最低工资---------- ---------- ---------- 30 2850 950 20 3000 800 10 5000 1300SQL语法要求：除了聚合函数，其他不在GROUP BY子句中的列名，不能出现在SELECT语句后面。GROUP BY进行分组的字段应在整张表中有重复数据，否则分组毛有意义GROUP BY子句后面允许指定多个字段，那么是按照这些字段值的组合相同的记录看作一组。查看每个部门每种职位的平均工资以及工资总和：1234567891011121314SQL&gt; select deptno,job,avg(sal),sum(sal) 2 from emp group by deptno,job; DEPTNO JOB AVG(SAL) SUM(SAL)---------- --------- ---------- ---------- 20 CLERK 950 1900 30 SALESMAN 1400 5600 20 MANAGER 2975 2975 30 CLERK 950 950 10 PRESIDENT 5000 5000 30 MANAGER 2850 2850 10 CLERK 1300 1300 10 MANAGER 2450 2450 20 ANALYST 3000 60002、HAVING字句HAVING 也是用于添加过滤条件的，它的过滤实际是在统计结果之后进行的，所以HAVING是为统计结果进行过滤使用的，其不能独立出现，必须跟在GROUP BY子句后面。查看平均工资大于2000的部门：1234567SQL&gt; select deptno,avg(sal) from emp 2 group by deptno having avg(sal) &gt; 2000; DEPTNO AVG(SAL)---------- ---------- 20 2175 10 2916.66667HAVING子句解决了WHERE子句后面不能跟聚合函数的问题：123456SQL&gt; select deptno,avg(sal) from emp where avg(sal) &gt; 2000 2 group by deptno;select deptno,avg(sal) from emp where avg(sal) &gt; 2000 *第 1 行出现错误:ORA-00934: 此处不允许使用分组函数该语句会报错，原因在于我们的过滤条件是平均工资高于2000，而WHERE的过滤时机在于：第一次从表中查询数据时进行过滤，只有满足WHERE条件的记录才会被查询出来。而判断平均工资高于2000，首先平均工资统计是建立在数据查询出来的基础上的，所以这时WHERE已经完成了过滤。改使用HVING 子句就可解决。查询语句的执行顺序当一条查询语句中包含所有的子句，执行顺序依下列子句次序：FROM 子句：执行顺序为从后往前、从右到左。数据量较少的表尽量放在后面。WHERE子句：执行顺序为自下而上、从右到左。将能过滤掉最大数量记录的条件写在WHERE 子句的最右。GROUP BY：执行顺序从左往右分组，最好在GROUP BY前使用WHERE将不需要的记录在GROUP BY之前过滤掉。HAVING 子句：消耗资源。尽量避免使用，HAVING 会在检索出所有记录之后才对结果集进行过滤，需要排序等操作。SELECT子句：少用*号，尽量取字段名称。ORACLE 在解析的过程中，通过查询数据字典将*号依次转换成所有的列名，消耗时间。ORDER BY子句：执行顺序为从左到右排序，消耗资源。SQL关联查询关联查询当从多张表查询数据时，我们会建立关联关系然后在张表中进行查询工作，重点就是如何指定这些表中数据的对应关系(关联关系)，N张表查询时至少要有N-1个连接条件。查询每个员工的名字，工资，以及部门名称和所在地：1234567891011121314151617181920SQL&gt; select e.ename,e.deptno,d.dname,d.loc 2 from emp e join dept d 3 on(d.deptno = e.deptno);ENAME DEPTNO DNAME LOC---------- ---------- -------------- -------------CLARK 10 ACCOUNTING NEW YORKKING 10 ACCOUNTING NEW YORKMILLER 10 ACCOUNTING NEW YORKJONES 20 RESEARCH DALLASFORD 20 RESEARCH DALLASADAMS 20 RESEARCH DALLASSMITH 20 RESEARCH DALLASSCOTT 20 RESEARCH DALLASWARD 30 SALES CHICAGOTURNER 30 SALES CHICAGOALLEN 30 SALES CHICAGOJAMES 30 SALES CHICAGOBLAKE 30 SALES CHICAGOMARTIN 30 SALES CHICAGO或者：123SQL&gt; select e.ename,e.deptno,d.dname,d.loc 2 from emp e,dept d 3 where e.deptno = d.deptno;内连接内连接只返回两个关联表中所有满足连接条件的记录。外连接内连接返回两个表中所有满足连接条件的数据记录，在有些情况下，需要返回那些不满足连接条件的记录，需要使用外连接，即不仅返回满足连接条件的记录，还将返回不满足连接条件的记录。将员工SOCTT的部门号改为50：12SQL&gt; update emp set deptno = 50 2 where ename = 'SCOTT';执行下面语句：123456789101112131415161718192021SQL&gt; select e.ename,d.dname 2 from emp e join dept d 3 on(e.deptno = d.deptno);ENAME DNAME---------- --------------CLARK ACCOUNTINGKING ACCOUNTINGMILLER ACCOUNTINGJONES RESEARCHFORD RESEARCHADAMS RESEARCHSMITH RESEARCHWARD SALESTURNER SALESALLEN SALESJAMES SALESBLAKE SALESMARTIN SALES已选择13行。会发现SCOTT员工没有被查询出来，原因是其不满足连接条件。外连接允许我们在关联查询的时候，以一张表作为驱动表(数据要显示全)。该表的数据全部会体现再结果集中，但是来自关联表中的字段由于不满足连接条件没有对应的记录，所以全部取NULL。外连接主要解决的问题就是显示再关联查询中不满足连接条件的记录。外连接分为：左外连接，右外连接，全外连接。使用左外连接查询员工信息：12345678910111213141516171819202122SQL&gt; select e.ename,d.dname 2 from emp e left outer join dept d 3 on(e.deptno = d.deptno);ENAME DNAME---------- --------------MILLER ACCOUNTINGKING ACCOUNTINGCLARK ACCOUNTINGFORD RESEARCHADAMS RESEARCHJONES RESEARCHSMITH RESEARCHJAMES SALESTURNER SALESBLAKE SALESMARTIN SALESWARD SALESALLEN SALESSCOTT已选择14行。可以看出，虽然SCOTT不满足连接条件，但也出现在查询结果中了。自连接当前表的一条记录对应当前表的多条记录，自连接的设计是为了解决同类型数据间又存在上下级关系的树状结构的保存与关联。查看员工的名字以及他领导的名字：12345678910111213141516171819SQL&gt; select e.ename "员工",m.ename "领导" 2 from emp e,emp m 3 where e.mgr = m.empno;员工 领导---------- ----------FORD JONESSCOTT JONESTURNER BLAKEALLEN BLAKEWARD BLAKEJAMES BLAKEMARTIN BLAKEMILLER CLARKADAMS SCOTTBLAKE KINGJONES KINGCLARK KINGSMITH FORD若想将没有领导的人也列出来，可以将代码改为：12345678910111213141516171819202122SQL&gt; select e.ename "员工",m.ename "领导" 2 from emp e,emp m 3 where e.mgr = m.empno(+);员工 领导---------- ----------FORD JONESSCOTT JONESJAMES BLAKETURNER BLAKEMARTIN BLAKEWARD BLAKEALLEN BLAKEMILLER CLARKADAMS SCOTTCLARK KINGBLAKE KINGJONES KINGSMITH FORDKING已选择14行。等同于：12345678910111213141516171819202122SQL&gt; select e.ename "员工",m.ename "领导" 2 from emp e left join emp m 3 on(e.mgr = m.empno);员工 领导---------- ----------FORD JONESSCOTT JONESJAMES BLAKETURNER BLAKEMARTIN BLAKEWARD BLAKEALLEN BLAKEMILLER CLARKADAMS SCOTTCLARK KINGBLAKE KINGJONES KINGSMITH FORDKING已选择14行。子查询子查询通常是将其查询出来的结果集提供给其他SQL语句使用，通常嵌套在实际要运行的SQL语句之中。1、子查询在WHERE子句中。在WHERE查询条件中的限制条件不是一个确定的值，而是来自于另外一个查询的结果。比如查看工资比CLARK高的员工信息：1234567891011SQL&gt; select ename,job,sal from emp 2 where sal &gt; (select sal from emp 3 where ename = 'CLARK');ENAME JOB SAL---------- --------- ----------JONES MANAGER 2975BLAKE MANAGER 2850SCOTT ANALYST 3000KING PRESIDENT 5000FORD ANALYST 3000根据返回结果的不同，子查询可分为单行单列子查询、多行单列子查询及多行多列子查询。如果子查询返回多行，主查询中要使用多行比较操作符，包括IN、ALL、ANY。其中ALL和ANY不能单独使用，需要配合单行比较操作符&gt;、&gt;=、&lt;、&lt;= 一起使用。例如查询出部门中有SALESMAN但职位不是SALESMAN的员工的信息：12345678910SQL&gt; select ename,job,sal from emp 2 where deptno in 3 (select deptno from emp 4 where job = 'SALESMAN') 5 and job &lt;&gt; 'SALESMAN';ENAME JOB SAL---------- --------- ----------JAMES CLERK 950BLAKE MANAGER 2850由于子句select deptno from emp where job = &#39;SALESMAN&#39;查询结果为多行单列：123456789SQL&gt; select deptno from emp 2 where job = 'SALESMAN'; DEPTNO---------- 30 30 30 30所以不能用=，而用IN。查看所有比SALESMAN和CLERK职位工资都要高的员工信息：12345678910111213SQL&gt; select ename,job,sal from emp 2 where sal &gt; all( 3 select sal from emp 4 where job in('SALESMAN','CLERK'));ENAME JOB SAL---------- --------- ----------CLARK MANAGER 2450BLAKE MANAGER 2850JONES MANAGER 2975SCOTT ANALYST 3000FORD ANALYST 3000KING PRESIDENT 5000EXISTS关键字:用在过滤条件中，该关键字后面跟一个子查询只要子查询能查询至少一条数据，EXISTS就返回TRUE。例如列出那些有员工的部门信息：123456789SQL&gt; select d.deptno,d.dname from dept d 2 where exists(select 1 from 3 emp e where e.deptno = d.deptno); DEPTNO DNAME---------- -------------- 10 ACCOUNTING 20 RESEARCH 30 SALES2、子查询在HAVING部分子查询不仅可以出现在WHERE子句中，还可以出现在HAVING部分。例如查询列出最低薪水高于30号部门的最低薪水的部门信息：123456789SQL&gt; select deptno,min(sal) from emp 2 group by deptno having min(sal) &gt; 3 (select min(sal) from emp 4 where deptno = 30); DEPTNO MIN(SAL)---------- ---------- 50 3000 10 13003、子查询在FROM部分在查询语句中，FROM子句用来指定要查询的表。如果要在一个子查询的结果中继续查询，则子查询出现在FROM 子句中，这个子查询也称作行内视图或者匿名视图。这时，把子查询当作视图对待，但视图没有名字，只能在当前的SQL语句中有效。查询出薪水比本部门平均薪水高的员工信息：12345678910111213SQL&gt; select e.ename,e.job,e.sal from emp e, 2 (select deptno,avg(sal) avg_sal from emp group by deptno) d 3 where e.deptno = d.deptno 4 and e.sal &gt; d.avg_sal 5 order by e.deptno;ENAME JOB SAL---------- --------- ----------KING PRESIDENT 5000JONES MANAGER 2975FORD ANALYST 3000ALLEN SALESMAN 1600BLAKE MANAGER 28504、子查询在SELECT部分把子查询放在SELECT子句部分，可以认为是外连接的另一种表现形式，使用更灵活：123456789101112131415161718192021SQL&gt; select e.ename,e.job,e.sal, 2 (select d.deptno from dept d 3 where d.deptno = e.deptno) deptno 4 from emp e;ENAME JOB SAL DEPTNO---------- --------- ---------- ----------SMITH CLERK 800 20ALLEN SALESMAN 1600 30WARD SALESMAN 1250 30JONES MANAGER 2975 20MARTIN SALESMAN 1250 30BLAKE MANAGER 2850 30CLARK MANAGER 2450 10SCOTT ANALYST 3000KING PRESIDENT 5000 10TURNER SALESMAN 1500 30ADAMS CLERK 1100 20JAMES CLERK 950 30FORD ANALYST 3000 20MILLER CLERK 1300 10可以看出，即使不满足where条件的SCOTT也被列出来了，所以，相当于外连接。5、DDL中使用子查询：创建表可以将一个查询的结果集创建为一张表。创建一个10号部门员工信息表 ：1234567891011121314SQL&gt; create table emp_10 2 as 3 select * from emp 4 where deptno = 10;表已创建。SQL&gt; select * from emp_10; EMPNO ENAME JOB MGR HIREDATE SAL COMM DEPTNO---------- ---------- --------- ---------- -------------- ---------- ---------- ---------- 7782 CLARK MANAGER 7839 09-6月 -81 2450 10 7839 KING PRESIDENT 17-11月-81 5000 10 7934 MILLER CLERK 7782 23-1月 -82 1300 10分页查询分页是将查询的结果集分批显示目的视为了解决时间，性能，资源消耗，和用户需求。当查询结果集条目数非常多时。通常会使用分页。分页在标准SQL中没有定义，所以不同的数据库管理系统对于分页的语句也是不一样的。ROWNUM：ROWNUM被称作伪列，用于返回标识行数据顺序的数字。该关键字不是所有数据库都有的。ROWNUM在SELECT被当作一个字段去使用，他不是表中真实的字段，当我们从表中查询出一条数据后，该字段就会为这一条记录编一个行号，从1开始，自动递增。ROWNUM默认值为1。在使用ROWNUM对结果集进行编号时不要使用ROWNUM做&gt;1以上的数字的判断，否则该结果集将得不到任何记录。除非ROWNUM从1开始(包含1)。例如：1234567891011121314151617 ROWNUM ENAME JOB---------- ---------- --------- 1 SMITH CLERK 2 ALLEN SALESMAN 3 WARD SALESMAN 4 JONES MANAGER 5 MARTIN SALESMAN 6 BLAKE MANAGER 7 CLARK MANAGER 8 SCOTT ANALYST 9 KING PRESIDENT 10 TURNER SALESMAN 11 ADAMS CLERK 12 JAMES CLERK 13 FORD ANALYST 14 MILLER CLERKROWNUM只能从1计数，不能从结果集中直接截取。下面的查询语句将没有结果：1234SQL&gt; select rownum,ename,job from emp 2 where rownum between 6 and 10;未选定行注意区分下面语句，此处ROWNUM可以不从1开始，因为他已经生成一张表了：1234567891011SQL&gt; select * from 2 (select rownum rn,ename,job from emp) 3 where rn between 6 and 10; RN ENAME JOB---------- ---------- --------- 6 BLAKE MANAGER 7 CLARK MANAGER 8 SCOTT ANALYST 9 KING PRESIDENT 10 TURNER SALESMAN按照工资从高到低排序后，取6到10名：123456789101112SQL&gt; select * from 2 (select rownum rn,ename,job,sal from emp 3 order by sal desc) t 4 where t.rn between 6 and 10; RN ENAME JOB SAL---------- ---------- --------- ---------- 9 KING PRESIDENT 5000 8 SCOTT ANALYST 3000 6 BLAKE MANAGER 2850 7 CLARK MANAGER 2450 10 TURNER SALESMAN 1500上面的写法是先编号后排序的，所以上面这种写法得出的序号是不对的。而应该先排序再编号，再根据编号取范围（嵌套两层，先排序，排序结果再编号）：123456789101112SQL&gt; select * from 2 (select rownum rn,ename,job,sal from 3 (select * from emp order by sal desc)) t 4 where t.rn between 6 and 10; RN ENAME JOB SAL---------- ---------- --------- ---------- 6 CLARK MANAGER 2450 7 ALLEN SALESMAN 1600 8 TURNER SALESMAN 1500 9 MILLER CLERK 1300 10 WARD SALESMAN 1250排序函数可以根据指定的字段进行分组，再根据指定的字段排序后生成一个组内编号。1、ROW_NUMBER：生成组内连续且唯一的数字查看公司每个部门的工资排名，按照部门分组，按照工资降序排列生成编号：123456789101112131415161718192021SQL&gt; select ename,deptno,sal, 2 row_number() over( 3 partition by deptno 4 order by sal desc) rank from emp;ENAME DEPTNO SAL RANK---------- ---------- ---------- ----------KING 10 5000 1CLARK 10 2450 2MILLER 10 1300 3FORD 20 3000 1JONES 20 2975 2ADAMS 20 1100 3SMITH 20 800 4BLAKE 30 2850 1ALLEN 30 1600 2TURNER 30 1500 3WARD 30 1250 4MARTIN 30 1250 5JAMES 30 950 6SCOTT 50 3000 12、RANK函数：生成不连续不唯一的数字排序字段相同的记录，得到的数字一样后续内容会根据重复的行数自动跳号。比如：123456789101112131415161718192021SQL&gt; select ename,deptno,sal, 2 rank() over( 3 partition by deptno 4 order by sal desc) rank from emp;ENAME DEPTNO SAL RANK---------- ---------- ---------- ----------KING 10 5000 1CLARK 10 2450 2MILLER 10 1300 3FORD 20 3000 1JONES 20 2975 2ADAMS 20 1100 3SMITH 20 800 4BLAKE 30 2850 1ALLEN 30 1600 2TURNER 30 1500 3WARD 30 1250 4MARTIN 30 1250 4JAMES 30 950 6SCOTT 50 3000 13、DENSE_RANK()：函数生成连续但不唯一的数字：123456789101112131415161718192021SQL&gt; select ename,deptno,sal, 2 dense_rank() over( 3 partition by deptno 4 order by sal desc) rank from emp;ENAME DEPTNO SAL RANK---------- ---------- ---------- ----------KING 10 5000 1CLARK 10 2450 2MILLER 10 1300 3FORD 20 3000 1JONES 20 2975 2ADAMS 20 1100 3SMITH 20 800 4BLAKE 30 2850 1ALLEN 30 1600 2TURNER 30 1500 3WARD 30 1250 4MARTIN 30 1250 4JAMES 30 950 5SCOTT 50 3000 1高级分组函数集合操作1、UNION和UNION ALL用来获取两个或两个以上结果集的并集（结果集的列必须一一对应）：UNION操作符会自动去掉合并后的重复记录。UNION ALL返回两个结果集中的所有行，包括重复的行。UNION操作符对查询结果排序，UNION ALL不排序。合并职位是’MANAGER’的员工和薪水大于2500的员工集合，查看两种方式的结果差别：UNION：1234567891011121314SQL&gt; select ename,job,sal from emp 2 where job = 'MANAGER' 3 UNION 4 select ename,job,sal from emp 5 where sal &gt; 2500;ENAME JOB SAL---------- --------- ----------BLAKE MANAGER 2850CLARK MANAGER 2450FORD ANALYST 3000JONES MANAGER 2975KING PRESIDENT 5000SCOTT ANALYST 3000UNION ALL：12345678910111213141516SQL&gt; select ename,job,sal from emp 2 where job = 'MANAGER' 3 UNION ALL 4 select ename,job,sal from emp 5 where sal &gt; 2500;ENAME JOB SAL---------- --------- ----------JONES MANAGER 2975BLAKE MANAGER 2850CLARK MANAGER 2450JONES MANAGER 2975BLAKE MANAGER 2850SCOTT ANALYST 3000KING PRESIDENT 5000FORD ANALYST 30002、INTERSECT（[ˌɪntəˈsekt]，相交）INTERSECT函数获得两个结果集的交集，只有同时存在于两个结果集中的数据，才被显示输出。使用INTERSECT操作符后的结果集会以第一列的数据作升序排列。12345678910SQL&gt; select ename,job,sal from emp 2 where job = 'MANAGER' 3 INTERSECT 4 select ename,job,sal from emp 5 where sal &gt; 2500;ENAME JOB SAL---------- --------- ----------BLAKE MANAGER 2850JONES MANAGER 29753、MINUS（英[ˈmaɪnəs]，减去）MINUS函数获取两个结果集的差集。只有在第一个结果集中存在，在第二个结果集中不存在的数据，才能够被显示出来。也就是结果集一减去结果集二的结果。123456789SQL&gt; select ename,job,sal from emp 2 where job = 'MANAGER' 3 MINUS 4 select ename,job,sal from emp 5 where sal &gt; 2500;ENAME JOB SAL---------- --------- ----------CLARK MANAGER 2450视图视图(VIEW)也被称作虚表，即虚拟的表，是一组数据的逻辑表示，其本质是对应于一条SELECT语句，结果集被赋予一个名字，即视图名字。视图本身并不包含任何数据，它只包含映射到基表的一个查询语句，当基表数据发生变化，视图数据也随之变化。作用：1、重用子查询。SELECT语句中的FROM子句中，我们常会使用一个子查询，然后将结果当作表再进行查询工作，若很多SELECT语句中都要用到该子查询，就可以将这个子查询定义为一个试图进行重用，这样也可以简化SQL语句的复杂度。2、限制数据访问，可以隐藏真实的表中字段信息，表的名字，字段的名字，这样可以避免访问敏感信息等。根据视图所对应的子查询种类分为几种类型：SELECT语句是基于单表建立的，且不包含任何函数运算、表达式或分组函数，叫做简单视图，此时视图是基表的子集；SELECT语句同样是基于单表，但包含了单行函数、表达式、分组函数或GROUP BY子句，叫做复杂视图；SELECT语句是基于多个表的，叫做连接视图。创建一个简单视图V_EMP_10，来显示部门10中的员工的编码、姓名和薪水：12345678910111213SQL&gt; create view v_emp_10 2 as 3 select empno,ename,sal 4 from emp where deptno = 10;视图已创建。SQL&gt; desc v_emp_10; 名称 是否为空? 类型 ----------------------------------------- -------- ---------------------------- EMPNO NOT NULL NUMBER(4) ENAME VARCHAR2(10) SAL NUMBER(7,2)修改视图由于视图自身没有结构，完全取决于对应的查询语句，所以修改视图就是替换对应的查询语句。1234567891011121314SQL&gt; create or replace view v_emp_10 2 as 3 select empno,ename name,sal salary,deptno 4 from emp where deptno = 20;视图已创建。SQL&gt; desc v_emp_10; 名称 是否为空? 类型 ----------------------------------------- -------- ---------------------------- EMPNO NOT NULL NUMBER(4) NAME VARCHAR2(10) SALARY NUMBER(7,2) DEPTNO NUMBER(2) NUMBER(2)对视图进行DML操作就是对视图数据来源的基表进行操作。只能对简单试图进行DML操作，复杂视图不允许DML操作，即视图定义中包含了函数、表达式、分组语句、DISTINCT关键字或ROWNUM伪列，不允许执行DML操作。由于视图只能看到emp表中的三个字段，所以就算向视图中所有字段插入值，那么实际插入emp表中时，除了这几个字段外，其他视图看不见的字段全部插入字段默认值NULL。123456789 SQL&gt; insert into v_emp_10 values(7935,'KangKang',4500,20);已创建 1 行。SQL&gt; select * from emp where ename = 'KangKang'; EMPNO ENAME JOB MGR HIREDATE SAL COMM DEPTNO---------- ---------- --------- ---------- -------------- ---------- ---------- ---------- 7935 KangKang 4500 20下面这条语句，通过视图插入到EMP表中，但是因为部门号是10，而不是视图中的20，所以视图看不见，无法再对这个对象进行修改，这就对基表数据产生了污染，修改视图数据同样可能存在将视图数据修改后，导致视图无法再查看到它们。12345678910111213SQL&gt; insert into v_emp_10 values(7936,'Jane',4000,10);已创建 1 行。SQL&gt; select * from v_emp_10; EMPNO NAME SALARY DEPTNO---------- ---------- ---------- ---------- 7935 KangKang 4500 20 7369 SMITH 800 20 7566 JONES 2975 20 7876 ADAMS 1100 20 7902 FORD 3000 20创建具有CHECK OPTION约束的视图可以为视图添加CHECK OPTION选项，这样对视图进行DML操作时，视图会检查操作完毕后对该记录是否可见，可见不允许操作。12345678910111213SQL&gt; create or replace view v_emp_10 2 as 3 select empno,ename name,sal salary,deptno 4 from emp where deptno = 20 5 with check option;视图已创建。SQL&gt; insert into v_emp_10 values(7937,'Maria',3000,10);insert into v_emp_10 values(7937,'Maria',3000,10) *第 1 行出现错误:ORA-01402: 视图 WITH CHECK OPTION where 子句违规创建具有READ ONLY约束的视图当视图被设置为READ ONLY后，不允许对该视图进行DML操作，其为只读的。12345678910111213SQL&gt; create or replace view v_emp_10 2 as 3 select empno,ename name,sal salary,deptno 4 from emp where deptno = 20 5 with read only;视图已创建。SQL&gt; insert into v_emp_10 values(7937,'Maria',3000,20);insert into v_emp_10 values(7937,'Maria',3000,20)*第 1 行出现错误:ORA-42399: 无法对只读视图执行 DML 操作复杂视图对应的SELECT语句中含有函数，表达式，分组，连接查询。创建一个显示每个部门薪水情况的视图：1234567891011121314151617181920SQL&gt; create view v_emp_sal 2 as 3 select d.deptno,d.dname, 4 avg(e.sal) avg_sal, 5 sum(e.sal) sum_sal, 6 max(e.sal) max_sal, 7 min(e.sal) min_sal 8 from emp e,dept d 9 where e.deptno = d.deptno 10 group by d.deptno,d.dname;视图已创建。SQL&gt; select * from v_emp_sal; DEPTNO DNAME AVG_SAL SUM_SAL MAX_SAL MIN_SAL---------- -------------- ---------- ---------- ---------- ---------- 10 ACCOUNTING 3187.5 12750 5000 1300 20 RESEARCH 2475 12375 4500 800 30 SALES 1566.66667 9400 2850 950复杂视图不能进行DML操作。当不再需要视图的定义，可以使用DROP VIEW语句删除视图：123SQL&gt; drop view v_emp_10;视图已删除。序列序列是一个数据库对象作用是根据指定的规则生成一组数字，每次返回一个数字。常用于为表中的主键提供值。主键：通常每张表的第一个字段就是主键，主键字段的值要求在整张表中不能为空，且值不能重复。目的是用于唯一标识每一个记录。创建一个序列，起始数据是100，步进是1：12345SQL&gt; create sequence emp_seq 2 start with 100 3 increment by 1;序列已创建。序列有两个伪列NEXTVAL：使序列生成一个数字，第一次使用时，返回的是START WITH指定的值。需要注意，序列不可逆，一旦获取下一个数字后，就不能得到上一个数字了。CURRVAL：获取序列最后一次生成的数字，可以调用多次，不会造成序列生成下一个数字。CURRVAL必须要在序列创建完毕后，至少调用过一侧NEXTVAL输出生成一个数字后才可以使用。测试让序列生成一个数字：1234567891011SQL&gt; select emp_seq.nextval from dual; NEXTVAL---------- 100SQL&gt; select emp_seq.nextval from dual; NEXTVAL---------- 101每运行一次，数字增加10。获取序列最后生成的数字：12345SQL&gt; select emp_seq.currval from dual; CURRVAL---------- 101删除序列的语法如下：123SQL&gt; drop sequence emp_seq;序列已删除。索引索引也是数据库对象，用来提高检索效率，排序效率有效的使用会带来很好的效果。数据库管理系统自行维护索引的算法，我们只需要指定何时为某表的某字段添加即可。为emp表的ENAME字段添加索引：123SQL&gt; create index idx_emp_ename on emp(ename);索引已创建。复合索引也叫多列索引，是基于多个列的索引。如果经常在ORDER BY子句中使用job和sal作为排序依据，可以建立复合索引：123SQL&gt; create index idx_emp_jobsal on emp(job,sal);索引已创建。当做下面的查询时，会自动应用索引idx_emp_jobsal：12SQL&gt; select empno,ename,job,sal from emp 2 order by job,sal;删除索引：123SQL&gt; drop index idx_emp_jobsal;索引已删除。合理使用索引提升查询效率：为经常出现在WHERE子句中的列创建索引。为经常出现在ORDER BY、DISTINCT后面的字段建立索引。如果建立的复合索引，索引的字段顺序要和这些关键字后面的字段顺序一致。为经常作为表的连接条件的列上创建索引。不要在经常做DML操作的表上建立索引。不要在小表上建立索引。限制表上的索引数目，索引并不是越多越好。删除很少被使用的、不合理的索引。约束约束的类型：非空约束(Not Null)，简称NN。唯一性约束(Unique)，简称UK。主键约束(Primary Key)，简称PK。外键约束(Foreign Key)，简称FK。检查约束(Check)，简称CK。非空约束建表时添加非空约束：123456789101112131415SQL&gt; create table employees( 2 eid number(6), 3 name varchar2(30) not null, 4 salary number(7,2), 5 hiredate date constraint employees_hiredate_nn not null);表已创建。SQL&gt; desc employees; 名称 是否为空? 类型 ----------------------------------------- -------- ---------------------------- EID NUMBER(6) NAME NOT NULL VARCHAR2(30) SALARY NUMBER(7,2) HIREDATE NOT NULL DATE取消非空约束：1234567891011 SQL&gt; alter table employees modify(hiredate date null);表已更改。SQL&gt; desc employees; 名称 是否为空? 类型 ----------------------------------------- -------- ---------------------------- EID NUMBER(6) NAME NOT NULL DATE SALARY NUMBER(7,2) HIREDATE DATE唯一性约束唯一性(Unique)约束条件用于保证字段或者字段的组合不出现重复值。当给表的某个列定义了唯一约束条件，该列的值不允许重复，但允许是NULL值。建表的时候添加唯一性约束：123456789SQL&gt; create table employees1( 2 eid number(6) unique, 3 name varchar2(30), 4 email varchar(50), 5 salary number(7,2), 6 hiredate date, 7 constraint employees1_email_uk unique(email));表已创建。主键约束主键(Primary Key)约束条件从功能上看相当于非空（NOT NULL）且唯一（UNIQUE）的组合。主键字段可以是单字段或多字段组合，即：在主键约束下的单字段或者多字段组合上不允许有空值，也不允许有重复值。主键可以用来在表中唯一的确定一行数据。一个表上只允许建立一个主键，而其它约束条件则没有明确的个数限制。主键选取的原则：主键应是对系统无意义的数据。永远也不要更新主键，让主键除了唯一标识一行之外，再无其他的用途。主键不应包含动态变化的数据，如时间戳。主键应自动生成，不要人为干预，以免使它带有除了唯一标识一行以外的意义。主键尽量建立在单列上。建表的时候添加主键约束：1234567891011121314151617SQL&gt; create table employees2( 2 eid number(6) primary key, 3 name varchar(30), 4 email varchar2(30), 5 salary number(7,2), 6 hiredate date);表已创建。SQL&gt; desc employees2; 名称 是否为空? 类型 ----------------------------------------- -------- ---------------------------- EID NOT NULL NUMBER(6) NAME VARCHAR2(30) EMAIL VARCHAR2(30) SALARY NUMBER(7,2) HIREDATE DATE建表后添加主键，首先创建一张没有主键的表：12345678 SQL&gt; create table employees3( 2 eid number(6), 3 name varchar2(30), 4 email varchar2(50), 5 salary number(7,2), 6 hiredate date);表已创建。再添加主键：1234SQL&gt; alter table employees3 2 add constraint emplpoyees3_eid_pk primary key(eid);表已更改。外键约束外键约束条件定义在两个表的字段或一个表的两个字段上，用于保证相关两个字段的关系。比如emp表的deptno列参照dept表的deptno列，则dept称作主表或父表，emp表称作从表或子表。12345678910111213SQL&gt; create table employees4( 2 eid number(6), 3 name varchar2(30), 4 salary number(7,2), 5 deptno number(4));表已创建。SQL&gt; alter table employees4 2 add constraint employees4_deptno_fk 3 foreign key(deptno) references dept(deptno);表已更改。检查约束检查(Check)约束条件用来强制在字段上的每个值都要满足Check中定义的条件。当定义了Check约束的列新增或修改数据时，数据必须符合Check约束中定义的条件。员工的薪水必须大于2000元，增加检查约束：12345SQL&gt; alter table employees4 2 add constraint employees4_salary_check 3 check (salary &gt; 2000);表已更改。]]></content>
      <tags>
        <tag>DataBase</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Servlet Jsp note]]></title>
    <url>%2Fblog%2FServlet-Jsp-note.html</url>
    <content type="text"><![CDATA[什么是Servletsun(oracle)公司制订的一种用来扩展web服务器功能的组件规范。使用Myeclipse创建一个web project，编写一个简单的servlet：src→com.postar.servlet（package）→HiServlet：12345678910public class HiServlet extends HttpServlet&#123; @Override protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException &#123; res.setContentType("text/html"); PrintWriter pw = res.getWriter(); pw.write("&lt;h1 style='color:#42b983'&gt;hello world&lt;/h1&gt;"); pw.close(); &#125;&#125;配置文件WebRoot→WEB-INF→web.xml下添加：12345678910111213141516171819&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"&gt; &lt;display-name&gt;&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;servlet&gt; &lt;servlet-name&gt;hi&lt;/servlet-name&gt; &lt;servlet-class&gt;com.postar.servlet.HiServlet&lt;/servlet-class&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;hi&lt;/servlet-name&gt; &lt;url-pattern&gt;/hi&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt;启动Tomcat，在浏览器中输入：http://localhost:8088/servlet/hi 得到页面：程序执行的过程：Servlet运行的原理原理图（执行过程）：具体过程描述：1.浏览器依据ip,port建立与容器之间的连接。2.浏览器将请求数据打包(包含了请求资源路径)。3.向容器（符合一定规范，提供组件的运行环境的一个程序。）发请求数据包。4.容器解析请求数据包。5.将解析的结果封装到request对象上，同时，容器还要创建一个response对象。6.容器依据请求资源路径找到servlet的配置(web.xml)。7.8.然后创建该servlet对象，调用servlet对象的service方法(会将request对象,response对象作为参数)。在service方法里面，可以通过request对象获得请求数据并进行相应的处理，然后，处理结果只需要写到response对象上。9.容器从response对象上获取处理结果，然后打包。10.发送给浏览器。11.浏览器从响应数据包中取出处理结果，生成相应的页面。get请求和post请求最常用的两种方式get和post。get/post请求的区别：get请求如果需要向服务器传递少量数据用get。get请求使用URL传值，即数据会附着在URL上传递给服务器，如：只能传递较少的数据post请求如果需要提交表单，或者传递大量的数据用post。post请求使用请求数据包的实体内容来传值。可以传递大量数据。post请求隐私性更好，但是安全级别和get完全相等，不能说它更安全。通过F12都能查看到所有数据。解决get，psot请求中文乱码服务端Servlet代码：1234567891011121314151617181920212223242526272829303132333435public class RegistServlet extends HttpServlet&#123; @Override protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException &#123; // 解决post请求乱码 req.setCharacterEncoding("utf-8"); // 使用request接收请求数据 // 通过框体的name属性值来接收数据 String code = req.getParameter("code"); // 解决get请求乱码 // code = new String(code.getBytes("iso8859-1"), "utf-8"); String pwd = req.getParameter("pwd"); String sex = req.getParameter("sex"); // 值是个数组的时候使用request.getParameterValues() String[] favorites = req.getParameterValues("favorites"); System.out.println(code); System.out.println(pwd); System.out.println(sex); for(String f : favorites) &#123; System.out.println(f); &#125; //向浏览器输出一些提示信息 res.setContentType("text/html;charset=utf-8;"); PrintWriter w = res.getWriter(); if("admin".equals(code)) &#123; w.println("&lt;h1&gt;此账号已存在.&lt;/h1&gt;"); &#125; else &#123; w.println("&lt;h1&gt;注册成功.&lt;/h1&gt;"); &#125; w.close(); &#125;&#125;客户端html代码：123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="gbk" /&gt; &lt;title&gt;注册用户&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- 1.想要给服务器提交数据，需要使用表单。 2.传数据时，需要给框设置name属性，该属性将作为传递的数据的名字，服务端 需要通过此名字来获取数据。 3.表单传递的数据就是框体的value属性值。 3.1对于文本框、密码框，它的value属性值就是我们在框内输入的内容，因此不必额外设置； 3.2对于单选、复选、下拉选，需要明确设置value属性的值。 4.表单上需要通过action属性设置提交的路径，写出URI即可，不需要写出完整的URL。 通过method属性声明请求的类型。 --&gt; &lt;form action="/servlet/register" method="post"&gt; &lt;h1&gt;注册用户&lt;/h1&gt; &lt;p&gt;账号:&lt;input type="text" name="code" /&gt;&lt;/p&gt; &lt;p&gt;密码:&lt;input type="password" name="pwd" /&gt;&lt;/p&gt; &lt;p&gt;性别: &lt;input type="radio" name="sex" value="M" /&gt;男 &lt;input type="radio" name="sex" value="F" /&gt;女 &lt;/p&gt; &lt;p&gt; 兴趣: &lt;input type="checkbox" name="favorites" value="basketball" /&gt; 篮球 &lt;input type="checkbox" name="favorites" value="football" /&gt; 足球 &lt;input type="checkbox" name="favorites" value="pingpang" /&gt; 乒乓 &lt;input type="checkbox" name="favorites" value="running" /&gt; 跑步 &lt;/p&gt; &lt;p&gt; &lt;!-- submit是专门用于提交表单的按钮 --&gt; &lt;input type="submit" value="注册" /&gt; &lt;/p&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;配置xml：12345678&lt;servlet&gt; &lt;servlet-name&gt;regist&lt;/servlet-name&gt; &lt;servlet-class&gt;com.postar.servlet.RegistServlet&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;regist&lt;/servlet-name&gt; &lt;url-pattern&gt;/register&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;重定向服务器向浏览器发送一个302状态码及一个Location消息头（该消息头的值是一个地址，称之为重定向地址），浏览器收到后会立即向重定向地址发请求。如何重定向？1response.sendRedirect(String url);特点：重定向地址可以是任意的地址。重定向之后，浏览器地址栏的地址会变。转发一个web组件（servlet/jsp）将未完成的处理通过容器转交给另外一个web组件继续完成。常见的情况是：一个servlet获得数据之后（比如，通过调用dao），将这些数据转发给一个jsp，由这个jsp来展现这些数据（比如，以表格的方式来展现）。转发的原理图：转发的过程：1.先绑订数据到request对象：12// 变量名name，值objrequest.setAttribute(String name,Object obj);2.获得转发器：12// uri：转发的目的地，比如一个jsp文件。RequestDispatcher rd = request.getRequestDispatcher(String uri);3.转发：1rd.forward(request,response);转发的特点：转发之后，浏览器地址栏的地址不变。转发的目的地必须是同一个应用内部的某个地址。转发所涉及的各个web组件会共享同一个request对象和response对象。转发和重定向的区别转发所涉及的各个web组件会共享同一个request对象和response对象，而重定向不行。说明：当请求到达容器，容器会创建request对象和response对象，当响应发送完毕，容器会立即删除request对象和response对象。即request对象和response对象的生存时间是一次请求与响应期间。转发之后，浏览器地址栏的地址不变，重定向会变。转发的地址必须是同一个应用内部某个地址，而重定向没有这个限制。转发是一件事情未做完，调用另外一个组件继续做；而重定向是一件事情已经做完，再调用一个组件做另外一件事情。Servlet的生命周期Servlet容器如何创建Servlet对象、如何为Servlet对象分配、准备资源、如何调用对应的方法来处理请求以及如何销毁Servlet对象的整个过程即Servlet的生命周期。阶段一：实例化，容器调用servlet的构造器，创建一个servlet对象。容器在默认情况下，对于某个类型的servlet,只会创建一个实例。阶段二：初始化，容器在创建好servlet对象之后，会立即调用该对象的init方法。一般情况下，我们不用写init方法，因为GenericServlet已经提供了init方法的实现（将容器传递过来的ServletConfig对象保存来下，并且，提供了getServletConfig方法来获得ServletConfig对象）。阶段三：就绪，容器收到请求之后，调用servlet对象的service方法来处理请求。阶段四：销毁，容器依据自身的算法删除servlet对象，被删除的servlet对象会被垃圾回收机制回收。容器在删除servlet对象之前会调用该对象的destroy方法（只会执行一次）。可以override destroy方法来实现自已的处理逻辑。例子：123456789101112131415161718192021222324252627282930313233public class LifeServlet extends HttpServlet&#123; // 1.Tomcat会自动调用默认构造器创建Servlet public LifeServlet()&#123; System.out.println("创建LifeServlet"); &#125; // 2.Tomcat会自动为当前的Servlet创建一个ServletConfig，用来给它预置一些数据； // 3.Tomcat会自动调用init方法，来为此Servlet初始化一些数据； // 注意，ServletConfig中预置的数据，可以在init时使用，也可以在service时使用。 @Override public void init(ServletConfig config) throws ServletException &#123; System.out.println("初始化Servlet"); &#125; // 4.当请求传入时，Tomcat会自动调用该方法来处理本次请求。 @Override protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException &#123; System.out.println("调用service()"); res.setContentType("text/html"); PrintWriter w = res.getWriter(); w.println("&lt;h1&gt;LifeServlet&lt;/h1&gt;"); w.close(); &#125; // 5.Tomcat在关闭前，会自动调用该方法来销毁该Servlet。通常是将此Servlet所依赖的数据释放（=null）。 @Override public void destroy() &#123; // TODO Auto-generated method stub super.destroy(); &#125;&#125;生命周期相关的几个接口与类：ServletContextServlet上下文，WEB容器在启动时，它会为每个WEB应用程序都创建一个对应的ServletContext对象，它代表当前web应用，是一个全局的环境变量。该应用中的任何组件，在任何时候都可以访问到该对象，所以Servlet上下文具有唯一性。在一个web项目中写两个相同的Servlet：123456789101112131415161718192021222324252627public class FirstServlet extends HttpServlet&#123; @Override protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException &#123; //1.统计Servlet访问次数：获取ServletContext，它是Servlet公用的 //数据对象，在Tomcat启动时被Tomcat自动创建，在Tomcat关闭时被Tomcat自动销毁。 //它是单例的对象，一个项目内只有一份。 ServletContext ctx = getServletContext(); //尝试从此对象中读取count变量 Object count = ctx.getAttribute("count"); //判断变量是否存在 if(count == null) &#123; //变量不存在，本次访问是第1次， //初始化此变量并存入ServletContext。 ctx.setAttribute("count", 1); &#125; else &#123; //变量存在，本次访问不是第1次， //将变量+1，再次存入ServletContext。 ctx.setAttribute("count", new Integer(count.toString())+1); &#125; //2.将统计结果输出到浏览器上 res.setContentType("text/html;charset=utf-8;"); PrintWriter w = res.getWriter(); w.println("&lt;h1&gt;总流量是："+ctx.getAttribute("count")+"&lt;/h1&gt;"); w.close(); &#125;&#125;SecondServlet内容和FirstServlet一致。配置略。访问http://localhost:8080/servlet/first：访问http://localhost:8080/servlet/second：可见它们获取到的是同一个ServletContext，换句话说ServletContext只有一份。JSPJSP（Java Server Page）是Sun公司制定的一种服务器端动态页面技术的组件规范，以“.jsp”为后缀的文件中既包含HTML静态标记用于表现页面，也包含特殊的代码，用于生成动态内容。JSP作为简化Servlet开发的一种技术，实质上最终依然要转变为Servlet才可能运行，只不过这个转变过程由Servlet容器来完成。统一处理异常将系统异常将给容器来处理，在web.xml中配置异常处理页面：1234&lt;error-page&gt; &lt;exception-type&gt;javax.servlet.ServletException&lt;/exception-type&gt; &lt;location&gt;/error.jsp&lt;/location&gt;&lt;/error-page&gt;过滤器Filter编写过滤器遵循下列步骤：1.编写一个实现了Filter接口的类。2.实现Filter接口的三个方法，过滤逻辑在doFilter方法中实现。3.在Web程序中注册过滤器。4.把过滤器和Web应用一起打包部署。当有多个过滤器的时候，过滤的先后按照xml文件中mapping的先后顺序执行，具体过程如下图所示：上图展示了多个过滤器的执行流程，过滤器1的doFilter的code1 →过滤器2的doFilter的code1 →service()方法→过滤器2的doFilter的code2 →过滤器1的doFilter的code2 →返回给客户端。在这个动作的传递过程中一定要写chain.doFilter()。模拟一个登录的例子：123456789101112131415161718192021222324252627282930313233343536373839public class LoginFilter implements Filter&#123; private String[] paths; @Override public void destroy() &#123; &#125; @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123; HttpServletRequest req = (HttpServletRequest) request; HttpServletResponse res = (HttpServletResponse) response; String uri = req.getRequestURI(); for(String path : paths)&#123; if(uri.contains(path))&#123; chain.doFilter(req, res); return; &#125; &#125; //判断session中是否存在登录数据 HttpSession session = req.getSession(); //模拟一个叫admin的账号 String admin = (String) session.getAttribute("admin"); if(admin == null) &#123; //没有登录，强制跳转到登录页 res.sendRedirect(req.getContextPath() + "/login/toLogin.do"); &#125; else &#123; //已登录，继续执行 chain.doFilter(req, res); &#125; &#125; @Override public void init(FilterConfig filterConfig) throws ServletException &#123; String excludePath = filterConfig.getInitParameter("excludePath"); paths = excludePath.split(","); &#125;&#125;在web.xml中配置Filter：12345678910111213&lt;filter&gt; &lt;filter-name&gt;loginFilter&lt;/filter-name&gt; &lt;filter-class&gt;com.postar.servlet.LoginFilter&lt;/filter-class&gt; &lt;!-- 设置要排除过滤的路径 --&gt; &lt;init-param&gt; &lt;param-name&gt;excludePath&lt;/param-name&gt; &lt;param-value&gt;login/toLogin,login/login,login/createImage&lt;/param-value&gt; &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt; &lt;filter-name&gt;loginFilter&lt;/filter-name&gt; &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;&lt;/filter-mapping&gt;源码地址 https://git.coding.net/laizhipeng/Servlet.git]]></content>
      <tags>
        <tag>servlet&amp;jsp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java OOP2]]></title>
    <url>%2Fblog%2FJava-OOP2.html</url>
    <content type="text"><![CDATA[文章已加密，请输入密码 😛： 密码错误 😭 No content to display! ]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java OOP1]]></title>
    <url>%2Fblog%2FJava%20OOP1.html</url>
    <content type="text"><![CDATA[文章已加密，请输入密码 😛： 密码错误 😭 No content to display! ]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
