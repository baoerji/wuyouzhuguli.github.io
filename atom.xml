<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MrBird</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mrbird.cc/"/>
  <updated>2018-04-11T01:35:40.494Z</updated>
  <id>http://mrbird.cc/</id>
  
  <author>
    <name>MrBird</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot中编写单元测试</title>
    <link href="http://mrbird.cc/Spring-Boot%E4%B8%AD%E7%BC%96%E5%86%99%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html"/>
    <id>http://mrbird.cc/Spring-Boot中编写单元测试.html</id>
    <published>2018-03-10T07:11:57.000Z</published>
    <updated>2018-04-11T01:35:40.494Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --><p>编写单元测试可以帮助开发人员编写高质量的代码，提升代码质量，减少Bug，便于重构。Spring Boot提供了一些实用程序和注解，用来帮助我们测试应用程序，在Spring Boot中开启单元测试只需引入<code>spring-boot-starter-test</code>即可，其包含了一些主流的测试库。本文主要介绍基于 Service和Controller的单元测试。<a id="more"></a></p><p>引入<code>spring-boot-starter-test</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>运行Maven命令<code>dependency:tree</code>可看到其包含了以下依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[INFO] +- org.springframework.boot:spring-boot-starter-test:jar:1.5.9.RELEASE:test</div><div class="line">[INFO] |  +- org.springframework.boot:spring-boot-test:jar:1.5.9.RELEASE:test</div><div class="line">[INFO] |  +- org.springframework.boot:spring-boot-test-autoconfigure:jar:1.5.9.RELEASE:test</div><div class="line">[INFO] |  +- com.jayway.jsonpath:json-path:jar:2.2.0:test</div><div class="line">[INFO] |  |  +- net.minidev:json-smart:jar:2.2.1:test</div><div class="line">[INFO] |  |  |  \- net.minidev:accessors-smart:jar:1.1:test</div><div class="line">[INFO] |  |  |     \- org.ow2.asm:asm:jar:5.0.3:test</div><div class="line">[INFO] |  |  \- org.slf4j:slf4j-api:jar:1.7.25:compile</div><div class="line">[INFO] |  +- junit:junit:jar:4.12:test</div><div class="line">[INFO] |  +- org.assertj:assertj-core:jar:2.6.0:test</div><div class="line">[INFO] |  +- org.mockito:mockito-core:jar:1.10.19:test</div><div class="line">[INFO] |  |  \- org.objenesis:objenesis:jar:2.1:test</div><div class="line">[INFO] |  +- org.hamcrest:hamcrest-core:jar:1.3:test</div><div class="line">[INFO] |  +- org.hamcrest:hamcrest-library:jar:1.3:test</div><div class="line">[INFO] |  +- org.skyscreamer:jsonassert:jar:1.4.0:test</div><div class="line">[INFO] |  |  \- com.vaadin.external.google:android-json:jar:0.0.20131108.vaadin1:test</div><div class="line">[INFO] |  +- org.springframework:spring-core:jar:4.3.13.RELEASE:compile</div><div class="line">[INFO] |  \- org.springframework:spring-test:jar:4.3.13.RELEASE:test</div></pre></td></tr></table></figure><p></p><ul><li><p>JUnit，标准的单元测试Java应用程序；</p></li><li><p>Spring Test &amp; Spring Boot Test，对Spring Boot应用程序的单元测试提供支持；</p></li><li><p>Mockito, Java mocking框架，用于模拟任何Spring管理的Bean，比如在单元测试中模拟一个第三方系统Service接口返回的数据，而不会去真正调用第三方系统；</p></li><li><p>AssertJ，一个流畅的assertion库，同时也提供了更多的期望值与测试返回值的比较方式；</p></li><li><p>Hamcrest，库的匹配对象（也称为约束或谓词）；</p></li><li><p>JsonPath，提供类似XPath那样的符号来获取JSON数据片段；</p></li><li><p>JSONassert，对JSON对象或者JSON字符串断言的库。</p></li></ul><p>一个标准的Spring Boot测试单元应有如下的代码结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</div><div class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</div><div class="line"></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTest</span> </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h2><h3 id="JUnit4注解"><a href="#JUnit4注解" class="headerlink" title="JUnit4注解"></a>JUnit4注解</h3><p>JUnit4中包含了几个比较重要的注解：<code>@BeforeClass</code>、<code>@AfterClass</code>、<code>@Before</code>、<code>@After</code>和<code>@Test</code>。其中， <code>@BeforeClass</code>和<code>@AfterClass</code>在每个类加载的开始和结束时运行，必须为静态方法；而<code>@Before</code>和<code>@After</code>则在每个测试方法开始之前和结束之后运行。见如下例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestApplicationTests</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@BeforeClass</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClassTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"before class test"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"before test"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"test 1+1=2"</span>);</div><div class="line">        Assert.assertEquals(<span class="number">2</span>, <span class="number">1</span> + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"test 2+2=4"</span>);</div><div class="line">        Assert.assertEquals(<span class="number">4</span>, <span class="number">2</span> + <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@After</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"after test"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@AfterClass</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterClassTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"after class test"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>运行输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">before class test</div><div class="line">before test</div><div class="line">test 1+1=2</div><div class="line">after test</div><div class="line">before test</div><div class="line">test 2+2=4</div><div class="line">after test</div><div class="line">after class test</div><div class="line">...</div></pre></td></tr></table></figure><p></p><p>从上面的输出可以看出各个注解的运行时机。</p><h3 id="Assert"><a href="#Assert" class="headerlink" title="Assert"></a>Assert</h3><p>上面代码中，我们使用了Assert类提供的assert口方法，下面列出了一些常用的assert方法：</p><ul><li><p><code>assertEquals(&quot;message&quot;,A,B)</code>，判断A对象和B对象是否相等，这个判断在比较两个对象时调用了<code>equals()</code>方法。</p></li><li><p><code>assertSame(&quot;message&quot;,A,B)</code>，判断A对象与B对象是否相同，使用的是<code>==</code>操作符。</p></li><li><p><code>assertTrue(&quot;message&quot;,A)</code>，判断A条件是否为真。</p></li><li><p><code>assertFalse(&quot;message&quot;,A)</code>，判断A条件是否不为真。</p></li><li><p><code>assertNotNull(&quot;message&quot;,A)</code>，判断A对象是否不为<code>null</code>。</p></li><li><p><code>assertArrayEquals(&quot;message&quot;,A,B)</code>，判断A数组与B数组是否相等。</p></li></ul><h3 id="MockMvc"><a href="#MockMvc" class="headerlink" title="MockMvc"></a>MockMvc</h3><p>下文中，对Controller的测试需要用到MockMvc技术。MockMvc，从字面上来看指的是模拟的MVC，即其可以模拟一个MVC环境，向Controller发送请求然后得到响应。</p><p>在单元测试中，使用MockMvc前需要进行初始化，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> WebApplicationContext wac;</div><div class="line"></div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupMockMvc</span><span class="params">()</span></span>&#123;</div><div class="line">    mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p><strong>MockMvc模拟MVC请求</strong></p><p>模拟一个get请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello?name=&#123;name&#125;"</span>,<span class="string">"mrbird"</span>));</div></pre></td></tr></table></figure><p></p><p>模拟一个post请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/user/&#123;id&#125;"</span>, <span class="number">1</span>));</div></pre></td></tr></table></figure><p></p><p>模拟文件上传：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.fileUpload(<span class="string">"/fileupload"</span>).file(<span class="string">"file"</span>, <span class="string">"文件内容"</span>.getBytes(<span class="string">"utf-8"</span>)));</div></pre></td></tr></table></figure><p></p><p>模拟请求参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 模拟发送一个message参数，值为hello</span></div><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hello"</span>).param(<span class="string">"message"</span>, <span class="string">"hello"</span>));</div><div class="line"><span class="comment">// 模拟提交一个checkbox值，name为hobby，值为sleep和eat</span></div><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/saveHobby"</span>).param(<span class="string">"hobby"</span>, <span class="string">"sleep"</span>, <span class="string">"eat"</span>));</div></pre></td></tr></table></figure><p></p><p>也可以直接使用<code>MultiValueMap</code>构建参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MultiValueMap&lt;String, String&gt; params = <span class="keyword">new</span> LinkedMultiValueMap&lt;String, String&gt;();</div><div class="line">params.add(<span class="string">"name"</span>, <span class="string">"mrbird"</span>);</div><div class="line">params.add(<span class="string">"hobby"</span>, <span class="string">"sleep"</span>);</div><div class="line">params.add(<span class="string">"hobby"</span>, <span class="string">"eat"</span>);</div><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/hobby/save"</span>).params(params));</div></pre></td></tr></table></figure><p></p><p>模拟发送JSON参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String jsonStr = <span class="string">"&#123;\"username\":\"Dopa\",\"passwd\":\"ac3af72d9f95161a502fd326865c2f15\",\"status\":\"1\"&#125;"</span>;</div><div class="line">mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/user/save"</span>).content(jsonStr.getBytes()));</div></pre></td></tr></table></figure><p></p><p>实际测试中，要手动编写这么长的JSON格式字符串很繁琐也很容易出错，可以借助Spring Boot自带的Jackson技术来序列化一个Java对象（可参考<a href="/Spring-Boot中的JSON技术.html">Spring Boot中的JSON技术</a>），如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">User user = <span class="keyword">new</span> User();</div><div class="line">user.setUsername(<span class="string">"Dopa"</span>);</div><div class="line">user.setPasswd(<span class="string">"ac3af72d9f95161a502fd326865c2f15"</span>);</div><div class="line">user.setStatus(<span class="string">"1"</span>);</div><div class="line"></div><div class="line">String userJson = mapper.writeValueAsString(user);</div><div class="line">mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/user/save"</span>).content(userJson.getBytes()));</div></pre></td></tr></table></figure><p></p><p>其中，mapper为<code>com.fasterxml.jackson.databind.ObjectMapper</code>对象。</p><p>模拟Session和Cookie：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/index"</span>).sessionAttr(name, value));</div><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/index"</span>).cookie(<span class="keyword">new</span> Cookie(name, value)));</div></pre></td></tr></table></figure><p></p><p>设置请求的Content-Type：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/index"</span>).contentType(MediaType.APPLICATION_JSON_UTF8));</div></pre></td></tr></table></figure><p></p><p>设置返回格式为JSON：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/user/&#123;id&#125;"</span>, <span class="number">1</span>).accept(MediaType.APPLICATION_JSON));</div></pre></td></tr></table></figure><p></p><p>模拟HTTP请求头：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/user/&#123;id&#125;"</span>, <span class="number">1</span>).header(name, values));</div></pre></td></tr></table></figure><p></p><p><strong>MockMvc处理返回结果</strong></p><p>期望成功调用，即HTTP Status为200：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/user/&#123;id&#125;"</span>, <span class="number">1</span>))</div><div class="line">    .andExpect(MockMvcResultMatchers.status().isOk());</div></pre></td></tr></table></figure><p></p><p>期望返回内容是<code>application/json</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/user/&#123;id&#125;"</span>, <span class="number">1</span>))</div><div class="line">    .andExpect(MockMvcResultMatchers.content().contentType(MediaType.APPLICATION_JSON));</div></pre></td></tr></table></figure><p></p><p>检查返回JSON数据中某个值的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/user/&#123;id&#125;"</span>, <span class="number">1</span>))</div><div class="line">    .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"$.username"</span>).value(<span class="string">"mrbird"</span>));</div></pre></td></tr></table></figure><p></p><p>这里使用到了<code>jsonPath</code>，<code>$</code>代表了JSON的根节点。更多关于<code>jsonPath</code>的介绍可参考 <a href="https://github.com/json-path/JsonPath" target="_blank" rel="external">https://github.com/json-path/JsonPath</a>。</p><p>判断Controller方法是否返回某视图：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/index"</span>))</div><div class="line">    .andExpect(MockMvcResultMatchers.view().name(<span class="string">"index.html"</span>));</div></pre></td></tr></table></figure><p></p><p>比较Model：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/user/&#123;id&#125;"</span>, <span class="number">1</span>))</div><div class="line">    .andExpect(MockMvcResultMatchers.model().size(<span class="number">1</span>))</div><div class="line">    .andExpect(MockMvcResultMatchers.model().attributeExists(<span class="string">"password"</span>))</div><div class="line">    .andExpect(MockMvcResultMatchers.model().attribute(<span class="string">"username"</span>, <span class="string">"mrbird"</span>));</div></pre></td></tr></table></figure><p></p><p>比较forward或者redirect：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/index"</span>))</div><div class="line">    .andExpect(MockMvcResultMatchers.forwardedUrl(<span class="string">"index.html"</span>));</div><div class="line"><span class="comment">// 或者</span></div><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/index"</span>))</div><div class="line">    .andExpect(MockMvcResultMatchers.redirectedUrl(<span class="string">"index.html"</span>));</div></pre></td></tr></table></figure><p></p><p>比较返回内容，使用<code>content()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 返回内容为hello</span></div><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/index"</span>))</div><div class="line">    .andExpect(MockMvcResultMatchers.content().string(<span class="string">"hello"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 返回内容是XML，并且与xmlCotent一样</span></div><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/index"</span>))</div><div class="line">    .andExpect(MockMvcResultMatchers.content().xml(xmlContent));</div><div class="line"></div><div class="line"><span class="comment">// 返回内容是JSON ，并且与jsonContent一样</span></div><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/index"</span>))</div><div class="line">    .andExpect(MockMvcResultMatchers.content().json(jsonContent));</div></pre></td></tr></table></figure><p></p><p>输出响应结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/index"</span>))</div><div class="line">    .andDo(MockMvcResultHandlers.print());</div></pre></td></tr></table></figure><p></p><h2 id="测试Service"><a href="#测试Service" class="headerlink" title="测试Service"></a>测试Service</h2><p>现有如下Service：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span>(<span class="string">"userService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        Example example = <span class="keyword">new</span> Example(User.class);</div><div class="line">        example.createCriteria().andCondition(<span class="string">"username="</span>, userName);</div><div class="line">        List&lt;User&gt; userList = <span class="keyword">this</span>.selectByExample(example);</div><div class="line">        <span class="keyword">if</span> (userList.size() != <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> userList.get(<span class="number">0</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>编写一个该Service的单元测试，测试<code>findByName</code>方法是否有效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    UserService userService;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">        User user = <span class="keyword">this</span>.userService.findByName(<span class="string">"scott"</span>);</div><div class="line">        Assert.assertEquals(<span class="string">"用户名为scott"</span>, <span class="string">"scott"</span>, user.getUsername());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>运行后，JUnit没有报错说明测试通过，即<code>UserService</code>的<code>findByName</code>方法可行。 <img src="img/QQ截图20180403172817.png" alt="QQ截图20180403172817.png"></p><p>此外，和在Controller中引用Service相比，在测试单元中对Service测试完毕后，数据能自动回滚，只需要在测试方法上加上<code>@Transactional</code>注解，比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    User user = <span class="keyword">new</span> User();</div><div class="line">    user.setId(<span class="keyword">this</span>.userService.getSequence(<span class="string">"seq_user"</span>));</div><div class="line">    user.setUsername(<span class="string">"JUnit"</span>);</div><div class="line">    user.setPasswd(<span class="string">"123456"</span>);</div><div class="line">    user.setStatus(<span class="string">"1"</span>);</div><div class="line">    user.setCreateTime(<span class="keyword">new</span> Date());</div><div class="line">    <span class="keyword">this</span>.userService.save(user);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>运行，测试通过，查看数据库发现数据并没有被插入，这样很好的避免了不必要的数据污染。</p><h2 id="测试Controller"><a href="#测试Controller" class="headerlink" title="测试Controller"></a>测试Controller</h2><p>现有如下Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    UserService userService;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user/&#123;userName&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserByName</span><span class="params">(@PathVariable(value = <span class="string">"userName"</span>)</span> String userName) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userService.findByName(userName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"user/save"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userService.saveUser(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>现在编写一个针对于该Controller<code>getUserByName(@PathVariable(value = &quot;userName&quot;) String userName)</code>方法的测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> WebApplicationContext wac;</div><div class="line">    </div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupMockMvc</span><span class="params">()</span></span>&#123;</div><div class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(</div><div class="line">            MockMvcRequestBuilders.get(<span class="string">"/user/&#123;userName&#125;"</span>, <span class="string">"scott"</span>)</div><div class="line">            .contentType(MediaType.APPLICATION_JSON_UTF8))</div><div class="line">        .andExpect(MockMvcResultMatchers.status().isOk())</div><div class="line">        .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"$.username"</span>).value(<span class="string">"scott"</span>))</div><div class="line">        .andDo(MockMvcResultHandlers.print());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>运行后，JUnit通过，控制台输出过程如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">MockHttpServletRequest:</div><div class="line">      HTTP Method = GET</div><div class="line">      Request URI = /user/scott</div><div class="line">       Parameters = &#123;&#125;</div><div class="line">          Headers = &#123;Content-Type=[application/json;charset=UTF-8]&#125;</div><div class="line"></div><div class="line">Handler:</div><div class="line">             Type = demo.springboot.test.controller.UserController</div><div class="line">           Method = public demo.springboot.test.domain.User demo.springboot.test.controller.UserController.getUserByName(java.lang.String)</div><div class="line"></div><div class="line">Async:</div><div class="line">    Async started = false</div><div class="line">     Async result = null</div><div class="line"></div><div class="line">Resolved Exception:</div><div class="line">             Type = null</div><div class="line"></div><div class="line">ModelAndView:</div><div class="line">        View name = null</div><div class="line">             View = null</div><div class="line">            Model = null</div><div class="line"></div><div class="line">FlashMap:</div><div class="line">       Attributes = null</div><div class="line"></div><div class="line">MockHttpServletResponse:</div><div class="line">           Status = 200</div><div class="line">    Error message = null</div><div class="line">          Headers = &#123;Content-Type=[application/json;charset=UTF-8]&#125;</div><div class="line">     Content type = application/json;charset=UTF-8</div><div class="line">             Body = &#123;&quot;id&quot;:23,&quot;username&quot;:&quot;scott&quot;,&quot;passwd&quot;:&quot;ac3af72d9f95161a502fd326865c2f15&quot;,&quot;createTime&quot;:1514535399000,&quot;status&quot;:&quot;1&quot;&#125;</div><div class="line">    Forwarded URL = null</div><div class="line">   Redirected URL = null</div><div class="line">          Cookies = []</div></pre></td></tr></table></figure><p></p><p>继续编写一个针对于该Controller<code>saveUser(@RequestBody User user)</code>方法的测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> WebApplicationContext wac;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ObjectMapper mapper;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupMockMvc</span><span class="params">()</span></span>&#123;</div><div class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setUsername(<span class="string">"Dopa"</span>);</div><div class="line">        user.setPasswd(<span class="string">"ac3af72d9f95161a502fd326865c2f15"</span>);</div><div class="line">        user.setStatus(<span class="string">"1"</span>);</div><div class="line">        </div><div class="line">        String userJson = mapper.writeValueAsString(user);</div><div class="line">        mockMvc.perform(</div><div class="line">            MockMvcRequestBuilders.post(<span class="string">"/user/save"</span>)</div><div class="line">            .contentType(MediaType.APPLICATION_JSON_UTF8)</div><div class="line">            .content(userJson.getBytes()))</div><div class="line">        .andExpect(MockMvcResultMatchers.status().isOk())</div><div class="line">        .andDo(MockMvcResultHandlers.print());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>运行过程如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">MockHttpServletRequest:</div><div class="line">      HTTP Method = POST</div><div class="line">      Request URI = /user/save</div><div class="line">       Parameters = &#123;&#125;</div><div class="line">          Headers = &#123;Content-Type=[application/json;charset=UTF-8]&#125;</div><div class="line"></div><div class="line">Handler:</div><div class="line">             Type = demo.springboot.test.controller.UserController</div><div class="line">           Method = public void demo.springboot.test.controller.UserController.saveUser(demo.springboot.test.domain.User)</div><div class="line"></div><div class="line">Async:</div><div class="line">    Async started = false</div><div class="line">     Async result = null</div><div class="line"></div><div class="line">Resolved Exception:</div><div class="line">             Type = null</div><div class="line"></div><div class="line">ModelAndView:</div><div class="line">        View name = null</div><div class="line">             View = null</div><div class="line">            Model = null</div><div class="line"></div><div class="line">FlashMap:</div><div class="line">       Attributes = null</div><div class="line"></div><div class="line">MockHttpServletResponse:</div><div class="line">           Status = 200</div><div class="line">    Error message = null</div><div class="line">          Headers = &#123;&#125;</div><div class="line">     Content type = null</div><div class="line">             Body = </div><div class="line">    Forwarded URL = null</div><div class="line">   Redirected URL = null</div><div class="line">          Cookies = []</div></pre></td></tr></table></figure><p></p><p>值得注意的是，在一个完整的系统中编写测试单元时，可能需要模拟一个登录用户信息Session，MockMvc也提供了解决方案，可在初始化的时候模拟一个HttpSession：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> MockMvc mockMvc;</div><div class="line"><span class="keyword">private</span> MockHttpSession session;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> WebApplicationContext wac;</div><div class="line"></div><div class="line"><span class="meta">@Before</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setupMockMvc</span><span class="params">()</span></span>&#123;</div><div class="line">    mockMvc = MockMvcBuilders.webAppContextSetup(wac).build();</div><div class="line">    session = <span class="keyword">new</span> MockHttpSession();</div><div class="line">    User user =<span class="keyword">new</span> User();</div><div class="line">    user.setUsername(<span class="string">"Dopa"</span>);</div><div class="line">    user.setPasswd(<span class="string">"ac3af72d9f95161a502fd326865c2f15"</span>);</div><div class="line">    session.setAttribute(<span class="string">"user"</span>, user); </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>源码链接：<a href="https://drive.google.com/open?id=1EbKno8OVXV_iPlggMgouhxmDJT3klrg_" target="_blank" rel="external">https://drive.google.com/open?id=1EbKno8OVXV<em>iPlggMgouhxmDJT3klrg</em></a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;编写单元测试可以帮助开发人员编写高质量的代码，提升代码质量，减少Bug，便于重构。Spring Boot提供了一些实用程序和注解，用来帮助我们测试应用程序，在Spring Boot中开启单元测试只需引入&lt;code&gt;spring-boot-starter-test&lt;/code&gt;即可，其包含了一些主流的测试库。本文主要介绍基于 Service和Controller的单元测试。
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot中的JSON技术</title>
    <link href="http://mrbird.cc/Spring-Boot%E4%B8%AD%E7%9A%84JSON%E6%8A%80%E6%9C%AF.html"/>
    <id>http://mrbird.cc/Spring-Boot中的JSON技术.html</id>
    <published>2018-03-05T01:43:56.000Z</published>
    <updated>2018-04-11T01:35:40.493Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --><p>平日里在项目中处理JSON一般用的都是阿里巴巴的Fastjson，后来发现使用Spring Boot内置的Jackson来完成JSON的序列化和反序列化操作也挺方便。Jackson不但可以完成简单的序列化和反序列化操作，也能实现复杂的个性化的序列化和反序列化操作。<a id="more"></a></p><h2 id="自定义ObjectMapper"><a href="#自定义ObjectMapper" class="headerlink" title="自定义ObjectMapper"></a>自定义ObjectMapper</h2><p>我们都知道，在Spring中使用<code>@ResponseBody</code>注解可以将方法返回的对象序列化成JSON，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"getuser"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">    User user = <span class="keyword">new</span> User();</div><div class="line">    user.setUserName(<span class="string">"mrbird"</span>);</div><div class="line">    user.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">    <span class="keyword">return</span> user;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>User类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6222176558369919436L</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="keyword">private</span> Date birthday;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"userName"</span>:<span class="string">"mrbird"</span>,<span class="attr">"age"</span>:<span class="number">0</span>,<span class="attr">"password"</span>:<span class="literal">null</span>,<span class="attr">"birthday"</span>:<span class="number">1522634892365</span>&#125;</div></pre></td></tr></table></figure><p></p><p>可看到时间默认以时间戳的形式输出，如果想要改变这个默认行为，我们可以自定义一个ObjectMapper来替代：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">getObjectMapper</span><span class="params">()</span></span>&#123;</div><div class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        mapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</div><div class="line">        <span class="keyword">return</span> mapper;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>上面配置获取了ObjectMapper对象，并且设置了时间格式。再次访问<code>getuser</code>，页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"userName"</span>:<span class="string">"mrbird"</span>,<span class="attr">"age"</span>:<span class="number">0</span>,<span class="attr">"password"</span>:<span class="literal">null</span>,<span class="attr">"birthday"</span>:<span class="string">"2018-04-02 10:14:24"</span>&#125;</div></pre></td></tr></table></figure><p></p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>Jackson通过使用mapper的<code>writeValueAsString</code>方法将Java对象序列化为JSON格式字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">ObjectMapper mapper;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"serialization"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">serialization</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setUserName(<span class="string">"mrbird"</span>);</div><div class="line">        user.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">        String str = mapper.writeValueAsString(user);</div><div class="line">        <span class="keyword">return</span> str;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>使用<code>@ResponseBody</code>注解可以使对象序列化为JSON格式字符串，除此之外，Jackson也提供了反序列化方法。</p><h3 id="树遍历"><a href="#树遍历" class="headerlink" title="树遍历"></a>树遍历</h3><p>当采用树遍历的方式时，JSON被读入到JsonNode对象中，可以像操作XML DOM那样读取JSON。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">ObjectMapper mapper;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"readjsonstring"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">readJsonString</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        String json = <span class="string">"&#123;\"name\":\"mrbird\",\"age\":26&#125;"</span>;</div><div class="line">        JsonNode node = <span class="keyword">this</span>.mapper.readTree(json);</div><div class="line">        String name = node.get(<span class="string">"name"</span>).asText();</div><div class="line">        <span class="keyword">int</span> age = node.get(<span class="string">"age"</span>).asInt();</div><div class="line">        <span class="keyword">return</span> name + <span class="string">" "</span> + age;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p><code>readTree</code>方法可以接受一个字符串或者字节数组、文件、InputStream等， 返回JsonNode作为根节点，你可以像操作XML DOM那样操作遍历JsonNode以获取数据。</p><p>解析多级JSON例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String json = <span class="string">"&#123;\"name\":\"mrbird\",\"hobby\":&#123;\"first\":\"sleep\",\"second\":\"eat\"&#125;&#125;"</span>;;</div><div class="line">JsonNode node = <span class="keyword">this</span>.mapper.readTree(json);</div><div class="line">JsonNode hobby = node.get(<span class="string">"hobby"</span>);</div><div class="line">String first = hobby.get(<span class="string">"first"</span>).asText();</div></pre></td></tr></table></figure><p></p><h3 id="绑定对象"><a href="#绑定对象" class="headerlink" title="绑定对象"></a>绑定对象</h3><p>我们也可以将Java对象和JSON数据进行绑定，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">ObjectMapper mapper;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"readjsonasobject"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">readJsonAsObject</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        String json = <span class="string">"&#123;\"name\":\"mrbird\",\"age\":26&#125;"</span>;</div><div class="line">        User user = mapper.readValue(json, User.class);</div><div class="line">        String name = user.getUserName();</div><div class="line">        <span class="keyword">int</span> age = user.getAge();</div><div class="line">        <span class="keyword">return</span> name + <span class="string">" "</span> + age;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="Jackson注解"><a href="#Jackson注解" class="headerlink" title="Jackson注解"></a>Jackson注解</h2><p>Jackson包含了一些实用的注解：</p><h3 id="JsonProperty"><a href="#JsonProperty" class="headerlink" title="@JsonProperty"></a>@JsonProperty</h3><p><code>@JsonProperty</code>，作用在属性上，用来为JSON Key指定一个别名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonProperty</span>(<span class="string">"bth"</span>)</div><div class="line"><span class="keyword">private</span> Date birthday;</div></pre></td></tr></table></figure><p></p><p>再次访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"userName"</span>:<span class="string">"mrbird"</span>,<span class="attr">"age"</span>:<span class="number">0</span>,<span class="attr">"password"</span>:<span class="literal">null</span>,<span class="attr">"bth"</span>:<span class="string">"2018-04-02 10:38:37"</span>&#125;</div></pre></td></tr></table></figure><p></p><p>key birthday已经被替换为了bth。</p><h3 id="Jsonlgnore"><a href="#Jsonlgnore" class="headerlink" title="@Jsonlgnore"></a>@Jsonlgnore</h3><p><code>@Jsonlgnore</code>，作用在属性上，用来忽略此属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonIgnore</span></div><div class="line"><span class="keyword">private</span> String password;</div></pre></td></tr></table></figure><p></p><p>再次访问<code>getuser</code>页面输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"userName"</span>:<span class="string">"mrbird"</span>,<span class="string">"age"</span>:<span class="number">0</span>,<span class="string">"bth"</span>:<span class="string">"2018-04-02 10:40:45"</span>&#125;</div></pre></td></tr></table></figure><p></p><p>password属性已被忽略。</p><h3 id="JsonIgnoreProperties"><a href="#JsonIgnoreProperties" class="headerlink" title="@JsonIgnoreProperties"></a>@JsonIgnoreProperties</h3><p><code>@JsonIgnoreProperties</code>，忽略一组属性，作用于类上，比如<code>JsonIgnoreProperties({ &quot;password&quot;, &quot;age&quot; })</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonIgnoreProperties</span>(&#123; <span class="string">"password"</span>, <span class="string">"age"</span> &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>再次访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"userName"</span>:<span class="string">"mrbird"</span>,<span class="attr">"bth"</span>:<span class="string">"2018-04-02 10:45:34"</span>&#125;</div></pre></td></tr></table></figure><p></p><h3 id="JsonFormat"><a href="#JsonFormat" class="headerlink" title="@JsonFormat"></a>@JsonFormat</h3><p><code>@JsonFormat</code>，用于日期格式化，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</div><div class="line"><span class="keyword">private</span> Date birthday;</div></pre></td></tr></table></figure><p></p><h3 id="JsonNaming"><a href="#JsonNaming" class="headerlink" title="@JsonNaming"></a>@JsonNaming</h3><p><code>@JsonNaming</code>，用于指定一个命名策略，作用于类或者属性上。Jackson自带了多种命名策略，你可以实现自己的命名策略，比如输出的key 由Java命名方式转为下面线命名方法 —— userName转化为user-name。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonNaming</span>(PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>再次访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"user_name"</span>:<span class="string">"mrbird"</span>,<span class="attr">"bth"</span>:<span class="string">"2018-04-02 10:52:12"</span>&#125;</div></pre></td></tr></table></figure><p></p><h3 id="JsonSerialize"><a href="#JsonSerialize" class="headerlink" title="@JsonSerialize"></a>@JsonSerialize</h3><p><code>@JsonSerialize</code>，指定一个实现类来自定义序列化。类必须实现<code>JsonSerializer</code>接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.pojo.User;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(User user, JsonGenerator generator, SerializerProvider provider)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, JsonProcessingException &#123;</div><div class="line">        generator.writeStartObject();</div><div class="line">        generator.writeStringField(<span class="string">"user-name"</span>, user.getUserName());</div><div class="line">        generator.writeEndObject();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>上面的代码中我们仅仅序列化userName属性，且输出的key是<code>user-name</code>。 使用注解<code>@JsonSerialize</code>来指定User对象的序列化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonSerialize</span>(using = UserSerializer.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>再次访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"user-name"</span>:<span class="string">"mrbird"</span>&#125;</div></pre></td></tr></table></figure><p></p><h3 id="JsonDeserialize"><a href="#JsonDeserialize" class="headerlink" title="@JsonDeserialize"></a>@JsonDeserialize</h3><p><code>@JsonDeserialize</code>，用户自定义反序列化，同<code>@JsonSerialize</code> ，类需要实现<code>JsonDeserializer</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.example.pojo.User;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonParser;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationContext;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonDeserializer;</div><div class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonNode;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">deserialize</span><span class="params">(JsonParser parser, DeserializationContext context)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, JsonProcessingException &#123;</div><div class="line">        JsonNode node = parser.getCodec().readTree(parser);</div><div class="line">        String userName = node.get(<span class="string">"user-name"</span>).asText();</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setUserName(userName);</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>使用注解<code>@JsonDeserialize</code>来指定User对象的序列化方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonDeserialize</span> (using = UserDeserializer.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">ObjectMapper mapper;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"readjsonasobject"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">readJsonAsObject</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        String json = <span class="string">"&#123;\"user-name\":\"mrbird\"&#125;"</span>;</div><div class="line">        User user = mapper.readValue(json, User.class);</div><div class="line">        String name = user.getUserName();</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>访问<code>readjsonasobject</code>，页面输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mrbird</div></pre></td></tr></table></figure><p></p><h3 id="JsonView"><a href="#JsonView" class="headerlink" title="@JsonView"></a>@JsonView</h3><p><code>@JsonView</code>，作用在类或者属性上，用来定义一个序列化组。 比如对于User对象，某些情况下只返回userName属性就行，而某些情况下需要返回全部属性。 因此User对象可以定义成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6222176558369919436L</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserNameView</span> </span>&#123;&#125;;</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AllUserFieldView</span> <span class="keyword">extends</span> <span class="title">UserNameView</span> </span>&#123;&#125;;</div><div class="line">    </div><div class="line">    <span class="meta">@JsonView</span>(UserNameView.class)</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    </div><div class="line">    <span class="meta">@JsonView</span>(AllUserFieldView.class)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    </div><div class="line">    <span class="meta">@JsonView</span>(AllUserFieldView.class)</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    </div><div class="line">    <span class="meta">@JsonView</span>(AllUserFieldView.class)</div><div class="line">    <span class="keyword">private</span> Date birthday;</div><div class="line">    ...	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>User定义了两个接口类，一个为<code>userNameView</code>，另外一个为<code>AllUserFieldView</code>继承了<code>userNameView</code>接口。这两个接口代表了两个序列化组的名称。属性userName使用了<code>@JsonView(UserNameView.class)</code>，而剩下属性使用了<code>@JsonView(AllUserFieldView.class)</code>。</p><p>Spring中Controller方法允许使用<code>@JsonView</code>指定一个组名，被序列化的对象只有在这个组的属性才会被序列化，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonView</span>(User.UserNameView.class)</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"getuser"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</div><div class="line">    User user = <span class="keyword">new</span> User();</div><div class="line">    user.setUserName(<span class="string">"mrbird"</span>);</div><div class="line">    user.setAge(<span class="number">26</span>);</div><div class="line">    user.setPassword(<span class="string">"123456"</span>);</div><div class="line">    user.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">    <span class="keyword">return</span> user;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>访问<code>getuser</code>页面输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"userName"</span>:<span class="string">"mrbird"</span>&#125;</div></pre></td></tr></table></figure><p></p><p>如果将<code>@JsonView(User.UserNameView.class)</code>替换为<code>@JsonView(User.AllUserFieldView.class)</code>，输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"userName"</span>:<span class="string">"mrbird"</span>,<span class="attr">"age"</span>:<span class="number">26</span>,<span class="attr">"password"</span>:<span class="string">"123456"</span>,<span class="attr">"birthday"</span>:<span class="string">"2018-04-02 11:24:00"</span>&#125;</div></pre></td></tr></table></figure><p></p><p>因为接口<code>AllUserFieldView</code>继承了接口<code>UserNameView</code>所以userName也会被输出。</p><h2 id="集合的反序列化"><a href="#集合的反序列化" class="headerlink" title="集合的反序列化"></a>集合的反序列化</h2><p>在Controller方法中，可以使用<code>＠RequestBody</code>将提交的JSON自动映射到方法参数上，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"updateuser"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(@RequestBody List&lt;User&gt; list)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> list.size();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>上面方法可以接受如下一个JSON请求，并自动映射到User对象上：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&#123;<span class="attr">"userName"</span>:<span class="string">"mrbird"</span>,<span class="attr">"age"</span>:<span class="number">26</span>&#125;,&#123;<span class="attr">"userName"</span>:<span class="string">"scott"</span>,<span class="attr">"age"</span>:<span class="number">27</span>&#125;]</div></pre></td></tr></table></figure><p></p><p>Spring Boot 能自动识别出List对象包含的是User类，因为在方法中定义的泛型的类型会被保留在字节码中，所以Spring Boot能识别List包含的泛型类型从而能正确反序列化。</p><p>有些情况下，集合对象并没有包含泛型定义，如下代码所示，反序列化并不能得到期望的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">ObjectMapper mapper;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"customize"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">customize</span><span class="params">()</span> <span class="keyword">throws</span> JsonParseException, JsonMappingException, IOException </span>&#123;</div><div class="line">    String jsonStr = <span class="string">"[&#123;\"userName\":\"mrbird\",\"age\":26&#125;,&#123;\"userName\":\"scott\",\"age\":27&#125;]"</span>;</div><div class="line">    List&lt;User&gt; list = mapper.readValue(jsonStr, List.class);</div><div class="line">    String msg = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span> (User user : list) &#123;</div><div class="line">        msg += user.getUserName();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> msg;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>访问<code>customize</code>，控制台抛出异常：</p><div class="note danger"><p><code>java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to com.example.pojo.User</code></p></div><p></p><p>这是因为在运行时刻，泛型己经被擦除了（不同于方法参数定义的泛型，不会被擦除）。为了提供泛型信息，Jackson提供了JavaType ，用来指明集合类型，将上述方法改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">ObjectMapper mapper;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"customize"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">customize</span><span class="params">()</span> <span class="keyword">throws</span> JsonParseException, JsonMappingException, IOException </span>&#123;</div><div class="line">    String jsonStr = <span class="string">"[&#123;\"userName\":\"mrbird\",\"age\":26&#125;,&#123;\"userName\":\"scott\",\"age\":27&#125;]"</span>;</div><div class="line">    JavaType type = mapper.getTypeFactory().constructParametricType(List.class, User.class);</div><div class="line">    List&lt;User&gt; list = mapper.readValue(jsonStr, type);</div><div class="line">    String msg = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span> (User user : list) &#123;</div><div class="line">        msg += user.getUserName();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> msg;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>访问<code>customize</code>，页面输出：<code>mrbirdscott</code>。</p><p>源码连接<a href="https://drive.google.com/open?id=1ZCZGD_wQKS0cOf7-aD6ABSZO9KgFshmK" target="_blank" rel="external">https://drive.google.com/open?id=1ZCZGD_wQKS0cOf7-aD6ABSZO9KgFshmK</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;平日里在项目中处理JSON一般用的都是阿里巴巴的Fastjson，后来发现使用Spring Boot内置的Jackson来完成JSON的序列化和反序列化操作也挺方便。Jackson不但可以完成简单的序列化和反序列化操作，也能实现复杂的个性化的序列化和反序列化操作。
    
    </summary>
    
    
      <category term="JSON" scheme="http://mrbird.cc/tags/JSON/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>使用Jsoup防御XSS攻击</title>
    <link href="http://mrbird.cc/%E4%BD%BF%E7%94%A8Jsoup%E9%98%B2%E5%BE%A1XSS%E6%94%BB%E5%87%BB.html"/>
    <id>http://mrbird.cc/使用Jsoup防御XSS攻击.html</id>
    <published>2018-03-03T02:11:43.000Z</published>
    <updated>2018-04-11T01:35:40.494Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:03 GMT+0800 (中国标准时间) --><p>跨站脚本攻击(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p><p>使用<a href="https://jsoup.org/" target="_blank" rel="external">Jsoup</a>可以有效的过滤不安全的代码。Jsoup使用白名单的机制来预防XSS攻击，比如白名单中规定只允许<code>&lt;span&gt;</code>标签的存在，那么其他标签都会被过滤掉。</p><a id="more"></a><h2 id="常见的XSS攻击"><a href="#常见的XSS攻击" class="headerlink" title="常见的XSS攻击"></a>常见的XSS攻击</h2><p>比如页面的某个表单允许用户输入任意内容，当某个调皮的用户输入如下内容： <img src="img/QQ截图20180329102901.png" alt="QQ截图20180329102901.png"></p><p>保存后，你会发现页面文字都变成了红色！</p><p><img src="img/QQ截图20180329102936.png" alt="QQ截图20180329102936.png"></p><p>或者输入<code>&lt;script&gt;for(var i=0;i&lt;10;i++){alert(&quot;fuck you&quot;);}&lt;/script&gt;</code>，保存后页面将弹窗10次！</p><h2 id="引入Jsoup"><a href="#引入Jsoup" class="headerlink" title="引入Jsoup"></a>引入Jsoup</h2><p>使用Maven构建一个简单的Spring Boot项目，在pom中引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jsoup<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsoup<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id="JsoupUtil"><a href="#JsoupUtil" class="headerlink" title="JsoupUtil"></a>JsoupUtil</h2><p>创建一个JsoupUtil工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</div><div class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</div><div class="line"><span class="keyword">import</span> org.jsoup.safety.Whitelist;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Xss过滤工具</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupUtil</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Whitelist whitelist = Whitelist.basicWithImages();</div><div class="line">    <span class="comment">/*</span></div><div class="line">    * 配置过滤化参数,不对代码进行格式化</div><div class="line">    */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Document.OutputSettings outputSettings = <span class="keyword">new</span> Document.OutputSettings().prettyPrint(<span class="keyword">false</span>);</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 富文本编辑时一些样式是使用style来进行实现的 比如红色字体 style="color:red;" 所以需要给所有标签添加style属性</div><div class="line">         */</div><div class="line">        whitelist.addAttributes(<span class="string">":all"</span>, <span class="string">"style"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">clean</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Jsoup.clean(content, <span class="string">""</span>, whitelist, outputSettings);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>这里采用的白名单为<code>basicWithImages</code>，Jsoup内置了几种常见的白名单供我们选择，如下表所示：</p><table><thead><tr><th>白名单对象</th><th>标签</th><th>说明</th></tr></thead><tbody><tr><td>none</td><td>无</td><td>只保留标签内文本内容</td></tr><tr><td>simpleText</td><td>b,em,i,strong,u</td><td>简单的文本标签</td></tr><tr><td>basic</td><td>a,b,blockquote,br,cite,code,dd,<br>dl,dt,em,i,li,ol,p,pre,q,small,span,<br>strike,strong,sub,sup,u,ul</td><td>基本使用的标签</td></tr><tr><td>basicWithImages</td><td>basic 的基础上添加了 img 标签<br>及 img 标签的 src,align,alt,height,width,title 属性</td><td>基本使用的加上 img 标签</td></tr><tr><td>relaxed</td><td>a,b,blockquote,br,caption,cite,<br>code,col,colgroup,dd,div,dl,dt,<br>em,h1,h2,h3,h4,h5,h6,i,img,li,<br>ol,p,pre,q,small,span,strike,strong,<br>sub,sup,table,tbody,td,tfoot,th,thead,tr,u,ul</td><td>在 basicWithImages 的基础上又增加了一部分部分标签</td></tr></tbody></table><h2 id="XssHttpServletRequestWrapper"><a href="#XssHttpServletRequestWrapper" class="headerlink" title="XssHttpServletRequestWrapper"></a>XssHttpServletRequestWrapper</h2><p>创建一个XssHttpServletRequestWrapper，同过重写<code>getParameter()</code>，<code>getParameterValues()</code>和<code>getHeader()</code>方法来过滤HTTP请求中参数包含的恶意字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> cc.mrbird.common.util.JsoupUtil;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Jsoup过滤http请求，防止Xss攻击</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</div><div class="line"></div><div class="line">    HttpServletRequest orgRequest = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isIncludeRichText = <span class="keyword">false</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">XssHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request, <span class="keyword">boolean</span> isIncludeRichText)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(request);</div><div class="line">        orgRequest = request;</div><div class="line">        <span class="keyword">this</span>.isIncludeRichText = isIncludeRichText;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 覆盖getParameter方法，将参数名和参数值都做xss过滤如果需要获得原始的值，则通过super.getParameterValues(name)来获取</div><div class="line">    * getParameterNames,getParameterValues和getParameterMap也可能需要覆盖</div><div class="line">    */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> ((<span class="string">"content"</span>.equals(name) || name.endsWith(<span class="string">"WithHtml"</span>)) &amp;&amp; !isIncludeRichText) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getParameter(name);</div><div class="line">        &#125;</div><div class="line">        name = JsoupUtil.clean(name);</div><div class="line">        String value = <span class="keyword">super</span>.getParameter(name);</div><div class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class="line">            value = JsoupUtil.clean(value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</div><div class="line">        String[] arr = <span class="keyword">super</span>.getParameterValues(name);</div><div class="line">        <span class="keyword">if</span> (arr != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">                arr[i] = JsoupUtil.clean(arr[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arr;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 覆盖getHeader方法，将参数名和参数值都做xss过滤如果需要获得原始的值，则通过super.getHeaders(name)来获取</div><div class="line">    * getHeaderNames 也可能需要覆盖</div><div class="line">    */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        name = JsoupUtil.clean(name);</div><div class="line">        String value = <span class="keyword">super</span>.getHeader(name);</div><div class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(value)) &#123;</div><div class="line">            value = JsoupUtil.clean(value);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 获取原始的request</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> HttpServletRequest <span class="title">getOrgRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> orgRequest;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 获取原始的request的静态方法</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title">getOrgRequest</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (req <span class="keyword">instanceof</span> XssHttpServletRequestWrapper) &#123;</div><div class="line">            <span class="keyword">return</span> ((XssHttpServletRequestWrapper) req).getOrgRequest();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> req;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="XssFilter"><a href="#XssFilter" class="headerlink" title="XssFilter"></a>XssFilter</h2><p>创建XssFilter，同过使用上面定义的XssHttpServletRequestWrapper类中的<code>getParameter()</code>等方法来保证参数得到了过滤：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.regex.Matcher;</div><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.Filter;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</div><div class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.commons.lang.BooleanUtils;</div><div class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Xss攻击拦截器</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(XssFilter.class);</div><div class="line">    <span class="comment">// 是否过滤富文本内容</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> IS_INCLUDE_RICH_TEXT = <span class="keyword">false</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> List&lt;String&gt; excludes = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        logger.info(<span class="string">"------------ xss filter init ------------"</span>);</div><div class="line">        String isIncludeRichText = filterConfig.getInitParameter(<span class="string">"isIncludeRichText"</span>);</div><div class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(isIncludeRichText)) &#123;</div><div class="line">            IS_INCLUDE_RICH_TEXT = BooleanUtils.toBoolean(isIncludeRichText);</div><div class="line">        &#125;</div><div class="line">        String temp = filterConfig.getInitParameter(<span class="string">"excludes"</span>);</div><div class="line">        <span class="keyword">if</span> (temp != <span class="keyword">null</span>) &#123;</div><div class="line">            String[] url = temp.split(<span class="string">","</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; url != <span class="keyword">null</span> &amp;&amp; i &lt; url.length; i++) &#123;</div><div class="line">                excludes.add(url[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></div><div class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</div><div class="line">        HttpServletRequest req = (HttpServletRequest) request;</div><div class="line">        HttpServletResponse resp = (HttpServletResponse) response;</div><div class="line">        <span class="keyword">if</span> (handleExcludeURL(req, resp)) &#123;</div><div class="line">            chain.doFilter(request, response);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        XssHttpServletRequestWrapper xssRequest = <span class="keyword">new</span> XssHttpServletRequestWrapper((HttpServletRequest) request,</div><div class="line">        	IS_INCLUDE_RICH_TEXT);</div><div class="line">        chain.doFilter(xssRequest, response);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">handleExcludeURL</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (excludes == <span class="keyword">null</span> || excludes.isEmpty()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        String url = request.getServletPath();</div><div class="line">        <span class="keyword">for</span> (String pattern : excludes) &#123;</div><div class="line">            Pattern p = Pattern.compile(<span class="string">"^"</span> + pattern);</div><div class="line">            Matcher m = p.matcher(url);</div><div class="line">            <span class="keyword">if</span> (m.find())</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="Spring-Boot中配置XssFilter"><a href="#Spring-Boot中配置XssFilter" class="headerlink" title="Spring Boot中配置XssFilter"></a>Spring Boot中配置XssFilter</h2><p>使用JavaConfig的形式配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">xssFilterRegistrationBean</span><span class="params">()</span> </span>&#123;</div><div class="line">    FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</div><div class="line">    filterRegistrationBean.setFilter(<span class="keyword">new</span> XssFilter());</div><div class="line">    filterRegistrationBean.setOrder(<span class="number">1</span>);</div><div class="line">    filterRegistrationBean.setEnabled(<span class="keyword">true</span>);</div><div class="line">    filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</div><div class="line">    Map&lt;String, String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">    initParameters.put(<span class="string">"excludes"</span>, <span class="string">"/favicon.ico,/img/*,/js/*,/css/*"</span>);</div><div class="line">    initParameters.put(<span class="string">"isIncludeRichText"</span>, <span class="string">"true"</span>);</div><div class="line">    filterRegistrationBean.setInitParameters(initParameters);</div><div class="line">    <span class="keyword">return</span> filterRegistrationBean;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>参考文章：</p><ol><li><p><a href="https://blog.csdn.net/u014411966/article/details/78164752" target="_blank" rel="external">https://blog.csdn.net/u014411966/article/details/78164752</a></p></li><li><p><a href="https://www.jianshu.com/p/32abc12a175a?nomobile=yes" target="_blank" rel="external">https://www.jianshu.com/p/32abc12a175a?nomobile=yes</a></p></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:03 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;跨站脚本攻击(Cross Site Scripting)，为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故将跨站脚本攻击缩写为XSS。恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。&lt;/p&gt;&lt;p&gt;使用&lt;a href=&quot;https://jsoup.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jsoup&lt;/a&gt;可以有效的过滤不安全的代码。Jsoup使用白名单的机制来预防XSS攻击，比如白名单中规定只允许&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;标签的存在，那么其他标签都会被过滤掉。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="Jsoup" scheme="http://mrbird.cc/tags/Jsoup/"/>
    
      <category term="Security" scheme="http://mrbird.cc/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云部署Java Web项目小记</title>
    <link href="http://mrbird.cc/%E8%85%BE%E8%AE%AF%E4%BA%91%E9%83%A8%E7%BD%B2Java-Web%E9%A1%B9%E7%9B%AE%E5%B0%8F%E8%AE%B0.html"/>
    <id>http://mrbird.cc/腾讯云部署Java-Web项目小记.html</id>
    <published>2018-03-01T01:29:49.000Z</published>
    <updated>2018-04-11T01:35:40.496Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:03 GMT+0800 (中国标准时间) --><p>近期<a href="https://cloud.tencent.com/act/campus/" target="_blank" rel="external">腾讯云</a>推出云服务器团购优惠，刚好打算搭建个<a href="http://111.230.157.133/febs" target="_blank" rel="external">FEBS</a>的演示环境，于是买了台120/年的云服务器，配置为1核2G、1M带宽，加赠50GB对象存储空间，系统为Ubuntu 16.04。部署过程中遇到一些新的问题，在这记录一下。<a id="more"></a></p><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><p>搭建前先准备好远程登录软件，这类软件很多，这里推荐的是<a href="https://mobaxterm.mobatek.net/" target="_blank" rel="external">MobaXterm</a>；文件的上传下载推荐使用<a href="https://filezilla-project.org/" target="_blank" rel="external">FileZilla</a>；数据库连接推荐使用Navicat Premium。</p><h2 id="Java环境搭建"><a href="#Java环境搭建" class="headerlink" title="Java环境搭建"></a>Java环境搭建</h2><p>Java环境的搭建可参考（包括安装JDK，MySQL）：<a href="/ubuntu16-04搭建Java开发环境.html">ubuntu16-04搭建Java开发环境</a>。Tomcat下载后解压即可。</p><h2 id="远程连接MySQL"><a href="#远程连接MySQL" class="headerlink" title="远程连接MySQL"></a>远程连接MySQL</h2><p>开启MySQL远程连接的前提是在安装MySQL初始化的时候允许远程连接，然后输入以下命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'IDENTIFIED BY '123456' WITH GRANT OPTION;</div></pre></td></tr></table></figure><p></p><p>这段话的意思是允许任何IP以root账户远程访问，密码为123456。这里的密码设定只是为了演示，实际必须满足在初始化MySQL时密码强度的设定，即<code>validate_password_policy</code>：</p><table><thead><tr><th scope="col">Policy</th><th scope="col">Tests Performed</th></tr></thead><tbody><tr><td scope="row"><code bigint(20)="">0</code>&nbsp;or&nbsp;<code bigint(20)="">LOW</code></td><td>Length</td></tr><tr><td scope="row"><code bigint(20)="">1</code>&nbsp;or&nbsp;<code bigint(20)="">MEDIUM</code></td><td>Length; numeric, lowercase/uppercase, and special characters</td></tr><tr><td scope="row"><code bigint(20)="">2</code>&nbsp;or&nbsp;<code bigint(20)="">STRONG</code></td><td>Length; numeric, lowercase/uppercase, and special characters; dictionary file</td></tr></tbody></table><p>当密码强度和设定的不一致时，MySQL提示<span style="color:red"> Your password does not satisfy the current policy requirements</span>错误。</p><p>然后执行一下语句，使得设定生效：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql&gt; FLUSH PRIVILEGES;</div></pre></td></tr></table></figure><p></p><p>接下来使用Navicat远程连接MySQL，打开Navicat，新建MySQL连接：</p><p><img src="img/QQ截图20180322105626.png" alt="QQ截图20180322105626.png"></p><p>IP填云服务器的公网IP地址，用户名和密码为上面设定的root和123456。除此之外，还得填写SSH连接信息：</p><p><img src="img/QQ截图20180322105848.png" alt="QQ截图20180322105848.png"></p><p>IP填云服务器的公网IP地址，用户名和密码为云服务器的用户名和密码。</p><p>点击连接测试后发现Navicat报错：</p><div class="note danger"><p><code>Lost connection to MySQL server at &#39;reading initial communication packet&#39;, system error: 0</code></p></div><p>打开MySQL配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</div></pre></td></tr></table></figure><p></p><p>找到<code>[mysqld]</code>，添加<code>skip-name-resolve</code>，并将<code>bind-address= 127.0.0.1</code>配置注释掉即可，如下所示：</p><p><img src="img/QQ截图20180322110744.png" alt="QQ截图20180322110744.png"></p><p>然后再次点击Navicat连接测试即可成功。</p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>在本地将项目打包后，使用FileZilla将项目上传到Tomcat的webapp目录下，运行bin目录下的startup.sh脚本即可。</p><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><p>如下新增域名解析：</p><p><img src="img/QQ截图20180322111531.png" alt="QQ截图20180322111531.png"></p><p>记录值为云服务器的公网IP地址。配置解析后，就可使用 <code>域名:端口号/项目名</code> 的形式访问了。比如<code>http://demo.mrbird.cc:80/febs/login</code>，端口号默认就是80，所以可以简写为<a href="http://demo.mrbird.cc/febs/login" target="_blank" rel="external">http://demo.mrbird.cc/febs/login</a>。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:03 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;近期&lt;a href=&quot;https://cloud.tencent.com/act/campus/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯云&lt;/a&gt;推出云服务器团购优惠，刚好打算搭建个&lt;a href=&quot;http://111.230.157.133/febs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FEBS&lt;/a&gt;的演示环境，于是买了台120/年的云服务器，配置为1核2G、1M带宽，加赠50GB对象存储空间，系统为Ubuntu 16.04。部署过程中遇到一些新的问题，在这记录一下。
    
    </summary>
    
    
      <category term="Linux" scheme="http://mrbird.cc/tags/Linux/"/>
    
      <category term="云服务器" scheme="http://mrbird.cc/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>基于Spring Boot和Shiro的后台管理系统FEBS</title>
    <link href="http://mrbird.cc/%E5%9F%BA%E4%BA%8ESpring-Boot%E5%92%8CShiro%E7%9A%84%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9FFEBS.html"/>
    <id>http://mrbird.cc/基于Spring-Boot和Shiro的后台管理系统FEBS.html</id>
    <published>2018-02-08T03:03:37.000Z</published>
    <updated>2018-04-11T01:35:40.495Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:05 GMT+0800 (中国标准时间) --><p><a href="http://111.230.157.133/febs" target="_blank" rel="external">FEBS</a>是一个简单高效的后台权限管理系统。项目基础框架采用全新的Java Web开发框架 —— Spring Boot，消除了繁杂的XML配置，使得二次开发更为简单；数据访问层采用Mybatis，同时引入了通用Mapper和PageHelper插件，可快速高效的对单表进行增删改查操作，消除了大量传统XML配置SQL的代码；安全框架采用时下流行的Apache Shiro，可实现对按钮级别的权限控制；前端页面使用Bootstrap构建，主题风格为Google最新设计语言Material Design，并提供多套配色以供选择。FEBS意指：Fast，Easy use，Beautiful和Safe🙄。<a id="more"></a></p><h2 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h2><p>系统功能模块组成如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">├─系统管理</div><div class="line">│  ├─字典管理</div><div class="line">│  ├─用户管理</div><div class="line">│  ├─菜单管理</div><div class="line">│  ├─角色管理</div><div class="line">│  └─部门管理</div><div class="line">├─系统监控</div><div class="line">│  ├─在线用户</div><div class="line">│  └─系统日志</div><div class="line">├─任务调度</div><div class="line">│  ├─定时任务</div><div class="line">│  └─调度日志</div><div class="line">└─网络资源</div><div class="line">    ├─One一个</div><div class="line">    │  ├─散文</div><div class="line">    │  ├─绘画</div><div class="line">    │  └─语文</div><div class="line">    ├─天气查询</div><div class="line">    ├─影视资讯</div><div class="line">    │  ├─即将上映</div><div class="line">    │  └─正在热映</div><div class="line">    └─每日一文</div></pre></td></tr></table></figure><p></p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li><p>基础框架：Spring Boot</p></li><li><p>持久层框架：MyBatis</p></li><li><p>安全框架：Apache Shiro</p></li><li><p>摸板引擎：Thymeleaf</p></li><li><p>数据库连接池：阿里巴巴Druid</p></li><li><p>缓存框架：Ehcache</p></li><li><p>日志打印：logback</p></li><li><p>其他：fastjson，poi，javacsv，quartz等。</p></li></ul><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ul><li><p>基础框架：Bootstrap4</p></li><li><p>JavaScirpy框架：jQuery</p></li><li><p>消息组件：Bootstrap notify</p></li><li><p>提示框插件：SweetAlert2</p></li><li><p>树形插件：jsTree</p></li><li><p>树形表格插件：jqTreeGrid</p></li><li><p>表格插件：BootstrapTable</p></li><li><p>表单校验插件：jQuery-validate</p></li><li><p>多选下拉框插件：multiple-select</p></li><li><p>图表插件：Highcharts</p></li></ul><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><ul><li><p>语言：Java</p></li><li><p>IDE：Eclipse Oxygen</p></li><li><p>依赖管理：Maven</p></li><li><p>数据库：Oracle 11g &amp; MySQL 5.7</p></li><li><p>版本管理：SVN，git</p></li></ul><h2 id="系统预览"><a href="#系统预览" class="headerlink" title="系统预览"></a>系统预览</h2><p><img src="img/FEBS/QQ截图20180319141311.png" alt="QQ截图20180319141311.png"></p><p><img src="img/FEBS/QQ截图20180319141358.png" alt="QQ截图20180319141358.png"></p><p><img src="img/FEBS/QQ截图20180319141531.png" alt="QQ截图20180319141531.png"></p><p><img src="img/FEBS/QQ截图20180319141602.png" alt="QQ截图20180319141602.png"></p><p><img src="img/FEBS/QQ截图20180319141642.png" alt="QQ截图20180319141642.png"></p><p><img src="img/FEBS/QQ截图20180319141722.png" alt="QQ截图20180319141722.png"></p><p><img src="img/FEBS/QQ截图20180319141750.png" alt="QQ截图20180319141750.png"></p><p><img src="img/FEBS/QQ截图20180319141940.png" alt="QQ截图20180319141940.png"></p><h2 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h2><p><img src="img/FEBS/QQ截图20180319103921.png" alt="QQ截图20180319103921.png"></p><p><img src="img/FEBS/QQ截图20180319104022.png" alt="QQ截图20180319104022.png"></p><p><img src="img/FEBS/QQ截图20180319104249.png" alt="QQ截图20180319104249.png"></p><p><img src="img/FEBS/QQ截图20180319104347.png" alt="QQ截图20180319104347.png"></p><p><img src="img/FEBS/QQ截图20180319104436.png" alt="QQ截图20180319104436.png"></p><p><img src="img/FEBS/QQ截图20180319104529.png" alt="QQ截图20180319104529.png"></p><p><img src="img/FEBS/QQ截图20180319104634.png" alt="QQ截图20180319104634.png"></p><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p>码云：</p><script src="https://gitee.com/github-16661027/project/widget_preview"></script><style>.pro_name a{color:#0c8}.osc_git_title{background-color:#fff}.osc_git_box{background-color:#fff}.osc_git_box{border-color:#E3E9ED}.osc_git_info{color:#666}.osc_git_main a{color:#9B9B9B}.osc_git_title h3:before{display:none!important}</style><p>GitHub：</p><div style="text-align:center"><div class="github-card" data-user="wuyouzhuguli" data-repo="FEBS" data-width="100%" data-theme="default" data-target="" data-client-id="" data-client-secret=""></div></div><script src="/github-card-lib/githubcard.js"></script><p></p><style>.github-card{border-radius:2px!important}.repo-card .content p{font-size:.9rem!important}</style>下载后以maven项目导入。<p></p><p>开发时直接使用Spring Boot的入口类启动即可，访问地址<a href="localhost">localhost</a>。部署时建议打包成war包，访问地址<a href="localhost:端口号/febs" target="_blank" rel="external">localhost:端口号/febs</a>。账号mrbird，密码123456。</p><p>本软件使用 <a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache License 2.0</a> 协议，请严格遵照协议内容。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="如何下载代码"><a href="#如何下载代码" class="headerlink" title="如何下载代码"></a>如何下载代码</h3><p><strong>手动下载</strong></p><p>下载Oracle版本：</p><p>分支选择master，然后点击 download zip即可，如下图所示：</p><p><img src="img/QQ截图20180328094628.png" alt="QQ截图20180328094628.png"></p><p>下载MySQL版本：</p><p>分支选择mysql，然后点击 download zip即可，如下图所示：</p><p><img src="img/QQ截图20180328094917.png" alt="QQ截图20180328094917.png"></p><p><strong>Git命令</strong></p><p>下载oracle版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/wuyouzhuguli/FEBS.git</div></pre></td></tr></table></figure><p></p><p>下载mysql版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> -b mysql https://github.com/wuyouzhuguli/FEBS.git</div></pre></td></tr></table></figure><p></p><h3 id="Servlet依赖问题"><a href="#Servlet依赖问题" class="headerlink" title="Servlet依赖问题"></a>Servlet依赖问题</h3><p>启动项目后报Servlet依赖未找到，比如：</p><div class="note danger"><p>Post-processing of merged bean definition failed; nested exception is java.lang.NoClassDefFoundError: javax/servlet/ServletRequest</p></div>出现这个问题一般是使用IDEA的同学，解决办法：打开pom文件，然后下图中的<code>&lt;scope&gt;provided&lt;/scope&gt;</code>去掉：<p></p><p><img src="img/QQ截图20180328100233.png" alt="QQ截图20180328100233.png"></p><h3 id="表不存在"><a href="#表不存在" class="headerlink" title="表不存在"></a>表不存在</h3><p>这个问题一般出现在Linux环境下的MySQL数据库中，Linux下的MySQL数据库默认开启了大小写敏感，即<code>t_user</code>和<code>T_USER</code>是两个完全不同的表。解决办法：</p><ol><li><p>将代码中的表名大小写改为和数据库一致（不推荐！繁琐又容易出错）；</p></li><li><p>关闭MySQL大小写敏感，可参考：<a href="https://blog.csdn.net/fdipzone/article/details/73692929" target="_blank" rel="external">https://blog.csdn.net/fdipzone/article/details/73692929</a>。</p></li></ol><h3 id="Oracle驱动依赖问题"><a href="#Oracle驱动依赖问题" class="headerlink" title="Oracle驱动依赖问题"></a>Oracle驱动依赖问题</h3><p>以ojdbc6为例，由于版权的原因，我们需要将ojdbc6.jar依赖安装到本地的maven仓库，然后才可以在pom中进行配置。</p><p>下载ojdbc6.jar文件后，将其放到比较好找的目录下，比如D盘根目录。然后运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">C:\Users\Administrator&gt;mvn install:install-file -Dfile=D:/ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=6.0 -</div><div class="line">Dpackaging=jar -DgeneratePom=<span class="literal">true</span></div><div class="line">...</div><div class="line">[INFO] --- maven-install-plugin:2.4:install-file (default-cli) @ standalone-pom ---</div><div class="line">[INFO] Installing D:\ojdbc6.jar to D:\m2\repository\com\oracle\ojdbc6\6.0\ojdbc6-6.0.jar</div><div class="line">[INFO] Installing C:\Users\ADMINI~1\AppData\Local\Temp\mvninstall9103688544010617483.pom to D:\m2\repository\com\oracle\ojdbc</div><div class="line">6\6.0\ojdbc6-6.0.pom</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: 0.940 s</div><div class="line">[INFO] Finished at: 2017-08-13T15:06:38+08:00</div><div class="line">[INFO] Final Memory: 6M/145M</div><div class="line">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure><p></p><p>接着在pom中引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>这里的groupid就是你之前安装时指定的-Dgroupid的值，artifactid就是你安装时指定的-Dartifactid的值，version也一样。</p><h3 id="war包部署"><a href="#war包部署" class="headerlink" title="war包部署"></a>war包部署</h3><p>项目默认打包为war，以eclipse为例，右键项目选择Run As → Maven build…： <img src="img/QQ图片20180328102425.png" alt="QQ图片20180328102425.png"></p><p>输入命令<code>clean package</code>后点击Run按钮即可： <img src="img/QQ截图20180328102554.png" alt="QQ截图20180328102554.png"></p><p>当控制台提示成功后，刷新项目便可在target目录下找到打包好的war包：</p><p><img src="img/QQ截图20180328103002.png" alt="QQ截图20180328103002.png"></p><p>war包的名称是由pom中的<code>&lt;finalName&gt;febs&lt;/finalName&gt;</code>配置决定的。</p><h3 id="jar包部署"><a href="#jar包部署" class="headerlink" title="jar包部署"></a>jar包部署</h3><p>将pom中的打包方式改为jar：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-snapshot<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>如果改完项目出了红叉，可以运行<code>maven update</code>；</p><p><img src="img/QQ截图20180328104654.png" alt="QQ截图20180328104654.png"></p><p>然后将下图中的Tomcat依赖去掉，因为Spring Boot内置了Tomcat依赖：</p><p><img src="img/QQ截图20180328103153.png" alt="QQ截图20180328103153.png"></p><p>最后找到<code>ServletInitializer</code>将其注释掉即可。</p><p>同样的运行<code>clean package</code>命令后刷新项目便可在target目录下找到打包好的jar包：</p><p><img src="img/QQ截图20180328103944.png" alt="QQ截图20180328103944.png"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:05 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&lt;a href=&quot;http://111.230.157.133/febs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;FEBS&lt;/a&gt;是一个简单高效的后台权限管理系统。项目基础框架采用全新的Java Web开发框架 —— Spring Boot，消除了繁杂的XML配置，使得二次开发更为简单；数据访问层采用Mybatis，同时引入了通用Mapper和PageHelper插件，可快速高效的对单表进行增删改查操作，消除了大量传统XML配置SQL的代码；安全框架采用时下流行的Apache Shiro，可实现对按钮级别的权限控制；前端页面使用Bootstrap构建，主题风格为Google最新设计语言Material Design，并提供多套配色以供选择。FEBS意指：Fast，Easy use，Beautiful和Safe🙄。
    
    </summary>
    
    
      <category term="Shiro" scheme="http://mrbird.cc/tags/Shiro/"/>
    
      <category term="Java" scheme="http://mrbird.cc/tags/Java/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>树形插件jsTree</title>
    <link href="http://mrbird.cc/%E6%A0%91%E5%BD%A2%E6%8F%92%E4%BB%B6jsTree.html"/>
    <id>http://mrbird.cc/树形插件jsTree.html</id>
    <published>2018-02-01T01:49:17.000Z</published>
    <updated>2018-04-11T01:34:15.867Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:03 GMT+0800 (中国标准时间) --><p>jsTree是一款基于jQuery的树形控件，具有扩展性强，可编辑和可配置的特性，支持HTML，JSON和Ajax数据加载。jsTree官网地址：<a href="https://www.jstree.com/" target="_blank" rel="external">https://www.jstree.com/</a>。这里主要介绍的是基于Ajax从数据库获取数据，然后生成树形菜单的用法。jsTree的皮肤可以自由定制，本文使用的是一款第三方jsTree皮肤。<a id="more"></a></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>因为其基于jQuery，所以引入jsTree依赖前得先引入jQuery：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- jQuery --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.2.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- jsTree --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jstree/3.3.5/jstree.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>由于第三方皮肤没有CDN地址，所以我们下载到本地后手动引入（可在文末得源码中获取）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">data-th-href</span>=<span class="string">"@&#123;css/jsTree/style.min.css&#125;"</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>皮肤预览： <img src="jsTree/32px.png" alt="32px.png"></p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>本文用到的数据表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for T_DEPT</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> (</div><div class="line"><span class="string">"DEPT_ID"</span> <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">"PARENT_ID"</span> <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">"DEPT_NAME"</span> VARCHAR2(<span class="number">100</span> <span class="keyword">BYTE</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">"ORDER_NUM"</span> <span class="built_in">NUMBER</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">"CREATE_TIME"</span> <span class="built_in">DATE</span> <span class="literal">NULL</span> </div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of T_DEPT</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'0'</span>, <span class="string">'开发部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-04 15:42:26'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'1'</span>, <span class="string">'开发二部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-04 15:42:29'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'0'</span>, <span class="string">'人事部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-04 15:42:32'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'1'</span>, <span class="string">'开发一部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-04 15:42:34'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'0'</span>, <span class="string">'市场部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-04 15:42:36'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'0'</span>, <span class="string">'测试部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-04 15:42:38'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'7'</span>, <span class="string">'2'</span>, <span class="string">'一部分部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-03-16 10:46:31'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div></pre></td></tr></table></figure><p></p><p>后端框架为Spring Boot + Mybatis（通用mapper），由于本文的重点是jsTree的使用，所以获取数据的细节和数据格式的处理这里不做阐述，具体可参考文末的源码。最终通过Ajax获取到的JSON数据如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"code"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"msg"</span>: &#123;</div><div class="line">        <span class="attr">"id"</span>: <span class="string">"0"</span>,</div><div class="line">        <span class="attr">"icon"</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">"url"</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">"text"</span>: <span class="string">"根节点"</span>,</div><div class="line">        <span class="attr">"state"</span>: &#123;</div><div class="line">            <span class="attr">"opened"</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"checked"</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">"attributes"</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">"children"</span>: [&#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="string">"1"</span>,</div><div class="line">            <span class="attr">"icon"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"url"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"text"</span>: <span class="string">"开发部"</span>,</div><div class="line">            <span class="attr">"state"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"checked"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"attributes"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"children"</span>: [&#123;</div><div class="line">                <span class="attr">"id"</span>: <span class="string">"3"</span>,</div><div class="line">                <span class="attr">"icon"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"url"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"text"</span>: <span class="string">"开发二部"</span>,</div><div class="line">                <span class="attr">"state"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"checked"</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">"attributes"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"children"</span>: [],</div><div class="line">                <span class="attr">"parentId"</span>: <span class="string">"1"</span>,</div><div class="line">                <span class="attr">"hasParent"</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">"hasChildren"</span>: <span class="literal">false</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">"id"</span>: <span class="string">"2"</span>,</div><div class="line">                <span class="attr">"icon"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"url"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"text"</span>: <span class="string">"开发一部"</span>,</div><div class="line">                <span class="attr">"state"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"checked"</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">"attributes"</span>: <span class="literal">null</span>,</div><div class="line">                <span class="attr">"children"</span>: [&#123;</div><div class="line">                    <span class="attr">"id"</span>: <span class="string">"7"</span>,</div><div class="line">                    <span class="attr">"icon"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="attr">"url"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="attr">"text"</span>: <span class="string">"一部分部"</span>,</div><div class="line">                    <span class="attr">"state"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="attr">"checked"</span>: <span class="literal">false</span>,</div><div class="line">                    <span class="attr">"attributes"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="attr">"children"</span>: [],</div><div class="line">                    <span class="attr">"parentId"</span>: <span class="string">"2"</span>,</div><div class="line">                    <span class="attr">"hasParent"</span>: <span class="literal">true</span>,</div><div class="line">                    <span class="attr">"hasChildren"</span>: <span class="literal">false</span></div><div class="line">                &#125;],</div><div class="line">                <span class="attr">"parentId"</span>: <span class="string">"1"</span>,</div><div class="line">                <span class="attr">"hasParent"</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">"hasChildren"</span>: <span class="literal">true</span></div><div class="line">            &#125;],</div><div class="line">            <span class="attr">"parentId"</span>: <span class="string">"0"</span>,</div><div class="line">            <span class="attr">"hasParent"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"hasChildren"</span>: <span class="literal">true</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="string">"5"</span>,</div><div class="line">            <span class="attr">"icon"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"url"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"text"</span>: <span class="string">"人事部"</span>,</div><div class="line">            <span class="attr">"state"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"checked"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"attributes"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"children"</span>: [],</div><div class="line">            <span class="attr">"parentId"</span>: <span class="string">"0"</span>,</div><div class="line">            <span class="attr">"hasParent"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"hasChildren"</span>: <span class="literal">false</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="string">"4"</span>,</div><div class="line">            <span class="attr">"icon"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"url"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"text"</span>: <span class="string">"市场部"</span>,</div><div class="line">            <span class="attr">"state"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"checked"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"attributes"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"children"</span>: [],</div><div class="line">            <span class="attr">"parentId"</span>: <span class="string">"0"</span>,</div><div class="line">            <span class="attr">"hasParent"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"hasChildren"</span>: <span class="literal">false</span></div><div class="line">        &#125;, &#123;</div><div class="line">            <span class="attr">"id"</span>: <span class="string">"6"</span>,</div><div class="line">            <span class="attr">"icon"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"url"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"text"</span>: <span class="string">"测试部"</span>,</div><div class="line">            <span class="attr">"state"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"checked"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"attributes"</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">"children"</span>: [],</div><div class="line">            <span class="attr">"parentId"</span>: <span class="string">"0"</span>,</div><div class="line">            <span class="attr">"hasParent"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"hasChildren"</span>: <span class="literal">false</span></div><div class="line">        &#125;],</div><div class="line">        <span class="attr">"parentId"</span>: <span class="string">""</span>,</div><div class="line">        <span class="attr">"hasParent"</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">"hasChildren"</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h2><p>使用Ajax从后台获取到如上所示格式的JSON数据（也就是<code>r.msg</code>）,然后使用jsTree生成树形控件：</p><p>HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"deptTree"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>JavaScript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script data-th-inline=<span class="string">"javascript"</span>&gt;</div><div class="line"><span class="keyword">var</span> ctx = [[@&#123;/&#125;]];</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    createDeptTree();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDeptTree</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $.post(ctx + <span class="string">"dept/tree"</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> data = r.msg;</div><div class="line">        $(<span class="string">'#deptTree'</span>).jstree(&#123;</div><div class="line">            <span class="string">"core"</span>: &#123;</div><div class="line">                <span class="string">'data'</span>: data.children</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p></p><p>效果如下所示：</p><p><link href="../jsTree/style.min.css" rel="stylesheet" type="text/css"></p><p></p><style>div.deptTree{padding:1rem;width:25%;border:1px solid #efefef}</style><p></p><p></p><div id="deptTree1" class="deptTree"></div><p></p><script src="https://cdn.bootcss.com/jquery/2.2.0/jquery.min.js"></script><script src="https://cdn.bootcss.com/jstree/3.3.5/jstree.min.js"></script><script>$("#deptTree1").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]}})</script><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>上面介绍了最基本的jsTree使用方法，下面开始介绍一些常用的jsTree操作。</p><h3 id="显示Checkbox"><a href="#显示Checkbox" class="headerlink" title="显示Checkbox"></a>显示Checkbox</h3><p>JavaScript代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#deptTree'</span>).jstree(&#123;</div><div class="line">    <span class="string">"core"</span>: &#123;</div><div class="line">        <span class="string">'data'</span>: data.children</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"plugins"</span> : [ <span class="string">"checkbox"</span> ]</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p>显示效果如下：</p><p></p><div id="deptTree2" class="deptTree"></div><p></p><script>$("#deptTree2").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox"]})</script>此时，被选中的选项默认会有浅蓝色的背景，如果想要去除，只需将js代码改为：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#deptTree'</span>).jstree(&#123;</div><div class="line">    <span class="string">"core"</span>: &#123;</div><div class="line">        <span class="string">'data'</span>: data.children</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"plugins"</span> : [ <span class="string">"checkbox"</span> ],</div><div class="line">    <span class="string">"checkbox"</span> : &#123;</div><div class="line">      <span class="string">"keep_selected_style"</span> : <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>效果如下所示：<div id="deptTree3" class="deptTree"></div><script>$("#deptTree3").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox"],checkbox:{keep_selected_style:!1}})</script><h3 id="Wholerow插件"><a href="#Wholerow插件" class="headerlink" title="Wholerow插件"></a>Wholerow插件</h3><p>该插件可以给选中的项目或者hover的项目添加一个行级别的背景色，js代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#deptTree'</span>).jstree(&#123;</div><div class="line">    <span class="string">"core"</span>: &#123;</div><div class="line">        <span class="string">'data'</span>: data.children</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"plugins"</span> : [ <span class="string">"checkbox"</span>, <span class="string">"wholerow"</span> ]</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p>效果如下所示：</p><p></p><div id="deptTree4" class="deptTree"></div><p></p><script>$("#deptTree4").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox","wholerow"]})</script><p>添加该插件后，控件前的虚线没了，具体原因未知=。=</p><h3 id="取消父子关联"><a href="#取消父子关联" class="headerlink" title="取消父子关联"></a>取消父子关联</h3><p>默认情况下，选中父节点后，其下的所有子节点也会跟着被选中，取消父子节点关联只需添加<code>&quot;checkbox&quot;: {&quot;three_state&quot;: false}</code>即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#deptTree'</span>).jstree(&#123;</div><div class="line">    <span class="string">"core"</span>: &#123;</div><div class="line">        <span class="string">'data'</span>: data.children</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"plugins"</span> : [ <span class="string">"checkbox"</span> ],</div><div class="line">    <span class="string">"checkbox"</span>: &#123;</div><div class="line">        <span class="string">"three_state"</span>: <span class="literal">false</span> <span class="comment">// 取消选择父节点后选中所有子节点</span></div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p>效果如下所示：</p><p></p><div id="deptTree5" class="deptTree"></div><p></p><script>$("#deptTree5").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox"],checkbox:{three_state:!1}})</script><h3 id="设置单选"><a href="#设置单选" class="headerlink" title="设置单选"></a>设置单选</h3><p>设置单选的前提是必须先取消父子关联，然后在<code>core</code>里添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#deptTree'</span>).jstree(&#123;</div><div class="line">    <span class="string">"core"</span>: &#123;</div><div class="line">        <span class="string">'data'</span>: data.children,</div><div class="line">        <span class="string">'multiple'</span>: <span class="literal">false</span> <span class="comment">// 取消多选</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"plugins"</span> : [ <span class="string">"checkbox"</span> ],</div><div class="line">    <span class="string">"checkbox"</span>: &#123;</div><div class="line">        <span class="string">"three_state"</span>: <span class="literal">false</span> <span class="comment">// 取消选择父节点后选中所有子节点</span></div><div class="line">    &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p>效果如下所示：</p><p></p><div id="deptTree6" class="deptTree"></div><p></p><script>$("#deptTree6").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}],multiple:!1},plugins:["checkbox"],checkbox:{three_state:!1}})</script><h3 id="全部展开"><a href="#全部展开" class="headerlink" title="全部展开"></a>全部展开</h3><p>如果需要初始化控件的时候展开树，可调用jsTree的<code>open_all()</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#deptTree'</span>).jstree(&#123;</div><div class="line">    <span class="string">"core"</span>: &#123;</div><div class="line">        <span class="string">'data'</span>: data.children</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"plugins"</span> : [ <span class="string">"checkbox"</span> ]</div><div class="line">&#125;).on(<span class="string">"loaded.jstree"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event, data</span>) </span>&#123;</div><div class="line">    $(<span class="string">'#deptTree'</span>).jstree().open_all();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p>或者设置<code>state</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#deptTree'</span>).jstree(&#123;</div><div class="line">    <span class="string">"core"</span>: &#123;</div><div class="line">        <span class="string">'data'</span>: data.children</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"plugins"</span> : [ <span class="string">"checkbox"</span>, <span class="string">"state"</span> ],</div><div class="line">    <span class="string">'state'</span>: &#123;</div><div class="line">        <span class="string">"opened"</span>: <span class="literal">true</span>,</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p>效果如下所示：</p><p></p><div id="deptTree7" class="deptTree"></div><p></p><script>$("#deptTree7").jstree({core:{state:{opened:!0},data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox"]}).on("loaded.jstree",function(e,l){$("#deptTree7").jstree().open_all()})</script><h3 id="默认选中"><a href="#默认选中" class="headerlink" title="默认选中"></a>默认选中</h3><p>jsTree可以在初始化后默认选中某些节点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#deptTree'</span>).jstree(&#123;</div><div class="line">    <span class="string">"core"</span>: &#123;</div><div class="line">        <span class="string">'data'</span>: data.children</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"plugins"</span> : [ <span class="string">"checkbox"</span> ],</div><div class="line">    <span class="string">"checkbox"</span>: &#123;</div><div class="line">        <span class="string">"three_state"</span>: <span class="literal">false</span> </div><div class="line">    &#125;,</div><div class="line">&#125;).on(<span class="string">"loaded.jstree"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event, data</span>) </span>&#123;</div><div class="line">    $(<span class="string">'#deptTree'</span>).jstree().open_all();</div><div class="line">    $(<span class="string">'#deptTree'</span>).jstree(<span class="string">'select_node'</span>, [<span class="number">5</span>, <span class="number">7</span>], <span class="literal">true</span>);</div><div class="line">    <span class="built_in">console</span>.log($(<span class="string">'#deptTree'</span>).jstree(<span class="literal">true</span>).get_selected()); <span class="comment">// ["5", "7"]</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p>效果如下所示：</p><p></p><div id="deptTree8" class="deptTree"></div><p></p><script>$("#deptTree8").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox"],checkbox:{three_state:!1}}).on("loaded.jstree",function(e,l){$("#deptTree8").jstree().open_all(),$("#deptTree8").jstree("select_node",[5,7],!0)})</script><h3 id="绑定选取监听"><a href="#绑定选取监听" class="headerlink" title="绑定选取监听"></a>绑定选取监听</h3><p>jsTree可以在选中和取消选中的时候绑定监听事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#deptTree'</span>).jstree(&#123;</div><div class="line">    <span class="string">"core"</span>: &#123;</div><div class="line">        <span class="string">'data'</span>: data.children</div><div class="line">    &#125;,</div><div class="line">    <span class="string">"plugins"</span> : [ <span class="string">"checkbox"</span> ]</div><div class="line">&#125;).on(<span class="string">"changed.jstree"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data.changed.selected); <span class="comment">// newly selected</span></div><div class="line">    <span class="built_in">console</span>.log(data.changed.deselected); <span class="comment">// newly deselected</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p>效果如下所示：</p><p></p><div id="deptTree9" class="deptTree"></div><p></p><script>$("#deptTree9").jstree({core:{data:[{id:"1",icon:null,url:null,text:"开发部",state:null,checked:!1,attributes:null,children:[{id:"3",icon:null,url:null,text:"开发二部",state:null,checked:!1,attributes:null,children:[],parentId:"1",hasParent:!0,hasChildren:!1},{id:"2",icon:null,url:null,text:"开发一部",state:null,checked:!1,attributes:null,children:[{id:"7",icon:null,url:null,text:"一部分部",state:null,checked:!1,attributes:null,children:[],parentId:"2",hasParent:!0,hasChildren:!1}],parentId:"1",hasParent:!0,hasChildren:!0}],parentId:"0",hasParent:!1,hasChildren:!0},{id:"5",icon:null,url:null,text:"人事部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"4",icon:null,url:null,text:"市场部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1},{id:"6",icon:null,url:null,text:"测试部",state:null,checked:!1,attributes:null,children:[],parentId:"0",hasParent:!1,hasChildren:!1}]},plugins:["checkbox","changed"],checkbox:{three_state:!1}}).on("loaded.jstree",function(e,l){$("#deptTree9").jstree().open_all()}).on("changed.jstree",function(e,l){l.changed.selected.length&&alert("选中节点ID："+l.changed.selected),l.changed.deselected.length&&alert("取消选中节点ID："+l.changed.deselected)})</script><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>其他方法和属性可参考官方文档（官方文档写的比较抽象=。=）：<a href="https://www.jstree.com/api/" target="_blank" rel="external">https://www.jstree.com/api/</a>。</p><p>源码链接：<a href="https://drive.google.com/open?id=17rdibWmH9CunPP9vs9sQrJPj5FefzoHj" target="_blank" rel="external">https://drive.google.com/open?id=17rdibWmH9CunPP9vs9sQrJPj5FefzoHj</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:03 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;jsTree是一款基于jQuery的树形控件，具有扩展性强，可编辑和可配置的特性，支持HTML，JSON和Ajax数据加载。jsTree官网地址：&lt;a href=&quot;https://www.jstree.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jstree.com/&lt;/a&gt;。这里主要介绍的是基于Ajax从数据库获取数据，然后生成树形菜单的用法。jsTree的皮肤可以自由定制，本文使用的是一款第三方jsTree皮肤。
    
    </summary>
    
    
      <category term="jQuery" scheme="http://mrbird.cc/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery Validate表单校验插件</title>
    <link href="http://mrbird.cc/jQuery-Validate%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C%E6%8F%92%E4%BB%B6.html"/>
    <id>http://mrbird.cc/jQuery-Validate表单校验插件.html</id>
    <published>2018-01-14T01:41:41.000Z</published>
    <updated>2018-04-11T01:34:15.846Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:03 GMT+0800 (中国标准时间) --><p>jQuery Validate 插件为表单提供了强大的验证功能，让客户端表单验证变得更简单，同时提供了大量的定制选项，满足应用程序各种需求。该插件捆绑了一套有用的验证方法，包括 URL 和电子邮件验证，同时提供了一个用来编写用户自定义方法的 API。官网地址为：<a href="https://jqueryvalidation.org/" target="_blank" rel="external">https://jqueryvalidation.org/</a>。<a id="more"></a></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>引入Bootstrap（jQuery Validate并不依赖于Bootstap，这里引入Bootstrap是为了用于构建表单）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- jQuery --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.aspnetcdn.com/ajax/jquery/jquery-2.0.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- popper --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/popper.js/1.12.9/umd/popper.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- bootstrap --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/4.0.0/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>引入jQuery Validate依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- jquery-validate --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery-validate/1.17.0/jquery.validate.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery-validate/1.17.0/additional-methods.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery-validate/1.17.0/localization/messages_zh.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>jquery.validate.js为核心代码；additional-methods.js为扩展的校验方法，一般我们自定义的校验方法都放到这个文件里；messages_zh.js为中文汉化包。</p><h2 id="默认校验规则"><a href="#默认校验规则" class="headerlink" title="默认校验规则"></a>默认校验规则</h2><p>jquery.validate.js为我们提供了一系列的默认校验规则：</p><table><tbody><tr><th width="10%">序号</th><th width="30%">规则</th><th width="60%">描述</th></tr><tr><td>1</td><td>required:true</td><td>必须输入的字段。</td></tr><tr><td>2</td><td>remote:”check.php”</td><td>使用 ajax 方法调用 check.php 验证输入值。</td></tr><tr><td>3</td><td>email:true</td><td>必须输入正确格式的电子邮件。</td></tr><tr><td>4</td><td>url:true</td><td>必须输入正确格式的网址。</td></tr><tr><td>5</td><td>date:true</td><td>必须输入正确格式的日期。日期校验 ie6 出错，慎用。</td></tr><tr><td>6</td><td>dateISO:true</td><td>必须输入正确格式的日期（ISO），例如：2009-06-23，1998/01/22。只验证格式，不验证有效性。</td></tr><tr><td>7</td><td>number:true</td><td>必须输入合法的数字（负数，小数）。</td></tr><tr><td>8</td><td>digits:true</td><td>必须输入整数。</td></tr><tr><td>9</td><td>creditcard:</td><td>必须输入合法的信用卡号。</td></tr><tr><td>10</td><td>equalTo:”#field”</td><td>输入值必须和 #field 相同。</td></tr><tr><td>11</td><td>accept:</td><td>输入拥有合法后缀名的字符串（上传文件的后缀）。</td></tr><tr><td>12</td><td>maxlength:5</td><td>输入长度最多是 5 的字符串（汉字算一个字符）。当为checkbox时，指选中个数。</td></tr><tr><td>13</td><td>minlength:10</td><td>输入长度最小是 10 的字符串（汉字算一个字符）。当为checkbox时，指选中个数。</td></tr><tr><td>14</td><td>rangelength:[5,10]</td><td>输入长度必须介于 5 和 10 之间的字符串（汉字算一个字符）。当为checkbox时，指选中个数。</td></tr><tr><td>15</td><td>range:[5,10]</td><td>输入值必须介于 5 和 10 之间。</td></tr><tr><td>16</td><td>max:5</td><td>输入值不能大于 5。</td></tr><tr><td>17</td><td>min:10</td><td>输入值不能小于 10。</td></tr></tbody></table><p>默认的提示（messages_zh.js）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$.extend($.validator.messages, &#123;</div><div class="line">    <span class="attr">required</span>: <span class="string">"这是必填字段"</span>,</div><div class="line">    <span class="attr">remote</span>: <span class="string">"请修正此字段"</span>,</div><div class="line">    <span class="attr">email</span>: <span class="string">"请输入有效的电子邮件地址"</span>,</div><div class="line">    <span class="attr">url</span>: <span class="string">"请输入有效的网址"</span>,</div><div class="line">    <span class="attr">date</span>: <span class="string">"请输入有效的日期"</span>,</div><div class="line">    <span class="attr">dateISO</span>: <span class="string">"请输入有效的日期 (YYYY-MM-DD)"</span>,</div><div class="line">    <span class="attr">number</span>: <span class="string">"请输入有效的数字"</span>,</div><div class="line">    <span class="attr">digits</span>: <span class="string">"只能输入数字"</span>,</div><div class="line">    <span class="attr">creditcard</span>: <span class="string">"请输入有效的信用卡号码"</span>,</div><div class="line">    <span class="attr">equalTo</span>: <span class="string">"你的输入不相同"</span>,</div><div class="line">    <span class="attr">extension</span>: <span class="string">"请输入有效的后缀"</span>,</div><div class="line">    <span class="attr">maxlength</span>: $.validator.format(<span class="string">"最多可以输入 &#123;0&#125; 个字符"</span>),</div><div class="line">    <span class="attr">minlength</span>: $.validator.format(<span class="string">"最少要输入 &#123;0&#125; 个字符"</span>),</div><div class="line">    <span class="attr">rangelength</span>: $.validator.format(<span class="string">"请输入长度在 &#123;0&#125; 到 &#123;1&#125; 之间的字符串"</span>),</div><div class="line">    <span class="attr">range</span>: $.validator.format(<span class="string">"请输入范围在 &#123;0&#125; 到 &#123;1&#125; 之间的数值"</span>),</div><div class="line">    <span class="attr">max</span>: $.validator.format(<span class="string">"请输入不大于 &#123;0&#125; 的数值"</span>),</div><div class="line">    <span class="attr">min</span>: $.validator.format(<span class="string">"请输入不小于 &#123;0&#125; 的数值"</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><h2 id="自定义校验"><a href="#自定义校验" class="headerlink" title="自定义校验"></a>自定义校验</h2><p>除了使用自带的校验方法外，我们也可以添加自己的校验方法，比如添加手机号码格式的校验方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jQuery.validator.addMethod(<span class="string">"checkPhone"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, element, params</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> checkPhone = <span class="regexp">/^0?(13[0-9]|15[012356789]|17[013678]|18[0-9]|14[57])[0-9]&#123;8&#125;$/</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || (checkPhone.test(value));</div><div class="line">&#125;, <span class="string">"请输入正确的手机号"</span>);</div></pre></td></tr></table></figure><p></p><p>value值当前校验的值，element为校验的元素，params为校验参数。</p><p>自定义的校验方法一般都添加到additional-methods.js。</p><h2 id="错误信息提示"><a href="#错误信息提示" class="headerlink" title="错误信息提示"></a>错误信息提示</h2><p>当校验不通过时，默认错误信息会插入到校验元素的后面，但当校验元素是radio或者checkbox的时候，错误信息的位置需要进行调整：</p><p><img src="img/QQ截图20180315163346.png" alt="QQ截图20180315163346.png"></p><p>调整方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">errorPlacement: <span class="function"><span class="keyword">function</span>(<span class="params">error, element</span>) </span>&#123; <span class="comment">//指定错误信息位置</span></div><div class="line">    <span class="keyword">if</span> (element.is(<span class="string">':radio'</span>) || element.is(<span class="string">':checkbox'</span>)) &#123; <span class="comment">//如果是radio或checkbox</span></div><div class="line">        <span class="keyword">var</span> eid = element.attr(<span class="string">'name'</span>); <span class="comment">//获取元素的name属性</span></div><div class="line">        error.appendTo(element.parent().parent()); <span class="comment">//将错误信息添加当前元素的父元素的父元素后面(根据实际html结构进行调整)</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        error.insertAfter(element);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>调整后： <img src="img/QQ截图20180315163539.png" alt="QQ截图20180315163539.png"></p><h2 id="后端校验"><a href="#后端校验" class="headerlink" title="后端校验"></a>后端校验</h2><p>remote选项用于后端校验，比如校验用户名的唯一性等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">remote: &#123;</div><div class="line">    <span class="attr">url</span>: <span class="string">"user/checkUserName"</span>,</div><div class="line">    <span class="attr">type</span>: <span class="string">"get"</span>,</div><div class="line">    <span class="attr">dataType</span>: <span class="string">"json"</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">username</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> $(<span class="string">"input[name='username']"</span>).val();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>后端返回boolean类型即可。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>编写个form表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"confirm_password"</span> <span class="attr">placeholder</span>=<span class="string">"请再次输入密码"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>手机号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"phone"</span> <span class="attr">placeholder</span>=<span class="string">"手机号"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"邮箱"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"address"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>- 请选择 -<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>福州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>厦门<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>龙岩<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>爱好<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>游泳<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>唱歌<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>睡觉<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"form-control-file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">name</span>=<span class="string">"subscribe"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>订阅<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>订阅方式<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"stype"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>RSS<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-check form-check-inline"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-check-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"stype"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"form-check-label"</span>&gt;</span>邮箱订阅<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"reset"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>绑定校验规则等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line">jQuery.validator.addMethod(<span class="string">"checkPhone"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value, element, params</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> checkPhone = <span class="regexp">/^0?(13[0-9]|15[012356789]|17[013678]|18[0-9]|14[57])[0-9]&#123;8&#125;$/</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.optional(element) || (checkPhone.test(value));</div><div class="line">&#125;, <span class="string">"请输入正确的手机号"</span>);</div><div class="line"></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    validateRule();</div><div class="line">    $(<span class="string">"#submit"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> validator = $(<span class="string">".form"</span>).validate();</div><div class="line">        <span class="keyword">var</span> flag = validator.form();</div><div class="line">        <span class="keyword">if</span> (flag) &#123;</div><div class="line">            alert(<span class="string">"true"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            alert(<span class="string">"false"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">"#reset"</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> validator = $(<span class="string">".form"</span>).validate();</div><div class="line">        validator.resetForm();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateRule</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">".form"</span>).validate(&#123;</div><div class="line">        <span class="attr">rules</span>: &#123;</div><div class="line">            <span class="attr">userName</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">minlength</span>: <span class="number">3</span>,</div><div class="line">                <span class="attr">maxlength</span>: <span class="number">10</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">password</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">minlength</span>: <span class="number">5</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">confirm_password</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">minlength</span>: <span class="number">5</span>,</div><div class="line">                <span class="attr">equalTo</span>: <span class="string">"[name='password']"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">address</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="literal">true</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">phone</span>: &#123;</div><div class="line">                <span class="attr">checkPhone</span>: <span class="literal">true</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">email</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">email</span>: <span class="literal">true</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">hobby</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">minlength</span>: <span class="number">2</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">sex</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="literal">true</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">file</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">accept</span>: <span class="string">"image/jpg,image/jpeg,image/png,image/gif"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">stype</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="string">"[name='subscribe']:checked"</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">messages</span>: &#123;</div><div class="line">            <span class="attr">userName</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="string">"请输入用户名"</span>,</div><div class="line">                <span class="attr">minlength</span>: <span class="string">"用户名长度不能少于&#123;0&#125;个字符"</span>,</div><div class="line">                <span class="attr">maxlength</span>: <span class="string">"用户名长度不能超过&#123;0&#125;个字符"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">password</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="string">"请输入密码"</span>,</div><div class="line">                <span class="attr">minlength</span>: <span class="string">"密码长度不能小于&#123;0&#125;个字母"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">confirm_password</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="string">"请输入密码"</span>,</div><div class="line">                <span class="attr">minlength</span>: <span class="string">"密码长度不能小于&#123;0&#125;个字母"</span>,</div><div class="line">                <span class="attr">equalTo</span>: <span class="string">"两次密码输入不一致"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">address</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="string">"请选择地址"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">email</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="string">"请输入邮箱"</span>,</div><div class="line">                <span class="attr">email</span>: <span class="string">"邮箱格式不正确"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">hobby</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="string">"请选择爱好"</span>,</div><div class="line">                <span class="attr">minlength</span>: <span class="string">"至少选择&#123;0&#125;项爱好"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">sex</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="string">"请选择性别"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">file</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="string">"请上传附件"</span>,</div><div class="line">                <span class="attr">accept</span>: <span class="string">"只支持jpg，jpeg，png或gif后缀的图片"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">stype</span>: &#123;</div><div class="line">                <span class="attr">required</span>: <span class="string">"请选择订阅方式"</span></div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">errorPlacement</span>: <span class="function"><span class="keyword">function</span>(<span class="params">error, element</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (element.is(<span class="string">':radio'</span>) || element.is(<span class="string">':checkbox'</span>)) &#123; </div><div class="line">                <span class="keyword">var</span> eid = element.attr(<span class="string">'name'</span>); </div><div class="line">                error.appendTo(element.parent().parent());</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                error.insertAfter(element);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>这里提下关于附件的格式问题，其限定的不是文件格式后缀，而是文件的<strong>MIME</strong>类型，具体可参考：<a href="/BootstrapValidator指南.html">BootstrapValidator指南</a>中列举的<strong>MIME</strong>类型。</p><p>演示效果如下：</p><p></p><p data-height="938" data-theme-id="30192" data-slug-hash="oqxJmq" data-default-tab="result" data-user="mrbird" data-embed-version="2" data-pen-title="jquery-validation" class="codepen">See the Pen <a href="https://codepen.io/mrbird/pen/oqxJmq/" target="_blank" rel="external">jquery-validation</a> by wuyouzhuguli (<a href="https://codepen.io/mrbird" target="_blank" rel="external">@mrbird</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>源码地址：<a href="https://drive.google.com/open?id=1lyUVNyX5VkxN3GqQz0_y_oBX3twMxPAh" target="_blank" rel="external">https://drive.google.com/open?id=1lyUVNyX5VkxN3GqQz0_y_oBX3twMxPAh</a></p><p>其他使用事项可参考：</p><ol><li><p><a href="http://www.runoob.com/jquery/jquery-plugin-validate.html" target="_blank" rel="external">http://www.runoob.com/jquery/jquery-plugin-validate.html</a></p></li><li><p><a href="https://jqueryvalidation.org/documentation/" target="_blank" rel="external">https://jqueryvalidation.org/documentation/</a></p></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:03 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;jQuery Validate 插件为表单提供了强大的验证功能，让客户端表单验证变得更简单，同时提供了大量的定制选项，满足应用程序各种需求。该插件捆绑了一套有用的验证方法，包括 URL 和电子邮件验证，同时提供了一个用来编写用户自定义方法的 API。官网地址为：&lt;a href=&quot;https://jqueryvalidation.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://jqueryvalidation.org/&lt;/a&gt;。
    
    </summary>
    
    
      <category term="Bootstrap" scheme="http://mrbird.cc/tags/Bootstrap/"/>
    
      <category term="jQuery" scheme="http://mrbird.cc/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>树形表格插件jQuery TreeGrid</title>
    <link href="http://mrbird.cc/%E6%A0%91%E5%BD%A2%E8%A1%A8%E6%A0%BC%E6%8F%92%E4%BB%B6jQuery-TreeGrid.html"/>
    <id>http://mrbird.cc/树形表格插件jQuery-TreeGrid.html</id>
    <published>2018-01-10T01:45:38.000Z</published>
    <updated>2018-04-11T01:34:15.867Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:03 GMT+0800 (中国标准时间) --><p>借助树形表格插件jQuery TreeGrid，我们可以以表格的形式来展现那些带有层级关系的数据，比如部门上下级，菜单表等。jQuery TreeGrid的官方地址为：<a href="http://maxazan.github.io/jquery-treegrid/" target="_blank" rel="external">http://maxazan.github.io/jquery-treegrid/</a>。由于这里的使用环境为bootstrap，原始的jQuery TreeGrid插件显得不是那么的灵活和美观，为了在bootstrap中无缝的使用该插件，这里引用了经过二次封装的jQuery TreeGrid插件jquery.treegrid.extension.js，作者为：<a href="http://www.cnblogs.com/landeanfen/p/6776152.html" target="_blank" rel="external">http://www.cnblogs.com/landeanfen/p/6776152.html</a>。<a id="more"></a></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>首先先引入bootstrap相关的依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.jquery.com/jquery-2.0.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/popper.js/1.12.9/umd/popper.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/4.0.0/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>然后引入jQuery TreeGrid依赖以及jquery.treegrid.extension.js ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- jquery.treegrid --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">data-th-href</span>=<span class="string">"@&#123;css/jqTreeGrid/jquery.treegrid.css&#125;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-th-src</span>=<span class="string">"@&#123;js/jqTreeGrid/jquery.treegrid.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- jquery.treegrid.extension --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-th-src</span>=<span class="string">"@&#123;js/jqTreeGrid/jquery.treegrid.extension.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>因为bootstrap没有自带图标组件，为了下文的使用，这里引入<a href="http://fontawesome.dashgame.com/" target="_blank" rel="external">font-awesome</a>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/font-awesome/4.7.0/css/font-awesome.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>使用的数据表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for T_DEPT</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> (</div><div class="line"><span class="string">"DEPT_ID"</span> <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">"PARENT_ID"</span> <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">"DEPT_NAME"</span> VARCHAR2(<span class="number">100</span> <span class="keyword">BYTE</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">"ORDER_NUM"</span> <span class="built_in">NUMBER</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">"CREATE_TIME"</span> <span class="built_in">DATE</span> <span class="literal">NULL</span> </div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of T_DEPT</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'7'</span>, <span class="string">'2'</span>, <span class="string">'开发一部福州分部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-03-15 09:32:15'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'0'</span>, <span class="string">'开发部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-04 15:42:26'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'1'</span>, <span class="string">'开发二部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-04 15:42:29'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'0'</span>, <span class="string">'人事部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-04 15:42:32'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'1'</span>, <span class="string">'开发一部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-04 15:42:34'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'0'</span>, <span class="string">'市场部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-04 15:42:36'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_DEPT"</span> <span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'0'</span>, <span class="string">'测试部'</span>, <span class="literal">null</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-04 15:42:38'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div></pre></td></tr></table></figure><p></p><p>后端框架为Spring Boot + MyBatis（通用mapper和pagehelper插件），获取数据的具体细节这里不再描述，可参考文末的源码。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>编写一个简单的页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>部门名称：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"deptName"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> <span class="attr">onclick</span>=<span class="string">"refresh()"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"search()"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"deptTreeTable"</span> <span class="attr">data-mobile-responsive</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"mb-bootstrap-table text-nowrap"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>jQuery TreeGrid插件的使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ctx = [[@&#123;/&#125;]];</div><div class="line"></div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    initDeptTreeTable();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initDeptTreeTable</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'#deptTreeTable'</span>).bootstrapTreeTable(&#123;</div><div class="line">        <span class="attr">id</span>: <span class="string">'deptId'</span>, <span class="comment">// 选取记录返回的值</span></div><div class="line">        code: <span class="string">'deptId'</span>, <span class="comment">// 用于设置父子关系</span></div><div class="line">        parentCode: <span class="string">'parentId'</span>, <span class="comment">// 用于设置父子关系</span></div><div class="line">        rootCodeValue: <span class="literal">null</span>, <span class="comment">//设置根节点code值----可指定根节点，默认为null,"",0,"0"</span></div><div class="line">        data: [], <span class="comment">// 构造table的数据集合，如果是ajax请求则不必填写</span></div><div class="line">        type: <span class="string">"GET"</span>, <span class="comment">// 请求数据的ajax类型</span></div><div class="line">        url: ctx + <span class="string">'dept/list'</span>, <span class="comment">// 请求数据的ajax的url</span></div><div class="line">        ajaxParams: &#123;</div><div class="line">            <span class="attr">deptName</span>: $(<span class="string">".form"</span>).find(<span class="string">"input[name='deptName']"</span>).val().trim()</div><div class="line">        &#125;, <span class="comment">// 请求数据的ajax的data属性</span></div><div class="line">        expandColumn: <span class="number">2</span>, <span class="comment">// 在哪一列上面显示展开按钮</span></div><div class="line">        expandAll: <span class="literal">true</span>, <span class="comment">// 是否全部展开</span></div><div class="line">        striped: <span class="literal">true</span>, <span class="comment">// 是否各行渐变色</span></div><div class="line">        columns: [&#123;</div><div class="line">                <span class="attr">field</span>: <span class="string">'selectItem'</span>,</div><div class="line">                <span class="attr">checkbox</span>: <span class="literal">true</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">title</span>: <span class="string">'编号'</span>,</div><div class="line">                <span class="attr">field</span>: <span class="string">'deptId'</span>,</div><div class="line">                <span class="attr">width</span>: <span class="string">'50px'</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">title</span>: <span class="string">'名称'</span>,</div><div class="line">                <span class="attr">field</span>: <span class="string">'deptName'</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">title</span>: <span class="string">'创建时间'</span>,</div><div class="line">                <span class="attr">field</span>: <span class="string">'createTime'</span></div><div class="line">            &#125;</div><div class="line">        ], <span class="comment">// 设置列</span></div><div class="line">        toolbar: <span class="literal">null</span>, <span class="comment">//顶部工具条</span></div><div class="line">        height: <span class="number">0</span>,</div><div class="line">        <span class="attr">expanderExpandedClass</span>: <span class="string">'fa fa-chevron-down'</span>, <span class="comment">// 展开的按钮的图标</span></div><div class="line">        expanderCollapsedClass: <span class="string">'fa fa-chevron-up'</span> <span class="comment">// 缩起的按钮的图标</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 搜索方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    initDeptTreeTable();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 重置方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">refresh</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">".form"</span>)[<span class="number">0</span>].reset();</div><div class="line">    search();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>参数说明如注解所示，其中expanderExpandedClass和expanderCollapsedClass为展开和缩起的图标，这里使用的是文章开始引入的font-awesome。</p><p>后端返回的JSON数据如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">[&#123;</div><div class="line">    <span class="attr">"deptId"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"parentId"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"deptName"</span>: <span class="string">"开发部"</span>,</div><div class="line">    <span class="attr">"orderNum"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"createTime"</span>: <span class="number">1515051746000</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">"deptId"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"parentId"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"deptName"</span>: <span class="string">"开发一部"</span>,</div><div class="line">    <span class="attr">"orderNum"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"createTime"</span>: <span class="number">1515051754000</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">"deptId"</span>: <span class="number">3</span>,</div><div class="line">    <span class="attr">"parentId"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"deptName"</span>: <span class="string">"开发二部"</span>,</div><div class="line">    <span class="attr">"orderNum"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"createTime"</span>: <span class="number">1515051749000</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">"deptId"</span>: <span class="number">4</span>,</div><div class="line">    <span class="attr">"parentId"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"deptName"</span>: <span class="string">"市场部"</span>,</div><div class="line">    <span class="attr">"orderNum"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"createTime"</span>: <span class="number">1515051756000</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">"deptId"</span>: <span class="number">5</span>,</div><div class="line">    <span class="attr">"parentId"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"deptName"</span>: <span class="string">"人事部"</span>,</div><div class="line">    <span class="attr">"orderNum"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"createTime"</span>: <span class="number">1515051752000</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">"deptId"</span>: <span class="number">6</span>,</div><div class="line">    <span class="attr">"parentId"</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">"deptName"</span>: <span class="string">"测试部"</span>,</div><div class="line">    <span class="attr">"orderNum"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"createTime"</span>: <span class="number">1515051758000</span></div><div class="line">&#125;, &#123;</div><div class="line">    <span class="attr">"deptId"</span>: <span class="number">7</span>,</div><div class="line">    <span class="attr">"parentId"</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">"deptName"</span>: <span class="string">"开发一部福州分部"</span>,</div><div class="line">    <span class="attr">"orderNum"</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">"createTime"</span>: <span class="number">1521077535000</span></div><div class="line">&#125;]</div></pre></td></tr></table></figure><p></p><p>页面显示效果如下： <img src="img/QQ截图20180315103450.png" alt="QQ截图20180315103450.png"></p><p>其实，在实际使用中我们并不需要配置那么多参数，查看jquery.treegrid.extension.js源码可发现，其默认参数为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$.fn.bootstrapTreeTable.defaults = &#123;</div><div class="line">    <span class="attr">id</span>: <span class="string">'menuId'</span>,</div><div class="line">    <span class="attr">code</span>: <span class="string">'menuId'</span>,</div><div class="line">    <span class="attr">parentCode</span>: <span class="string">'parentId'</span>,</div><div class="line">    <span class="attr">rootCodeValue</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">data</span>: [],</div><div class="line">    <span class="attr">type</span>: <span class="string">"GET"</span>,</div><div class="line">    <span class="attr">url</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">ajaxParams</span>: &#123;&#125;,</div><div class="line">    <span class="attr">expandColumn</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">expandAll</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">striped</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">columns</span>: [],</div><div class="line">    <span class="attr">toolbar</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">expanderExpandedClass</span>: <span class="string">'fa fa-chevron-down'</span>,</div><div class="line">    <span class="attr">expanderCollapsedClass</span>: <span class="string">'fa fa-chevron-up'</span></div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p></p><p>所以使用的时候只需配置几个我们关注的参数即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#deptTreeTable'</span>).bootstrapTreeTable(&#123;</div><div class="line">    <span class="attr">id</span>: <span class="string">'deptId'</span>,</div><div class="line">    <span class="attr">code</span>: <span class="string">'deptId'</span>,</div><div class="line">    <span class="attr">parentCode</span>: <span class="string">'parentId'</span>,</div><div class="line">    <span class="attr">url</span>: ctx + <span class="string">'dept/list'</span>,</div><div class="line">    <span class="attr">ajaxParams</span>: &#123;</div><div class="line">        <span class="attr">deptName</span>: $(<span class="string">".form"</span>).find(<span class="string">"input[name='deptName']"</span>).val().trim()</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">expandColumn</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">striped</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">columns</span>: [&#123;</div><div class="line">            <span class="attr">field</span>: <span class="string">'selectItem'</span>,</div><div class="line">            <span class="attr">checkbox</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">title</span>: <span class="string">'编号'</span>,</div><div class="line">            <span class="attr">field</span>: <span class="string">'deptId'</span>,</div><div class="line">            <span class="attr">width</span>: <span class="string">'50px'</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">title</span>: <span class="string">'名称'</span>,</div><div class="line">            <span class="attr">field</span>: <span class="string">'deptName'</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">title</span>: <span class="string">'创建时间'</span>,</div><div class="line">            <span class="attr">field</span>: <span class="string">'createTime'</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p>jquery.treegrid.extension.js还封装了一些方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$.fn.bootstrapTreeTable.methods = &#123;</div><div class="line">    <span class="comment">// 返回选中记录的id（返回的id由配置中的id属性指定）</span></div><div class="line">    <span class="comment">// 为了兼容bootstrap-table的写法，统一返回数组，这里只返回了指定的id</span></div><div class="line">    getSelections: <span class="function"><span class="keyword">function</span>(<span class="params">target, data</span>) </span>&#123;</div><div class="line">        <span class="comment">// 所有被选中的记录input</span></div><div class="line">        <span class="keyword">var</span> _ipt = target.find(<span class="string">"tbody"</span>).find(<span class="string">"tr"</span>).find(<span class="string">"input[name='select_item']:checked"</span>);</div><div class="line">        <span class="keyword">var</span> chk_value = [];</div><div class="line">        <span class="comment">// 如果是radio</span></div><div class="line">        <span class="keyword">if</span> (_ipt.attr(<span class="string">"type"</span>) == <span class="string">"radio"</span>) &#123;</div><div class="line">            chk_value.push(&#123; <span class="attr">id</span>: _ipt.val() &#125;);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            _ipt.each(<span class="function"><span class="keyword">function</span>(<span class="params">_i, _item</span>) </span>&#123;</div><div class="line">                chk_value.push(&#123; <span class="attr">id</span>: $(_item).val() &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> chk_value;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 刷新记录</span></div><div class="line">    refresh: <span class="function"><span class="keyword">function</span>(<span class="params">target, parms</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (parms) &#123;</div><div class="line">            target.load(parms);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            target.load();</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 重置表格视图</span></div><div class="line">    resetHeight: <span class="function"><span class="keyword">function</span>(<span class="params">target, height</span>) </span>&#123;</div><div class="line">        target.find(<span class="string">"tbody"</span>).css(<span class="string">"height"</span>, height + <span class="string">'px'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 组件的其他方法也可以进行类似封装........</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p></p><p>比如获取选中行的数据可使用getSelections：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#deptTreeTable"</span>).bootstrapTreeTable(<span class="string">"getSelections"</span>);</div></pre></td></tr></table></figure><p></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>源码链接：<a href="https://drive.google.com/open?id=1fgYRpD5CNCn4gj06_MiLm-g2fCjsSYtk" target="_blank" rel="external">https://drive.google.com/open?id=1fgYRpD5CNCn4gj06_MiLm-g2fCjsSYtk</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:03 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;借助树形表格插件jQuery TreeGrid，我们可以以表格的形式来展现那些带有层级关系的数据，比如部门上下级，菜单表等。jQuery TreeGrid的官方地址为：&lt;a href=&quot;http://maxazan.github.io/jquery-treegrid/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://maxazan.github.io/jquery-treegrid/&lt;/a&gt;。由于这里的使用环境为bootstrap，原始的jQuery TreeGrid插件显得不是那么的灵活和美观，为了在bootstrap中无缝的使用该插件，这里引用了经过二次封装的jQuery TreeGrid插件jquery.treegrid.extension.js，作者为：&lt;a href=&quot;http://www.cnblogs.com/landeanfen/p/6776152.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/landeanfen/p/6776152.html&lt;/a&gt;。
    
    </summary>
    
    
      <category term="Bootstrap" scheme="http://mrbird.cc/tags/Bootstrap/"/>
    
      <category term="jQuery" scheme="http://mrbird.cc/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap Table学习指南</title>
    <link href="http://mrbird.cc/Bootstrap-Table%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97.html"/>
    <id>http://mrbird.cc/Bootstrap-Table学习指南.html</id>
    <published>2018-01-06T01:43:13.000Z</published>
    <updated>2018-04-11T01:34:15.761Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:01 GMT+0800 (中国标准时间) --><p>Bootstrap Table是一款基于Bootstrap的jQuery表格插件，通过简单的设置，就可以拥有强大的单选、多选、排序、分页，以及编辑、导出、过滤、扩展等等的功能。作者地址：<a href="https://github.com/wenzhixin/bootstrap-table" target="_blank" rel="external">https://github.com/wenzhixin/bootstrap-table</a>。这里简单介绍下使用方法以及对其进行二次封装，方便日常开发使用。<a id="more"></a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>因为基于Bootstrap，所以先引入Bootstrap依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://code.jquery.com/jquery-2.0.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/popper.js/1.12.9/umd/popper.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/4.0.0/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>然后引入Bootstrap Table依赖：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Latest compiled and minified CSS --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.9.0/bootstrap-table.min.css"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Latest compiled and minified JavaScript --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.9.0/bootstrap-table.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Latest compiled and minified Locales --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.9.0/locale/bootstrap-table-zh-CN.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>本例中使用到的数据表SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for T_ROLE</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_ROLE"</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_ROLE"</span> (</div><div class="line"><span class="string">"ROLE_ID"</span> <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">"ROLE_NAME"</span> VARCHAR2(<span class="number">100</span> <span class="keyword">BYTE</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">"REMARK"</span> VARCHAR2(<span class="number">100</span> <span class="keyword">BYTE</span>) <span class="literal">NULL</span> ,</div><div class="line"><span class="string">"CREATE_TIME"</span> <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line"><span class="string">"MODIFY_TIME"</span> <span class="built_in">DATE</span> <span class="literal">NULL</span> </div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of T_ROLE</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'23'</span>, <span class="string">'用户管理员'</span>, <span class="string">'负责用户的增删改操作'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-09 15:32:41'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="literal">null</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'管理员'</span>, <span class="string">'管理员'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-27 16:23:11'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="keyword">TO_DATE</span>(<span class="string">'2018-02-24 16:01:45'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'测试账号'</span>, <span class="string">'测试账号'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-27 16:25:09'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-23 09:11:11'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'注册账户'</span>, <span class="string">'注册账户，只可查看，不可操作'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-29 16:00:15'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="keyword">TO_DATE</span>(<span class="string">'2018-02-24 17:33:45'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'24'</span>, <span class="string">'系统监控员'</span>, <span class="string">'可查看系统监控信息，但不可操作'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-09 15:52:01'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="keyword">TO_DATE</span>(<span class="string">'2018-03-07 19:05:33'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'25'</span>, <span class="string">'用户查看'</span>, <span class="string">'查看用户，无相应操作权限'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-01-09 15:56:30'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="literal">null</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'63'</span>, <span class="string">'影院工作者'</span>, <span class="string">'可查看影视信息'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-02-06 08:48:28'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="keyword">TO_DATE</span>(<span class="string">'2018-03-07 19:05:26'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'64'</span>, <span class="string">'天气预报员'</span>, <span class="string">'可查看天气预报信息'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-02-27 08:47:04'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="literal">null</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"MRBIRD"</span>.<span class="string">"T_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'65'</span>, <span class="string">'文章审核'</span>, <span class="string">'文章类'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2018-02-27 08:48:01'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="keyword">TO_DATE</span>(<span class="string">'2018-03-13 11:20:34'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>));</div></pre></td></tr></table></figure><p></p><p>后端框架为Spring Boot + MyBatis（通用mapper和pagehelper插件），获取数据的具体细节这里不再描述，可参考文末的源码。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>编写一个简单的页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>角色：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"roleName"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span> <span class="attr">onclick</span>=<span class="string">"refresh()"</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"search()"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"roleTable"</span> <span class="attr">data-mobile-responsive</span>=<span class="string">"true"</span> <span class="attr">class</span>=<span class="string">"mb-bootstrap-table text-nowrap"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>Bootstrap Table插件的使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#roleTable'</span>).bootstrapTable(&#123;</div><div class="line">    <span class="attr">method</span>: <span class="string">'get'</span>, <span class="comment">// 服务器数据的请求方式 get or post</span></div><div class="line">    url: ctx + <span class="string">"bootstrap-table/list"</span>, <span class="comment">// 服务器数据的加载地址</span></div><div class="line">    striped: <span class="literal">true</span>, <span class="comment">//是否显示行间隔色</span></div><div class="line">    cache: <span class="literal">false</span>, <span class="comment">//是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）</span></div><div class="line">    pagination: <span class="literal">true</span>, <span class="comment">//是否显示分页（*）</span></div><div class="line">    sortable: <span class="literal">false</span>, <span class="comment">//是否启用排序</span></div><div class="line">    sidePagination: <span class="string">"server"</span>, <span class="comment">//分页方式：client客户端分页，server服务端分页（*）</span></div><div class="line">    pageNumber: <span class="number">1</span>, <span class="comment">//初始化加载第一页，默认第一页</span></div><div class="line">    pageSize: <span class="number">5</span>, <span class="comment">//每页的记录行数（*）</span></div><div class="line">    pageList: [<span class="number">5</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>], <span class="comment">//可供选择的每页的行数（*）</span></div><div class="line">    strictSearch: <span class="literal">true</span>,</div><div class="line">    <span class="attr">minimumCountColumns</span>: <span class="number">2</span>, <span class="comment">//最少允许的列数</span></div><div class="line">    clickToSelect: <span class="literal">true</span>, <span class="comment">//是否启用点击选中行</span></div><div class="line">    uniqueId: <span class="string">"ID"</span>, <span class="comment">//每一行的唯一标识，一般为主键列</span></div><div class="line">    cardView: <span class="literal">false</span>,</div><div class="line">    <span class="attr">detailView</span>: <span class="literal">false</span>, <span class="comment">//是否显示详细视图</span></div><div class="line">    smartDisplay: <span class="literal">false</span>,</div><div class="line">    <span class="attr">queryParams</span>: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">pageSize</span>: params.limit,</div><div class="line">            <span class="attr">pageNum</span>: params.offset / params.limit + <span class="number">1</span>,</div><div class="line">            <span class="attr">roleName</span>: $(<span class="string">".form"</span>).find(<span class="string">"input[name='roleName']"</span>).val().trim(),</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">columns</span>: [&#123;</div><div class="line">        <span class="attr">checkbox</span>: <span class="literal">true</span></div><div class="line">    &#125;,&#123;</div><div class="line">        <span class="attr">field</span>: <span class="string">'roleId'</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">'角色ID'</span></div><div class="line">    &#125;,&#123;</div><div class="line">        <span class="attr">field</span>: <span class="string">'roleName'</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">'角色'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">field</span>: <span class="string">'remark'</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">'描述'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">field</span>: <span class="string">'createTime'</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">'创建时间'</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">field</span>: <span class="string">'modifyTime'</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">'修改时间'</span></div><div class="line">    &#125;]</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 搜索方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'#roleTable'</span>).bootstrapTable(<span class="string">'refresh'</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 重置方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">refresh</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">".form"</span>)[<span class="number">0</span>].reset();</div><div class="line">    search();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>后端返回的JSON数据如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"total"</span>: <span class="number">9</span>,</div><div class="line">    <span class="attr">"rows"</span>: [&#123;</div><div class="line">        <span class="attr">"roleId"</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">"roleName"</span>: <span class="string">"管理员"</span>,</div><div class="line">        <span class="attr">"remark"</span>: <span class="string">"管理员"</span>,</div><div class="line">        <span class="attr">"createTime"</span>: <span class="number">1514362991000</span>,</div><div class="line">        <span class="attr">"modifyTime"</span>: <span class="number">1519459305000</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">"roleId"</span>: <span class="number">2</span>,</div><div class="line">        <span class="attr">"roleName"</span>: <span class="string">"测试账号"</span>,</div><div class="line">        <span class="attr">"remark"</span>: <span class="string">"测试账号"</span>,</div><div class="line">        <span class="attr">"createTime"</span>: <span class="number">1514363109000</span>,</div><div class="line">        <span class="attr">"modifyTime"</span>: <span class="number">1516669871000</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">"roleId"</span>: <span class="number">3</span>,</div><div class="line">        <span class="attr">"roleName"</span>: <span class="string">"注册账户"</span>,</div><div class="line">        <span class="attr">"remark"</span>: <span class="string">"注册账户，只可查看，不可操作"</span>,</div><div class="line">        <span class="attr">"createTime"</span>: <span class="number">1514534415000</span>,</div><div class="line">        <span class="attr">"modifyTime"</span>: <span class="number">1519464825000</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">"roleId"</span>: <span class="number">23</span>,</div><div class="line">        <span class="attr">"roleName"</span>: <span class="string">"用户管理员"</span>,</div><div class="line">        <span class="attr">"remark"</span>: <span class="string">"负责用户的增删改操作"</span>,</div><div class="line">        <span class="attr">"createTime"</span>: <span class="number">1515483161000</span>,</div><div class="line">        <span class="attr">"modifyTime"</span>: <span class="literal">null</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">"roleId"</span>: <span class="number">24</span>,</div><div class="line">        <span class="attr">"roleName"</span>: <span class="string">"系统监控员"</span>,</div><div class="line">        <span class="attr">"remark"</span>: <span class="string">"可查看系统监控信息，但不可操作"</span>,</div><div class="line">        <span class="attr">"createTime"</span>: <span class="number">1515484321000</span>,</div><div class="line">        <span class="attr">"modifyTime"</span>: <span class="number">1520420733000</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">"roleId"</span>: <span class="number">25</span>,</div><div class="line">        <span class="attr">"roleName"</span>: <span class="string">"用户查看"</span>,</div><div class="line">        <span class="attr">"remark"</span>: <span class="string">"查看用户，无相应操作权限"</span>,</div><div class="line">        <span class="attr">"createTime"</span>: <span class="number">1515484590000</span>,</div><div class="line">        <span class="attr">"modifyTime"</span>: <span class="literal">null</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">"roleId"</span>: <span class="number">63</span>,</div><div class="line">        <span class="attr">"roleName"</span>: <span class="string">"影院工作者"</span>,</div><div class="line">        <span class="attr">"remark"</span>: <span class="string">"可查看影视信息"</span>,</div><div class="line">        <span class="attr">"createTime"</span>: <span class="number">1517878108000</span>,</div><div class="line">        <span class="attr">"modifyTime"</span>: <span class="number">1520420726000</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">"roleId"</span>: <span class="number">64</span>,</div><div class="line">        <span class="attr">"roleName"</span>: <span class="string">"天气预报员"</span>,</div><div class="line">        <span class="attr">"remark"</span>: <span class="string">"可查看天气预报信息"</span>,</div><div class="line">        <span class="attr">"createTime"</span>: <span class="number">1519692424000</span>,</div><div class="line">        <span class="attr">"modifyTime"</span>: <span class="literal">null</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">"roleId"</span>: <span class="number">65</span>,</div><div class="line">        <span class="attr">"roleName"</span>: <span class="string">"文章审核"</span>,</div><div class="line">        <span class="attr">"remark"</span>: <span class="string">"文章类"</span>,</div><div class="line">        <span class="attr">"createTime"</span>: <span class="number">1519692481000</span>,</div><div class="line">        <span class="attr">"modifyTime"</span>: <span class="number">1520911234000</span></div><div class="line">    &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>页面显示效果如下： <img src="img/QQ截图20180314172620.png" alt="QQ截图20180314172620.png"></p><h2 id="二次封装"><a href="#二次封装" class="headerlink" title="二次封装"></a>二次封装</h2><p>实际使用中除了几个常用的参数比如url，queryParams，columns等等之外，剩下的参数一般默认就好，所以接下来对其进行二次封装，使得开发中更为方便。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $Mrbird = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> bootstrapTable_default = &#123;</div><div class="line">        <span class="attr">method</span>: <span class="string">'get'</span>,</div><div class="line">        <span class="attr">striped</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">pagination</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">sortable</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">sidePagination</span>: <span class="string">"server"</span>,</div><div class="line">        <span class="attr">pageNumber</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">pageSize</span>: <span class="number">5</span>,</div><div class="line">        <span class="attr">pageList</span>: [<span class="number">5</span>, <span class="number">10</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">100</span>],</div><div class="line">        <span class="attr">strictSearch</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">showColumns</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">minimumCountColumns</span>: <span class="number">2</span>,</div><div class="line">        <span class="attr">clickToSelect</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">uniqueId</span>: <span class="string">"ID"</span>,</div><div class="line">        <span class="attr">cardView</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">detailView</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">smartDisplay</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">queryParams</span>: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">pageSize</span>: params.limit,</div><div class="line">                <span class="attr">pageNum</span>: params.offset / params.limit + <span class="number">1</span>,</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_initTable</span>(<span class="params">id, settings</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> params = $.extend(&#123;&#125;, bootstrapTable_default, settings);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> params.url == <span class="string">'undefined'</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="string">'初始化表格失败，请配置url参数！'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> params.columns == <span class="string">'undefined'</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="string">'初始化表格失败，请配置columns参数！'</span>;</div><div class="line">        &#125;</div><div class="line">        $(<span class="string">'#'</span> + id).bootstrapTable(params);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">initTable</span>: <span class="function"><span class="keyword">function</span>(<span class="params">id, settings</span>) </span>&#123;</div><div class="line">            _initTable(id, settings);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">refreshTable</span>: <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">            $(<span class="string">'#'</span> + id).bootstrapTable(<span class="string">'refresh'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)($);</div></pre></td></tr></table></figure><p></p><p>这样，在使用Bootstap Table插件的时候只需要像下面这样书写即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> settings = &#123;</div><div class="line">        <span class="attr">url</span>: ctx + <span class="string">"bootstrap-table/list"</span>,</div><div class="line">        <span class="attr">queryParams</span>: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">pageSize</span>: params.limit,</div><div class="line">                <span class="attr">pageNum</span>: params.offset / params.limit + <span class="number">1</span>,</div><div class="line">                <span class="attr">roleName</span>: $(<span class="string">".form"</span>).find(<span class="string">"input[name='roleName']"</span>).val().trim(),</div><div class="line">            &#125;;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">columns</span>: [&#123;</div><div class="line">                <span class="attr">checkbox</span>: <span class="literal">true</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">field</span>: <span class="string">'roleId'</span>,</div><div class="line">                <span class="attr">title</span>: <span class="string">'角色ID'</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">field</span>: <span class="string">'roleName'</span>,</div><div class="line">                <span class="attr">title</span>: <span class="string">'角色'</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">field</span>: <span class="string">'remark'</span>,</div><div class="line">                <span class="attr">title</span>: <span class="string">'描述'</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">field</span>: <span class="string">'createTime'</span>,</div><div class="line">                <span class="attr">title</span>: <span class="string">'创建时间'</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">field</span>: <span class="string">'modifyTime'</span>,</div><div class="line">                <span class="attr">title</span>: <span class="string">'修改时间'</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">    $Mrbird.initTable(<span class="string">'roleTable'</span>, settings);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>Bootstap Table除了上面介绍的内容外，其还包含了许多别的特性，可参考官方文档：<a href="http://bootstrap-table.wenzhixin.net.cn/zh-cn/documentation/" target="_blank" rel="external">http://bootstrap-table.wenzhixin.net.cn/zh-cn/documentation/</a>。</p><p>源码链接：<a href="https://drive.google.com/open?id=1qEVgDDBfbdaVJ1FSckzQr6RAUyGF7k6J" target="_blank" rel="external">https://drive.google.com/open?id=1qEVgDDBfbdaVJ1FSckzQr6RAUyGF7k6J</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:01 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Bootstrap Table是一款基于Bootstrap的jQuery表格插件，通过简单的设置，就可以拥有强大的单选、多选、排序、分页，以及编辑、导出、过滤、扩展等等的功能。作者地址：&lt;a href=&quot;https://github.com/wenzhixin/bootstrap-table&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/wenzhixin/bootstrap-table&lt;/a&gt;。这里简单介绍下使用方法以及对其进行二次封装，方便日常开发使用。
    
    </summary>
    
    
      <category term="Bootstrap" scheme="http://mrbird.cc/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Linux下部署Spring Boot jar</title>
    <link href="http://mrbird.cc/Linux%E4%B8%8B%E9%83%A8%E7%BD%B2Spring-Boot-jar.html"/>
    <id>http://mrbird.cc/Linux下部署Spring-Boot-jar.html</id>
    <published>2018-01-05T09:11:01.000Z</published>
    <updated>2018-04-11T01:34:15.789Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:01 GMT+0800 (中国标准时间) --><p>部署Spring Boot项目可以使用Maven命令<code>mvn:clean package</code>将项目打包成只执行的jar文件，然后使用命令<code>java -jar XX.jar</code>来执行。但这样做无法将shell命令行释放，关闭terminal后项目也随之关闭了。这里介绍在Linux系统中后台运行Spring Boot jar文件的方法。</p><p>实现这个功能主要依赖于Linux的<code>nohup</code>命令。<code>nohup</code>命令可以将程序以忽略挂起信号的方式运行起来，被运行的程序的输出信息将不会显示到终端。<a id="more"></a></p><p><code>nohup</code>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">nohup 命令</div><div class="line">用途：不挂断地运行命令。</div><div class="line">语法：nohup Command [ Arg … ][ &amp; ]</div></pre></td></tr></table></figure><p></p><p>所以只需要在启动命令前加上<code>nohup</code>命令，末尾加上<code>&amp;</code>即可：<code>nohup java -jar XX.jar &amp;</code>。</p><p>为了方便，我们可以编写启动脚本<strong>start.sh</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup java -jar XX.jar &amp;</div></pre></td></tr></table></figure><p></p><p>关停脚本<strong>stop.sh</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">PID=$(ps -ef | grep XX.jar | grep -v grep | awk '&#123; print $2 &#125;')</div><div class="line">if [ -z "$PID" ]</div><div class="line">then</div><div class="line">    echo Application is already stopped</div><div class="line">else</div><div class="line">    echo kill $PID</div><div class="line">    kill $PID</div><div class="line">fi</div></pre></td></tr></table></figure><p></p><p>重启脚本<strong>run.sh</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">echo stop application</div><div class="line">source stop.sh</div><div class="line">echo start application</div><div class="line">source start.sh</div></pre></td></tr></table></figure><p></p><p>在编写shell脚本的过程中遇到了两个问题：</p><ol><li><p>执行<code>.sh</code>文件提示权限不足：</p><p>解决办法：执行命令<code>chmod u+x XX.sh</code>赋予当前用于可执行的权限即可。</p></li><li><p>提示<span style="color:red">/bin/bash^M: bad interpreter: 没有那个文件或目录</span>。</p><p>问题出现的原因是shell脚本是在windows中编写的然后上传到Linux中的，出现了兼容性问题。解决办法：执行<code>vim XX.sh</code>打开shell文件，然后切换到命令模式，执行<code>:set fileformat=unix</code>后保存退出即可。</p></li></ol><p>使用了<code>nohup</code>命令后，会在jar文件目录下生成一个nohup.out文件，可通过其观察当前项目的运行情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> ll</span></div><div class="line">总用量 76612</div><div class="line">drwxrwxr-x 2 zjrun zjrun     4096 2月   8 08:49 log</div><div class="line">-rw------- 1 zjrun zjrun 58695723 2月   8 10:15 nohup.out</div><div class="line">-rwxrw-r-- 1 zjrun zjrun       88 2月   7 15:17 run.sh</div><div class="line">-rw-rw-r-- 1 zjrun zjrun 19730199 2月   8 10:11 sms-1.0.jar</div><div class="line">-rwxrw-r-- 1 zjrun zjrun       60 2月   7 15:22 start.sh</div><div class="line">-rwxrw-r-- 1 zjrun zjrun      184 2月   7 15:19 stop.sh</div><div class="line"><span class="meta"></span></div><div class="line">$<span class="bash"> tail -10f nohup.out </span></div><div class="line">10:14:31.309 logback [main] INFO  o.s.j.e.a.AnnotationMBeanExporter - Registering beans for JMX exposure on startup</div><div class="line">10:14:31.478 logback [main] INFO  o.a.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8963"]</div><div class="line">10:14:31.498 logback [main] INFO  o.a.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8963"]</div><div class="line">10:14:31.506 logback [main] INFO  o.a.tomcat.util.net.NioSelectorPool - Using a shared selector for servlet write/read</div><div class="line">10:14:31.634 logback [main] INFO  o.s.b.c.e.t.TomcatEmbeddedServletContainer - Tomcat started on port(s): 8963 (http)</div><div class="line">10:14:31.644 logback [main] INFO  com.xingyi.sms.SmsApplication - Started SmsApplication in 7.213 seconds (JVM running for 8.03)</div><div class="line">complete!</div><div class="line">10:15:26.978 logback [http-nio-8963-exec-1] INFO  o.a.c.c.C.[.[localhost].[/mobilePre] - Initializing Spring FrameworkServlet 'dispatcherServlet'</div><div class="line">10:15:26.979 logback [http-nio-8963-exec-1] INFO  o.s.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization started</div><div class="line">10:15:27.004 logback [http-nio-8963-exec-1] INFO  o.s.web.servlet.DispatcherServlet - FrameworkServlet 'dispatcherServlet': initialization completed in 25 ms</div></pre></td></tr></table></figure><p></p><blockquote><p>参考自： <a href="http://blog.didispace.com/spring-boot-run-backend/" target="_blank" rel="external">http://blog.didispace.com/spring-boot-run-backend/</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:01 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;部署Spring Boot项目可以使用Maven命令&lt;code&gt;mvn:clean package&lt;/code&gt;将项目打包成只执行的jar文件，然后使用命令&lt;code&gt;java -jar XX.jar&lt;/code&gt;来执行。但这样做无法将shell命令行释放，关闭terminal后项目也随之关闭了。这里介绍在Linux系统中后台运行Spring Boot jar文件的方法。&lt;/p&gt;&lt;p&gt;实现这个功能主要依赖于Linux的&lt;code&gt;nohup&lt;/code&gt;命令。&lt;code&gt;nohup&lt;/code&gt;命令可以将程序以忽略挂起信号的方式运行起来，被运行的程序的输出信息将不会显示到终端。
    
    </summary>
    
    
      <category term="Linux" scheme="http://mrbird.cc/tags/Linux/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot logback日志配置[转]</title>
    <link href="http://mrbird.cc/Spring-Boot-logback%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE.html"/>
    <id>http://mrbird.cc/Spring-Boot-logback日志配置.html</id>
    <published>2018-01-03T09:15:37.000Z</published>
    <updated>2018-04-11T01:34:15.824Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --><p>Spring Boot在所有内部日志中使用<a href="http://commons.apache.org/proper/commons-logging/" target="_blank" rel="external">Commons Logging</a>，但是默认配置也提供了对常用日志的支持，如：<a href="http://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html" target="_blank" rel="external">Java Util Logging</a>，<a href="http://logging.apache.org/log4j/" target="_blank" rel="external">Log4J</a>, <a href="https://logging.apache.org/log4j/2.x/" target="_blank" rel="external">Log4J2</a>和<a href="https://logback.qos.ch/" target="_blank" rel="external">Logback</a>。每种Logger都可以通过配置使用控制台或者文件输出日志内容。</p><p><a href="http://www.slf4j.org/" target="_blank" rel="external">SLF4J</a> —— Simple Logging Facade For Java，它是一个针对于各类Java日志框架的统一Facade抽象。Java日志框架众多——常用的有<code>java.util.logging</code>, <code>log4j</code>, <code>logback</code>，<code>commons-logging</code>, Spring框架使用的是Jakarta Commons Logging API（JCL）。而SLF4J定义了统一的日志抽象接口，而真正的日志实现则是在运行时决定的——它提供了各类日志框架的绑定。<a id="more"></a></p><p><a href="https://logback.qos.ch/" target="_blank" rel="external">Logback</a>是log4j框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J。</p><p>默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。在运行应用程序和其他例子时，你应该已经看到很多INFO级别的日志了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">  _   _   _   _   _   _  </div><div class="line"> / \ / \ / \ / \ / \ / \ </div><div class="line">( m | r | b | i | r | d )</div><div class="line"> \_/ \_/ \_/ \_/ \_/ \_/ </div><div class="line">2018-02-08 15:05:03.368  INFO 14404 --- [ main] cc.mrbird.Application                    : Starting Application on SC-201802012049 with PID 14404 (D:\neonWorkspace\mrbird\target\classes started by Administrator in D:\neonWorkspace\mrbird)</div><div class="line">2018-02-08 15:05:03.375  INFO 14404 --- [ main] cc.mrbird.Application                    : No active profile set, falling back to default profiles: default</div><div class="line">2018-02-08 15:05:03.777  INFO 14404 --- [ main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@31321838: startup date [Thu Feb 08 15:05:03 CST 2018]; root of context hierarchy</div><div class="line">2018-02-08 15:05:05.083  INFO 14404 --- [ main] o.s.b.f.s.DefaultListableBeanFactory     : Overriding bean definition for bean &apos;advisorAutoProxyCreator&apos; with a different definition: replacing [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=shiroConfig; factoryMethodName=advisorAutoProxyCreator; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [cc/mrbird/config/ShiroConfig.class]] with [Root bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=com.alibaba.druid.spring.boot.autoconfigure.stat.DruidSpringAopConfiguration; factoryMethodName=advisorAutoProxyCreator; initMethodName=null; destroyMethodName=(inferred); defined in class path resource [com/alibaba/druid/spring/boot/autoconfigure/stat/DruidSpringAopConfiguration.class]]</div><div class="line">2018-02-08 15:05:05.554  INFO 14404 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean &apos;shiroConfig&apos; of type [cc.mrbird.config.ShiroConfig$$EnhancerBySpringCGLIB$$b7e43ac8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</div><div class="line">2018-02-08 15:05:05.600  INFO 14404 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean &apos;com.alibaba.druid.spring.boot.autoconfigure.stat.DruidSpringAopConfiguration&apos; of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidSpringAopConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</div><div class="line">2018-02-08 15:05:06.231  INFO 14404 --- [ main] trationDelegate$BeanPostProcessorChecker : Bean &apos;mybatis-org.mybatis.spring.boot.autoconfigure.MybatisProperties&apos; of type [org.mybatis.spring.boot.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)</div><div class="line">...</div></pre></td></tr></table></figure><p></p><p>从上面可以看到，日志输出内容元素具体如下：</p><ol><li><p>时间日期：精确到毫秒；</p></li><li><p>日志级别：ERROR, WARN, INFO, DEBUG or TRACE；</p></li><li><p>进程ID；</p></li><li><p>分隔符：<code>---</code>标识实际日志的开始；</p></li><li><p>线程名：方括号括起来（可能会截断控制台输出）；</p></li><li><p>Logger名：通常使用源代码的类名；</p></li><li><p>日志内容。</p></li></ol><h2 id="添加日志依赖"><a href="#添加日志依赖" class="headerlink" title="添加日志依赖"></a>添加日志依赖</h2><p>假如maven依赖中添加了spring-boot-starter-logging：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>那么，我们的Spring Boot应用将自动使用logback作为应用日志框架，Spring Boot启动的时候，由org.springframework.boot.logging.Logging-Application-Listener根据情况初始化并使用。</p><h2 id="默认配置属性支持"><a href="#默认配置属性支持" class="headerlink" title="默认配置属性支持"></a>默认配置属性支持</h2><p>Spring Boot为我们提供了很多默认的日志配置，所以，只要将spring-boot-starter-logging作为依赖加入到当前应用的classpath，则“开箱即用”。 下面介绍几种在application.properties就可以配置的日志相关属性。</p><h2 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h2><p>日志级别从低到高分为<strong>TRACE</strong> &lt; <strong>DEBUG</strong> &lt; <strong>INFO</strong> &lt; <strong>WARN</strong> &lt; <strong>ERROR</strong> &lt; <strong>FATAL</strong>，如果设置为WARN，则低于WARN的信息都不会输出。 Spring Boot中默认配置ERROR、WARN和INFO级别的日志输出到控制台。您还可以通过启动您的应用程序–debug标志来启用“调试”模式（开发的时候推荐开启）,以下两种方式皆可：</p><ul><li><p>在运行命令后加入–debug标志，如：<code>$ java -jar springTest.jar --debug</code>。</p></li><li><p>在application.properties中配置<code>debug=true</code>，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。</p></li></ul><h2 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h2><p>默认情况下，Spring Boot将日志输出到控制台，不会写到日志文件。如果要编写除控制台输出之外的日志文件，则需在application.properties中设置logging.file或logging.path属性。</p><ul><li><p>logging.file，设置文件，可以是绝对路径，也可以是相对路径。如：<code>logging.file=my.log</code>。</p></li><li><p>logging.path，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：<code>logging.path=/var/log</code>。</p></li></ul><p>如果只配置 logging.file，会在项目的当前路径下生成一个 xxx.log 日志文件。</p><p>如果只配置 logging.path，在 /var/log文件夹生成一个日志文件为 spring.log。</p><h2 id="级别控制"><a href="#级别控制" class="headerlink" title="级别控制"></a>级别控制</h2><p>所有支持的日志记录系统都可以在Spring环境中设置记录级别（例如在application.properties中） 格式为：’logging.level.* = LEVEL’</p><ul><li><p><code>logging.level</code>：日志级别控制前缀，<code>*</code>为包名或Logger名</p></li><li><p><code>LEVEL</code>：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF</p></li></ul><p>举例：</p><ul><li><p>logging.level.com.mrbird=DEBUG：com.mrbird包下所有class以DEBUG级别输出。</p></li><li><p>logging.level.root=WARN：root日志以WARN级别输出。</p></li></ul><h2 id="自定义日志配置"><a href="#自定义日志配置" class="headerlink" title="自定义日志配置"></a>自定义日志配置</h2><p>由于日志服务一般都在ApplicationContext创建前就初始化了，它并不是必须通过Spring的配置文件控制。因此通过系统属性和传统的Spring Boot外部配置文件依然可以很好的支持日志控制和管理。</p><p>根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：</p><ul><li><p>Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy</p></li><li><p>Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml</p></li><li><p>Log4j2：log4j2-spring.xml, log4j2.xml</p></li><li><p>JDK (Java Util Logging)：logging.properties</p></li></ul><p>Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项（下面会提到）。</p><p>上面是默认的命名规则，并且放在src/main/resources下面即可。</p><p>如果你即想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，可以在application.properties配置文件里面通过logging.config属性指定自定义的名字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logging.config=classpath:logging-config.xml</div></pre></td></tr></table></figure><p></p><p>虽然一般并不需要改变配置文件的名字，但是如果你想针对不同运行时Profile使用不同的日 志配置，这个功能会很有用。</p><p>下面我们来看看一个普通的logback-spring.xml例子:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE xml&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"log"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!-- &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt;</span></div><div class="line">            &lt;level&gt;ERROR&lt;/level&gt;</div><div class="line">        &lt;/filter&gt;--&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- logback为java中的包 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.mrbird.controller"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--logback.LogbackDemo：类的全路径 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.mrbird.controller.LoginController"</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h3 id="根节点-lt-configuration-gt-包含的属性"><a href="#根节点-lt-configuration-gt-包含的属性" class="headerlink" title="根节点&lt;configuration&gt;包含的属性"></a>根节点<code>&lt;configuration&gt;</code>包含的属性</h3><ul><li><p>scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</p></li><li><p>scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</p></li><li><p>debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</p></li></ul><p>根节点<code>&lt;configuration&gt;</code>的子节点：<code>&lt;configuration&gt;</code>下面一共有2个属性，3个子节点，分别是：</p><p><strong>属性一：设置上下文名称<code>&lt;contextName&gt;</code></strong></p><p>每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p><strong>属性二：设置变量<code>&lt;property&gt;</code></strong> 用来定义变量值的标签，有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"log"</span> /&gt;</span></div></pre></td></tr></table></figure><p></p><h3 id="子节点一-lt-appender-gt"><a href="#子节点一-lt-appender-gt" class="headerlink" title="子节点一&lt;appender&gt;"></a>子节点一<code>&lt;appender&gt;</code></h3><p>appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。</p><p>控制台输出ConsoleAppender：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--输出到控制台--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p><code>&lt;encoder&gt;</code>表示对日志进行编码：</p><ul><li><p><code>%d{HH: mm:ss.SSS}</code>——日志输出时间。</p></li><li><p><code>%thread</code>——输出日志的进程名字，这在Web应用以及异步任务处理中很有用。</p></li><li><p><code>%-5level</code>——日志级别，并且使用5个字符靠左对齐。</p></li><li><p><code>%logger{36}</code>——日志输出者的名字。</p></li><li><p><code>%msg</code>——日志消息。</p></li><li><p><code>%n</code>——平台的换行符。</p></li></ul><p>ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志~</p><p>输出到文件RollingFileAppender：</p><p>另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。RollingFileAppender用于切分文件日志：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--输出到文件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>其中重要的是rollingPolicy的定义：</p><ul><li><p><code>&lt;fileNamePattern&gt;${log.path}/logback.%d{yyyy-MM-dd}.log&lt;/fileNamePattern&gt;</code>定义了日志的切分方式——把每一天的日志归档到一个文件中；</p></li><li><p><code>&lt;maxHistory&gt;30&lt;/maxHistory&gt;</code>表示只保留最近30天的日志，以防止日志填满整个磁盘空间。同理，可以使用<code>%d{yyyy-MM-dd_HH-mm}</code>来定义精确到分的日志切分方式；</p></li><li><p><code>&lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;</code>用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。</p></li></ul><p>logback 每天生成和大小生成冲突的问题可以看这个解答：<a href="http://blog.csdn.net/wujianmin577/article/details/68922545" target="_blank" rel="external">http://blog.csdn.net/wujianmin577/article/details/68922545</a>。</p><h3 id="子节点二-lt-root-gt"><a href="#子节点二-lt-root-gt" class="headerlink" title="子节点二&lt;root&gt;"></a>子节点二<code>&lt;root&gt;</code></h3><p>root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性，用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。</p><p>默认是DEBUG。可以包含零个或多个元素，标识这个appender将会添加到这个logger。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h3 id="子节点三-lt-logger-gt"><a href="#子节点三-lt-logger-gt" class="headerlink" title="子节点三&lt;logger&gt;"></a>子节点三<code>&lt;logger&gt;</code></h3><p><code>&lt;logger&gt;</code>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<code>&lt;appender&gt;</code>。<code>&lt;logger&gt;</code>仅有一个name属性，一个可选的level和一个可选的addtivity属性。</p><ul><li><p><code>name</code>：用来指定受此logger约束的某一个包或者具体的某一个类。</p></li><li><p><code>level</code>：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。</p></li><li><p><code>addtivity</code>：是否向上级logger传递打印信息。默认是true。</p></li></ul><p>logger在实际使用的时候有两种情况：</p><p>先来看一看代码中如何使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.mrbird.controller;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>,method = RequestMethod.POST)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">login</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</div><div class="line">        <span class="comment">//日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出。</span></div><div class="line">        logger.trace(<span class="string">"日志输出 trace"</span>);</div><div class="line">        logger.debug(<span class="string">"日志输出 debug"</span>);</div><div class="line">        logger.info(<span class="string">"日志输出 info"</span>);</div><div class="line">        logger.warn(<span class="string">"日志输出 warn"</span>);</div><div class="line">        logger.error(<span class="string">"日志输出 error"</span>);</div><div class="line">        Map&lt;String,Object&gt; map =<span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">        String userName=request.getParameter(<span class="string">"userName"</span>);</div><div class="line">        String password=request.getParameter(<span class="string">"password"</span>);</div><div class="line">        <span class="keyword">if</span>(!userName.equals(<span class="string">""</span>) &amp;&amp; password!=<span class="string">""</span>)&#123;</div><div class="line">            User user =<span class="keyword">new</span> User(userName,password);</div><div class="line">            request.getSession().setAttribute(<span class="string">"user"</span>,user);</div><div class="line">            map.put(<span class="string">"result"</span>,<span class="string">"1"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            map.put(<span class="string">"result"</span>,<span class="string">"0"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>这是一个登录的判断的方法，我们引入日志，并且打印不同级别的日志，然后根据logback-spring.xml中的配置来看看打印了哪几种级别日志。</p><p>第一种：带有logger的配置，不指定级别，不指定appender：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.mrbird.controller"</span>/&gt;</span></div></pre></td></tr></table></figure><p></p><p><code>&lt;logger name=&quot;com.mrbird.controller&quot; /&gt;</code>将控制controller包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级的日志级别“info”；</p><p>没有设置addtivity，默认为true，将此logger的打印信息向上级传递；</p><p>没有设置appender，此logger本身不打印任何信息。</p><p><code>&lt;root level=&quot;info&quot;&gt;</code>将root的打印级别设置为“info”，指定了名字为“console”的appender。</p><p>当执行com.mrbird.controller.LearnController类的login方法时，LearnController 在包com.mrbird.controller中，所以首先执行<code>&lt;logger name=&quot;com.mrbird.controller&quot;/&gt;</code>，将级别为“info”及大于“info”的日志信息传递给root，本身并不打印； root接到下级传递的信息，交给已经配置好的名为“console”的appender处理，“console”appender将信息打印到控制台；</p><p>打印结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">16:00:17.407 logback [http-nio-8080-exec-8] INFO  com.mrbird.controller.LearnController - 日志输出 info</div><div class="line">16:00:17.408 logback [http-nio-8080-exec-8] WARN  com.mrbird.controller.LearnController - 日志输出 warn</div><div class="line">16:00:17.408 logback [http-nio-8080-exec-8] ERROR com.mrbird.controller.LearnController - 日志输出 error</div></pre></td></tr></table></figure><p></p><p>第二种：带有多个logger的配置，指定级别，指定appender；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--logback.LogbackDemo：类的全路径 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.mrbird.controller.LearnController"</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>控制com.mrbird.controller.LearnController类的日志打印，打印级别为“WARN”;additivity属性为false，表示此logger的打印信息不再向上级传递；指定了名字为“console”的appender。</p><p>这时候执行<code>com.mrbird.controller.LearnController</code>类的login方法时，先执行<code>&lt;logger name=&quot;com.mrbird.controller.LearnController&quot; level=&quot;WARN&quot; additivity=&quot;false&quot;&gt;</code>, 将级别为“WARN”及大于“WARN”的日志信息交给此logger指定的名为“console”的appender处理，在控制台中打出日志，不再向上级root传递打印信息。</p><p>打印结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">16:00:17.408 logback [http-nio-8080-exec-8] WARN  com.mrbird.controller.LearnController - 日志输出 warn</div><div class="line">16:00:17.408 logback [http-nio-8080-exec-8] ERROR com.mrbird.controller.LearnController - 日志输出 error</div></pre></td></tr></table></figure><p></p><p>当然如果你把additivity=”false”改成additivity=”true”的话，就会打印两次，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次。</p><blockquote><p>转载自： <a href="http://tengj.top/2017/04/05/springboot7/" target="_blank" rel="external">http://tengj.top/2017/04/05/springboot7/</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Spring Boot在所有内部日志中使用&lt;a href=&quot;http://commons.apache.org/proper/commons-logging/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Commons Logging&lt;/a&gt;，但是默认配置也提供了对常用日志的支持，如：&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java Util Logging&lt;/a&gt;，&lt;a href=&quot;http://logging.apache.org/log4j/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Log4J&lt;/a&gt;, &lt;a href=&quot;https://logging.apache.org/log4j/2.x/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Log4J2&lt;/a&gt;和&lt;a href=&quot;https://logback.qos.ch/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Logback&lt;/a&gt;。每种Logger都可以通过配置使用控制台或者文件输出日志内容。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.slf4j.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SLF4J&lt;/a&gt; —— Simple Logging Facade For Java，它是一个针对于各类Java日志框架的统一Facade抽象。Java日志框架众多——常用的有&lt;code&gt;java.util.logging&lt;/code&gt;, &lt;code&gt;log4j&lt;/code&gt;, &lt;code&gt;logback&lt;/code&gt;，&lt;code&gt;commons-logging&lt;/code&gt;, Spring框架使用的是Jakarta Commons Logging API（JCL）。而SLF4J定义了统一的日志抽象接口，而真正的日志实现则是在运行时决定的——它提供了各类日志框架的绑定。
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap Modal遮罩问题</title>
    <link href="http://mrbird.cc/Bootstrap-Modal%E9%81%AE%E7%BD%A9%E9%97%AE%E9%A2%98.html"/>
    <id>http://mrbird.cc/Bootstrap-Modal遮罩问题.html</id>
    <published>2017-12-31T02:03:52.000Z</published>
    <updated>2018-04-11T01:34:15.760Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:01 GMT+0800 (中国标准时间) --><p>当同时打开多层Modal并关闭的时候，发现页面的遮罩层并没有消失，可以使用下面的方法手动删除：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"modal"</span>).bind(<span class="string">'hide.bs.modal'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">".modal-backdrop"</span>).remove();</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p></p><a id="more"></a><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:01 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;当同时打开多层Modal并关闭的时候，发现页面的遮罩层并没有消失，可以使用下面的方法手动删除：&lt;/p&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;modal&quot;&lt;/span&gt;).bind(&lt;span class=&quot;string&quot;&gt;&#39;hide.bs.modal&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&quot;.modal-backdrop&quot;&lt;/span&gt;).remove();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Bootstrap" scheme="http://mrbird.cc/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis通用Mapper和PageHelper</title>
    <link href="http://mrbird.cc/MyBatis%E9%80%9A%E7%94%A8Mapper%E5%92%8CPageHelper.html"/>
    <id>http://mrbird.cc/MyBatis通用Mapper和PageHelper.html</id>
    <published>2017-12-28T11:12:25.000Z</published>
    <updated>2018-04-11T01:34:15.802Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --><p>如果项目中使用到了MyBatis框架，那么使用通用Mapper和PageHelper分页插件将极大的简化我们的操作。通用Mapper可以简化对单表的CRUD操作，PageHelper分页插件可以帮我们自动拼接分页SQL，并且可以使用MyBatis Geneator来自动生成实体类，Mapper接口和Mapper xml代码，非常的方便。插件地址及作者链接<a href="https://gitee.com/free" target="_blank" rel="external">https://gitee.com/free</a>。<a id="more"></a></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>这里使用Spring Boot来构建，可参考<a href="Spring-Boot中使用Mybatis.html">Spring-Boot中使用Mybatis.html</a>搭建一个Spring boot + MyBatis的框架，然后在pom中引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 通用mapper --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- pagehelper 分页插件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>接着在pom中配置MyBatis Geneator：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                    <span class="comment">&lt;!-- 数据库连接驱动 --&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--允许移动生成的文件 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 是否覆盖 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 自动生成的配置 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/mybatis-generator.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p><code>src/main/resources/mybatis-generator.xml</code>为生成器的配置，下文会介绍到。</p><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><p>在Spring Boot配置文件application.yml中配置MyBatis：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">mybatis:</span></div><div class="line">  <span class="comment"># type-aliases扫描路径</span></div><div class="line"><span class="attr">  type-aliases-package:</span> <span class="string">com.springboot.bean</span></div><div class="line">  <span class="comment"># mapper xml实现扫描路径</span></div><div class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:mapper/*.xml</span></div><div class="line"><span class="attr">  property:</span></div><div class="line"><span class="attr">    order:</span> <span class="string">BEFORE</span></div></pre></td></tr></table></figure><p></p><p>接下来开始配置插件。</p><h3 id="配置通用Mapper"><a href="#配置通用Mapper" class="headerlink" title="配置通用Mapper"></a>配置通用Mapper</h3><p>在Spring Boot配置文件application.yml中配置通用Mapper：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#mappers 多个接口时逗号隔开</span></div><div class="line"><span class="attr">mapper:</span></div><div class="line"><span class="attr">  mappers:</span> <span class="string">com.springboot.config.MyMapper</span></div><div class="line"><span class="attr">  not-empty:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  identity:</span> <span class="string">oracle</span></div></pre></td></tr></table></figure><p></p><p>关于参数的说明，参考<a href="https://gitee.com/free/Mapper/blob/master/wiki/mapper3/2.Integration.md" target="_blank" rel="external">https://gitee.com/free/Mapper/blob/master/wiki/mapper3/2.Integration.md</a>中的<strong>可配参数介绍</strong>。</p><p>除此之外，我们需要定义一个MyMapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</div><div class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.MySqlMapper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">MySqlMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>值得注意的是，该接口不能被扫描到，应该和自己定义的Mapper分开。自己定义的Mapper都需要继承这个接口。</p><h3 id="配置PageHelper"><a href="#配置PageHelper" class="headerlink" title="配置PageHelper"></a>配置PageHelper</h3><p>在Spring Boot配置文件application.yml中配置通用配置PageHelper：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#pagehelper</span></div><div class="line"><span class="attr">pagehelper:</span> </div><div class="line"><span class="attr">  helperDialect:</span> <span class="string">oracle</span></div><div class="line"><span class="attr">  reasonable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  supportMethodsArguments:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  params:</span> <span class="string">count=countSql</span></div></pre></td></tr></table></figure><p></p><p>参数相关说明参考<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" target="_blank" rel="external">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md</a>中的<strong>分页插件参数介绍</strong>。</p><h3 id="配置Geneator"><a href="#配置Geneator" class="headerlink" title="配置Geneator*"></a>配置Geneator*</h3><p>在路径src/main/resources/下新建mybatis-generator.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></div><div class="line">    PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</div><div class="line">    "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"oracle"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3Simple"</span> <span class="attr">defaultModelType</span>=<span class="string">"flat"</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">"tk.mybatis.mapper.generator.MapperPlugin"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 该配置会使生产的Mapper自动继承MyMapper --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappers"</span> <span class="attr">value</span>=<span class="string">"com.springboot.config.MyMapper"</span> /&gt;</span></div><div class="line">            <span class="comment">&lt;!-- caseSensitive默认false，当数据库表名区分大小写时，可以将该属性设置为true --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"caseSensitive"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 阻止生成自动注释 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"javaFileEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressAllComments"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 数据库链接地址账号密码 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> </span></div><div class="line">            <span class="attr">driverClass</span>=<span class="string">"oracle.jdbc.driver.OracleDriver"</span></div><div class="line">            <span class="attr">connectionURL</span>=<span class="string">"jdbc:oracle:thin:@localhost:1521:ORCL"</span></div><div class="line">            <span class="attr">userId</span>=<span class="string">"scott"</span></div><div class="line">            <span class="attr">password</span>=<span class="string">"6742530"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 生成Model类存放位置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.springboot.bean"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 生成映射文件存放位置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/resources"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 生成Dao类存放位置 --&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件的代码</span></div><div class="line">            type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象</div><div class="line">            type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口 --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.springboot.mapper"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置需要生成的表 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"T_USER"</span> <span class="attr">domainObjectName</span>=<span class="string">"User"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span> <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">sqlStatement</span>=<span class="string">"oralce"</span> <span class="attr">identity</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>更详细的说明可参考链接：<a href="http://blog.csdn.net/isea533/article/details/42102297" target="_blank" rel="external">http://blog.csdn.net/isea533/article/details/42102297</a>。</p><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>配置好MyBatis Geneator后，在eclipse中运行命令<code>mybatis-generator:generate</code>：</p><p><img src="img/QQ截图20171227095243.png" alt="QQ截图20171227095243.png"></p><p>以下为自动成成的代码：</p><p>User：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Table</span>(name = <span class="string">"T_USER"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"ID"</span>)</div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    </div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"USERNAME"</span>)</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    </div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"PASSWD"</span>)</div><div class="line">    <span class="keyword">private</span> String passwd;</div><div class="line">    </div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"CREATE_TIME"</span>)</div><div class="line">    <span class="keyword">private</span> Date createTime;</div><div class="line">    </div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"STATUS"</span>)</div><div class="line">    <span class="keyword">private</span> String status;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>因为这里数据库试用的是Oracle，其没有主键自动自增的功能，这里先将<code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code>去掉，主键的生成下面会介绍到。生成的主键是BigDecimal类型的，我们将其改为Long类型。</p><p>UserMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.springboot.bean.User;</div><div class="line"><span class="keyword">import</span> com.springboot.config.MyMapper;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">MyMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>UserMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.springboot.mapper.UserMapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.springboot.bean.User"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--</span></div><div class="line">        WARNING - @mbg.generated</div><div class="line">        --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"ID"</span> <span class="attr">jdbcType</span>=<span class="string">"DECIMAL"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"USERNAME"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"username"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"PASSWD"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"passwd"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"CREATE_TIME"</span> <span class="attr">jdbcType</span>=<span class="string">"TIMESTAMP"</span> <span class="attr">property</span>=<span class="string">"createTime"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"STATUS"</span> <span class="attr">jdbcType</span>=<span class="string">"CHAR"</span> <span class="attr">property</span>=<span class="string">"status"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>极其方便的说！</p><h2 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h2><p>要让Spring Boot扫描到Mapper接口，需要在Spring Boot入口类中加入<code>@MapperScan(&quot;com.springboot.mapper&quot;)</code>注解。</p><p>为了获取到Oracle 中序列的值，我们定义一个SeqenceMapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SeqenceMapper</span> </span>&#123;</div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select $&#123;seqName&#125;.nextval from dual"</span>)</div><div class="line">    <span class="function">Long <span class="title">getSequence</span><span class="params">(@Param(<span class="string">"seqName"</span>)</span> String seqName)</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>因为这里仅介绍Mapper自带的CRUD方法，所以UserMapper接口中无需定义任何方法。</p><h2 id="通用Service"><a href="#通用Service" class="headerlink" title="通用Service"></a>通用Service</h2><p>我们可以定义一个通用的Service，在其中定义一些通用的方法：</p><p>IService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IService</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Long <span class="title">getSequence</span><span class="params">(@Param(<span class="string">"seqName"</span>)</span> String seqName)</span>;</div><div class="line">    </div><div class="line">    <span class="function">List&lt;T&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</div><div class="line">    </div><div class="line">    <span class="function">T <span class="title">selectByKey</span><span class="params">(Object key)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">save</span><span class="params">(T entity)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(Object key)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateAll</span><span class="params">(T entity)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateNotNull</span><span class="params">(T entity)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function">List&lt;T&gt; <span class="title">selectByExample</span><span class="params">(Object example)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>其实现类BaseService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseService</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IService</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">protected</span> Mapper&lt;T&gt; mapper;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">protected</span> SeqenceMapper seqenceMapper;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Mapper&lt;T&gt; <span class="title">getMapper</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mapper;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getSequence</span><span class="params">(@Param(<span class="string">"seqName"</span>)</span> String seqName)</span>&#123;</div><div class="line">        <span class="keyword">return</span> seqenceMapper.getSequence(seqName);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//说明：查询所有数据</span></div><div class="line">        <span class="keyword">return</span> mapper.selectAll();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">selectByKey</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        <span class="comment">//说明：根据主键字段进行查询，方法参数必须包含完整的主键属性，查询条件使用等号</span></div><div class="line">        <span class="keyword">return</span> mapper.selectByPrimaryKey(key);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(T entity)</span> </span>&#123;</div><div class="line">        <span class="comment">//说明：保存一个实体，null的属性也会保存，不会使用数据库默认值</span></div><div class="line">        <span class="keyword">return</span> mapper.insert(entity);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        <span class="comment">//说明：根据主键字段进行删除，方法参数必须包含完整的主键属性</span></div><div class="line">        <span class="keyword">return</span> mapper.deleteByPrimaryKey(key);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateAll</span><span class="params">(T entity)</span> </span>&#123;</div><div class="line">        <span class="comment">//说明：根据主键更新实体全部字段，null值会被更新</span></div><div class="line">        <span class="keyword">return</span> mapper.updateByPrimaryKey(entity);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateNotNull</span><span class="params">(T entity)</span> </span>&#123;</div><div class="line">        <span class="comment">//根据主键更新属性不为null的值</span></div><div class="line">        <span class="keyword">return</span> mapper.updateByPrimaryKeySelective(entity);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">selectByExample</span><span class="params">(Object example)</span> </span>&#123;</div><div class="line">        <span class="comment">//说明：根据Example条件进行查询</span></div><div class="line">        <span class="comment">//重点：这个查询支持通过Example类指定查询列，通过selectProperties方法指定查询列</span></div><div class="line">        <span class="keyword">return</span> mapper.selectByExample(example);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>接下来让UserService接口继承IService接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt;</span>&#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>其实现类UserServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span>(<span class="string">"userService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">BaseService</span>&lt;<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>这样即可在UserService中使用BaseService中的通用方法了。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试插入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span>(classes = Application.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setId(userService.getSequence(<span class="string">"seq_user"</span>));</div><div class="line">        user.setUsername(<span class="string">"scott"</span>);</div><div class="line">        user.setPasswd(<span class="string">"ac089b11709f9b9e9980e7c497268dfa"</span>);</div><div class="line">        user.setCreateTime(<span class="keyword">new</span> Date());</div><div class="line">        user.setStatus(<span class="string">"0"</span>);</div><div class="line">        <span class="keyword">this</span>.userService.save(user);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>运行代码，查看数据库：</p><p><img src="img/QQ截图20171227102024.png" alt="QQ截图20171227102024.png"></p><p>测试查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Example example = <span class="keyword">new</span> Example(User.class);</div><div class="line">example.createCriteria().andCondition(<span class="string">"username like '%i%'"</span>);</div><div class="line">example.setOrderByClause(<span class="string">"id desc"</span>);</div><div class="line">List&lt;User&gt; userList = <span class="keyword">this</span>.userService.selectByExample(example);</div><div class="line"><span class="keyword">for</span> (User u : userList) &#123;</div><div class="line">    System.out.println(u.getUsername());</div><div class="line">&#125;</div><div class="line"></div><div class="line">List&lt;User&gt; all = <span class="keyword">this</span>.userService.selectAll();</div><div class="line"><span class="keyword">for</span> (User u : all) &#123;</div><div class="line">    System.out.println(u.getUsername());</div><div class="line">&#125;</div><div class="line"></div><div class="line">User user = <span class="keyword">new</span> User();</div><div class="line">user.setId(<span class="number">1l</span>);</div><div class="line">user = <span class="keyword">this</span>.userService.selectByKey(user);</div><div class="line">System.out.println(user.getUsername());</div></pre></td></tr></table></figure><p></p><p>测试删除：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">User user = <span class="keyword">new</span> User();</div><div class="line">user.setId(<span class="number">4l</span>);</div><div class="line"><span class="keyword">this</span>.userService.delete(user);</div></pre></td></tr></table></figure><p></p><p>分页测试，从第二页开始，每页2条数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">PageHelper.startPage(<span class="number">2</span>, <span class="number">2</span>);</div><div class="line">List&lt;User&gt; list = userService.selectAll();</div><div class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;User&gt;(list);</div><div class="line">List&lt;User&gt; result = pageInfo.getList();</div><div class="line"><span class="keyword">for</span> (User u : result) &#123;</div><div class="line">    System.out.println(u.getUsername());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>查看日志打印出的SQL：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2017-12-28 10:25:14.033 DEBUG 11116 --- [main] c.s.mapper.UserMapper.selectAll          : ==&gt;  Preparing: SELECT * FROM ( SELECT TMP_PAGE.*, ROWNUM ROW_ID FROM (</div><div class="line">                                                                                                          SELECT ID,USERNAME,PASSWD,CREATE_TIME,STATUS FROM T_USER ) TMP_PAGE WHERE ROWNUM &lt;= ? ) WHERE ROW_ID &gt; ? </div><div class="line">2017-12-28 10:25:14.068 DEBUG 11116 --- [main] c.s.mapper.UserMapper.selectAll          : ==&gt; Parameters: 4(Integer), 2(Integer)</div><div class="line">2017-12-28 10:25:14.073 DEBUG 11116 --- [main] c.s.mapper.UserMapper.selectAll          : &lt;==      Total: 2</div></pre></td></tr></table></figure><p></p><p>插件已经帮我自动拼接好了。</p><p>其他注意事项参考官方说明。源码链接：<a href="https://drive.google.com/open?id=1ePz1ihSGSFwNtE_-FWHEG-F5qOJ3dLQi" target="_blank" rel="external">https://drive.google.com/open?id=1ePz1ihSGSFwNtE_-FWHEG-F5qOJ3dLQi</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;如果项目中使用到了MyBatis框架，那么使用通用Mapper和PageHelper分页插件将极大的简化我们的操作。通用Mapper可以简化对单表的CRUD操作，PageHelper分页插件可以帮我们自动拼接分页SQL，并且可以使用MyBatis Geneator来自动生成实体类，Mapper接口和Mapper xml代码，非常的方便。插件地址及作者链接&lt;a href=&quot;https://gitee.com/free&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://gitee.com/free&lt;/a&gt;。
    
    </summary>
    
    
      <category term="MyBatis" scheme="http://mrbird.cc/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Shiro在线会话管理</title>
    <link href="http://mrbird.cc/Spring-Boot-Shiro%E5%9C%A8%E7%BA%BF%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86.html"/>
    <id>http://mrbird.cc/Spring-Boot-Shiro在线会话管理.html</id>
    <published>2017-12-28T10:29:59.000Z</published>
    <updated>2018-04-11T01:34:15.822Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --><p>在Shiro中我们可以通过<code>org.apache.shiro.session.mgt.eis.SessionDAO</code>对象的<code>getActiveSessions()</code>方法方便的获取到当前所有有效的Session对象。通过这些Session对象，我们可以实现一些比较有趣的功能，比如查看当前系统的在线人数，查看这些在线用户的一些基本信息，强制让某个用户下线等。</p><p>为了达到这几个目标，我们在现有的Spring Boot Shiro项目基础上进行一些改造（缓存使用Ehcache）。<a id="more"></a></p><h2 id="更改ShiroConfig"><a href="#更改ShiroConfig" class="headerlink" title="更改ShiroConfig"></a>更改ShiroConfig</h2><p>为了能够在Spring Boot中使用<code>SessionDao</code>，我们在ShiroConfig中配置该Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> SessionDAO <span class="title">sessionDAO</span><span class="params">()</span> </span>&#123;</div><div class="line">    MemorySessionDAO sessionDAO = <span class="keyword">new</span> MemorySessionDAO();</div><div class="line">    <span class="keyword">return</span> sessionDAO;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>如果使用的是Redis作为缓存实现，那么SessionDAO则为<code>RedisSessionDAO</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> RedisSessionDAO <span class="title">sessionDAO</span><span class="params">()</span> </span>&#123;</div><div class="line">    RedisSessionDAO redisSessionDAO = <span class="keyword">new</span> RedisSessionDAO();</div><div class="line">    redisSessionDAO.setRedisManager(redisManager());</div><div class="line">    <span class="keyword">return</span> redisSessionDAO;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>在Shiro中，<code>SessionDao</code>通过<code>org.apache.shiro.session.mgt.SessionManager</code>进行管理，所以继续在ShiroConfig中配置<code>SessionManager</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> SessionManager <span class="title">sessionManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</div><div class="line">    Collection&lt;SessionListener&gt; listeners = <span class="keyword">new</span> ArrayList&lt;SessionListener&gt;();</div><div class="line">    listeners.add(<span class="keyword">new</span> ShiroSessionListener());</div><div class="line">    sessionManager.setSessionListeners(listeners);</div><div class="line">    sessionManager.setSessionDAO(sessionDAO());</div><div class="line">    <span class="keyword">return</span> sessionManager;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>其中<code>ShiroSessionListener</code>为<code>org.apache.shiro.session.SessionListener</code>接口的手动实现，所以接下来定义一个该接口的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroSessionListener</span> <span class="keyword">implements</span> <span class="title">SessionListener</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger sessionCount = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Session session)</span> </span>&#123;</div><div class="line">        sessionCount.incrementAndGet();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">(Session session)</span> </span>&#123;</div><div class="line">        sessionCount.decrementAndGet();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onExpiration</span><span class="params">(Session session)</span> </span>&#123;</div><div class="line">        sessionCount.decrementAndGet();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>其维护着一个原子类型的Integer对象，用于统计在线Session的数量。</p><p>定义完SessionManager后，还需将其注入到SecurityManager中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;  </div><div class="line">    DefaultWebSecurityManager securityManager =  <span class="keyword">new</span> DefaultWebSecurityManager();</div><div class="line">    securityManager.setRealm(shiroRealm());</div><div class="line">    ...</div><div class="line">    securityManager.setSessionManager(sessionManager());</div><div class="line">    <span class="keyword">return</span> securityManager;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="UserOnline"><a href="#UserOnline" class="headerlink" title="UserOnline"></a>UserOnline</h2><p>配置完ShiroConfig后，我们可以创建一个UserOnline实体类，用于描述每个在线用户的基本信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOnline</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3828664348416633856L</span>;</div><div class="line">    <span class="comment">// session id</span></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    <span class="comment">// 用户id</span></div><div class="line">    <span class="keyword">private</span> String userId;</div><div class="line">    <span class="comment">// 用户名称</span></div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="comment">// 用户主机地址</span></div><div class="line">    <span class="keyword">private</span> String host;</div><div class="line">    <span class="comment">// 用户登录时系统IP</span></div><div class="line">    <span class="keyword">private</span> String systemHost;</div><div class="line">    <span class="comment">// 状态</span></div><div class="line">    <span class="keyword">private</span> String status;</div><div class="line">    <span class="comment">// session创建时间</span></div><div class="line">    <span class="keyword">private</span> Date startTimestamp;</div><div class="line">    <span class="comment">// session最后访问时间</span></div><div class="line">    <span class="keyword">private</span> Date lastAccessTime;</div><div class="line">    <span class="comment">// 超时时间</span></div><div class="line">    <span class="keyword">private</span> Long timeout;</div><div class="line">    <span class="comment">// get set略</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>创建一个Service接口，包含查看所有在线用户和根据SessionId踢出用户抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SessionService</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;UserOnline&gt; <span class="title">list</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">forceLogout</span><span class="params">(String sessionId)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>其具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"sessionService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionServiceImpl</span> <span class="keyword">implements</span> <span class="title">SessionService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> SessionDAO sessionDAO;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserOnline&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;UserOnline&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        Collection&lt;Session&gt; sessions = sessionDAO.getActiveSessions();</div><div class="line">        <span class="keyword">for</span> (Session session : sessions) &#123;</div><div class="line">            UserOnline userOnline = <span class="keyword">new</span> UserOnline();</div><div class="line">            User user = <span class="keyword">new</span> User();</div><div class="line">            SimplePrincipalCollection principalCollection = <span class="keyword">new</span> SimplePrincipalCollection();</div><div class="line">            <span class="keyword">if</span> (session.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY) == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                principalCollection = (SimplePrincipalCollection) session</div><div class="line">                	.getAttribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY);</div><div class="line">                user = (User) principalCollection.getPrimaryPrincipal();</div><div class="line">                userOnline.setUsername(user.getUserName());</div><div class="line">                userOnline.setUserId(user.getId().toString());</div><div class="line">            &#125;</div><div class="line">            userOnline.setId((String) session.getId());</div><div class="line">            userOnline.setHost(session.getHost());</div><div class="line">            userOnline.setStartTimestamp(session.getStartTimestamp());</div><div class="line">            userOnline.setLastAccessTime(session.getLastAccessTime());</div><div class="line">            Long timeout = session.getTimeout();</div><div class="line">            <span class="keyword">if</span> (timeout == <span class="number">0l</span>) &#123;</div><div class="line">                userOnline.setStatus(<span class="string">"离线"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                userOnline.setStatus(<span class="string">"在线"</span>);</div><div class="line">            &#125;</div><div class="line">            userOnline.setTimeout(timeout);</div><div class="line">            list.add(userOnline);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">forceLogout</span><span class="params">(String sessionId)</span> </span>&#123;</div><div class="line">        Session session = sessionDAO.readSession(sessionId);</div><div class="line">        session.setTimeout(<span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>通过SessionDao的<code>getActiveSessions()</code>方法，我们可以获取所有有效的Session，通过该Session，我们还可以获取到当前用户的Principal信息。</p><p>值得说明的是，当某个用户被踢出后（Session Time置为0），该Session并不会立刻从ActiveSessions中剔除，所以我们可以通过其timeout信息来判断该用户在线与否。</p><p>如果使用的Redis作为缓存实现，那么，<code>forceLogout()</code>方法需要稍作修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">forceLogout</span><span class="params">(String sessionId)</span> </span>&#123;</div><div class="line">    Session session = sessionDAO.readSession(sessionId);</div><div class="line">    sessionDAO.delete(session);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>定义一个SessionContoller，用于处理Session的相关操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/online"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    SessionService sessionService;</div><div class="line">    </div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"index"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">online</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"online"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"list"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserOnline&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sessionService.list();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"forceLogout"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseBo <span class="title">forceLogout</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            sessionService.forceLogout(id);</div><div class="line">            <span class="keyword">return</span> ResponseBo.ok();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> ResponseBo.error(<span class="string">"踢出用户失败"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><p>我们编写一个online.html页面，用于展示所有在线用户的信息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>在线用户管理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery-1.11.1.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/dateFormat.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>在线用户数：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"onlineCount"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>登录时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>最后访问时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>主机<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index&#125;"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> ctx = [[@&#123;/&#125;]];</div><div class="line">    $.get(ctx + <span class="string">"online/list"</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> length = r.length;</div><div class="line">        $(<span class="string">"#onlineCount"</span>).text(length);</div><div class="line">        <span class="keyword">var</span> html = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</div><div class="line">            html += <span class="string">"&lt;tr&gt;"</span></div><div class="line">                + <span class="string">"&lt;td&gt;"</span> + (i+<span class="number">1</span>) + <span class="string">"&lt;/td&gt;"</span></div><div class="line">                + <span class="string">"&lt;td&gt;"</span> + r[i].username + <span class="string">"&lt;/td&gt;"</span></div><div class="line">                + <span class="string">"&lt;td&gt;"</span> + <span class="keyword">new</span> <span class="built_in">Date</span>(r[i].startTimestamp).Format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>) + <span class="string">"&lt;/td&gt;"</span></div><div class="line">                + <span class="string">"&lt;td&gt;"</span> + <span class="keyword">new</span> <span class="built_in">Date</span>(r[i].lastAccessTime).Format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>) + <span class="string">"&lt;/td&gt;"</span></div><div class="line">                + <span class="string">"&lt;td&gt;"</span> + r[i].host + <span class="string">"&lt;/td&gt;"</span></div><div class="line">                + <span class="string">"&lt;td&gt;"</span> + r[i].status + <span class="string">"&lt;/td&gt;"</span></div><div class="line">                + <span class="string">"&lt;td&gt;&lt;a href='#' onclick='offline(\""</span> + r[i].id + <span class="string">"\",\""</span> + r[i].status +<span class="string">"\")'&gt;下线&lt;/a&gt;&lt;/td&gt;"</span></div><div class="line">                + <span class="string">"&lt;/tr&gt;"</span>;</div><div class="line">        &#125;</div><div class="line">        $(<span class="string">"table"</span>).append(html);</div><div class="line">    &#125;,<span class="string">"json"</span>);</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">offline</span>(<span class="params">id,status</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(status == <span class="string">"离线"</span>)&#123;</div><div class="line">            alert(<span class="string">"该用户已是离线状态！！"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        $.get(ctx + <span class="string">"online/forceLogout"</span>, &#123;<span class="string">"id"</span>: id&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (r.code == <span class="number">0</span>) &#123;</div><div class="line">                alert(<span class="string">'该用户已强制下线！'</span>);</div><div class="line">                location.href = ctx + <span class="string">'online/index'</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                alert(r.msg);</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="string">"json"</span>);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>在index.html中加入该页面的入口：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好！[[$&#123;user.userName&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasRole</span>=<span class="string">"admin"</span>&gt;</span>你的角色为超级管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasRole</span>=<span class="string">"test"</span>&gt;</span>你的角色为测试账户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"user:user"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/list&#125;"</span>&gt;</span>获取用户信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"user:add"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/add&#125;"</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"user:delete"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/delete&#125;"</span>&gt;</span>删除用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasRole</span>=<span class="string">"admin"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/online/index&#125;"</span>&gt;</span>在线用户管理<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/logout&#125;"</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure><p></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动项目，在Opera浏览器中使用mrbird账户访问：</p><p><img src="img/QQ截图20171214191456.png" alt="QQ截图20171214191456.png"></p><p>在FireFox浏览器中使用tester账户访问：</p><p><img src="img/QQ截图20171214191543.png" alt="QQ截图20171214191543.png"></p><p>然后在mrbird主界面点击“在线用户管理”：</p><p><img src="img/QQ截图20171214191641.png" alt="QQ截图20171214191641.png"></p><p>显示的信息符合我们的预期，点击tester的下线按钮，强制将其踢出：</p><p><img src="img/QQ截图20171214191917.png" alt="QQ截图20171214191917.png"></p><p>回到tester用户的主界面，点击“查看用户信息”，会发现页面已经被重定向到login页面，因为其Session已经失效！</p><p>再次刷新mrbird的online页面，显示如下：</p><p><img src="img/QQ截图20171214192219.png" alt="QQ截图20171214192219.png"></p><p>源码链接（Ehcache版）：<a href="https://drive.google.com/open?id=1AkCqvpVfGtdqpDktziCZrxSjPG854Arn" target="_blank" rel="external">https://drive.google.com/open?id=1AkCqvpVfGtdqpDktziCZrxSjPG854Arn</a></p><p>源码链接（Redis版）：<a href="https://drive.google.com/open?id=1GHJxnoX2rZuQXtMYpNv-TE5SHRwyqSN7" target="_blank" rel="external">https://drive.google.com/open?id=1GHJxnoX2rZuQXtMYpNv-TE5SHRwyqSN7</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在Shiro中我们可以通过&lt;code&gt;org.apache.shiro.session.mgt.eis.SessionDAO&lt;/code&gt;对象的&lt;code&gt;getActiveSessions()&lt;/code&gt;方法方便的获取到当前所有有效的Session对象。通过这些Session对象，我们可以实现一些比较有趣的功能，比如查看当前系统的在线人数，查看这些在线用户的一些基本信息，强制让某个用户下线等。&lt;/p&gt;&lt;p&gt;为了达到这几个目标，我们在现有的Spring Boot Shiro项目基础上进行一些改造（缓存使用Ehcache）。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Shiro" scheme="http://mrbird.cc/tags/Shiro/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Thymeleaf中使用Shiro标签</title>
    <link href="http://mrbird.cc/Spring-Boot-Themeleaf%E4%B8%AD%E4%BD%BF%E7%94%A8Shiro%E6%A0%87%E7%AD%BE.html"/>
    <id>http://mrbird.cc/Spring-Boot-Themeleaf中使用Shiro标签.html</id>
    <published>2017-12-26T02:36:33.000Z</published>
    <updated>2018-04-11T01:34:15.823Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --><p>在<a href="/Spring-Boot-Shiro权限控制.html">《Spring-Boot-shiro权限控制》</a>中，当用户访问没有权限的资源时，我们采取的做法是跳转到403页面，但在实际项目中更为常见的做法是只显示当前用户拥有访问权限的资源链接。配合Thymeleaf中的Shiro标签可以很简单的实现这个目标。</p><p>实际上Thymeleaf官方并没有提供Shiro的标签，我们需要引入第三方实现，地址为<a href="https://github.com/theborakompanioni/thymeleaf-extras-shiro" target="_blank" rel="external">https://github.com/theborakompanioni/thymeleaf-extras-shiro</a>。<a id="more"></a></p><h2 id="引入thymeleaf-extras-shiro"><a href="#引入thymeleaf-extras-shiro" class="headerlink" title="引入thymeleaf-extras-shiro"></a>引入thymeleaf-extras-shiro</h2><p>在pom中引入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id="ShiroConfig配置"><a href="#ShiroConfig配置" class="headerlink" title="ShiroConfig配置"></a>ShiroConfig配置</h2><p>引入依赖后，需要在ShiroConfig中配置该方言标签：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="首页改造"><a href="#首页改造" class="headerlink" title="首页改造"></a>首页改造</h2><p>更改index.html，用于测试Shiro标签的使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span> </span></div><div class="line">      <span class="attr">xmlns:shiro</span>=<span class="string">"http://www.pollix.at/thymeleaf/shiro"</span> &gt;</div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好！[[$&#123;user.userName&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasRole</span>=<span class="string">"admin"</span>&gt;</span>你的角色为超级管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasRole</span>=<span class="string">"test"</span>&gt;</span>你的角色为测试账户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"user:user"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/list&#125;"</span>&gt;</span>获取用户信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"user:add"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/add&#125;"</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"user:delete"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/delete&#125;"</span>&gt;</span>删除用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/logout&#125;"</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>值得注意的是，在html页面中使用Shiro标签需要给html标签添加<code>xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot;</code>。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动项目，使用mrbird（角色为admin，具有user:user，user:add，user:delete权限）账户登录：</p><p><img src="img/QQ截图20171214150454.png" alt="QQ截图20171214150454.png"></p><p>使用tester（角色为tester，仅有user:user权限）账户登录：</p><p><img src="img/QQ截图20171214150617.png" alt="QQ截图20171214150617.png"></p><h2 id="更多标签"><a href="#更多标签" class="headerlink" title="更多标签"></a>更多标签</h2><p>The following examples show how to integrate the tags in your Thymeleaf templates. These are all implementations of the examples given in the <a href="http://shiro.apache.org/web.html#Web-JSP%252FGSPTagLibrary" target="_blank" rel="external">JSP / GSP Tag Library Section</a> of the Apache Shiro documentation.</p><p>Tags can be written in attribute or element notation:</p><h4 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:anyTag</span>&gt;</span></div><div class="line">  Goodbye cruel World!</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shiro:anyTag</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:anyTag</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="The-guest-tag"><a href="#The-guest-tag" class="headerlink" title="The guest tag"></a>The <code>guest</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:guest</span>=<span class="string">""</span>&gt;</span></div><div class="line">  Please <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.html"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="The-user-tag"><a href="#The-user-tag" class="headerlink" title="The user tag"></a>The <code>user</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:user</span>=<span class="string">""</span>&gt;</span></div><div class="line">  Welcome back John! Not John? Click <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.html"</span>&gt;</span>here<span class="tag">&lt;<span class="name">a</span>&gt;</span> to login.</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="The-authenticated-tag"><a href="#The-authenticated-tag" class="headerlink" title="The authenticated tag"></a>The <code>authenticated</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:authenticated</span>=<span class="string">""</span> <span class="attr">href</span>=<span class="string">"updateAccount.html"</span>&gt;</span>Update your contact information<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="The-notAuthenticated-tag"><a href="#The-notAuthenticated-tag" class="headerlink" title="The notAuthenticated tag"></a>The <code>notAuthenticated</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:notAuthenticated</span>=<span class="string">""</span>&gt;</span></div><div class="line">  Please <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.html"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">a</span>&gt;</span> in order to update your credit card information.</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="The-principal-tag"><a href="#The-principal-tag" class="headerlink" title="The principal tag"></a>The <code>principal</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, <span class="tag">&lt;<span class="name">span</span> <span class="attr">shiro:principal</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>, how are you today?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p>or</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, <span class="tag">&lt;<span class="name">shiro:principal</span>/&gt;</span>, how are you today?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>Typed principal and principal property are also supported.</p><h4 id="The-hasRole-tag"><a href="#The-hasRole-tag" class="headerlink" title="The hasRole tag"></a>The <code>hasRole</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasRole</span>=<span class="string">"administrator"</span> <span class="attr">href</span>=<span class="string">"admin.html"</span>&gt;</span>Administer the system<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="The-lacksRole-tag"><a href="#The-lacksRole-tag" class="headerlink" title="The lacksRole tag"></a>The <code>lacksRole</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:lacksRole</span>=<span class="string">"administrator"</span>&gt;</span></div><div class="line">  Sorry, you are not allowed to administer the system.</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="The-hasAllRoles-tag"><a href="#The-hasAllRoles-tag" class="headerlink" title="The hasAllRoles tag"></a>The <code>hasAllRoles</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasAllRoles</span>=<span class="string">"developer, project manager"</span>&gt;</span></div><div class="line">  You are a developer and a project manager.</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="The-hasAnyRoles-tag"><a href="#The-hasAnyRoles-tag" class="headerlink" title="The hasAnyRoles tag"></a>The <code>hasAnyRoles</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasAnyRoles</span>=<span class="string">"developer, project manager, administrator"</span>&gt;</span></div><div class="line">  You are a developer, project manager, or administrator.</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="The-hasPermission-tag"><a href="#The-hasPermission-tag" class="headerlink" title="The hasPermission tag"></a>The <code>hasPermission</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasPermission</span>=<span class="string">"user:create"</span> <span class="attr">href</span>=<span class="string">"createUser.html"</span>&gt;</span>Create a new User<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="The-lacksPermission-tag"><a href="#The-lacksPermission-tag" class="headerlink" title="The lacksPermission tag"></a>The <code>lacksPermission</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:lacksPermission</span>=<span class="string">"user:delete"</span>&gt;</span></div><div class="line">  Sorry, you are not allowed to delete user accounts.</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="The-hasAllPermissions-tag"><a href="#The-hasAllPermissions-tag" class="headerlink" title="The hasAllPermissions tag"></a>The <code>hasAllPermissions</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasAllPermissions</span>=<span class="string">"user:create, user:delete"</span>&gt;</span></div><div class="line">  You can create and delete users.</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="The-hasAnyPermissions-tag"><a href="#The-hasAnyPermissions-tag" class="headerlink" title="The hasAnyPermissions tag"></a>The <code>hasAnyPermissions</code> tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasAnyPermissions</span>=<span class="string">"user:create, user:delete"</span>&gt;</span></div><div class="line">  You can create or delete users.</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p>源码地址：<a href="https://drive.google.com/open?id=1w4ZeRBkTWuJrulQStuT1SkEgYcurALoF" target="_blank" rel="external">https://drive.google.com/open?id=1w4ZeRBkTWuJrulQStuT1SkEgYcurALoF</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在&lt;a href=&quot;/Spring-Boot-Shiro权限控制.html&quot;&gt;《Spring-Boot-shiro权限控制》&lt;/a&gt;中，当用户访问没有权限的资源时，我们采取的做法是跳转到403页面，但在实际项目中更为常见的做法是只显示当前用户拥有访问权限的资源链接。配合Thymeleaf中的Shiro标签可以很简单的实现这个目标。&lt;/p&gt;&lt;p&gt;实际上Thymeleaf官方并没有提供Shiro的标签，我们需要引入第三方实现，地址为&lt;a href=&quot;https://github.com/theborakompanioni/thymeleaf-extras-shiro&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/theborakompanioni/thymeleaf-extras-shiro&lt;/a&gt;。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Shiro" scheme="http://mrbird.cc/tags/Shiro/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="Thymeleaf" scheme="http://mrbird.cc/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Shiro中使用缓存</title>
    <link href="http://mrbird.cc/Spring-Boot-Shiro%20cache.html"/>
    <id>http://mrbird.cc/Spring-Boot-Shiro cache.html</id>
    <published>2017-12-25T02:34:43.000Z</published>
    <updated>2018-04-11T01:34:15.822Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --><p>在Shiro中加入缓存可以使权限相关操作尽可能快，避免频繁访问数据库获取权限信息，因为对于一个用户来说，其权限在短时间内基本是不会变化的。Shiro提供了Cache的抽象，其并没有直接提供相应的实现，因为这已经超出了一个安全框架的范围。在Shiro中可以集成常用的缓存实现，这里介绍基于Redis和Ehcache缓存的实现。</p><p>在<a href="/Spring-Boot-Shiro权限控制.html">《Spring-Boot-shiro权限控制》</a>中，当用户访问”获取用户信息”、”新增用户”和”删除用户”的时候，后台输出了三次打印信息，如下所示：<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">用户mrbird获取权限-----ShiroRealm.doGetAuthorizationInfo</div><div class="line">用户mrbird获取权限-----ShiroRealm.doGetAuthorizationInfo</div><div class="line">用户mrbird获取权限-----ShiroRealm.doGetAuthorizationInfo</div></pre></td></tr></table></figure><p></p><p>说明在这三次访问中，Shiro都会从数据库中获取用户的权限信息，通过Druid数据源SQL监控后台也可以证实这一点：</p><p><img src="img/QQ截图20171214105048.png" alt="QQ截图20171214105048.png"></p><p>这对数据库来说是没必要的消耗。接下来使用缓存来解决这个问题。</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="引入Redis依赖"><a href="#引入Redis依赖" class="headerlink" title="引入Redis依赖"></a>引入Redis依赖</h3><p>网络上已经有关于Shiro集成Redis的实现，我们引入即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- shiro-redis --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.crazycake<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2.1-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h3 id="配置Redis"><a href="#配置Redis" class="headerlink" title="配置Redis"></a>配置Redis</h3><p>我们在application.yml配置文件中加入Redis配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  redis:</span></div><div class="line"><span class="attr">    host:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">    port:</span> <span class="number">6379</span></div><div class="line"><span class="attr">    pool:</span></div><div class="line"><span class="attr">      max-active:</span> <span class="number">8</span></div><div class="line"><span class="attr">      max-wait:</span> <span class="bullet">-1</span></div><div class="line"><span class="attr">      max-idle:</span> <span class="number">8</span></div><div class="line"><span class="attr">      min-idle:</span> <span class="number">0</span></div><div class="line"><span class="attr">    timeout:</span> <span class="number">0</span></div></pre></td></tr></table></figure><p></p><p>接着在ShiroConfig中配置Redis：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> RedisManager <span class="title">redisManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    RedisManager redisManager = <span class="keyword">new</span> RedisManager();</div><div class="line">    <span class="keyword">return</span> redisManager;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    RedisCacheManager redisCacheManager = <span class="keyword">new</span> RedisCacheManager();</div><div class="line">    redisCacheManager.setRedisManager(redisManager());</div><div class="line">    <span class="keyword">return</span> redisCacheManager;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>上面代码配置了RedisManager，并将其注入到了RedisCacheManager中，最后在SecurityManager中加入RedisCacheManager：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;  </div><div class="line">    DefaultWebSecurityManager securityManager =  <span class="keyword">new</span> DefaultWebSecurityManager();</div><div class="line">    ...</div><div class="line">    securityManager.setCacheManager(cacheManager());</div><div class="line">    <span class="keyword">return</span> securityManager;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>配置完毕启动项目，分别访问访问”获取用户信息”、”新增用户”和”删除用户”，可发现后台只打印一次获取权限信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">用户mrbird获取权限-----ShiroRealm.doGetAuthorizationInfo</div></pre></td></tr></table></figure><p></p><p>查看Druid数据源SQL监控：</p><p><img src="img/QQ截图20171225105337.png" alt="QQ截图20171225105337.png"></p><p>源码：<a href="https://drive.google.com/open?id=1DAQhLRgvuDDuxlmQ36WxT_Sf1mrhGgbT" target="_blank" rel="external">https://drive.google.com/open?id=1DAQhLRgvuDDuxlmQ36WxT_Sf1mrhGgbT</a></p><h2 id="Ehcache"><a href="#Ehcache" class="headerlink" title="Ehcache"></a>Ehcache</h2><h3 id="Ehcache依赖"><a href="#Ehcache依赖" class="headerlink" title="Ehcache依赖"></a>Ehcache依赖</h3><p>加入Ehcache相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- shiro ehcache --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- ehchache --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h3 id="Ehcache配置"><a href="#Ehcache配置" class="headerlink" title="Ehcache配置"></a>Ehcache配置</h3><p>在src/main/resource/config路径下新增一个Ehcache配置——shiro-ehcache.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">    <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span></div><div class="line">    <span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/Tmp_EhCache"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></div><div class="line">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></div><div class="line">        <span class="attr">eternal</span>=<span class="string">"false"</span></div><div class="line">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></div><div class="line">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></div><div class="line">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></div><div class="line">        <span class="attr">diskPersistent</span>=<span class="string">"false"</span></div><div class="line">        <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span> /&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 登录记录缓存锁定1小时 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">cache</span> </span></div><div class="line">        <span class="attr">name</span>=<span class="string">"passwordRetryCache"</span></div><div class="line">        <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"2000"</span></div><div class="line">        <span class="attr">eternal</span>=<span class="string">"false"</span></div><div class="line">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"3600"</span></div><div class="line">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></div><div class="line">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></div><div class="line">        <span class="attr">statistics</span>=<span class="string">"true"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h3 id="ShiroConfig配置Ehcache"><a href="#ShiroConfig配置Ehcache" class="headerlink" title="ShiroConfig配置Ehcache"></a>ShiroConfig配置Ehcache</h3><p>接着在ShiroConfig中注入Ehcache缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> EhCacheManager <span class="title">getEhCacheManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    EhCacheManager em = <span class="keyword">new</span> EhCacheManager();</div><div class="line">    em.setCacheManagerConfigFile(<span class="string">"classpath:config/shiro-ehcache.xml"</span>);</div><div class="line">    <span class="keyword">return</span> em;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>将缓存对象注入到SecurityManager中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;  </div><div class="line">    DefaultWebSecurityManager securityManager =  <span class="keyword">new</span> DefaultWebSecurityManager();</div><div class="line">    securityManager.setRealm(shiroRealm());</div><div class="line">    securityManager.setRememberMeManager(rememberMeManager());</div><div class="line">    securityManager.setCacheManager(getEhCacheManager());</div><div class="line">    <span class="keyword">return</span> securityManager;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>配置完毕启动项目，分别访问访问”获取用户信息”、”新增用户”和”删除用户”，可发现后台只打印一次获取权限信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">用户mrbird获取权限-----ShiroRealm.doGetAuthorizationInfo</div></pre></td></tr></table></figure><p></p><p>查看Druid数据源SQL监控：</p><p><img src="img/QQ截图20171214110718.png" alt="QQ截图20171214110718.png"></p><p>SQL只执行了一次，说明缓存成功。</p><p>源码连接：<a href="https://drive.google.com/open?id=1QpFwxvqEDgOytCCI1rpYpQU03mkFeBjw" target="_blank" rel="external">https://drive.google.com/open?id=1QpFwxvqEDgOytCCI1rpYpQU03mkFeBjw</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在Shiro中加入缓存可以使权限相关操作尽可能快，避免频繁访问数据库获取权限信息，因为对于一个用户来说，其权限在短时间内基本是不会变化的。Shiro提供了Cache的抽象，其并没有直接提供相应的实现，因为这已经超出了一个安全框架的范围。在Shiro中可以集成常用的缓存实现，这里介绍基于Redis和Ehcache缓存的实现。&lt;/p&gt;&lt;p&gt;在&lt;a href=&quot;/Spring-Boot-Shiro权限控制.html&quot;&gt;《Spring-Boot-shiro权限控制》&lt;/a&gt;中，当用户访问”获取用户信息”、”新增用户”和”删除用户”的时候，后台输出了三次打印信息，如下所示：
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Shiro" scheme="http://mrbird.cc/tags/Shiro/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="Ehcache" scheme="http://mrbird.cc/tags/Ehcache/"/>
    
      <category term="Redis" scheme="http://mrbird.cc/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Shiro权限控制</title>
    <link href="http://mrbird.cc/Spring-Boot-Shiro%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6.html"/>
    <id>http://mrbird.cc/Spring-Boot-Shiro权限控制.html</id>
    <published>2017-12-24T00:56:07.000Z</published>
    <updated>2018-04-11T01:34:15.823Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --><p>在<a href="/Spring-Boot-shiro用户认证.html">《Spring-Boot-shiro用户认证》</a>中，我们通过继承AuthorizingRealm抽象类实现了<code>doGetAuthenticationInfo()</code>方法完成了用户认证操作。接下来继续实现<code>doGetAuthorizationInfo()</code>方法完成Shiro的权限控制功能。</p><p>授权也称为访问控制，是管理资源访问的过程。即根据不同用户的权限判断其是否有访问相应资源的权限。在Shiro中，权限控制有三个核心的元素：权限，角色和用户。<a id="more"></a></p><h2 id="库模型设计"><a href="#库模型设计" class="headerlink" title="库模型设计"></a>库模型设计</h2><p>在这里，我们使用RBAC（Role-Based Access Control，基于角色的访问控制）模型设计用户，角色和权限间的关系。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。在这种模型中，用户与角色之间，角色与权限之间，一般者是多对多的关系。如下图所示：</p><p><img src="img/QQ截图20171214123601.png" alt="QQ截图20171214123601.png"></p><p>根据这个模型，设计数据库表，并插入一些测试数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for T_PERMISSION</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"SCOTT"</span>.<span class="string">"T_PERMISSION"</span> (</div><div class="line">   <span class="string">"ID"</span> <span class="built_in">NUMBER</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"URL"</span> VARCHAR2(<span class="number">256</span> <span class="keyword">BYTE</span>) <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"NAME"</span> VARCHAR2(<span class="number">64</span> <span class="keyword">BYTE</span>) <span class="literal">NULL</span> </div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_PERMISSION"</span>.<span class="string">"URL"</span> <span class="keyword">IS</span> <span class="string">'url地址'</span>;</div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_PERMISSION"</span>.<span class="string">"NAME"</span> <span class="keyword">IS</span> <span class="string">'url描述'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of T_PERMISSION</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_PERMISSION"</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'/user'</span>, <span class="string">'user:user'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_PERMISSION"</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'/user/add'</span>, <span class="string">'user:add'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_PERMISSION"</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'/user/delete'</span>, <span class="string">'user:delete'</span>);</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for T_ROLE</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"SCOTT"</span>.<span class="string">"T_ROLE"</span> (</div><div class="line">   <span class="string">"ID"</span> <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"NAME"</span> VARCHAR2(<span class="number">32</span> <span class="keyword">BYTE</span>) <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"MEMO"</span> VARCHAR2(<span class="number">32</span> <span class="keyword">BYTE</span>) <span class="literal">NULL</span> </div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_ROLE"</span>.<span class="string">"NAME"</span> <span class="keyword">IS</span> <span class="string">'角色名称'</span>;</div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_ROLE"</span>.<span class="string">"MEMO"</span> <span class="keyword">IS</span> <span class="string">'角色描述'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of T_ROLE</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'admin'</span>, <span class="string">'超级管理员'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'test'</span>, <span class="string">'测试账户'</span>);</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for T_ROLE_PERMISSION</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"SCOTT"</span>.<span class="string">"T_ROLE_PERMISSION"</span> (</div><div class="line">   <span class="string">"RID"</span> <span class="built_in">NUMBER</span>(<span class="number">10</span>) <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"PID"</span> <span class="built_in">NUMBER</span>(<span class="number">10</span>) <span class="literal">NULL</span> </div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_ROLE_PERMISSION"</span>.<span class="string">"RID"</span> <span class="keyword">IS</span> <span class="string">'角色id'</span>;</div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_ROLE_PERMISSION"</span>.<span class="string">"PID"</span> <span class="keyword">IS</span> <span class="string">'权限id'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of T_ROLE_PERMISSION</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_ROLE_PERMISSION"</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'2'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_ROLE_PERMISSION"</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'3'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_ROLE_PERMISSION"</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'1'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_ROLE_PERMISSION"</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'1'</span>);</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for T_USER</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span> (</div><div class="line">   <span class="string">"ID"</span> <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"USERNAME"</span> VARCHAR2(<span class="number">20</span> <span class="keyword">BYTE</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"PASSWD"</span> VARCHAR2(<span class="number">128</span> <span class="keyword">BYTE</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"CREATE_TIME"</span> <span class="built_in">DATE</span> <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"STATUS"</span> <span class="built_in">CHAR</span>(<span class="number">1</span> <span class="keyword">BYTE</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> </div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span>.<span class="string">"USERNAME"</span> <span class="keyword">IS</span> <span class="string">'用户名'</span>;</div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span>.<span class="string">"PASSWD"</span> <span class="keyword">IS</span> <span class="string">'密码'</span>;</div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span>.<span class="string">"CREATE_TIME"</span> <span class="keyword">IS</span> <span class="string">'创建时间'</span>;</div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span>.<span class="string">"STATUS"</span> <span class="keyword">IS</span> <span class="string">'是否有效 1：有效  0：锁定'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of T_USER</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'tester'</span>, <span class="string">'243e29429b340192700677d48c09d992'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-11 17:20:21'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="string">'1'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'mrbird'</span>, <span class="string">'42ee25d1e43e9f57119a00d0a39e5250'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-11 10:52:48'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="string">'1'</span>);</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for T_USER_ROLE</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER_ROLE"</span> (</div><div class="line">   <span class="string">"USER_ID"</span> <span class="built_in">NUMBER</span>(<span class="number">10</span>) <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"RID"</span> <span class="built_in">NUMBER</span>(<span class="number">10</span>) <span class="literal">NULL</span> </div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER_ROLE"</span>.<span class="string">"USER_ID"</span> <span class="keyword">IS</span> <span class="string">'用户id'</span>;</div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER_ROLE"</span>.<span class="string">"RID"</span> <span class="keyword">IS</span> <span class="string">'角色id'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of T_USER_ROLE</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'1'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER_ROLE"</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'2'</span>);</div></pre></td></tr></table></figure><p></p><p>一些非空约束这里就不贴了，可参考源码中的init.sql。</p><p>上面的sql创建了五张表：用户表<strong>T_USER</strong>、角色表<strong>T_ROLE</strong>、用户角色关联表<strong>T_USER_ROLE</strong>、权限表<strong>T_PERMISSION</strong>和权限角色关联表<strong>T_ROLE_PERMISSION</strong>。用户mrbird角色为admin，用户tester角色为test。admin角色拥有用户的所有权限（user:user,user:add,user:delete），而test角色只拥有用户的查看权限（user:user）。密码都是123456，经过Shiro提供的MD5加密。</p><h2 id="Dao层"><a href="#Dao层" class="headerlink" title="Dao层"></a>Dao层</h2><p>创建两个实体类，对应用户角色表Role和用户权限表Permission：</p><p>Role:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">227437593919820521L</span>;</div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String memo;</div><div class="line">    <span class="comment">// get set略</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>Permission:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permission</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7160557680614732403L</span>;</div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="comment">// get,set略	</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>创建两个dao接口，分别用户查询用户的所有角色和用户的所有权限：</p><p>UserRoleMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRoleMapper</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;Role&gt; <span class="title">findByUserName</span><span class="params">(String userName)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>UserPermissionMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserPermissionMapper</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;Permission&gt; <span class="title">findByUserName</span><span class="params">(String userName)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>其xml实现：</p><p>UserRoleMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.springboot.dao.UserRoleMapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.springboot.pojo.Role"</span> <span class="attr">id</span>=<span class="string">"role"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">jdbcType</span>=<span class="string">"NUMERIC"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"memo"</span> <span class="attr">property</span>=<span class="string">"memo"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUserName"</span> <span class="attr">resultMap</span>=<span class="string">"role"</span>&gt;</span></div><div class="line">        select r.id,r.name,r.memo from t_role r</div><div class="line">        left join t_user_role ur on(r.id = ur.rid) </div><div class="line">        left join t_user u on(u.id = ur.user_id)</div><div class="line">        where u.username = #&#123;userName&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>UserPermissionMapper.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.springboot.dao.UserPermissionMapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.springboot.pojo.Permission"</span> <span class="attr">id</span>=<span class="string">"permission"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">jdbcType</span>=<span class="string">"NUMERIC"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"url"</span> <span class="attr">property</span>=<span class="string">"url"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUserName"</span> <span class="attr">resultMap</span>=<span class="string">"permission"</span>&gt;</span></div><div class="line">        select p.id,p.url,p.name from t_role r</div><div class="line">        left join t_user_role ur on(r.id = ur.rid) </div><div class="line">        left join t_user u on(u.id = ur.user_id)</div><div class="line">        left join t_role_permission rp on(rp.rid = r.id) </div><div class="line">        left join t_permission p on(p.id = rp.pid ) </div><div class="line">        where u.username = #&#123;userName&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>数据层准备好后，接下来对Realm进行改造。</p><h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h2><p>在Shiro中，用户角色和权限的获取是在Realm的<code>doGetAuthorizationInfo()</code>方法中实现的，所以接下来手动实现该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserMapper userMapper;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRoleMapper userRoleMapper;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserPermissionMapper userPermissionMapper;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取用户角色和权限</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principal)</span> </span>&#123;</div><div class="line">        User user = (User) SecurityUtils.getSubject().getPrincipal();</div><div class="line">        String userName = user.getUserName();</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"用户"</span> + userName + <span class="string">"获取权限-----ShiroRealm.doGetAuthorizationInfo"</span>);</div><div class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</div><div class="line">        </div><div class="line">        <span class="comment">// 获取用户角色集</span></div><div class="line">        List&lt;Role&gt; roleList = userRoleMapper.findByUserName(userName);</div><div class="line">        Set&lt;String&gt; roleSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">        <span class="keyword">for</span> (Role r : roleList) &#123;</div><div class="line">            roleSet.add(r.getName());</div><div class="line">        &#125;</div><div class="line">        simpleAuthorizationInfo.setRoles(roleSet);</div><div class="line">        </div><div class="line">        <span class="comment">// 获取用户权限集</span></div><div class="line">        List&lt;Permission&gt; permissionList = userPermissionMapper.findByUserName(userName);</div><div class="line">        Set&lt;String&gt; permissionSet = <span class="keyword">new</span> HashSet&lt;String&gt;();</div><div class="line">        <span class="keyword">for</span> (Permission p : permissionList) &#123;</div><div class="line">            permissionSet.add(p.getName());</div><div class="line">        &#125;</div><div class="line">        simpleAuthorizationInfo.setStringPermissions(permissionSet);</div><div class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 登录认证</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line">        <span class="comment">// 登录认证已经实现过，这里不再贴代码</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>在上述代码中，我们通过方法<code>userRoleMapper.findByUserName(userName)</code>和<code>userPermissionMapper.findByUserName(userName)</code>获取了当前登录用户的角色和权限集，然后保存到SimpleAuthorizationInfo对象中，并返回给Shiro，这样Shiro中就存储了当前用户的角色和权限信息了。</p><p>除了对Realm进行改造外，我们还需修改ShiroConfig配置。</p><h2 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h2><p>Shiro为我们提供了一些和权限相关的注解，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 表示当前Subject已经通过login进行了身份验证；即Subject.isAuthenticated()返回true。</span></div><div class="line"><span class="meta">@RequiresAuthentication</span>  </div><div class="line"> </div><div class="line"><span class="comment">// 表示当前Subject已经身份验证或者通过记住我登录的。</span></div><div class="line"><span class="meta">@RequiresUser</span>  </div><div class="line"></div><div class="line"><span class="comment">// 表示当前Subject没有身份验证或通过记住我登录过，即是游客身份。</span></div><div class="line"><span class="meta">@RequiresGuest</span>  </div><div class="line"></div><div class="line"><span class="comment">// 表示当前Subject需要角色admin和user。  </span></div><div class="line"><span class="meta">@RequiresRoles</span>(value=&#123;<span class="string">"admin"</span>, <span class="string">"user"</span>&#125;, logical= Logical.AND)  </div><div class="line"></div><div class="line"><span class="comment">// 表示当前Subject需要权限user:a或user:b。</span></div><div class="line"><span class="meta">@RequiresPermissions</span> (value=&#123;<span class="string">"user:a"</span>, <span class="string">"user:b"</span>&#125;, logical= Logical.OR)</div></pre></td></tr></table></figure><p></p><p>要开启这些注解的使用，需要在ShiroConfig中添加如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="meta">@DependsOn</span>(&#123;<span class="string">"lifecycleBeanPostProcessor"</span>&#125;)</div><div class="line"><span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">advisorAutoProxyCreator</span><span class="params">()</span> </span>&#123;</div><div class="line">    DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</div><div class="line">    advisorAutoProxyCreator.setProxyTargetClass(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">return</span> advisorAutoProxyCreator;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</div><div class="line">    AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</div><div class="line">    authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</div><div class="line">    <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure><p></p><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>编写一个UserController，用于处理User类的访问请求，并使用Shiro权限注解控制权限：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequiresPermissions</span>(<span class="string">"user:user"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"list"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userList</span><span class="params">(Model model)</span> </span>&#123;</div><div class="line">        model.addAttribute(<span class="string">"value"</span>, <span class="string">"获取用户信息"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"user"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@RequiresPermissions</span>(<span class="string">"user:add"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"add"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userAdd</span><span class="params">(Model model)</span> </span>&#123;</div><div class="line">        model.addAttribute(<span class="string">"value"</span>, <span class="string">"新增用户"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"user"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@RequiresPermissions</span>(<span class="string">"user:delete"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"delete"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userDelete</span><span class="params">(Model model)</span> </span>&#123;</div><div class="line">        model.addAttribute(<span class="string">"value"</span>, <span class="string">"删除用户"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"user"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>在LoginController中添加一个/403跳转：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/403"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">forbid</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"403"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h2><p>对index.html进行改造，添加三个用户操作的链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好！[[$&#123;user.userName&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>权限测试链接<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/list&#125;"</span>&gt;</span>获取用户信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/add&#125;"</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/delete&#125;"</span>&gt;</span>删除用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/logout&#125;"</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>当用户对用户的操作有相应权限的时候，跳转到user.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>[[$&#123;value&#125;]]<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>[[$&#123;value&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index&#125;"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>403页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>暂无权限<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您没有权限访问该资源！！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/index&#125;"</span>&gt;</span>返回<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动项目，使用mrbird的账户登录后主页如下图所示：</p><p><img src="img/QQ截图20171214100711.png" alt="QQ截图20171214100711.png"></p><p>点击”获取用户信息连接”：</p><p><img src="img/QQ截图20171214100752.png" alt="QQ截图20171214100752.png"></p><p>因为mrbird角色为admin，对着三个链接都由访问权限，所以这里就不演示了。</p><p>接着使用tester用户登录。因为tester用户角色为test，只拥有（user:user）权限，所以当其点击”新增用户”和”删除用户”的时候：</p><p><img src="img/QQ截图20171214101044.png" alt="QQ截图20171214101044.png"></p><p>后台抛出<span style="color:red;font-weight:700">org.apache.shiro.authz.AuthorizationException: Not authorized to invoke method:…</span>异常！！！</p><p>这里有点出乎意料，本以为在ShiroConfig中配置了<code>shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/403&quot;);</code>，没有权限的访问会自动重定向到/403，结果证明并不是这样。后来研究发现，该设置只对filterChain起作用，比如在filterChain中设置了<code>filterChainDefinitionMap.put(&quot;/user/update&quot;, &quot;perms[user:update]&quot;);</code>，如果用户没有<code>user:update</code>权限，那么当其访问<code>/user/update</code>的时候，页面会被重定向到/403。</p><p>那么对于上面这个问题，我们可以定义一个全局异常捕获类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="meta">@Order</span>(value = Ordered.HIGHEST_PRECEDENCE)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</div><div class="line">    <span class="meta">@ExceptionHandler</span>(value = AuthorizationException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleAuthorizationException</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"403"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>启动项目，再次使用tester的账号点击”新增用户”和”删除用户”链接的时候，页面如下所示：</p><p><img src="img/QQ截图20171214101815.png" alt="QQ截图20171214101815.png"></p><p>页面已经成功重定向到/403。</p><p>源码链接<a href="https://drive.google.com/open?id=1Ji7ZfB3xXKInTfqPBt1fY21QeDzn6DrQ" target="_blank" rel="external">https://drive.google.com/open?id=1Ji7ZfB3xXKInTfqPBt1fY21QeDzn6DrQ</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在&lt;a href=&quot;/Spring-Boot-shiro用户认证.html&quot;&gt;《Spring-Boot-shiro用户认证》&lt;/a&gt;中，我们通过继承AuthorizingRealm抽象类实现了&lt;code&gt;doGetAuthenticationInfo()&lt;/code&gt;方法完成了用户认证操作。接下来继续实现&lt;code&gt;doGetAuthorizationInfo()&lt;/code&gt;方法完成Shiro的权限控制功能。&lt;/p&gt;&lt;p&gt;授权也称为访问控制，是管理资源访问的过程。即根据不同用户的权限判断其是否有访问相应资源的权限。在Shiro中，权限控制有三个核心的元素：权限，角色和用户。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Shiro" scheme="http://mrbird.cc/tags/Shiro/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Shiro Remember Me</title>
    <link href="http://mrbird.cc/Spring-Boot-Shiro%20Remember-Me.html"/>
    <id>http://mrbird.cc/Spring-Boot-Shiro Remember-Me.html</id>
    <published>2017-12-21T03:01:41.000Z</published>
    <updated>2018-04-11T01:34:15.822Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --><p>接着<a href="/Spring-Boot-shiro用户认证.html">《Spring-Boot-shiro用户认证》</a>，当用户成功登录后，关闭浏览器然后再打开浏览器访问<a href="http://localhost:8080/web/index" target="_blank" rel="external">http://localhost:8080/web/index</a>，页面会跳转到登录页，之前的登录因为浏览器的关闭已经失效。</p><p>Shiro为我们提供了Remember Me的功能，用户的登录状态不会因为浏览器的关闭而失效，直到Cookie过期。<a id="more"></a></p><h2 id="更改-ShiroConfig"><a href="#更改-ShiroConfig" class="headerlink" title="更改 ShiroConfig"></a>更改 ShiroConfig</h2><p>继续编辑ShiroConfig，加入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * cookie对象</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> SimpleCookie <span class="title">rememberMeCookie</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 设置cookie名称，对应login.html页面的&lt;input type="checkbox" name="rememberMe"/&gt;</span></div><div class="line">    SimpleCookie cookie = <span class="keyword">new</span> SimpleCookie(<span class="string">"rememberMe"</span>);</div><div class="line">    <span class="comment">// 设置cookie的过期时间，单位为秒，这里为一天</span></div><div class="line">    cookie.setMaxAge(<span class="number">86400</span>);</div><div class="line">    <span class="keyword">return</span> cookie;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * cookie管理对象</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> CookieRememberMeManager <span class="title">rememberMeManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    CookieRememberMeManager cookieRememberMeManager = <span class="keyword">new</span> CookieRememberMeManager();</div><div class="line">    cookieRememberMeManager.setCookie(rememberMeCookie());</div><div class="line">    <span class="comment">// rememberMe cookie加密的密钥 </span></div><div class="line">    cookieRememberMeManager.setCipherKey(Base64.decode(<span class="string">"4AvVhmFLUs0KTA3Kprsdag=="</span>));</div><div class="line">    <span class="keyword">return</span> cookieRememberMeManager;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>接下来将cookie管理对象设置到SecurityManager中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;  </div><div class="line">    DefaultWebSecurityManager securityManager =  <span class="keyword">new</span> DefaultWebSecurityManager();</div><div class="line">    securityManager.setRealm(shiroRealm());</div><div class="line">    securityManager.setRememberMeManager(rememberMeManager());</div><div class="line">    <span class="keyword">return</span> securityManager;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>最后修改权限配置，将ShiroFilterFactoryBean的<code>filterChainDefinitionMap.put(&quot;/**&quot;, &quot;authc&quot;);</code>更改为<code>filterChainDefinitionMap.put(&quot;/**&quot;, &quot;user&quot;);</code>。<code>user</code>指的是用户认证通过或者配置了Remember Me记住用户登录状态后可访问。</p><h2 id="更改-login-html"><a href="#更改-login-html" class="headerlink" title="更改 login.html"></a>更改 login.html</h2><p>在login.html中加入Remember Me checkbox：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/login.css&#125;"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery-1.11.1.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-page"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"rememberMe"</span> /&gt;</span>记住我<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"login()"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span><span class="javascript"> </span></div><div class="line">    <span class="keyword">var</span> ctx = [[@&#123;/&#125;]];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> username = $(<span class="string">"input[name='username']"</span>).val();</div><div class="line">        <span class="keyword">var</span> password = $(<span class="string">"input[name='password']"</span>).val();</div><div class="line">        <span class="keyword">var</span> rememberMe = $(<span class="string">"input[name='rememberMe']"</span>).is(<span class="string">':checked'</span>);</div><div class="line">        $.ajax(&#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">"post"</span>,</div><div class="line">            <span class="attr">url</span>: ctx + <span class="string">"login"</span>,</div><div class="line">            <span class="attr">data</span>: &#123;<span class="string">"username"</span>: username,<span class="string">"password"</span>: password,<span class="string">"rememberMe"</span>: rememberMe&#125;,</div><div class="line">            <span class="attr">dataType</span>: <span class="string">"json"</span>,</div><div class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (r.code == <span class="number">0</span>) &#123;</div><div class="line">                    location.href = ctx + <span class="string">'index'</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    alert(r.msg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id="更改-LoginController"><a href="#更改-LoginController" class="headerlink" title="更改 LoginController"></a>更改 LoginController</h2><p>更改LoginController的login()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> ResponseBo <span class="title">login</span><span class="params">(String username, String password, Boolean rememberMe)</span> </span>&#123;</div><div class="line">    password = MD5Utils.encrypt(username, password);</div><div class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password, rememberMe);</div><div class="line">    Subject subject = SecurityUtils.getSubject();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        subject.login(token);</div><div class="line">        <span class="keyword">return</span> ResponseBo.ok();</div><div class="line">    &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</div><div class="line">        <span class="keyword">return</span> ResponseBo.error(e.getMessage());</div><div class="line">    &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</div><div class="line">        <span class="keyword">return</span> ResponseBo.error(e.getMessage());</div><div class="line">    &#125; <span class="keyword">catch</span> (LockedAccountException e) &#123;</div><div class="line">        <span class="keyword">return</span> ResponseBo.error(e.getMessage());</div><div class="line">    &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</div><div class="line">        <span class="keyword">return</span> ResponseBo.error(<span class="string">"认证失败！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>当rememberMe参数为true的时候，Shiro就会帮我们记住用户的登录状态。启动项目即可看到效果。</p><p>源码链接：<a href="https://drive.google.com/open?id=1a-8FuSj0zDfZeBRO7cqTccqUnZtBIufs" target="_blank" rel="external">https://drive.google.com/open?id=1a-8FuSj0zDfZeBRO7cqTccqUnZtBIufs</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;接着&lt;a href=&quot;/Spring-Boot-shiro用户认证.html&quot;&gt;《Spring-Boot-shiro用户认证》&lt;/a&gt;，当用户成功登录后，关闭浏览器然后再打开浏览器访问&lt;a href=&quot;http://localhost:8080/web/index&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:8080/web/index&lt;/a&gt;，页面会跳转到登录页，之前的登录因为浏览器的关闭已经失效。&lt;/p&gt;&lt;p&gt;Shiro为我们提供了Remember Me的功能，用户的登录状态不会因为浏览器的关闭而失效，直到Cookie过期。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Shiro" scheme="http://mrbird.cc/tags/Shiro/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Shiro用户认证</title>
    <link href="http://mrbird.cc/Spring-Boot-shiro%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81.html"/>
    <id>http://mrbird.cc/Spring-Boot-shiro用户认证.html</id>
    <published>2017-12-19T10:57:07.000Z</published>
    <updated>2018-04-11T01:34:15.825Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --><p>在Spring Boot中集成Shiro进行用户的认证过程主要可以归纳为以下三点：</p><p>1、定义一个ShiroConfig，然后配置SecurityManager Bean，SecurityManager为Shiro的安全管理器，管理着所有Subject；</p><p>2、在ShiroConfig中配置ShiroFilterFactoryBean，其为Shiro过滤器工厂类，依赖于SecurityManager；</p><p>3、自定义Realm实现，Realm包含<code>doGetAuthorizationInfo()</code>和<code>doGetAuthenticationInfo()</code>方法，因为本文只涉及用户认证，所以只实现<code>doGetAuthenticationInfo()</code>方法。</p><a id="more"></a><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>首先可根据文章<a href="https://mrbird.cc/%E5%BC%80%E5%90%AFSpring-Boot.html">《开启Spring Boot》</a>搭建一个Spring Boot Web程序，然后引入Shiro、MyBatis、数据库和thymeleaf依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- MyBatis --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- thymeleaf --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- shiro-spring --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- oracle驱动 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.oracle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ojdbc6<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- druid数据源驱动 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p><h2 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h2><p>定义一个Shiro配置类，名称为ShiroConfig：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</div><div class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</div><div class="line">        <span class="comment">// 设置securityManager</span></div><div class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</div><div class="line">        <span class="comment">// 登录的url</span></div><div class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login"</span>);</div><div class="line">        <span class="comment">// 登录成功后跳转的url</span></div><div class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">"/index"</span>);</div><div class="line">        <span class="comment">// 未授权url</span></div><div class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/403"</span>);</div><div class="line">        </div><div class="line">        LinkedHashMap&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</div><div class="line">        </div><div class="line">        <span class="comment">// 定义filterChain，静态资源不拦截</span></div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/css/**"</span>, <span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/js/**"</span>, <span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/fonts/**"</span>, <span class="string">"anon"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/img/**"</span>, <span class="string">"anon"</span>);</div><div class="line">        <span class="comment">// druid数据源监控页面不拦截</span></div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/druid/**"</span>, <span class="string">"anon"</span>);</div><div class="line">        <span class="comment">// 配置退出过滤器，其中具体的退出代码Shiro已经替我们实现了 </span></div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/logout"</span>, <span class="string">"logout"</span>);</div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/"</span>, <span class="string">"anon"</span>);</div><div class="line">        <span class="comment">// 除上以外所有url都必须认证通过才可以访问，未通过认证自动访问LoginUrl</span></div><div class="line">        filterChainDefinitionMap.put(<span class="string">"/**"</span>, <span class="string">"authc"</span>);</div><div class="line">        </div><div class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</div><div class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Bean</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="comment">// 配置SecurityManager，并注入shiroRealm</span></div><div class="line">        DefaultWebSecurityManager securityManager =  <span class="keyword">new</span> DefaultWebSecurityManager();</div><div class="line">        securityManager.setRealm(shiroRealm());</div><div class="line">        <span class="keyword">return</span> securityManager;  </div><div class="line">    &#125;  </div><div class="line">	</div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"lifecycleBeanPostProcessor"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Shiro生命周期处理器</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Bean</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> ShiroRealm <span class="title">shiroRealm</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="comment">// 配置Realm，需自己实现</span></div><div class="line">        ShiroRealm shiroRealm = <span class="keyword">new</span> ShiroRealm();  </div><div class="line">        <span class="keyword">return</span> shiroRealm;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>需要注意的是filterChain基于短路机制，即最先匹配原则，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/user/**=anon</div><div class="line">/user/aa=authc 永远不会执行</div></pre></td></tr></table></figure><p></p><p>其中<code>anon</code>、<code>authc</code>等为Shiro为我们实现的过滤器，具体如下表所示：</p><table><thead><tr><th>Filter Name</th><th>Class</th><th>Description</th></tr></thead><tbody><tr><td>anon</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/AnonymousFilter.html" target="_blank" rel="external">org.apache.shiro.web.filter.authc.AnonymousFilter</a></td><td>匿名拦截器，即不需要登录即可访问；一般用于静态资源过滤；示例<code>/static/**=anon</code></td></tr><tr><td>authc</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/FormAuthenticationFilter.html" target="_blank" rel="external">org.apache.shiro.web.filter.authc.FormAuthenticationFilter</a></td><td>基于表单的拦截器；如<code>/**=authc</code>，如果没有登录会跳到相应的登录页面登录</td></tr><tr><td>authcBasic</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/BasicHttpAuthenticationFilter.html" target="_blank" rel="external">org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter</a></td><td>Basic HTTP身份验证拦截器</td></tr><tr><td>logout</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/LogoutFilter.html" target="_blank" rel="external">org.apache.shiro.web.filter.authc.LogoutFilter</a></td><td>退出拦截器，主要属性：redirectUrl：退出成功后重定向的地址（/），示例<code>/logout=logout</code></td></tr><tr><td>noSessionCreation</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/session/NoSessionCreationFilter.html" target="_blank" rel="external">org.apache.shiro.web.filter.session.NoSessionCreationFilter</a></td><td>不创建会话拦截器，调用<code>subject.getSession(false)</code>不会有什么问题，但是如果<code>subject.getSession(true)</code>将抛出<code>DisabledSessionException</code>异常</td></tr><tr><td>perms</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PermissionsAuthorizationFilter.html" target="_blank" rel="external">org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter</a></td><td>权限授权拦截器，验证用户是否拥有所有权限；属性和roles一样；示例<code>/user/**=perms[&quot;user:create&quot;]</code></td></tr><tr><td>port</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PortFilter.html" target="_blank" rel="external">org.apache.shiro.web.filter.authz.PortFilter</a></td><td>端口拦截器，主要属性<code>port(80)</code>：可以通过的端口；示例<code>/test= port[80]</code>，如果用户访问该页面是非80，将自动将请求端口改为80并重定向到该80端口，其他路径/参数等都一样</td></tr><tr><td>rest</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/HttpMethodPermissionFilter.html" target="_blank" rel="external">org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter</a></td><td>rest风格拦截器，自动根据请求方法构建权限字符串；示例<code>/users=rest[user]</code>，会自动拼出user:read,user:create,user:update,user:delete权限字符串进行权限匹配（所有都得匹配，isPermittedAll）</td></tr><tr><td>roles</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/RolesAuthorizationFilter.html" target="_blank" rel="external">org.apache.shiro.web.filter.authz.RolesAuthorizationFilter</a></td><td>角色授权拦截器，验证用户是否拥有所有角色；示例<code>/admin/**=roles[admin]</code></td></tr><tr><td>ssl</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/SslFilter.html" target="_blank" rel="external">org.apache.shiro.web.filter.authz.SslFilter</a></td><td>SSL拦截器，只有请求协议是https才能通过；否则自动跳转会https端口443；其他和port拦截器一样；</td></tr><tr><td>user</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/UserFilter.html" target="_blank" rel="external">org.apache.shiro.web.filter.authc.UserFilter</a></td><td>用户拦截器，用户已经身份验证/记住我登录的都可；示例<code>/**=user</code></td></tr></tbody></table><p>配置完ShiroConfig后，接下来对Realm进行实现，然后注入到SecurityManager中。</p><h2 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h2><p>自定义Realm实现只需继承AuthorizingRealm类，然后实现doGetAuthorizationInfo()和doGetAuthenticationInfo()方法即可。这两个方法名乍看有点像，authorization发音[ˌɔ:θəraɪˈzeɪʃn]，为授权，批准的意思，即获取用户的角色和权限等信息；authentication发音[ɔ:ˌθentɪ’keɪʃn]，认证，身份验证的意思，即登录时验证用户的合法性，比如验证用户名和密码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserMapper userMapper;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 获取用户角色和权限</div><div class="line">    */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principal)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 登录认证</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</div><div class="line"></div><div class="line">    	<span class="comment">// 获取用户输入的用户名和密码</span></div><div class="line">        String userName = (String) token.getPrincipal();</div><div class="line">        String password = <span class="keyword">new</span> String((<span class="keyword">char</span>[]) token.getCredentials());</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"用户"</span> + userName + <span class="string">"认证-----ShiroRealm.doGetAuthenticationInfo"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 通过用户名到数据库查询用户信息</span></div><div class="line">        User user = userMapper.findByUserName(userName);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(<span class="string">"用户名或密码错误！"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!password.equals(user.getPassword())) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException(<span class="string">"用户名或密码错误！"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (user.getStatus().equals(<span class="string">"0"</span>)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LockedAccountException(<span class="string">"账号已被锁定,请联系管理员！"</span>);</div><div class="line">        &#125;</div><div class="line">        SimpleAuthenticationInfo info = <span class="keyword">new</span> SimpleAuthenticationInfo(user, password, getName());</div><div class="line">        <span class="keyword">return</span> info;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>因为本节只讲述用户认证，所以<code>doGetAuthorizationInfo()</code>方法先不进行实现。</p><p>其中<code>UnknownAccountException</code>等异常为Shiro自带异常，Shiro具有丰富的运行时<code>AuthenticationException</code>层次结构，可以准确指出尝试失败的原因。你可以包装在一个<code>try/catch</code>块，并捕捉任何你希望的异常，并作出相应的反应。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    currentUser.login(token);</div><div class="line">&#125; <span class="keyword">catch</span> ( UnknownAccountException uae ) &#123; ...</div><div class="line">&#125; <span class="keyword">catch</span> ( IncorrectCredentialsException ice ) &#123; ...</div><div class="line">&#125; <span class="keyword">catch</span> ( LockedAccountException lae ) &#123; ...</div><div class="line">&#125; <span class="keyword">catch</span> ( ExcessiveAttemptsException eae ) &#123; ...</div><div class="line">&#125; ... <span class="keyword">catch</span> your own ...</div><div class="line">&#125; <span class="keyword">catch</span> ( AuthenticationException ae ) &#123;</div><div class="line">    <span class="comment">//unexpected error?</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><div class="note danger"><p>虽然我们可以准确的获取异常信息，并根据这些信息给用户提示具体错误，但最安全的做法是在登录失败时仅向用户显示通用错误提示信息，例如“用户名或密码错误”。这样可以防止数据库被恶意扫描。</p></div><p>在Realm中UserMapper为Dao层，标准的做法应该还有Service层，但这里为了方便就不再定义Service层了。接下来编写和数据库打交道的Dao层。</p><h2 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h2><p>首先创建一张用户表，用于存储用户的基本信息（基于Oracle 11g）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Table structure for T_USER</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span> (</div><div class="line">   <span class="string">"ID"</span> <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"USERNAME"</span> VARCHAR2(<span class="number">20</span> <span class="keyword">BYTE</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"PASSWD"</span> VARCHAR2(<span class="number">128</span> <span class="keyword">BYTE</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"CREATE_TIME"</span> <span class="built_in">DATE</span> <span class="literal">NULL</span> ,</div><div class="line">   <span class="string">"STATUS"</span> <span class="built_in">CHAR</span>(<span class="number">1</span> <span class="keyword">BYTE</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> </div><div class="line">);</div><div class="line"></div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span>.<span class="string">"USERNAME"</span> <span class="keyword">IS</span> <span class="string">'用户名'</span>;</div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span>.<span class="string">"PASSWD"</span> <span class="keyword">IS</span> <span class="string">'密码'</span>;</div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span>.<span class="string">"CREATE_TIME"</span> <span class="keyword">IS</span> <span class="string">'创建时间'</span>;</div><div class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span>.<span class="string">"STATUS"</span> <span class="keyword">IS</span> <span class="string">'是否有效 1：有效  0：锁定'</span>;</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Records of T_USER</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'test'</span>, <span class="string">'7a38c13ec5e9310aed731de58bbc4214'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2017-11-19 17:20:21'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="string">'0'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'mrbird'</span>, <span class="string">'42ee25d1e43e9f57119a00d0a39e5250'</span>, <span class="keyword">TO_DATE</span>(<span class="string">'2017-11-19 10:52:48'</span>, <span class="string">'YYYY-MM-DD HH24:MI:SS'</span>), <span class="string">'1'</span>);</div><div class="line"></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="comment">-- Primary Key structure for table T_USER</span></div><div class="line"><span class="comment">-- ----------------------------</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">"SCOTT"</span>.<span class="string">"T_USER"</span> <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span> (<span class="string">"ID"</span>);</div></pre></td></tr></table></figure><p></p><p>数据源的配置这里就不贴出来了，具体可参考源码，或者参考<a href="https://mrbird.cc/Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Mybatis.html">https://mrbird.cc/Spring-Boot%E4%B8%AD%E4%BD%BF%E7%94%A8Mybatis.html</a>。</p><p>库表对应的实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5440372534300871944L</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="keyword">private</span> Date createTime;</div><div class="line">    <span class="keyword">private</span> String status;</div><div class="line">    </div><div class="line">    <span class="comment">// get,set略</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>定义接口UserMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Mapper</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line">    <span class="function">User <span class="title">findByUserName</span><span class="params">(String userName)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>xml实现：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.springboot.dao.UserMapper"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"com.springboot.pojo.User"</span> <span class="attr">id</span>=<span class="string">"User"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">jdbcType</span>=<span class="string">"NUMERIC"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"passwd"</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"create_time"</span> <span class="attr">property</span>=<span class="string">"createTime"</span> <span class="attr">javaType</span>=<span class="string">"java.util.Date"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"status"</span> <span class="attr">property</span>=<span class="string">"status"</span> <span class="attr">javaType</span>=<span class="string">"java.lang.String"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findByUserName"</span> <span class="attr">resultMap</span>=<span class="string">"User"</span>&gt;</span></div><div class="line">        select * from t_user where username = #&#123;userName&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>数据层准备完了，接下来编写login.html和index.html页面。</p><h2 id="页面准备"><a href="#页面准备" class="headerlink" title="页面准备"></a>页面准备</h2><p>编写登录页面login.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/login.css&#125;"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">"@&#123;/js/jquery-1.11.1.min.js&#125;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-page"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"login()"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span><span class="javascript"> </span></div><div class="line">    <span class="keyword">var</span> ctx = [[@&#123;/&#125;]];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> username = $(<span class="string">"input[name='username']"</span>).val();</div><div class="line">        <span class="keyword">var</span> password = $(<span class="string">"input[name='password']"</span>).val();</div><div class="line">        $.ajax(&#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">"post"</span>,</div><div class="line">            <span class="attr">url</span>: ctx + <span class="string">"login"</span>,</div><div class="line">            <span class="attr">data</span>: &#123;<span class="string">"username"</span>: username,<span class="string">"password"</span>: password&#125;,</div><div class="line">            <span class="attr">dataType</span>: <span class="string">"json"</span>,</div><div class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (r.code == <span class="number">0</span>) &#123;</div><div class="line">                    location.href = ctx + <span class="string">'index'</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    alert(r.msg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>主页index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好！[[$&#123;user.userName&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/logout&#125;"</span>&gt;</span>注销<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p></p><p>页面准备完毕，接下来编写LoginController。</p><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>LoginController代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseBo <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">    	<span class="comment">// 密码MD5加密</span></div><div class="line">        password = MD5Utils.encrypt(username, password);</div><div class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</div><div class="line">        <span class="comment">// 获取Subject对象</span></div><div class="line">        Subject subject = SecurityUtils.getSubject();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            subject.login(token);</div><div class="line">            <span class="keyword">return</span> ResponseBo.ok();</div><div class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</div><div class="line">            <span class="keyword">return</span> ResponseBo.error(e.getMessage());</div><div class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException e) &#123;</div><div class="line">            <span class="keyword">return</span> ResponseBo.error(e.getMessage());</div><div class="line">        &#125; <span class="keyword">catch</span> (LockedAccountException e) &#123;</div><div class="line">            <span class="keyword">return</span> ResponseBo.error(e.getMessage());</div><div class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</div><div class="line">            <span class="keyword">return</span> ResponseBo.error(<span class="string">"认证失败！"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">redirectIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span> </span>&#123;</div><div class="line">    	<span class="comment">// 登录成后，即可通过Subject获取登录的用户信息</span></div><div class="line">        User user = (User) SecurityUtils.getSubject().getPrincipal();</div><div class="line">        model.addAttribute(<span class="string">"user"</span>, user);</div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>登录成功后，根据之前在ShiroConfig中的配置<code>shiroFilterFactoryBean.setSuccessUrl(&quot;/index&quot;)</code>，页面会自动访问/index路径。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>最终项目目录如下图所示：</p><p><img src="img/QQ截图20171213095352.png" alt="QQ截图20171213095352.png"></p><p>启动项目，分别访问：</p><ul><li><p><a href="http://localhost:8080/web/" target="_blank" rel="external">http://localhost:8080/web/</a></p></li><li><p><a href="http://localhost:8080/web/index" target="_blank" rel="external">http://localhost:8080/web/index</a></p></li><li><p><a href="http://localhost:8080/web/aaaaaaa" target="_blank" rel="external">http://localhost:8080/web/aaaaaaa</a></p></li><li><p><a href="http://localhost:8080/web" target="_blank" rel="external">http://localhost:8080/web</a></p></li></ul><p>可发现页面都被重定向到<a href="http://localhost:8080/web/login" target="_blank" rel="external">http://localhost:8080/web/login</a>：</p><p><img src="img/QQ截图20171213095706.png" alt="QQ截图20171213095706.png"></p><p>当输入错误的用户信息时：</p><p><img src="img/QQ截图20171213095803.png" alt="QQ截图20171213095803.png"></p><p>用test的账户登录（test账户的status为0，已被锁定）：</p><p><img src="img/QQ截图20171213095938.png" alt="QQ截图20171213095938.png"></p><p>当输入正确的用户名密码时候：</p><p><img src="img/QQ截图20171213100035.png" alt="QQ截图20171213100035.png"></p><p>点击注销连接，根据ShiroConfig的配置<code>filterChainDefinitionMap.put(&quot;/logout&quot;, &quot;logout&quot;)</code>，Shiro会自动帮我们注销用户信息，并重定向到<code>/</code>路径。</p><p>Spring Boot集成Shiro进行用户认证到此就结束了，源码参见<a href="https://drive.google.com/open?id=1iVgkhy0KrSgz1qfXsiO5Jsb3655n3kkg" target="_blank" rel="external">https://drive.google.com/open?id=1iVgkhy0KrSgz1qfXsiO5Jsb3655n3kkg</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:02 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在Spring Boot中集成Shiro进行用户的认证过程主要可以归纳为以下三点：&lt;/p&gt;&lt;p&gt;1、定义一个ShiroConfig，然后配置SecurityManager Bean，SecurityManager为Shiro的安全管理器，管理着所有Subject；&lt;/p&gt;&lt;p&gt;2、在ShiroConfig中配置ShiroFilterFactoryBean，其为Shiro过滤器工厂类，依赖于SecurityManager；&lt;/p&gt;&lt;p&gt;3、自定义Realm实现，Realm包含&lt;code&gt;doGetAuthorizationInfo()&lt;/code&gt;和&lt;code&gt;doGetAuthenticationInfo()&lt;/code&gt;方法，因为本文只涉及用户认证，所以只实现&lt;code&gt;doGetAuthenticationInfo()&lt;/code&gt;方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Shiro" scheme="http://mrbird.cc/tags/Shiro/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Apache Shiro简介</title>
    <link href="http://mrbird.cc/Apache%20Shiro%E7%AE%80%E4%BB%8B.html"/>
    <id>http://mrbird.cc/Apache Shiro简介.html</id>
    <published>2017-12-16T11:00:52.000Z</published>
    <updated>2018-04-11T01:34:15.757Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Apr 24 2018 19:45:01 GMT+0800 (中国标准时间) --><p><a href="http://shiro.apache.org/" target="_blank" rel="external">Apache Shiro</a>（发音为<code>shee-roh</code>，日语堡垒（Castle）的意思）是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用。相较于Spring Security来说较为简单，易于上手。</p><p>Apache Shiro有三个核心的概念Subject，SecurityManager和Realms，如下图所示：<a id="more"></a></p><p><img src="img/sdfjasdr3857312-323412.png" alt="sdfjasdr3857312-323412.png"></p><p><strong>1、</strong><a href="http://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/subject/Subject.html" target="_blank" rel="external">Subject</a>：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫，机器人等，即一个抽象概念。所有Subject 都绑定到SecurityManager，与Subject的所有交互都会委托给SecurityManager。可以把Subject认为是一个门面，SecurityManager才是实际的执行者。</p><p>在shiro中通过<code>org.apache.shiro.SecurityUtils</code>类来获取Subject对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</div><div class="line">...</div><div class="line">Subject currentUser = SecurityUtils.getSubject();</div></pre></td></tr></table></figure><p></p><p>更多关于Subject的信息可访问<a href="http://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/subject/Subject.html" target="_blank" rel="external">http://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/subject/Subject.html</a></p><p><strong>2、</strong><a href="http://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/mgt/SecurityManager.html" target="_blank" rel="external">SecurityManager</a>：安全管理器，即所有与安全有关的操作都会与SecurityManager交互，且它管理着所有Subject，可以看出它是Shiro的核心。它负责与后边介绍的其他组件进行 交互，类似于Spring MVC中的DispatcherServlet前端控制器。</p><p><strong>3、</strong><a href="http://shiro.apache.org/static/1.3.2/apidocs/org/apache/shiro/realm/Realm.html" target="_blank" rel="external">Realm</a>：域，Shiro从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法。 也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作。</p><p>简而言之，创建一个基本的Shiro应用过程为：</p><ul><li><p>应用代码通过Subject来进行认证和授权，而Subject又委托给SecurityManager；</p></li><li><p>我们需要给Shiro的SecurityManager注入Realm，从而让SecurityManager能得到合法的用户及其权限进行判断。</p></li></ul><div class="note danger"><p>Shiro并没有为我们提供Realm的实现，需要我们手动编写实现。基本过程为继承<code>org.apache.shiro.realm.AuthorizingRealm</code>抽象类，实现doGetAuthorizationInfo和doGetAuthenticationInfo方法。</p></div><p>了解了Shiro的核心组件后，接下来看看Shiro为我们带来了哪些功能模块：</p><p><img src="img/ShiroFeatures.png" alt="ShiroFeatures.png"></p><p>Shiro提供了四大基本安全功能：认证，授权，会话管理和加密。</p><ul><li><p><strong>身份验证(Authentication)</strong>：也称为登录验证，即验证用户名和密码是否正确；</p></li><li><p><strong>授权(Authorization)</strong>：根据用户的角色和权限来控制用户可访问的资源；</p></li><li><p><strong>会话管理(Session Management)</strong>：即使在非Web或EJB应用程序中，也可以管理用户特定的SESSION会话；</p></li><li><p><strong>密码学(Cryptography)</strong>：使用加密算法保证数据安全，同时易于使用。</p></li></ul><p>除此之外，Shiro也支持以下特性：</p><ul><li><p><strong>Web支持(Web Support)</strong>：Shiro提供的web程序API可以帮助轻松保护Web应用程序；</p></li><li><p><strong>缓存(Caching)</strong>：缓存可确保安全验证操作保持快速高效；</p></li><li><p><strong>并发性(Concurrency)</strong>：Apache Shiro支持具有并发功能的多线程应用程序；</p></li><li><p><strong>测试(Testing)</strong>：测试API帮助您编写单元测试和集成测试；</p></li><li><p><strong>运行方式(Run As)</strong>：允许用户以别的用户身份（如果允许）登录；</p></li><li><p><strong>记住我(Remember Me)</strong>：在会话中记住用户的身份，只有在强制登录时才需要登录。</p></li></ul><blockquote><p>参考自:</p><p><a href="http://shiro.apache.org/introduction.html" target="_blank" rel="external">http://shiro.apache.org/introduction.html</a></p><p><a href="http://www.infoq.com/cn/articles/apache-shiro" target="_blank" rel="external">http://www.infoq.com/cn/articles/apache-shiro</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Apr 24 2018 19:45:01 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;&lt;a href=&quot;http://shiro.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Shiro&lt;/a&gt;（发音为&lt;code&gt;shee-roh&lt;/code&gt;，日语堡垒（Castle）的意思）是一个强大易用的Java安全框架，提供了认证、授权、加密和会话管理功能，可为任何应用提供安全保障 - 从命令行应用、移动应用到大型网络及企业应用。相较于Spring Security来说较为简单，易于上手。&lt;/p&gt;&lt;p&gt;Apache Shiro有三个核心的概念Subject，SecurityManager和Realms，如下图所示：
    
    </summary>
    
    
      <category term="Shiro" scheme="http://mrbird.cc/tags/Shiro/"/>
    
  </entry>
  
</feed>
