<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MrBird</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mrbird.cc/"/>
  <updated>2018-11-02T07:06:55.272Z</updated>
  <id>http://mrbird.cc/</id>
  
  <author>
    <name>MrBird</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot整合Dubbo&amp;Zookeeper</title>
    <link href="http://mrbird.cc/Spring-Boot-Dubbo-Zookeeper.html"/>
    <id>http://mrbird.cc/Spring-Boot-Dubbo-Zookeeper.html</id>
    <published>2018-07-05T08:26:09.000Z</published>
    <updated>2018-11-02T07:06:55.272Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>Dubbo是一款由阿里巴巴开发的远程服务调用框架（RPC），其可以透明化的调用远程服务，就像调用本地服务一样简单。截至目前，Dubbo发布了基于Spring Boot构建的版本，版本号为2.0，这使得其与Spring Boot项目整合变得更为简单方便。而Zookeeper在这里充当的是服务注册中心的角色，我们将各个微服务提供的服务通过Dubbo注册到Zookeeper中，然后服务消费者通过Dubbo从Zookeeper中获取相应服务并消费。本文案例的架构图可以简单用下图表示：<a id="more"></a> <img src="img/QQ截图20181018183703.png" alt="QQ截图20181018183703.png"></p><p>本文案例最终项目结构如下图所示：</p><p><img src="img/QQ截图20181018183830.png" alt="QQ截图20181018183830.png"></p><p>项目采用Maven构建，各模块的作用：</p><table><tr><th>模块</th><th>描述</th></tr><tr><td>common-api</td><td>统一定义接口，供其余子模块引用</td></tr><tr><td>server-provider</td><td>服务提供者，实现common-api模块中的接口，然后暴露到Zookeeper中，供服务消费者使用</td></tr><tr><td>server-consumer</td><td>服务消费者，通过Dubbo从Zookeeper中获取服务并消费</td></tr></table><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="Zookeeper安装"><a href="#Zookeeper安装" class="headerlink" title="Zookeeper安装"></a>Zookeeper安装</h3><p>在搭建项目之前需要启动Zookeeper服务，Zookeeper下载地址：<a href="http://zookeeper.apache.org/releases.html#download" target="_blank" rel="noopener">http://zookeeper.apache.org/releases.html#download</a>。</p><p>下载后解压，将config目录下的zoo_sample.cfg重命名为zoo.cfg(Zookeeper配置文件，默认端口为2181，可根据实际进行修改)。然后双击bin目录下的zkServer.cmd启动即可。</p><h3 id="构建父模块"><a href="#构建父模块" class="headerlink" title="构建父模块"></a>构建父模块</h3><p>新建一个Maven项目，groupId为<code>cc.mrbird</code>，artifactId为<code>dubbo-boot</code>，packaging指定为pom。然后引入Spring Boot，dubbo-spring-boot-starter和Zookeeper相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo-boot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Boot-Dubbo-ZooKeeper<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">project.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- dubbo --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- zookeeper --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="构建Common-api"><a href="#构建Common-api" class="headerlink" title="构建Common-api"></a>构建Common-api</h3><p>新建一个Maven模块，artifactId为<code>common-api</code>，目录结构如下所示：</p><p><img src="img/QQ截图20181018190650.png" alt="QQ截图20181018190650.png"></p><p>pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>项目只包含一个HelloService接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc.mrbird.common.api;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>至此我们可以开始构建服务提供者和服务消费者了。</p><h2 id="构建Server-Provider"><a href="#构建Server-Provider" class="headerlink" title="构建Server-Provider"></a>构建Server-Provider</h2><p>新建一个Maven模块，用于暴露Dubbo服务，artifactId为<code>server-provider</code>，目录结构如下所示：</p><p><img src="img/QQ截图20181019090553.png" alt="QQ截图20181019090553.png"></p><p>pom内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>server-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>这里我们引入了common-api模块，用于后续实现相应的服务。</p><p>在Spring Boot启动类中我们加入<code>@EnableDubboConfiguration</code>注解，表示要开启dubbo功能:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.spring.boot.annotation.EnableDubboConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Applicaiton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Applicaiton.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接着在applicaiton.yml中配置Dubbo：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  dubbo:</span></span><br><span class="line"><span class="attr">    application:</span></span><br><span class="line">      <span class="comment"># 服务名称，保持唯一</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">server-provider</span></span><br><span class="line">    <span class="comment"># zookeeper地址，用于向其注册服务</span></span><br><span class="line"><span class="attr">    registry:</span></span><br><span class="line"><span class="attr">      address:</span> <span class="attr">zookeeper://127.0.0.1:2181</span></span><br><span class="line">    <span class="comment">#暴露服务方式</span></span><br><span class="line"><span class="attr">    protocol:</span></span><br><span class="line">      <span class="comment"># dubbo协议，固定写法</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">dubbo</span></span><br><span class="line">      <span class="comment"># 暴露服务端口 （默认是20880，不同的服务提供者端口不能重复）</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">20880</span></span><br><span class="line">    <span class="comment"># 表示服务提供者，即服务暴露方</span></span><br><span class="line"><span class="attr">    server:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 扫描需要暴露服务的类路径</span></span><br><span class="line"><span class="attr">    scan:</span> <span class="string">cc.mrbird.provider.service</span></span><br></pre></td></tr></table></figure><p></p><p>如果Zookeeper是集群的话，<code>spring.dubbo.registry.address</code>配置为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  dubbo:</span></span><br><span class="line"><span class="attr">    registry:</span></span><br><span class="line"><span class="attr">      address:</span> <span class="attr">zookeeper://127.0.0.1:2181?backup=127.0.0.1:2180,127.0.0.1:2182</span></span><br></pre></td></tr></table></figure><p></p><p>接下来我们在<code>cc.mrbird.provider.service</code>路径下创建一个<code>HelloService</code>接口的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cc.mrbird.common.api.HelloService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(interfaceClass = HelloService.class)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello,"</span> + message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>值得注意的是<code>@Service</code>注解为Dubbo提供的<code>com.alibaba.dubbo.config.annotation.Service</code>，而非Spring的那个。其中<code>interfaceClass</code>是指要发布服务的接口。</p><p>通过上面的配置，我们已经将<code>HelloService</code>接口的实现暴露到Zookeeper中了，接下来我们继续创建一个服务消费者，来消费这个服务。</p><h2 id="搭建Server-Consumer"><a href="#搭建Server-Consumer" class="headerlink" title="搭建Server-Consumer"></a>搭建Server-Consumer</h2><p>新建一个Maven模块，用于消费Dubbo服务，artifactId为<code>server-consumer</code>，目录结构如下所示：</p><p><img src="img/QQ截图20181019163027.png" alt="QQ截图20181019163027.png"></p><p>pom内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>server-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cc.mrbird<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>同样的，我们也在Spring Boot启动类中我们加入<code>@EnableDubboConfiguration</code>注解，表示要开启dubbo功能。</p><p>接着在applicaiton.yml中配置Dubbo：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  dubbo:</span></span><br><span class="line"><span class="attr">    application:</span></span><br><span class="line">      <span class="comment"># 服务名称，保持唯一</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">server-consumer</span></span><br><span class="line">      <span class="comment"># zookeeper地址，用于向其注册服务</span></span><br><span class="line"><span class="attr">    registry:</span></span><br><span class="line"><span class="attr">      address:</span> <span class="attr">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="attr">    protocol:</span></span><br><span class="line">      <span class="comment"># dubbo协议，固定写法</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">dubbo</span></span><br><span class="line">    <span class="comment"># 扫描需要调用服务的类路径</span></span><br><span class="line"><span class="attr">    scan:</span> <span class="string">cc.mrbird.consumer.controller</span></span><br></pre></td></tr></table></figure><p></p><p>同服务提供者，我们需要指定Zookeeper的地址，协议为dubbo，服务消费的扫描路径。不同于服务提供者的地方在于，服务消费者不需要指定Dubbo端口，并且<code>spring.dubbo.server</code>为false（默认配置就是false）。</p><p>接着我们定义一个<code>TestController</code>，演示服务消费：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cc.mrbird.common.api.HelloService;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello/&#123;message&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@PathVariable String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.helloService.hello(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>通过Dubbo的<code>@Reference</code>注解注入需要使用的interface，类似于Spring的<code>@Autowired</code>。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>分别启动Server-Provider和Server-Consumer，访问<a href="http://localhost:8081/hello/mrbird" target="_blank" rel="noopener">http://localhost:8081/hello/mrbird</a>：</p><p><img src="img/QQ截图20181019164239.png" alt="QQ截图20181019164239.png"></p><p>说明远程服务调用已经成功。</p><p>源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/40.Spring-Boot-Dubbo-Zookeeper" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/40.Spring-Boot-Dubbo-Zookeeper</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Dubbo是一款由阿里巴巴开发的远程服务调用框架（RPC），其可以透明化的调用远程服务，就像调用本地服务一样简单。截至目前，Dubbo发布了基于Spring Boot构建的版本，版本号为2.0，这使得其与Spring Boot项目整合变得更为简单方便。而Zookeeper在这里充当的是服务注册中心的角色，我们将各个微服务提供的服务通过Dubbo注册到Zookeeper中，然后服务消费者通过Dubbo从Zookeeper中获取相应服务并消费。本文案例的架构图可以简单用下图表示：
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="Dubbo" scheme="http://mrbird.cc/tags/Dubbo/"/>
    
      <category term="Zookeeper" scheme="http://mrbird.cc/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>使用WireMock快速伪造RESTful服务</title>
    <link href="http://mrbird.cc/WireMock-mock-RESTful.html"/>
    <id>http://mrbird.cc/WireMock-mock-RESTful.html</id>
    <published>2018-07-03T13:31:40.000Z</published>
    <updated>2018-07-05T01:08:10.721Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>前后端分离的开发模式已经越来越流行，但是前后端的开发进度并不能完全保持一致，当前端需要调用后端尚未开发的RESTful接口时不得不等待后端开发完毕，这将影响并行开发的效率。<a href="http://wiremock.org" target="_blank" rel="noopener">http://wiremock.org</a>就是一款用于解决这个问题的开源框架。WireMock可以快速的伪造RESTful接口并返回伪造的JSON数据。这里简单记录下WireMock的使用方法。<a id="more"></a></p><h2 id="搭建WireMock服务器"><a href="#搭建WireMock服务器" class="headerlink" title="搭建WireMock服务器"></a>搭建WireMock服务器</h2><p>我们在本地搭建一个WireMock服务器。通过<a href="http://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.18.0/wiremock-standalone-2.18.0.jar" target="_blank" rel="noopener">http://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/2.18.0/wiremock-standalone-2.18.0.jar</a>下载<code>wiremock-standalone-x.xx.xx.jar</code>，然后使用<code>java -jar</code>命令运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar wiremock-standalone-2.18.0.jar --port=8080</span><br></pre></td></tr></table></figure><p></p><p>启动界面： <img src="img/QQ截图20180704165259.png" alt="QQ截图20180704165259.png"></p><h2 id="WireMock的简单使用"><a href="#WireMock的简单使用" class="headerlink" title="WireMock的简单使用"></a>WireMock的简单使用</h2><p>为了方便，我们在Spring Boot环境里进行编写。</p><p>在项目中引入WireMock依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tomakehurst<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wiremock<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>新建一个MockServer类，包含main方法，并引入<code>com.github.tomakehurst.wiremock.client.WireMock</code>的所有静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.github.tomakehurst.wiremock.client.WireMock.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 配置WireMock服务器的地址 http://localhost:8080</span></span><br><span class="line">        configureFor(<span class="string">"127.0.0.1"</span>, <span class="number">8080</span>);</span><br><span class="line">        <span class="comment">// 清除WireMock服务器里之前的配置</span></span><br><span class="line">        removeAllMappings();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//伪造一个get请求，请求地址为 /user/1，然后返回体包含JSON数据，状态为200</span></span><br><span class="line">        stubFor(get(urlEqualTo(<span class="string">"/user/1"</span>))</span><br><span class="line">                .willReturn(aResponse()</span><br><span class="line">                        .withBody(<span class="string">"&#123;\"name\":\"mrbird\",\"url\":\"https://mrbird.cc\",\"age\":18&#125;"</span>)</span><br><span class="line">                        .withStatus(<span class="number">200</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码主要分为三个步骤：</p><ol><li><p>使用<code>configureFor</code>方法配置WireMock服务器的地址为<code>http://localhost:8080</code>；</p></li><li><p>调用<code>removeAllMappings</code>清除WireMock服务器里所有配置；</p></li><li><p>调用<code>stubFor</code>打桩，并模拟了一个HTTP GET请求，然后返回200状态码，返回报文头部包含JSON信息。这里URL使用方法<code>urlEqualTo</code>全匹配，WireMock也提供了正则表达式匹配URL的方法。</p></li></ol><p>在配置完了后运行main方法，就可以将我们的配置写到WireMock服务器里，这时候在浏览器中调用<a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a>便能看到我们模拟的输出结果：</p><p><img src="img/QQ截图20180705085004.png" alt="QQ截图20180705085004.png"></p><p>这里推荐个在线JSON编辑器：<a href="https://www.bejson.com/jsoneditoronline/" target="_blank" rel="noopener">https://www.bejson.com/jsoneditoronline/</a>。</p><h2 id="简单封装"><a href="#简单封装" class="headerlink" title="简单封装"></a>简单封装</h2><p>我们可以对上面的代码进行简单的封装，方便重用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMock</span><span class="params">(String url, String file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"mock/response/"</span> + file);</span><br><span class="line">    String content = StringUtils.join(FileUtils.readLines(resource.getFile(), <span class="string">"UTF-8"</span>).toArray(), <span class="string">"\n"</span>);</span><br><span class="line">    stubFor(get(urlPathEqualTo(url)).willReturn(aResponse().withBody(content).withStatus(<span class="number">200</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码封装了一个<code>getMock</code>方法，用于处理<code>get</code>类型的Mock，参数为模拟URL和模拟JSON文件。</p><p>我们在<code>src/main/resource/mock/response</code>目录下创建一个user.json文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"mrbird"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"https://mrbird.cc"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>后面我们只需要像下面这样调用就行了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getMock(<span class="string">"/user/1"</span>, <span class="string">"user.json"</span>);</span><br></pre></td></tr></table></figure><p></p><p>WireMock还提供了许多别的功能，具体可以参考官方文档 <a href="http://wiremock.org/docs/" target="_blank" rel="noopener">http://wiremock.org/docs/</a>。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;前后端分离的开发模式已经越来越流行，但是前后端的开发进度并不能完全保持一致，当前端需要调用后端尚未开发的RESTful接口时不得不等待后端开发完毕，这将影响并行开发的效率。&lt;a href=&quot;http://wiremock.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://wiremock.org&lt;/a&gt;就是一款用于解决这个问题的开源框架。WireMock可以快速的伪造RESTful接口并返回伪造的JSON数据。这里简单记录下WireMock的使用方法。
    
    </summary>
    
    
      <category term="WireMock" scheme="http://mrbird.cc/tags/WireMock/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring Cloud Sleuth跟踪微服务</title>
    <link href="http://mrbird.cc/Spring-Cloud-sleuth.html"/>
    <id>http://mrbird.cc/Spring-Cloud-sleuth.html</id>
    <published>2018-06-25T07:43:11.000Z</published>
    <updated>2018-12-06T09:24:55.036Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>在微服务数量较多的系统架构中，一个完整的HTTP请求可能需要经过好几个微服务。如果想要跟踪一条完整的HTTP请求链路所产生的日志，我们需要到各个微服务上去查看日志并检索出我们需要的信息。随着业务发展，微服务的数量也会越来越多，这个过程也变得愈发困难。不过不用担心，<a href="https://github.com/spring-cloud/spring-cloud-sleuth" target="_blank" rel="noopener">Spring Cloud Sleuth</a>为我们提供了分布式服务跟踪的解决方案。为了演示如何使用Spring Cloud Sleuth，我们需要构建一个小型的微服务系统。<a id="more"></a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>这里我们需要创建两个微服务Server-Provider1和Server-Provider2，它们都具有一个名为hello的REST接口，Server-Provider1的hello接口依赖于Server-Provider2的hello接口。并将这两个服务注册到Eureka-Server服务注册中心集群。Eureka-Server服务注册中心集群直接使用<a href="https://mrbird.cc/Spring-Cloud-Eureka.html">https://mrbird.cc/Spring-Cloud-Eureka.html</a>里构建的即可，这里不再赘述。</p><h3 id="创建Server-Provider1"><a href="#创建Server-Provider1" class="headerlink" title="创建Server-Provider1"></a>创建Server-Provider1</h3><p>新建一个Spring Boot工程，<code>artifactId</code>为Server-Provider1，并引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><code>spring-cloud-starter-eureka</code>用于注册微服务，<code>spring-cloud-starter-ribbon</code>用于调用Server-Provider2提供的服务，<code>spring-cloud-starter-sleuth</code>为Spring Cloud Sleuth依赖，用于跟踪微服务请求。</p><p>接着在配置文件application.yml里添加如下配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">server-provider1</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/</span></span><br></pre></td></tr></table></figure><p></p><p>配置中指定了微服务名称为<code>server-provider1</code>，端口号为9000以及服务注册中心地址。</p><p>然后我们在入口类中添加<code>@EnableDiscoveryClient</code>注解，开启服务的注册与发现。并且注册<code>RestTemplate</code>，用于Ribbon服务远程调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后编写REST接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"调用server-provider1的hello接口"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForEntity(<span class="string">"http://server-provider2/hello"</span>, String.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在hello接口中，我们通过<code>RestTemplate</code>远程调用了server-provider2的hello接口。</p><h3 id="创建Server-Provider2"><a href="#创建Server-Provider2" class="headerlink" title="创建Server-Provider2"></a>创建Server-Provider2</h3><p>新建一个新建一个Spring Boot工程，<code>artifactId</code>为Server-Provider2，依赖和Server-Provider1相同。</p><p>在application.yml中添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">server-provider2</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/</span></span><br></pre></td></tr></table></figure><p></p><p>在入口类中添加<code>@EnableDiscoveryClient</code>注解，开启服务注册与发现。</p><p>最后编写一个REST接口，供Server-Provider1调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"调用server-provider2的hello接口"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>至此，Server-Provider2也搭建完了。</p><h2 id="测试Spring-Cloud-Sleuth"><a href="#测试Spring-Cloud-Sleuth" class="headerlink" title="测试Spring Cloud Sleuth"></a>测试Spring Cloud Sleuth</h2><p>启动8080和8081Eureka-Server集群，然后分别启动Server-Provider1和Server-Provider2。访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>查看服务是否都启动成功：</p><p><img src="img/QQ截图20181206101026.png" alt="QQ截图20181206101026.png"></p><p>可见服务都启动成功了，我们往Server-provider1发送<a href="http://localhost:9000/hello" target="_blank" rel="noopener">http://localhost:9000/hello</a>请求，</p><p><img src="img/QQ截图20181206101223.png" alt="QQ截图20181206101223.png"></p><p>然后观察各自的日志：</p><p>Server-Provider1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-06-25 10:13:40.921  INFO [server-provider1,939ca3c1d060ed40,939ca3c1d060ed40,false] 12516 --- [nio-9000-exec-6] c.e.demo.controller.HelloController      : 调用server-provider1的hello接口</span><br></pre></td></tr></table></figure><p></p><p>Server-Provider2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-06-25 10:13:40.931  INFO [server-provider2,939ca3c1d060ed40,3f31114e88154074,false] 6500 --- [nio-9001-exec-3] c.e.demo.controller.HelloController      : 调用server-provider2的hello接口</span><br></pre></td></tr></table></figure><p></p><p>可以看到，日志里出现了<code>[server-provider2,939ca3c1d060ed40,3f31114e88154074,false]</code>信息，这些信息由Spring Cloud Sleuth生成，用于跟踪微服务请求链路。这些信息包含了4个部分的值，它们的含义如下：</p><ol><li><p><code>server-provider2</code>微服务的名称，与<code>spring.application.name</code>对应；</p></li><li><p><code>939ca3c1d060ed40</code>称为<strong>Trace ID</strong>，在一条完整的请求链路中，这个值是固定的。观察上面的日志即可证实这一点；</p></li><li><p><code>3f31114e88154074</code>称为<strong>Span ID</strong>，它表示一个基本的工作单元；</p></li><li><p><code>false</code>表示是否要将该信息输出到Zipkin等服务中来收集和展示，这里我们还没有集成Zipkin，所以为false。</p></li></ol><h2 id="集成Zipkin"><a href="#集成Zipkin" class="headerlink" title="集成Zipkin"></a>集成Zipkin</h2><p>虽然我们已经可以通过<strong>Trace ID</strong>来跟踪整体请求链路了，但是我们还是得去各个系统中捞取日志。在并发较高得时候，日志是海量的，这个时候我们可以借助Zipkin来代替我们完成日志获取与分析。<a href="https://github.com/openzipkin/zipkin" target="_blank" rel="noopener">Zipkin</a>是Twitter的一个开源项目，主要包含了以下四个组件：</p><ol><li><p><strong>Collector</strong>：收集器，负责收集日志信息，以供后续的存储，分析与展示；</p></li><li><p><strong>Storage</strong>：存储模块，我们可以通过它将日志存储到MySQL中；</p></li><li><p><strong>RESTful API</strong>：API组件，它主要用来提供外部访问接口。 比如给客户端展示跟踪信息，或是外接系统访问以实现监控等；</p></li><li><p><strong>WEB UI</strong>：通过web页面，我们可以轻松的分析与跟踪请求日志。</p></li></ol><h3 id="搭建Zipkin-Server"><a href="#搭建Zipkin-Server" class="headerlink" title="搭建Zipkin-Server"></a>搭建Zipkin-Server</h3><p>在完成Spring Cloud Cleuth与Zipkin的整合之前，我们需要搭建一个Zipkin服务。</p><p>新建一个Spring Boot应用，<code>artifactId</code>为Zipkin-Server，并引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在入口类中添加<code>@EnableZipkinServer</code>注解，用于启动Zipkin服务。</p><p>接着在applicaiton.yml中添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zipkin-server</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9100</span></span><br></pre></td></tr></table></figure><p></p><p>启动项目，访问<a href="http://localhost:9100" target="_blank" rel="noopener">http://localhost:9100</a>：</p><p><img src="img/QQ截图20181206105726.png" alt="QQ截图20181206105726.png"></p><h3 id="微服务引入Zipkin"><a href="#微服务引入Zipkin" class="headerlink" title="微服务引入Zipkin"></a>微服务引入Zipkin</h3><p>接着我们需要在Server-Provider1和Server-Provider2里引入Zipkin服务。</p><p>分别在Server-Provider1和Server-Provider2里添加Zipkin相关依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-sleuth-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后分别在Server-Provider1和Server-Provider2的配置文件里添加Zipkin服务地址：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9100</span></span><br></pre></td></tr></table></figure><p></p><p>至此，微服务改造完毕。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动Server-Provider1和Server-Provider2，再次往Server-Provider1发送多个<a href="http://localhost:9000/hello" target="_blank" rel="noopener">http://localhost:9000/hello</a>请求，当最后一个参数为true的时候，说明该跟踪信息会输出给Zipkin Server：</p><p><img src="img/QQ截图20181206111537.png" alt="QQ截图20181206111537.png"></p><p>这时候访问<a href="http://localhost:9100" target="_blank" rel="noopener">http://localhost:9100</a>，观察Zipkin web页面：</p><p><img src="img/QQ截图20181206111728.png" alt="QQ截图20181206111728.png"></p><p>点击下方的跟踪信息，我们可以看到整个链路经过了哪些服务，总耗时等信息：</p><p><img src="img/QQ截图20181206111952.png" alt="QQ截图20181206111952.png"></p><p>点击“依赖分析”也可以看到请求里微服务的关系：</p><p><img src="img/QQ截图20181206112153.png" alt="QQ截图20181206112153.png"></p><div class="note info"><p>这里之所以要往Server-Provider1发送多个<a href="http://localhost:9000/hello" target="_blank" rel="noopener">http://localhost:9000/hello</a>请求是因为<code>spring.sleuth.sampler.percentage</code>默认值为0.1，即采样率才1/10。如果想每次请求都被采样，即每次请求跟踪信息的第四个参数都为true的话，可以将这个值设置为1。</p></div><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>这些跟踪信息在Zipkin-Server服务重启后便会丢失，我们可以将这些信息存储到MySQL数据库中。</p><p>我们在Zipkin-Server中添加MySQL数据库驱动和JDBC依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.zipkin.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zipkin-autoconfigure-storage-mysql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后在application.yml中添加数据库连接信息：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/zipkin?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">zipkin:</span></span><br><span class="line"><span class="attr">  storage:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><p></p><p>配置文件中同时通过<code>zipkin.storage.type=mysql</code>指定了Zipkin的存储方式为MySQL。</p><p>接下来创建数据库和数据库表，新建一个名为zipkin的数据库：</p><p><img src="img/QQ截图20181206134409.png" alt="QQ截图20181206134409.png"></p><p>然后导入库表，库表SQL文件在<code>io.zipkin.java:zipkin-storage-mysql:2.6.1</code>依赖里可以找到：</p><p><img src="img/QQ截图20181206134607.png" alt="QQ截图20181206134607.png"></p><p>创建完后，我们重启Zipkin-Server，发送<a href="http://localhost:9000/hello" target="_blank" rel="noopener">http://localhost:9000/hello</a>请求，然后查看数据库会发现跟踪信息已经存储在库表里了：</p><p><img src="img/QQ截图20181206135021.png" alt="QQ截图20181206135021.png"></p><h3 id="Zipkin-API"><a href="#Zipkin-API" class="headerlink" title="Zipkin API"></a>Zipkin API</h3><p>正如上面所说的，Zipkin提供了RESTful API供我们调用，在启动Zipkin-Server的时候，控制台打印日志包含如下信息：</p><p><img src="img/QQ截图20181206140049.png" alt="QQ截图20181206140049.png"></p><p>这些接口的功能如下表所示：</p><table><tr><th>接口</th><th>请求方式</th><th>描述</th></tr><tr><td>/trace/{traceIdHex}</td><td>GET</td><td>根据Trace ID获取指定跟踪信息的Span列表</td></tr><tr><td>/traces</td><td>GET</td><td>根据指定条件查询并返回符合条件的trace清单</td></tr><tr><td>/dependencies</td><td>GET</td><td>用来获取通过收集到的Span分析出的依赖关系</td></tr><tr><td>/services</td><td>GET</td><td>用来获取服务列表</td></tr><tr><td>/spans</td><td>GET</td><td>根据服务名来获取所有的Span名</td></tr></table><p>也可以参考<a href="https://zipkin.io/zipkin-api/" target="_blank" rel="noopener">https://zipkin.io/zipkin-api/</a>。</p><p>源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/43.Spring-Cloud-Sleuth" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/43.Spring-Cloud-Sleuth</a>。</p><blockquote><p>参考文章 <a href="https://book.douban.com/subject/27025912/" target="_blank" rel="noopener">Spring Cloud微服务实战</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在微服务数量较多的系统架构中，一个完整的HTTP请求可能需要经过好几个微服务。如果想要跟踪一条完整的HTTP请求链路所产生的日志，我们需要到各个微服务上去查看日志并检索出我们需要的信息。随着业务发展，微服务的数量也会越来越多，这个过程也变得愈发困难。不过不用担心，&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-sleuth&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Cloud Sleuth&lt;/a&gt;为我们提供了分布式服务跟踪的解决方案。为了演示如何使用Spring Cloud Sleuth，我们需要构建一个小型的微服务系统。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>使用Spring Cloud Bus刷新配置</title>
    <link href="http://mrbird.cc/Spring-Cloud-Bus.html"/>
    <id>http://mrbird.cc/Spring-Cloud-Bus.html</id>
    <published>2018-06-21T06:14:00.000Z</published>
    <updated>2018-11-22T07:51:31.308Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>在上一节<a href="http://mrbird.cc/Spring-Cloud-Config.html">Spring Cloud Config统一配置管理</a>中，我们实现了通过往Config-Client发送<code>/refresh</code><strong>POST</strong>请求来刷新配置。不过这种方式只对单个Config-Client有效（往哪个Config-Client发送刷新请求，哪个配置就得到刷新，剩下的Config-Client获取的仍是旧的配置信息）。当Config-Client实例集群数量较多时，如果都要手动一个一个去刷新配置，不仅麻烦还容易遗漏。值得庆幸的是，我们可以借助Spring Cloud Bus来自动刷新集群的配置信息。</p><p><a href="https://github.com/spring-cloud/spring-cloud-bus" target="_blank" rel="noopener">Spring Cloud Bus</a>使用轻量级的消息代理（如RabbitMQ，Kafka）连接分布式系统的节点，可以以广播的形式将一些变更信息（如配置的变更）扩散到分布式链路中去。所以我们可以在Config-Server和Config-Client集群中加入Spring Cloud Bus，然后往某个Config-Server实例发送<code>/refresh</code>请求来刷新集群中所有实例的配置信息。</p><a id="more"></a><p>在引入Spring Cloud Bus之前，我们先来简单验证下开头的结论。我们用上一节的源码为基础，来搭建Eureka-Server、Config-Server和Config-Client的集群。</p><p>将这三个项目打成jar包后，分别使用以下命令来启动一个双节点的Eureka-Server集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar Eureka-Service-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer1</span><br><span class="line">java -jar Eureka-Service-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer2</span><br></pre></td></tr></table></figure><p></p><p>然后分别使用以下命令来启动一个双节点的Config-Server集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar Config-Server-0.0.1-SNAPSHOT.jar --server.port=12579</span><br><span class="line">java -jar Config-Server-0.0.1-SNAPSHOT.jar --server.port=12580</span><br></pre></td></tr></table></figure><p></p><p>最后分别使用以下命令来启动一个双节点的Config-Client集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar Config-Client-0.0.1-SNAPSHOT.jar --server.port=12581</span><br><span class="line">java -jar Config-Client-0.0.1-SNAPSHOT.jar --server.port=12582</span><br></pre></td></tr></table></figure><p></p><p>访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>查看集群节点是否都启动成功：</p><p><img src="img/QQ截图20181122091610.png" alt="QQ截图20181122091610.png"></p><p>这时候我们访问<a href="http://localhost:12581/message" target="_blank" rel="noopener">http://localhost:12581/message</a>查看message的值：</p><p><img src="img/QQ截图20181122091719.png" alt="QQ截图20181122091719.png"></p><p>接着手动修改Git仓库里的message值为<code>&#39;呵呵呵呵&#39;</code>，并往12581端口的Config-Client发送刷新请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -u mrbird:123456 -X POST http://localhost:12581/refresh</span><br><span class="line">[&quot;config.client.version&quot;,&quot;message&quot;]</span><br></pre></td></tr></table></figure><p></p><p>再次访问<a href="http://localhost:12581/message" target="_blank" rel="noopener">http://localhost:12581/message</a>：</p><p><img src="img/QQ截图20181122091928.png" alt="QQ截图20181122091928.png"></p><p>可以看到12581端口的Config-Client获取的配置信息已经得到了更新，那12582端口的Config-Client呢？访问<a href="http://localhost:12582/message" target="_blank" rel="noopener">http://localhost:12582/message</a>看看结果：</p><p><img src="img/QQ截图20181122091943.png" alt="QQ截图20181122091943.png"></p><p>可看到，其获取的配置仍然是旧的。这也证实了我们一开始的结论。</p><h2 id="引入Spring-Cloud-Bus"><a href="#引入Spring-Cloud-Bus" class="headerlink" title="引入Spring Cloud Bus"></a>引入Spring Cloud Bus</h2><p>Spring Cloud Bus支持RabbitMQ和Kafka等消息中间件，这里只介绍配合RabbitMQ的使用方式。RabbitMQ的安装与启动可以参考<a href="https://mrbird.cc/Spring-Cloud-Hystrix-Dashboard.html">https://mrbird.cc/Spring-Cloud-Hystrix-Dashboard.html</a>中的介绍。</p><p>在Config-Server和Config-Client的pom中引入spring-cloud-starter-bus-amqp和spring-boot-starter-actuator依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>其中<code>spring-cloud-starter-bus-amqp</code>是Spring Cloud Bus的RabbitMQ实现，刷新用的端点由<code>spring-boot-starter-actuator</code>提供。</p><p>然后在Config-Server和Config-Client的application.yml中引入RabbitMQ的连接信息：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line">    <span class="comment"># RabbitMQ IP</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="comment"># RabbitMQ Port</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="comment"># default RabbitMQ username</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="comment"># default RabbitMQ password</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure><p></p><p>到这里，对Config-Server和Config-Client改造就完成了，没错就是这么简单🙂。</p><p>我们重新打包Config-Server和Config-Client，然后运行以下命令启动双节点Config-Server集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar Config-Server-0.0.1-SNAPSHOT.jar --server.port=12579</span><br><span class="line">java -jar Config-Server-0.0.1-SNAPSHOT.jar --server.port=12580</span><br></pre></td></tr></table></figure><p></p><p>接着分别使用以下命令来启动一个双节点的Config-Client集群：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar Config-Client-0.0.1-SNAPSHOT.jar --server.port=12581</span><br><span class="line">java -jar Config-Client-0.0.1-SNAPSHOT.jar --server.port=12582</span><br></pre></td></tr></table></figure><p></p><p>启动后我们访问RabbitMQ的控制页面：<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a>，可看到在Queues中多了四个springCloudBus队列：</p><p><img src="img/QQ截图20181122150647.png" alt="QQ图片20181122150357.jpg"></p><p>手动修改Git仓库里message的配置值为<code>&#39;spring cloud bus&#39;</code>，然后往任意一个Config-Server节点发送<code>/bus/refresh</code><strong>POST</strong>请求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -u mrbird:123456 -X POST http://localhost:12580/bus/refresh</span><br></pre></td></tr></table></figure><p>分别访问<a href="http://localhost:12581/message" target="_blank" rel="noopener">http://localhost:12581/message</a>和<a href="http://localhost:12582/message" target="_blank" rel="noopener">http://localhost:12582/message</a>：</p><p><img src="img/QQ截图20181122151326.png" alt="QQ截图20181122151326.png"></p><p><img src="img/QQ截图20181122151345.png" alt="QQ截图20181122151345.png"></p><p>配置都已刷新成功。</p><h2 id="WebHooks"><a href="#WebHooks" class="headerlink" title="WebHooks"></a>WebHooks</h2><p>配合WebHooks可以实现自动配置刷新，在配置得到修改的时候它可以代替我们向Config-Server发送刷新请求。以码云为例，添加一个WebHooks：</p><p><img src="img/QQ截图20181122153532.png" alt="QQ截图20181122153532.png"></p><p><img src="img/QQ截图20181122154445.png" alt="QQ截图20181122154445.png"></p><p>由于这里是在本地运行测试没有公网IP，所以没法测试，这里就不演示了。</p><p>源码链接：</p><p><a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/42.Spring-Cloud-Bus" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/42.Spring-Cloud-Bus</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在上一节&lt;a href=&quot;http://mrbird.cc/Spring-Cloud-Config.html&quot;&gt;Spring Cloud Config统一配置管理&lt;/a&gt;中，我们实现了通过往Config-Client发送&lt;code&gt;/refresh&lt;/code&gt;&lt;strong&gt;POST&lt;/strong&gt;请求来刷新配置。不过这种方式只对单个Config-Client有效（往哪个Config-Client发送刷新请求，哪个配置就得到刷新，剩下的Config-Client获取的仍是旧的配置信息）。当Config-Client实例集群数量较多时，如果都要手动一个一个去刷新配置，不仅麻烦还容易遗漏。值得庆幸的是，我们可以借助Spring Cloud Bus来自动刷新集群的配置信息。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-bus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Cloud Bus&lt;/a&gt;使用轻量级的消息代理（如RabbitMQ，Kafka）连接分布式系统的节点，可以以广播的形式将一些变更信息（如配置的变更）扩散到分布式链路中去。所以我们可以在Config-Server和Config-Client集群中加入Spring Cloud Bus，然后往某个Config-Server实例发送&lt;code&gt;/refresh&lt;/code&gt;请求来刷新集群中所有实例的配置信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Config统一配置管理</title>
    <link href="http://mrbird.cc/Spring-Cloud-Config.html"/>
    <id>http://mrbird.cc/Spring-Cloud-Config.html</id>
    <published>2018-06-15T06:05:05.000Z</published>
    <updated>2018-11-16T06:19:33.724Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>Spring Cloud Config可以对微服务配置进行统一的外部管理，并且默认采用Git来管理配置信息。相对于传统的每个微服务对应一份自个儿的配置文件来说，通过Spring Cloud Config统一管理所有微服务配置具有如下优点：<strong>1.</strong>集中管理微服务配置，当微服务数量众多的时候，使用这种方式会更为方便；<strong>2.</strong>通过Git管理微服务配置，方便追踪配置修改记录；<strong>3.</strong>可以在应用运行期间修改配置，微服务能够自动更新配置。</p><a id="more"></a><p>Spring Cloud Config包含了服务端Server和客户端Client。服务端用于从Git仓库中加载配置，并且缓存到本地；客户端用于从服务端获取配置信息。所以为了演示Spring Cloud Config，我们先来搭建一个服务端。</p><h2 id="搭建Config-Server"><a href="#搭建Config-Server" class="headerlink" title="搭建Config-Server"></a>搭建Config-Server</h2><p>在搭建Config-Server之前，我们需要创建好一个存储配置文件的Git仓库。这里以码云为例子，创建一个名称为Spring-Cloud-Config的参考，然后往仓库的master分支push四个配置文件：</p><p><img src="img/QQ截图20181105110354.png" alt="QQ截图20181105110354.png"></p><p>四个配置文件中分别都包含了一个<code>message</code>属性：</p><p>febs.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">message:</span> <span class="string">'default properties (master v1.0)'</span></span><br></pre></td></tr></table></figure><p></p><p>febs-dev.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">message:</span> <span class="string">'dev properties (master v1.0)'</span></span><br></pre></td></tr></table></figure><p></p><p>febs-test.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">message:</span> <span class="string">'test properties (master v1.0)'</span></span><br></pre></td></tr></table></figure><p></p><p>febs-pro.yml:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">message:</span> <span class="string">'pro properties (master v1.0)'</span></span><br></pre></td></tr></table></figure><p></p><p>接着创建一个test分支，同样push这四个配置文件，不过配置文件中<code>message</code>属性的内容末尾都改为了<code>(test v1.0)</code>。</p><p>创建好配置文件仓库后，我们新建一个Spring Boot项目，<code>artifactId</code>为Config-Server，然后引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在入口类中加入<code>@EnableConfigServer</code>注解，开启Spring Cloud Config服务端功能。</p><p>接着配置application.yml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: config-server</span><br><span class="line">  cloud:</span><br><span class="line">    config:</span><br><span class="line">      server:</span><br><span class="line">        git:</span><br><span class="line">          uri: https://gitee.com/mrbird/spring-cloud-config</span><br><span class="line">          username: xxx</span><br><span class="line">          password: xxx</span><br><span class="line">server:</span><br><span class="line">  port: 12580</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>uri的末尾加不加<code>.git</code>都可以。</p></div><p>配置具体含义如下：</p><ol><li><p><code>spring.cloud.config.server.git.uri</code>：配置了Git仓库的地址，这里用的是码云，当然你也可以使用别的Git代码托管平台；</p></li><li><p><code>spring.cloud.config.server.git.username</code>：仓库用户名，即Git托管平台的用户名；</p></li><li><p><code>spring.cloud.config.server.git.password</code>：仓库密码，即Git托管平台的密码。</p></li></ol><p>这里服务端的端口号为12580。</p><p>启动应用，我们便可以使用下面这些格式来访问配置信息了：</p><ul><li><p><code>/{application}/{profile}[/{label}]</code></p></li><li><p><code>/{application}-{profile}.yml</code></p></li><li><p><code>/{label}/{application}-{profile}.yml</code></p></li><li><p><code>/{application}-{profile}.properties</code></p></li><li><p><code>/{label}/{application}-{profile}.properties</code></p></li></ul><p>比如当我们访问<a href="http://localhost:12580/master/febs-test" target="_blank" rel="noopener">http://localhost:12580/master/febs-test</a>时，响应信息如下所示：</p><p><img src="img/QQ截图20181105113317.png" alt="QQ截图20181105113317.png"></p><p>访问<a href="http://localhost:12580/master/febs-test.yml" target="_blank" rel="noopener">http://localhost:12580/master/febs-test.yml</a>：</p><p><img src="img/QQ截图20181105113615.png" alt="QQ截图20181105113615.png"></p><p>访问<a href="http://localhost:12580/test/febs-test.yml" target="_blank" rel="noopener">http://localhost:12580/test/febs-test.yml</a>：</p><p><img src="img/QQ截图20181105113754.png" alt="QQ截图20181105113754.png"></p><p>至此服务端搭建成功。</p><h2 id="搭建Config-Client"><a href="#搭建Config-Client" class="headerlink" title="搭建Config-Client"></a>搭建Config-Client</h2><p>新建一个Spring Boot项目，<code>artifactId</code>为Config-Client，然后引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>编写一个Controller，用于测试获取Config-Server中配置文件的<code>message</code>属性值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;message&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"message"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>要想让上面的代码顺利的获取到<code>message</code>属性值，我们还需要在配置文件中进行一些额外配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">febs</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:12580</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">12581</span></span><br></pre></td></tr></table></figure><p></p><div class="note danger"><p>值得注意的是，这里配置文件并不是叫application.yml，而是必须命名为bootstrap.yml。</p></div><p>上面配置含义如下：</p><ol><li><p><code>spring.application.name</code>: 对应配置文件规则中的<code>{application}</code>；</p></li><li><p><code>spring.cloud.config.profile</code>: 对应配置文件规则中的<code>{profile}</code>部分；</p></li><li><p><code>spring.cloud.config.label</code>: 对应配置文件规则中的<code>{label}</code>部分；</p></li><li><p><code>spring.cloud.config.uri</code>: 对应Config-Server的地址。</p></li></ol><p>通过上面的配置，<code>message</code>的内容应该是Git仓库中test分支，febs-dev.yml中的<code>message</code>属性值。下面我们来证实一下这个推测。</p><p>启动Config-Client（Config-Server没启动的话得先启动Config-Server），访问<a href="http://localhost:12581/message" target="_blank" rel="noopener">http://localhost:12581/message</a>：</p><p><img src="img/20181105140444.png" alt="QQ截图20181105140444.png"></p><p>结果证实了我们的推测。</p><h2 id="Config-Server额外配置"><a href="#Config-Server额外配置" class="headerlink" title="Config-Server额外配置"></a>Config-Server额外配置</h2><p>上面我们简单的地搭建了一个Config-Server，下面我们来进一步了解Config-Server的可用配置。</p><h3 id="占位符的使用"><a href="#占位符的使用" class="headerlink" title="占位符的使用"></a>占位符的使用</h3><p>在Config-Server中，除了固定配置一个Git仓库地址外，我们也可以使用占位符来灵活的指定Git仓库地址。</p><p>将上面Config-Server的Git仓库地址改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/mrbird/&#123;application&#125;</span></span><br></pre></td></tr></table></figure><p></p><p>这里使用占位符<code>{application}</code>来代替上面的spring-cloud-config，通过这种配置，我们可以让不同的Config-Client去不同的Git仓库获取配置。比如，当Config-Client的项目名称为febs的时候，对应Git仓库地址为:<code>https://gitee.com/mrbird/febs</code>，当名称为test时，对应Git仓库地址为:<code>https://gitee.com/mrbird/test</code>。这样我们就可以为不同的项目配置不同的Git仓库。</p><h3 id="子目录支持"><a href="#子目录支持" class="headerlink" title="子目录支持"></a>子目录支持</h3><p>除了使用占位符为每个项目创建单独的Git仓库来存储配置信息外，我们也可以只创建一个Git仓库来存储配置，只不过是将不同的项目配置放置到不同的目录下，只需要像下面这样配置即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="attr">https://gitee.com/mrbird/spring-cloud-config/</span></span><br><span class="line"><span class="attr">          username:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">          password:</span> <span class="string">xxxx</span></span><br><span class="line"><span class="attr">          search-paths:</span> <span class="string">'&#123;application&#125;'</span></span><br></pre></td></tr></table></figure><p></p><p>通过上面的配置，我们可以实现在<code>https://gitee.com/mrbird/spring-cloud-config/</code>仓库中，一个Config-Client对应一个配置目录的效果，即当Config-Client的项目名称为febs的时候，其搜索配置的目录为<code>https://gitee.com/mrbird/spring-cloud-config/febs</code>。</p><div class="note danger"><p>这里search-paths的占位符必须加上单引号<code>&#39;&#39;</code>，否则没办法正确读取配置，具体可参考：<a href="https://blog.csdn.net/weixin_35022258/article/details/79019033" target="_blank" rel="noopener">https://blog.csdn.net/weixin_35022258/article/details/79019033</a></p></div><h3 id="clone-on-start"><a href="#clone-on-start" class="headerlink" title="clone-on-start"></a>clone-on-start</h3><p>默认情况下Config-Server在启动的时候并不会马上就去Git参考clone配置文件，只有当Config-Clinet从Config-Server获取相关配置信息的时候，其才会去进行clone操作。我们可以将<code>clone-on-start</code>属性设置为<code>true</code>，其Config-Server在启动的时候就进行clone操作：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          clone-on-start:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><p>这样做的好处在于，当Git连接信息有误时，可以马上发现。</p><h3 id="整合Spring-Security"><a href="#整合Spring-Security" class="headerlink" title="整合Spring Security"></a>整合Spring Security</h3><p>Config-Server中包含了Git连接信息，为了使其更加安全，我们可以通过Spring Security来做用户名密码认证。</p><p>在Config-Server中加入Spring Security依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后在Config-Server的配置文件application.yml中加入用户名和密码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">  user:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">mrbird</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p></p><p>与此同时，我们也需要在Config-Client中配置Config-Server的用户名和密码，否则在获取配置的时候将报401错误：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">mrbird</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p></p><h3 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h3><p>截至目前为止，Config-Server中Git仓库的密码是直接明文配置的，我们可以对这些敏感信息进行加密处理。在此之前，需要先安装JCE（Java Cryptography Extension），本文使用的是JDK 8，与之对应的JCE下载地址为：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jce-all-download-5170447.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jce-all-download-5170447.html</a>：</p><p><img src="img/QQ截图20181115151433.png" alt="QQ截图20181115151433.png"></p><p>解压后，包含三个文件：</p><p><img src="img/QQ截图20181115151650.png" alt="QQ截图20181115151650.png"></p><p>把它们复制到<code>$JAVA HOME/jre/lib/security</code>目录下即可。</p><p><strong>对称加密</strong></p><p>使用对称加密的方式需要在Config-Server中配置加密用的密钥：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">encrypt:</span></span><br><span class="line"><span class="attr">  key:</span> <span class="string">hello</span></span><br></pre></td></tr></table></figure><p></p><p>配置好后重启Config-Server，访问<a href="http://localhost:12580/encrypt/status" target="_blank" rel="noopener">http://localhost:12580/encrypt/status</a>查看密钥是否配置成功:</p><p><img src="img/QQ截图20181115162507.png" alt="QQ截图20181115162507.png"></p><p>可见配置并未生效，查看Spring-Cloud-Config的Github issue找到了解决办法：<a href="https://github.com/spring-cloud/spring-cloud-config/issues/767" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-config/issues/767</a>。</p><p>解决办法就是需要将密钥配置在bootstrap.yml中，再次访问<a href="http://localhost:12580/encrypt/status" target="_blank" rel="noopener">http://localhost:12580/encrypt/status</a>：</p><p><img src="img/QQ截图20181115163145.png" alt="QQ截图20181115163145.png"></p><p>假如我们Git仓库的密码为mrbird123，要对其加密的话我们可以使用<code>curl</code>命令来获取加密后的密码：</p><p><img src="img/QQ截图20181116091035.png" alt="QQ截图20181116091035.png"></p><p>因为Config-Server设置了用户名和密码，所以在使用<code>curl</code>命令时，需要带上<code>-u mrbird:123456</code>。</p><p>可看到mrbird123被加密成了<code>f413c4d441a7a00ef82d9aedfab087dae51772276c0201a9d9b13df3e2a9b64c</code>，</p><p>因为是对称加密，所以我们也可以将<code>f413c4d441a7a00ef82d9aedfab087dae51772276c0201a9d9b13df3e2a9b64c</code>解密：</p><p><img src="img/QQ截图20181116091227.png" alt="QQ截图20181116091227.png"></p><p>我们用加密后的密码替换掉Git连接的明文密码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          password:</span> <span class="string">'&#123;cipher&#125;155315857d26a3235027679a015aa7c71a15ca43ae77e2a11ce9d122d1f4bd043d18'</span></span><br></pre></td></tr></table></figure><p></p><p>使用<code>{cipher}</code>开头表明这是一个加密的内容，Config-Server会自动为其解密。当然，你还可以为任何你想加密的属性值进行加密，不限于密码。</p><p><strong>非对称加密</strong> 非对称加密相比对称加密来说显得更加安全，要生成非对称加密的密码，需要借助<code>keytool</code>命令来生成密钥。keytool是JDK中的一个密钥和证书 管理工具。 位于<code>%JAVA_HOME%\bin\</code>目录下：</p><p><img src="img/QQ截图20181116092757.png" alt="QQ截图20181116092757.png"></p><p>我们使用如下命令来生成一个密钥文件：</p><p><img src="img/QQ截图20181116100151.png" alt="QQ截图20181116100151.png"></p><p>命令执行结束后，会在<code>%JAVA_HOME%\bin\</code>目录下生成一个 config-server.keystore文件。密钥文件的有效期默认为90天，我们可以使用<code>-validity 365</code>来改变其有效天数为365天。</p><p>接着将密钥文件拷贝到Config-Server的resources目录下，然后在bootstrap.yml中添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encrypt:</span></span><br><span class="line"><span class="comment">##  key: hello</span></span><br><span class="line"></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line"><span class="attr">  key-store:</span></span><br><span class="line"><span class="attr">    location:</span> <span class="attr">classpath:config-server.keystore</span></span><br><span class="line"><span class="attr">    alias:</span> <span class="string">Config-Server</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    secret:</span> <span class="number">654321</span></span><br></pre></td></tr></table></figure><p></p><p>其中<code>encrypt.key-store.password</code>为第一次输入的口令，<code>encrypt.key-store.secret</code>为<code>&lt;Config-Server&gt;</code>的密钥口令的密钥口令。</p><p>我们将Git连接的密码改回明文，然后重启Config-Server，运行如下命令重新对Git连接密码进行加密：</p><p><img src="img/QQ截图20181116100843.png" alt="QQ截图20181116100843.png"></p><p>然后将加密后的密码替换明文密码即可：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          password:</span> <span class="string">'&#123;cipher&#125;AQAjzCKbjLdmgBt+Zm0/jznvbwbCAZ7j1hZKl1NtcmdEj2GFGzF02Bi5jIk9ETz92XOV3z9U5UZTEBMLblKFlZqEzFNooJAZSEmCdwDY9iI5mbhe5oGApxlhbzF4pccF9wtkt4YIW3ElQWCfg01FhDuBiDIZ8NPlMJXRDjIV+/rhla/MkdHVWaphWW3PbHlF95D7bjssCLlyeDB5BjF4orOMpVdVAT/BZA5ANy+xDbEUiOd54E9E9pYAwxG+0qW6a3PvK6OCFozVfPgvT5xorAiJ50AzIH64ZjqILSPonpk3hcIm1PlTguOE5x2BYvgxYmq/CnlkhML07yJVElVAaWh4sTIs8I5hAwQ58SvAcgq/oDE5QluF+dHvoZFn748yCe0='</span></span><br></pre></td></tr></table></figure><p></p><h2 id="Config-Client额外配置"><a href="#Config-Client额外配置" class="headerlink" title="Config-Client额外配置"></a>Config-Client额外配置</h2><h3 id="刷新配置"><a href="#刷新配置" class="headerlink" title="刷新配置"></a>刷新配置</h3><p>在Config-Server和Config-Client都启动后，如果这时候Git仓库存储的配置信息改变了，在不重启Config-Client的情况下，配置信息是不会跟着更新的。那么如何在Git仓库存储的配置得到改变的时候也刷新Config-Client中获取到的配置值呢？很简单，我们只需要对Config-Client进行简单的改造：</p><p>在Config-Client中添加<code>spring-boot-starter-actuator</code>依赖：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>该依赖包含了<code>/refresh</code>端点，可以用来刷新配置。</p><p>然后在获取配置的Controller上加入<code>@RefreshScope</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;message&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"message"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>值得注意的是，我们需要在Config-Client的配置文件中加入如下配置来关闭认证，否则我们无权访问<code>/refresh</code>端点，具体可见<a href="https://github.com/spring-guides/gs-centralized-configuration/issues/5" target="_blank" rel="noopener">https://github.com/spring-guides/gs-centralized-configuration/issues/5</a>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  security:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p></p><p>重启Config-Client，访问<a href="http://localhost:12581/message" target="_blank" rel="noopener">http://localhost:12581/message</a>:</p><p><img src="img/QQ截图20181116110316.png" alt="QQ截图20181116110316.png"></p><p>这时候我们将Git仓库中对应的配置信息改为<code>测试配置刷新</code>，再次访问<a href="http://localhost:12581/message" target="_blank" rel="noopener">http://localhost:12581/message</a>会发现值还是<code>dev properties (master v1.0)</code>。</p><p>接着我们使用以下命令来刷新配置：</p><p><img src="img/QQ截图20181116110615.png" alt="QQ截图20181116110615.png"></p><p>这时候再次访问<a href="http://localhost:12581/message" target="_blank" rel="noopener">http://localhost:12581/message</a>：</p><p><img src="img/QQ截图20181116110717.png" alt="QQ截图20181116110717.png"></p><p>可看到在不重启Config-Client的前提下配置值已经得到了更新。</p><h2 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h2><p>如果Config-Server只是单机部署的话，当其遇到问题宕机后，所有从Config-Server获取配置信息的微服务都无法正常工作了，这是灾难性的。所以我们很有必要对Config-Server进行集群处理。</p><p>集群的方式有很多，这里介绍通过将Config-Server注册到Eureka的方式来搭建集群。</p><p>我们使用在<a href="Spring-Cloud-Eureka.html">Spring Cloud Eureka服务治理</a>一节中的Eureka-Service来构建Eureka-Server服务注册中心，使用以下命令启动Eureka-Server集群：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar Eureka-Service-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer1</span><br><span class="line">java -jar Eureka-Service-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer2</span><br></pre></td></tr></table></figure><p></p><p>启动后，访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>:</p><p><img src="img/QQ截图20181116114406.png" alt="QQ截图20181116114406.png"></p><p>说明Eureka集群启动成功。 接下来开始对Config-Server进行改造，将其注册到Eureka服务注册中心。</p><p>在Config-Server中加入Eureka依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后在Config-Server的启动类中加入<code>@EnableDiscoveryClient</code>注解，用于将服务注册到Eureka服务注册中心上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后在配置类application.yml中指定Eureka服务注册中心的地址：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/</span></span><br></pre></td></tr></table></figure><p></p><p>因为之前Eureka服务注册中心添加了认证，所以需要在url中指定用户名和密码。</p><p>改造好后，启动Config-Server，再次访问Eureka服务注册中心地址：<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>：</p><p><img src="img/QQ截图20181116135751.png" alt="QQ截图20181116135751.png"></p><p>可看到Config-Server已经成功注册了。</p><p>接着开始改造Config-Client，在其pom中同样引入Eureka依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后在bootstrap.yml中指定获取Config-Server服务的地址：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">febs</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">      label:</span> <span class="string">master</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">mrbird</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        service-id:</span> <span class="string">config-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/</span></span><br></pre></td></tr></table></figure><p></p><p>其中<code>eureka.client.serviceUrl.defaultZone</code>指定了Eureka服务注册中心的地址；<code>spring.cloud.config.discovery.enabled</code>指定为<code>true</code>开启获取服务的功能，<code>spring.cloud.config.discovery.service-id</code>表明需要获取服务的名称为<code>config-server</code>。</p><p>最后在Config-Client的启动类中引入<code>@EnableDiscoveryClient</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动Config-Client，访问：<a href="http://localhost:12581/message" target="_blank" rel="noopener">http://localhost:12581/message</a></p><p><img src="img/QQ截图20181116141115.png" alt="QQ截图20181116141115.png"></p><p>可看到，配置信息同样获取成功。</p><p>参考文章：</p><ol><li><p><a href="https://book.douban.com/subject/27025912/" target="_blank" rel="noopener">Spring Cloud微服务实战</a></p></li><li><p><a href="http://cloud.spring.io/spring-cloud-static/spring-cloud-config/1.4.3.RELEASE/single/spring-cloud-config.html" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-static/spring-cloud-config/1.4.3.RELEASE/single/spring-cloud-config.html</a></p></li></ol><p>源码地址：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/41.Spring-Cloud-Config" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/41.Spring-Cloud-Config</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Spring Cloud Config可以对微服务配置进行统一的外部管理，并且默认采用Git来管理配置信息。相对于传统的每个微服务对应一份自个儿的配置文件来说，通过Spring Cloud Config统一管理所有微服务配置具有如下优点：&lt;strong&gt;1.&lt;/strong&gt;集中管理微服务配置，当微服务数量众多的时候，使用这种方式会更为方便；&lt;strong&gt;2.&lt;/strong&gt;通过Git管理微服务配置，方便追踪配置修改记录；&lt;strong&gt;3.&lt;/strong&gt;可以在应用运行期间修改配置，微服务能够自动更新配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Zuul服务网关</title>
    <link href="http://mrbird.cc/Spring-Cloud-Zuul-Router.html"/>
    <id>http://mrbird.cc/Spring-Cloud-Zuul-Router.html</id>
    <published>2018-06-14T01:00:52.000Z</published>
    <updated>2018-09-25T03:48:39.484Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>在微服务的架构中，服务网关就是一个介于客户端与服务端之间的中间层。在这种情况下，客户端只需要跟服务网关交互，无需调用具体的微服务接口。这样的好处在于，客户端可以降低复杂性；对于需要认证的服务，只需要在服务网关配置即可；同样也方便后期微服务的变更和重构，即微服务接口变更只需在服务网关调整配置即可，无需更改客户端代码。</p><p><a href="https://github.com/Netflix/zuul" target="_blank" rel="noopener">Zuul</a>是一款由Netflix开发的微服务网关开源软件，可以和其自家开发的Eureka，Ribbon和Hystrix配合使用，Spring Cloud对其进行了封装。</p><a id="more"></a><h2 id="Spring-Cloud-Zuul入门"><a href="#Spring-Cloud-Zuul入门" class="headerlink" title="Spring Cloud Zuul入门"></a>Spring Cloud Zuul入门</h2><p>在构建微服务网关之前，我们先将相关微服务搭建好。这里我们直接使用前面的例子，分别启动如下服务：</p><ol><li><p>启动Eureka-Server集群，端口号为8080和8081；</p></li><li><p>启动一个Eureka-Client，端口号为8082；</p></li><li><p>启动一个Feign-Consumer，端口号为9000；</p></li></ol><p>查看<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>：</p><p><img src="img/QQ截图20180725103826.png" alt="QQ截图20180725103826.png"></p><p>其中Feign-Consumer虽然之前我们将它定义为服务消费者，但其也可以充当服务提供者的角色。</p><p>启动好这些微服务后，我们开始构建一个微服务网关Zuul-Gateway。新建一个Spring Boot项目，<code>artifactId</code>为Zuul-Gateway，然后引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>查看依赖关系可看到spring-cloud-starter-zuul包含以下依赖：</p><p><img src="img/QQ截图20180725095018.png" alt="QQ截图20180725095018.png"></p><div class="note info"><p>因为spring-cloud-starter-zuul依赖已经包含了Hystrix和Ribbon，所以zuul支持前面介绍的Hystrix和Ribbon相关配置。</p></div><p>接着在Spring Boot的入口类上标注<code>@EnableZuulProxy</code>注解，开启Zuul服务网关的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后简单配置下application.yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Zuul-Gateway</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">12580</span></span><br></pre></td></tr></table></figure><p></p><p>至此一个简单的Zuul微服务网关就搭建好了，下面开始对路由规则进行配置。</p><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><h3 id="传统配置"><a href="#传统配置" class="headerlink" title="传统配置"></a>传统配置</h3><p>传统配置就是手动指定服务的转发地址，如在yml中配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    api-a:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api-a/**</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">http://localhost:8082</span></span><br></pre></td></tr></table></figure><p></p><p>通过上面的配置，所有符合<code>/api-a/**</code>规则的访问都将被路由转发到<code>http://localhost:8082/</code>地址上，即当我们向服务网关访问<a href="http://localhost:12580/api-a/hello" target="_blank" rel="noopener">http://localhost:12580/api-a/hello</a>请求的时候，请求将被转发到<a href="http://localhost:8082/hello" target="_blank" rel="noopener">http://localhost:8082/hello</a>服务上：</p><p><img src="img/QQ截图20180725113200.png" alt="QQ截图20180725113200.png"></p><h3 id="基于服务名称配置"><a href="#基于服务名称配置" class="headerlink" title="基于服务名称配置"></a>基于服务名称配置</h3><p>传统的配置方式不便之处在于需要知道服务的具体地址和端口号等信息，我们可以借助Eureka来实现通过服务名称配置路由。在Zuul-Gateway项目中引入Eureka依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后在入口类中加入<code>@EnableDiscoveryClient</code>注解，使其具有获取服务的能力。</p><p>接着在yml中配置基于服务名称的路由：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    api-b:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api-b/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">server-provider</span></span><br><span class="line"><span class="attr">    api-c:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api-c/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">server-consumer</span></span><br></pre></td></tr></table></figure><p></p><p>上面我们首先指明了Eureka服务注册中心的地址，然后配置了<code>api-b</code>和<code>api-c</code>的路由，它们都是通过serviceId来指定服务名称的。</p><p>启动Zuul-Gateway，访问：<a href="http://localhost:12580/api-b/hello" target="_blank" rel="noopener">http://localhost:12580/api-b/hello</a>：</p><p><img src="img/QQ截图20180725140112.png" alt="QQ截图20180725140112.png"></p><p>访问：<a href="http://localhost:12580/api-c/user/1" target="_blank" rel="noopener">http://localhost:12580/api-c/user/1</a>：</p><p><img src="img/QQ截图20180725140208.png" alt="QQ截图20180725140208.png"></p><p>基于服务名称的路由配置还可以进行简化，格式为<code>zuul.routes.&lt;serviceid&gt;=&lt;path&gt;</code>，所以我们可以将<code>api-b</code>和<code>api-c</code>的路由配置修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    server-provider:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api-b/**</span></span><br><span class="line"><span class="attr">    server-consumer:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api-c/**</span></span><br></pre></td></tr></table></figure><p></p><h3 id="默认路由配置规则"><a href="#默认路由配置规则" class="headerlink" title="默认路由配置规则"></a>默认路由配置规则</h3><p>我们尝试访问<a href="http://localhost:12580/server-consumer/user/1" target="_blank" rel="noopener">http://localhost:12580/server-consumer/user/1</a>:</p><p><img src="img/QQ截图20180725142514.png" alt="QQ截图20180725142514.png"></p><p>我们压根没配置这个路由啊，为什么可以正常响应？？其实Zuul配合Eureka后将会成一套默认的配置规则。当我们使用服务名称作为请求的前缀路径时，实际上就会匹配上类似下面的默认路由配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    server-consumer:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/server-consumer/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">server-consumer</span></span><br></pre></td></tr></table></figure><p></p><p>如果不想启动这个默认配置，我们可以使用<code>zuul.ignored-services</code>配置来关闭，如在yml中加入如下配置之后，再次访问<a href="http://localhost:12580/server-consumer/user/1" target="_blank" rel="noopener">http://localhost:12580/server-consumer/user/1</a>将返回404：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  ignored-services:</span> <span class="string">server-consumer</span></span><br></pre></td></tr></table></figure><p></p><p>设置为<code>zuul.ignored-services=*</code>的时候将关闭所有默认路由配置规则。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>假如某个请求路径可以和多个路由配置规则相匹配的话，Zuul根据匹配的先后顺序来决定最终使用哪个路由配置。比如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    api-c:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api-c/**</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">server-consumer</span></span><br><span class="line"><span class="attr">    api-d:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api-c/user/1</span></span><br><span class="line"><span class="attr">      serviceId:</span> <span class="string">lol</span></span><br></pre></td></tr></table></figure><p></p><p>当我们访问<a href="http://localhost:12580/api-c/user/1" target="_blank" rel="noopener">http://localhost:12580/api-c/user/1</a>的时候，<code>api-c</code>和<code>api-d</code>的路由配置都可以匹配上，但由于<code>api-c</code>先于<code>api-d</code>配置，所以最终生效的是<code>api-c</code>的配置。</p><p>假如将<code>api-c</code>和<code>api-d</code>的配置顺序调换，再次访问<a href="http://localhost:12580/api-c/user/1" target="_blank" rel="noopener">http://localhost:12580/api-c/user/1</a>时将抛出异常，原因是不存在服务名为lol的服务：</p><div class="note danger"><p>Caused by: com.netflix.client.ClientException: Load balancer does not have available server for client: lol</p></div><h3 id="前缀配置"><a href="#前缀配置" class="headerlink" title="前缀配置"></a>前缀配置</h3><p><code>zuul.prefix</code>可以为网关的请求路径加个前缀，比如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  prefix:</span> <span class="string">/gateway</span></span><br></pre></td></tr></table></figure><p></p><p>这样配置后，我们通过Zuul网关获取服务的时候，路径也得加上这个前缀，如<code>http://localhost:12580/gateway/api-c/user/1</code>。</p><h3 id="本地跳转"><a href="#本地跳转" class="headerlink" title="本地跳转"></a>本地跳转</h3><p>Zuul网关除了支持将服务转发到各个微服务上之外，还支持将服务跳转到网关本身的服务上，比如现在yml中有如下一段配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    api-e:</span></span><br><span class="line"><span class="attr">      path:</span> <span class="string">/api-e/**</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">forward:/test</span></span><br></pre></td></tr></table></figure><p></p><p>当访问<a href="http://localhost:12580/gateway/api-e/hello" target="_blank" rel="noopener">http://localhost:12580/gateway/api-e/hello</a>时，Zuul会从本地<a href="test/hello">/test/hello</a>获取服务。</p><p>我们在Zuul-Gateway入口类中加上该REST服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello zuul"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>效果如下所示：</p><p><img src="img/QQ截图20180725161331.png" alt="QQ截图20180725161331.png"></p><h2 id="头部过滤-amp-重定向"><a href="#头部过滤-amp-重定向" class="headerlink" title="头部过滤 &amp; 重定向"></a>头部过滤 &amp; 重定向</h2><p>在使用Zuul网关的时候你可能会遇到Cookie丢失的情况，这是因为默认情况下Zuul会过滤掉HTTP请求头中的一些敏感信息，这些敏感信息通过下面的配置设定：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  sensitive-headers:</span> <span class="string">Cookie,Set-Cookie,Authorization</span></span><br></pre></td></tr></table></figure><p></p><p>如果想关闭这个默认配置，通过设置全局参数为空来覆盖默认值：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  sensitive-headers:</span></span><br></pre></td></tr></table></figure><p></p><p>如果只想关闭某个路由的HTTP请求头过滤，可以这样：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr"> routes:</span></span><br><span class="line"><span class="attr">   api-a:</span></span><br><span class="line"><span class="attr">     sensitive-headers:</span></span><br></pre></td></tr></table></figure><p></p><p>使用Zuul另一个常见问题是重定向的问题，可以通过下面的设置解决：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  add-host-header:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>Zuul另一个核心的功能就是请求过滤。Zuul中默认定义了4种不同生命周期的过滤器类型，在如下图所示</p><p><img src="/img/zuul.png" style="max-width:44rem"></p><div class="note info"><p>图片来自于 Zuul GitHub</p></div><p>这4种过滤器处于不同的生命周期，所以其职责也各不相同：</p><ul><li><p><strong>PRE</strong>：PRE过滤器用于将请求路径与配置的路由规则进行匹配，以找到需要转发的目标地址，并做一些前置加工，比如请求的校验等；</p></li><li><p><strong>ROUTING</strong>：ROUTING过滤器用于将外部请求转发到具体服务实例上去；</p></li><li><p><strong>POST</strong>：POST过滤器用于将微服务的响应信息返回到客户端，这个过程种可以对返回数据进行加工处理；</p></li><li><p><strong>ERROR</strong>：上述的过程发生异常后将调用ERROR过滤器。ERROR过滤器捕获到异常后需要将异常信息返回给客户端，所以最终还是会调用POST过滤器。</p></li></ul><h3 id="核心过滤器"><a href="#核心过滤器" class="headerlink" title="核心过滤器"></a>核心过滤器</h3><p>Spring Cloud Zuul为各个生命周期阶段实现了一批过滤器，如下所示：</p><p><img src="img/QQ截图20180921151818.png" alt="QQ截图20180921151818.png"></p><p>这些过滤器的优先级和作用如下表所示：</p><table><thead><tr><th>生命周期</th><th>优先级</th><th>过滤器</th><th>功能描述</th></tr></thead><tbody><tr><td>pre</td><td>-3</td><td>ServletDetectionFilter</td><td>标记处理Servlet的类型</td></tr><tr><td>pre</td><td>-2</td><td>Servlet30WrapperFilter</td><td>包装HttpServletRequest请求</td></tr><tr><td>pre</td><td>-1</td><td>FormBodyWrapperFilter</td><td>包装请求体</td></tr><tr><td>route</td><td>1</td><td>DebugFilter</td><td>标记调试标志</td></tr><tr><td>route</td><td>5</td><td>PreDecorationFilter</td><td>处理请求上下文供后续使用</td></tr><tr><td>route</td><td>10</td><td>RibbonRoutingFilter</td><td>serviceId请求转发</td></tr><tr><td>route</td><td>100</td><td>SimpleHostRoutingFilter</td><td>url请求转发</td></tr><tr><td>route</td><td>500</td><td>SendForwardFilter</td><td>forward请求转发</td></tr><tr><td>post</td><td>0</td><td>SendErrorFilter</td><td>处理有错误的请求响应</td></tr><tr><td>post</td><td>1000</td><td>SendResponseFilter</td><td>处理正常的请求响应</td></tr></tbody></table><p>其中优先级数字越小，优先级越高。</p><p>要关闭这些过滤器可以在applicaiton.yml中按照格式<code>zuul.&lt;SimpleClassName&gt;.&lt;filterType&gt;.disable=true</code>配置即可。比如关闭<code>SendResponseFilter</code>过滤器：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  SendResponseFilter:</span></span><br><span class="line"><span class="attr">    post:</span></span><br><span class="line"><span class="attr">      disable:</span></span><br><span class="line">        <span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><h3 id="自定义Zuul过滤器"><a href="#自定义Zuul过滤器" class="headerlink" title="自定义Zuul过滤器"></a>自定义Zuul过滤器</h3><p>我们自定义一个<code>PreSendForwardFilter</code>用于获取请求转发前的一些信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.netflix.zuul.ZuulFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreSendForwardFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以看到自定义Zuul过滤器只需要继承<code>ZuulFilter</code>，然后实现以下四个抽象方法即可：</p><ol><li><p><strong>filterType</strong>：对应Zuul生命周期的四个阶段：pre、post、route和error；</p></li><li><p><strong>filterOrder</strong>：过滤器的优先级，数字越小，优先级越高；</p></li><li><p><strong>shouldFilter</strong>：方法返回boolean类型，true时表示是否执行该过滤器的<code>run</code>方法，false则表示不执行；</p></li><li><p><strong>run</strong>：过滤器的过滤逻辑。</p></li></ol><p>继续完善<code>PreSendForwardFilter</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreSendForwardFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext requestContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = requestContext.getRequest();</span><br><span class="line">        String host = request.getRemoteHost();</span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">"请求URI：&#123;&#125;，HTTP Method：&#123;&#125;，请求IP：&#123;&#125;"</span>, uri, method, host);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这时候访问<a href="http://localhost:12580/api-a/hello" target="_blank" rel="noopener">http://localhost:12580/api-a/hello</a>，控制台将打印出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.e.demo.filter.PreSendForwardFilter     : 请求URI：/api-a/hello，HTTP Method：GET，请求IP：0:0:0:0:0:0:0:1</span><br></pre></td></tr></table></figure><p></p><blockquote><p>源码链接 <a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/39.Spring-Cloud-Zuul-Router" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/39.Spring-Cloud-Zuul-Router</a></p></blockquote><blockquote><p>参考资料： <a href="https://book.douban.com/subject/27025912/" target="_blank" rel="noopener">Spring Cloud微服务实战</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在微服务的架构中，服务网关就是一个介于客户端与服务端之间的中间层。在这种情况下，客户端只需要跟服务网关交互，无需调用具体的微服务接口。这样的好处在于，客户端可以降低复杂性；对于需要认证的服务，只需要在服务网关配置即可；同样也方便后期微服务的变更和重构，即微服务接口变更只需在服务网关调整配置即可，无需更改客户端代码。&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Netflix/zuul&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Zuul&lt;/a&gt;是一款由Netflix开发的微服务网关开源软件，可以和其自家开发的Eureka，Ribbon和Hystrix配合使用，Spring Cloud对其进行了封装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
      <category term="Zuul" scheme="http://mrbird.cc/tags/Zuul/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Feign 声明式服务调用</title>
    <link href="http://mrbird.cc/Spring-Cloud-Feign.html"/>
    <id>http://mrbird.cc/Spring-Cloud-Feign.html</id>
    <published>2018-06-10T10:35:03.000Z</published>
    <updated>2018-08-21T08:06:46.687Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>前面我们分别通过Spring Cloud Ribbon和Spring Cloud Hystrix实现了客户端负载均衡和服务容错，而Spring Cloud Feign不但整合了这两者的功能，而且还提供了一种比Ribbon更简单的服务调用方式 ——— 声明式服务调用。在Spring Cloud Feign中编写服务调用代码非常简单，几乎可以直接将服务提供者的代码复制过来，改为接口即可，下面通过例子来演示这个特性。<a id="more"></a></p><h2 id="搭建Feign-Consumer"><a href="#搭建Feign-Consumer" class="headerlink" title="搭建Feign Consumer"></a>搭建Feign Consumer</h2><p>创建一个新的Spring Boot应用，版本为<code>1.5.13.RELEASE</code>，<code>artifactId</code>改为<code>Feign-Consumer</code>，并引入下面这些依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>除了<code>spring-cloud-starter-feign</code>依赖外，我们还引入了<code>spring-cloud-starter-eureka</code>，目的是为了从Eureka服务注册中心获取服务。</p><p>在Spring Boot的入口类中加入<code>@EnableFeignClients</code>和<code>@EnableDiscoveryClient</code>注解，用于开启Spring Cloud Feign和服务注册与发现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在前面几节中，我们曾在服务提供者Eureka-Client中定义了一个UserController，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"获取用户id为 "</span> + id + <span class="string">"的信息"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(id, <span class="string">"mrbird"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"mrbird"</span>, <span class="string">"123456"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">"scott"</span>, <span class="string">"123456"</span>));</span><br><span class="line">        log.info(<span class="string">"获取用户信息 "</span> + list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"新增用户成功 "</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"更新用户成功 "</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"删除用户成功 "</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在Spring Cloud Ribbon中访问这些服务需要通过<code>RestTemplate</code>对象来实现，并且参数绑定的过程也比较繁琐。Spring Cloud Feign对这个步骤进行了进一步的封装，在Feign Consumer中调用这些服务只需要定义一个UserService接口，然后将UserController中的代码复制过并将方法体去掉即可，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"Server-Provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(@RequestBody User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(@RequestBody User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>对比Feign Consumer中的UserService和Eureka-Client中UserController代码，两者是不是很相似？</p><p>在UserService中，我们通过<code>@FeignClient(&quot;Server-Provider&quot;)</code>注解来获取我们需要的服务，其中<code>Server-Provider</code>不区分大小写。需要注意的是，在定义各参数绑定时，<code>@RequestParam</code>、<code>@RequestHeader</code>等可 以指定参数名称的注解，它们的value千万不能少。在SpringMVC 程序中，这些注解会根据参数名来作为默认值，但是在Feign中绑定参数必须通过value属性来指明具体的参数名，不然会抛出<code>illegalStateException</code>异常，value 属性不能为空。</p><p>接下来我们在Feign Consumer中定义一个TestController，来调用UserService中定义的服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"mrbird"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        userService.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"mrbird"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        userService.update(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后配置一下application.yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9000</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Server-Consumer</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/</span></span><br></pre></td></tr></table></figure><p></p><p>上面配置指定了Eureka服务注册中心的地址，用于获取服务。</p><p>最后我们分别启动以下服务：</p><ol><li><p>启动Eureka-Server集群，端口号为8080和8081；</p></li><li><p>启动两个Eureka-Client，端口号为8082和8083；</p></li><li><p>启动Feign-Consumer，端口号为9000。</p></li></ol><p>多次访问<a href="http://localhost:9000/user/1" target="_blank" rel="noopener">http://localhost:9000/user/1</a>服务，观察8082和8083服务的控制台：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2018-06-10 14:27:38.105  INFO 10120 --- [nio-8082-exec-8] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-10 14:27:39.989  INFO 10120 --- [nio-8082-exec-7] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-10 14:27:41.197  INFO 10120 --- [nio-8082-exec-6] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-10 14:27:41.802  INFO 10120 --- [nio-8082-exec-5] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-10 14:27:42.224  INFO 10120 --- [nio-8082-exec-4] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-10 14:27:42.865  INFO 10120 --- [nio-8082-exec-3] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-10 14:27:43.296  INFO 10120 --- [nio-8082-exec-2] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line"></span><br><span class="line">2018-06-10 14:27:38.358  INFO 9104 --- [nio-8083-exec-8] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-10 14:27:40.754  INFO 9104 --- [nio-8083-exec-7] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-10 14:27:41.397  INFO 9104 --- [nio-8083-exec-6] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-10 14:27:42.006  INFO 9104 --- [nio-8083-exec-5] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-10 14:27:42.445  INFO 9104 --- [nio-8083-exec-4] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-10 14:27:43.073  INFO 9104 --- [nio-8083-exec-3] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br></pre></td></tr></table></figure><p></p><p>使用Feign实现的消费者，依然是利用Ribbon维护了针对Seriver-Provider的服务列表信息，并且通过轮询实现了客户端负载均衡。而与Ribbon不同的是，通过Feign我们只需定义服务绑定接口，以声明式的方法，优雅而简单地实现了服务调用。</p><h2 id="Ribbon相关配置"><a href="#Ribbon相关配置" class="headerlink" title="Ribbon相关配置"></a>Ribbon相关配置</h2><p>Spring Cloud Feign内部的客户端负载均衡是通过Ribbon来实现的，所以在Spring Cloud Feign中配置Ribbon，和之前在<a href="/Spring-Cloud-Ribbon-LoadBalance.html">Spring Cloud Ribbon客户端负载均衡</a>中介绍的Spring Cloud Ribbon配置一样，这里不再赘述。</p><h2 id="Hystrix相关配置"><a href="#Hystrix相关配置" class="headerlink" title="Hystrix相关配置"></a>Hystrix相关配置</h2><p>要在Spring Cloud Feign中开启Hystrix，可以在yml中添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><p>剩下的Hystrix配置和之前在<a href="/Spring-Cloud-Hystrix-Circuit-Breaker.html">Spring Cloud Hystrix服务容错</a>中介绍的Hystrix属性配置一样。</p><p>在Spring Cloud Feign中配置服务降级和在Spring Cloud Hystrix中配置服务降级区别很大，下面具体来看下怎么在Feign-Consumer中配置服务降级。</p><p>定义一个用于处理服务降级方法的类UserServiceFallback，并且实现上面定义的UserService接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceFallback</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(-<span class="number">1L</span>, <span class="string">"default"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"test fallback"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"test fallback"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"test fallback"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在UserService的中通过<code>@FeignClient</code>注解的<code>fallback</code>属性来指定对应的服务降级实现类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"Server-Provider"</span>, fallback = UserServiceFallback.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启Feign-Consumer，并关闭Eureka Client服务，访问<a href="http://localhost:9000/user/1" target="_blank" rel="noopener">http://localhost:9000/user/1</a>，由于Eureka-Client服务提供者都关闭了，所以这里会直接触发服务降级，响应结果如下：</p><p><img src="img/QQ截图20180720164914.png" alt="QQ截图20180720164914.png"></p><p>可看到响应信息为服务降级方法中的返回结果。</p><h2 id="其余Feign配置"><a href="#其余Feign配置" class="headerlink" title="其余Feign配置"></a>其余Feign配置</h2><p>除了Ribbon和Hystrix配置之外，Feign也有一些自个儿的配置。</p><h3 id="请求压缩"><a href="#请求压缩" class="headerlink" title="请求压缩"></a>请求压缩</h3><p>Spring Cloud Feign支持对请求与响应进行GZIP压缩，以减少通信过程中的性能损耗：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  compression:</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    response:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><p>同时，我们还能对请求压缩做一些更细致的设置，比如下面的配置内容指定了压缩的请求数据类型，并设置了请求压缩的大小下限，只有超过这个大小的请求才会对其进行压缩:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  compression:</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      mime-types:</span> <span class="string">text/xml,application/xml,application/json</span></span><br><span class="line"><span class="attr">      min-request-size:</span> <span class="number">2048</span></span><br></pre></td></tr></table></figure><p></p><h3 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h3><p>Feign提供了日志打印的功能，Feign的日志级别分为四种：</p><ul><li><p><code>NONE</code>: 不记录任何信息。</p></li><li><p><code>BASIC</code>: 仅记录请求方法、<code>URL</code>以及响应状态码和执行时间。</p></li><li><p><code>HEADERS</code>: 除了记录<code>BASIC</code>级别的信息之外，还会记录请求和响应的头信息。</p></li><li><p><code>FULL</code>: 记录所有请求与响应的明细，包括头信息、请求体、元数据等。</p></li></ul><p>日志级别默认为<code>NONE</code>，要改变级别可以在入口类中定义一个日志配置Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后在yml中配置Feign客户端的日志级别为debug，Feign日志记录仅响应debug级别：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line"><span class="attr">    com:</span></span><br><span class="line"><span class="attr">      example:</span></span><br><span class="line"><span class="attr">        demo:</span></span><br><span class="line"><span class="attr">          service:</span></span><br><span class="line"><span class="attr">            UserService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p></p><p>重启项目访问<a href=""></a>，可以看到控制台打印日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[UserService#get] &lt;--- HTTP/1.1 200 (506ms)</span><br><span class="line">[UserService#get] content-type: application/json;charset=UTF-8</span><br><span class="line">[UserService#get] date: Stu, 10 Jun 2018 01:44:45 GMT</span><br><span class="line">[UserService#get] transfer-encoding: chunked</span><br><span class="line">[UserService#get] </span><br><span class="line">[UserService#get] &#123;&quot;id&quot;:1,&quot;username&quot;:&quot;mrbird&quot;,&quot;password&quot;:&quot;123456&quot;&#125;</span><br><span class="line">[UserService#get] &lt;--- END HTTP (48-byte body)</span><br><span class="line">Flipping property: Server-Provider.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647</span><br></pre></td></tr></table></figure><p></p><blockquote><p>源码链接 <a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/33.Spring-Cloud-Feign-Declarative-REST-Client" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/33.Spring-Cloud-Feign-Declarative-REST-Client</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;前面我们分别通过Spring Cloud Ribbon和Spring Cloud Hystrix实现了客户端负载均衡和服务容错，而Spring Cloud Feign不但整合了这两者的功能，而且还提供了一种比Ribbon更简单的服务调用方式 ——— 声明式服务调用。在Spring Cloud Feign中编写服务调用代码非常简单，几乎可以直接将服务提供者的代码复制过来，改为接口即可，下面通过例子来演示这个特性。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
      <category term="Feign" scheme="http://mrbird.cc/tags/Feign/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Hystrix Dashboard仪表盘</title>
    <link href="http://mrbird.cc/Spring-Cloud-Hystrix-Dashboard.html"/>
    <id>http://mrbird.cc/Spring-Cloud-Hystrix-Dashboard.html</id>
    <published>2018-06-07T01:07:46.000Z</published>
    <updated>2018-08-21T08:05:03.288Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>Hystrix提供了Hystrix Dashboard来实时监控Hystrix的运行情况，通过Hystrix Dashboard反馈的实时信息，可以帮助我们快速发现系统中存在的问题，从而及时地采取应对措施。Spring Cloud对Hystrix Dashboard进行了整合，这里将介绍如何使用Hystrix Dashboard监控单个和多个Hystrix实例。<a id="more"></a></p><h2 id="监控单个Hystrix实例"><a href="#监控单个Hystrix实例" class="headerlink" title="监控单个Hystrix实例"></a>监控单个Hystrix实例</h2><p>创建一个Spring Boot项目，Spring Boot版本为<code>1.5.13.RELEASE</code>，<code>artifactId</code>填Hystrix-Dashboard，然后引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>稍微配置下yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Hystrix-Dashboard</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9002</span></span><br></pre></td></tr></table></figure><p></p><p>然后在入口类上加入注解<code>@EnableHystrixDashboard</code>来启用Hystrix Dashboard的功能。启动项目访问<a href="http://localhost:9002/hystrix" target="_blank" rel="noopener">http://localhost:9002/hystrix</a>就可以看到如下页面了：</p><p><img src="img/QQ截图20180713143306.png" alt="QQ截图20180713143306.png"></p><p>可以看到页面上提供了三种监控的模式：Cluster via Turbine(default cluster)、Cluster via Turbine(custom cluster)和Single Hystrix App：</p><p>前两种都是集群监控的，下面再介绍，这里先介绍第三种单机监控。</p><p>在上一节<a href="/Spring-Cloud-Hystrix-Circuit-Breaker.html">Spring Cloud Hystrix服务容错</a>的基础上，要对Ribbon-Consumer进行监控还必须加入<code>spring-boot-starter-actuator</code>依赖，然后分别启动Eureka-Serve集群，Eureka-Client，Ribbon-Consumer，启动后在刚刚的监控页面上输入：<a href="http://localhost:9000/hystrix.stream" target="_blank" rel="noopener">http://localhost:9000/hystrix.stream </a>，然后往Ribbon-Consumer发几条请求，便可以看到如下监控页面：</p><p><img src="img/QQ截图20180713145843.png" alt="QQ截图20180713145843.png"></p><p>至于这张图上面的指标代表什么含义，我们可以参考官方给的图例：</p><p><img src="img/dashboard-annoted-circuit-640.png" alt="dashboard-annoted-circuit-640.png"></p><p>到这里我们已经实现了使用Hystrix Dashboard对单个Hystrix实例进行监控了，然而实际中一般会有多个Hystrix实例需要同时进行监控，下面我们使用Turbine来实现集群监控。</p><h2 id="Turbine集群监控"><a href="#Turbine集群监控" class="headerlink" title="Turbine集群监控"></a>Turbine集群监控</h2><p>使用Turbine实现对Hystrix的集群监控的思路是：Turbine从Eureka服务注册中心通过服务名Ribbon-Consumer获取服务实例，然后Hystrix Dashboard对Turbine进行监控，这样就实现了Hystrix Dashboard同时对多个Hystrix（Ribbon-consumer）实例同时进行监控的功能。</p><p>创建一个Spring Boot项目，Spring Boot版本为<code>1.5.13.RELEASE</code>，<code>artifactId</code>填Turbine，然后引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后在入口类中加入<code>@EnableTurbine</code>来开启Turbine的功能，并且加入<code>@EnableDiscoveryClient</code>注解，开启服务获取功能。</p><p>最后在yml中加入一些配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Turbine</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://mrbird:123456@peer1:8080/eureka/,http://mrbird:123456@peer2:8081/eureka/</span></span><br><span class="line"><span class="attr">turbine:</span></span><br><span class="line"><span class="attr">  app-config:</span> <span class="string">Ribbon-Consumer</span></span><br><span class="line"><span class="attr">  cluster-name-expression:</span> <span class="string">new</span> <span class="string">String('default')</span></span><br><span class="line"><span class="attr">  combine-host-port:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><p>上面配置了Eureka-Server的集群地址，并且指定了端口号为9003，应用名称为Turbine。剩下的配置为Turbine的配置，含义如下：</p><ul><li><p><code>turbine.app-config</code>指定了需要收集监控信息的服务名，这里为Ribbon-Consumer；</p></li><li><p><code>turbine.cluster-name-expression</code>参数指定了集群名称为default, 当服务数量非常多的时候，可以启动多个Turbine 服务来构建不同的聚合集群， 而该参数可以用来区分这些不同的聚合集群，同时该参数值可以在Hystrix仪表盘中用来定位不同的聚合集群，只需在Hystrix Stream的URL中通过cluster参数来指定(即Cluster via Turbine(custom cluster))；</p></li><li><p><code>turbine.combine-host-port</code>参数设置为七rue, 可以让同一主机上的服务通过主机名与端口号的组合来进行区分， 默认情况下会以host来区分不同的服务，这会使得在本地调试的时候，本机上的不同服务聚合成一个服务来统计。</p></li></ul><p>配置完毕后，我们分别启动下面这些服务：</p><ol><li><p>启动Eureka-Server集群，端口号为8080和8081；</p></li><li><p>启动一个Eureka-Client，端口号为8082；</p></li><li><p>启动两个Ribbon-Consumer，端口号为9000和9001；</p></li><li><p>启动Turbine服务，端口号为9003；</p></li><li><p>最后启动Hystrix-Dashboard服务，端口号为9002。</p></li></ol><p>启动好这些服务后，访问Eureka-server的<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>可看到这些实例：</p><p><img src="img/QQ截图20180713155602.png" alt="QQ截图20180713155602.png"></p><p>说明服务都已启动成功，我们观察Turbine的控制台，可以看到如下日志信息：</p><p><img src="img/QQ截图20180713160919.png" alt="QQ截图20180713160919.png"></p><p>即Turbine已经从服务注册中心找到了9000和9001端口的Ribbon-Consumer实例。</p><p>这时候我们访问Hystrix-dashboard的地址<a href="http://localhost:9002/hystrix" target="_blank" rel="noopener">http://localhost:9002/hystrix</a>，在页面的地址栏输入<a href="http://localhost:9003/turbine.stream" target="_blank" rel="noopener">http://localhost:9003/turbine.stream</a>，然后分别往9000和9001端口的Ribbon-Consumer实例发送一些请求，这时候可以看到Dashboard的画面如下：</p><p><img src="img/QQ截图20180713155511.png" alt="QQ截图20180713155511.png"></p><p>可以看到Hosts的值已经是2了，并且由于两个Hystrix实例的名称都是Ribbon-Consumer，所以Turbine 会将相同名称的服务作为整体来看待，汇总成一个监控图。</p><p>源码链接：<a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/31.Spring-Cloud-Hystrix-Dashboard-Turbine" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/31.Spring-Cloud-Hystrix-Dashboard-Turbine</a></p><h3 id="使用消息中间件"><a href="#使用消息中间件" class="headerlink" title="使用消息中间件"></a>使用消息中间件</h3><p>除了直接用Turbine从服务注册中心获取Ribbon-Consumer实例监控数据外，还可以将Ribbon-Consumer的监控数据发送到消息中间件，然后Turbine从消息中间件中获取。这里我们选择RabbitMQ作为消息中间件。</p><p>在安装RabbitMQ之前，需要先安装Erlang/OTP，下载地址为：<a href="http://www.erlang.org/downloads/" target="_blank" rel="noopener">http://www.erlang.org/downloads/</a>，下载exe文件安装即可。</p><p>安装完毕后，下载RabbitMQ，下载地址为<a href="http://www.rabbitmq.com/install-windows.html" target="_blank" rel="noopener">http://www.rabbitmq.com/install-windows.html</a>，下载exe文件安装即可。</p><p>安装完RabbitMQ之后，我们到RabbitMQ安装目录的sbin下执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><p></p><p>然后在浏览器中输入<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a>，用户名和密码都是guest，登录后可看到：</p><p><img src="img/QQ截图20180713164756.png" alt="QQ截图20180713164756.png"></p><p>说明启动成功。</p><p>接下来我们对Ribbon-Consumer进行改造，实现其将监控信息输出到RabbitMQ，在pom中添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-hystrix-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>修改Ribbon-Consumer的yml配置文件，加入RabbitMQ的连接配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure><p></p><p>最后我们来修改Turbine，让其从RabbitMQ中读取监控信息。在Turbine项目中引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-turbine-stream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>同时删除<code>spring-cloud-starter-eureka</code>和<code>spring-cloud-starter-turbine</code>依赖，因为我们不再从服务注册中心去获取监控的服务信息了，并且<code>spring-cloud-starter-turbine-stream</code>已经包含了<code>spring-cloud-starter-turbine</code>依赖。</p><p>修改Turbine的入口类，删除<code>@EnableTurbine</code>和<code>@EnableDiscoveryClient</code>注解，添加<code>@EnableTurbineStream</code>注解。</p><p>将Turbine的yml配置修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Turbine</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">      password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9003</span></span><br></pre></td></tr></table></figure><p></p><p>修改完毕后，我们分别启动下面这些服务：</p><ol><li><p>启动Eureka-Server集群，端口号为8080和8081；</p></li><li><p>启动一个Eureka-Client，端口号为8082；</p></li><li><p>启动两个Ribbon-Consumer，端口号为9000和9001；</p></li><li><p>启动Turbine服务，端口号为9003；</p></li><li><p>最后启动Hystrix-Dashboard服务，端口号为9002。</p></li></ol><p>同样的我们访问Hystrix-dashboard的地址<a href="http://localhost:9002/hystrix" target="_blank" rel="noopener">http://localhost:9002/hystrix</a>，在页面的地址栏输入<a href="http://localhost:9003/turbine.stream" target="_blank" rel="noopener">http://localhost:9003/turbine.stream</a>，然后分别往9000和9001端口的Ribbon-Consumer实例发送一些请求，这时候可以看到Dashboard的画面如下：</p><p><img src="img/QQ截图20180713171537.png" alt="QQ截图20180713171537.png"></p><p>效果和从服务注册中心获取服务的监控信息一致。并且这时候观察RabbitMQ的页面：</p><p><img src="img/QQ截图20180713171622.png" alt="QQ截图20180713171622.png"></p><p>可看到Queued messages已经有数据了。</p><p>至此我们完成了Turbine从消息中间件RabbitMQ来收集监控信息的过程。</p><p>源码链接：<a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/32.Spring-Cloud-Hystrix-Dashboard-Turbine-RabbitMQ" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/32.Spring-Cloud-Hystrix-Dashboard-Turbine-RabbitMQ</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Hystrix提供了Hystrix Dashboard来实时监控Hystrix的运行情况，通过Hystrix Dashboard反馈的实时信息，可以帮助我们快速发现系统中存在的问题，从而及时地采取应对措施。Spring Cloud对Hystrix Dashboard进行了整合，这里将介绍如何使用Hystrix Dashboard监控单个和多个Hystrix实例。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
      <category term="Hystrix" scheme="http://mrbird.cc/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Hystrix服务容错</title>
    <link href="http://mrbird.cc/Spring-Cloud-Hystrix-Circuit-Breaker.html"/>
    <id>http://mrbird.cc/Spring-Cloud-Hystrix-Circuit-Breaker.html</id>
    <published>2018-06-06T00:57:40.000Z</published>
    <updated>2018-08-21T08:00:58.840Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>在微服务的架构中，服务间通常会形成相互依赖的关系，比如现在有三个微服务节点：A，B和C，B为A的消费者，C为B的消费者。假如由于网络波动或者A服务自身故障，导致B调用A服务的线程被挂起进入长时间的等待。在高并发的情况下可能导致B的资源被耗竭随之崩溃，从而导致C服务也不可用。这种连环式的雪崩效应在微服务中较为常见，为了解决这个问题，服务熔断技术应运而出。熔断一词来自电路学，指的是电路在出现短路状况时，“断路器”能够及时地切断故障电路，避免电路过载发热引发火灾。</p><p>类似的，微服务架构中的断路器能够及时地发现故障服务，并向服务调用方返回错误响应，而不是长时间的等待。Spring Cloud Hystrix在Hystrix（又是一款由Netflix开发的开源软件，Github地址<a href="https://github.com/Netflix/Hystrix" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix</a>）的基础上进行了封装，提供了服务熔断，服务降级，线程隔离等功能，通过这些功能可以提供服务的容错率。<a id="more"></a></p><h2 id="使用Hystrix"><a href="#使用Hystrix" class="headerlink" title="使用Hystrix"></a>使用Hystrix</h2><p>这里将在上一节<a href="/Spring-Cloud-Ribbon-LoadBalance.html">Spring Cloud Ribbon客户端负载均衡</a>源码的基础上配置Hystrix。</p><p>我们先看下在没有配置Hystrix之前，关闭Eureka-Client是什么效果。</p><p>分别使用peer1和peer2配置启动Eureka-Server集群，然后启动两个Eureka-Client实例，端口分别为8082和8083，最后启动Ribbon-Consumer。准备完毕后，我们关闭端口为8082的Eureka-Client，然后发送GET请求<a href="http://localhost:9000/user/1" target="_blank" rel="noopener">http://localhost:9000/user/1</a>，返回结果如下：</p><p><img src="img/QQ截图20180710151846.png" alt="QQ截图20180710151846.png"></p><p>下面开始使用使用Spring Cloud Hystrix，在项目Ribbon-Consumer中引入Spring Cloud Hystrix依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在入口类上加入<code>@EnableHystrix</code>或者<code>@EnableCircuitBreaker</code>注解。这两个注解是等价的，查看<code>@EnableHystrix</code>注解源码就可以证实这一点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableHystrix &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在引入<code>@EnableHystrix</code>或者<code>@EnableCircuitBreaker</code>注解后，我们的入口类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>入口类上总共包含了三个注解<code>@EnableCircuitBreaker</code>、<code>@EnableDiscoveryClient</code>和<code>@SpringBootApplication</code>，这三个注解的组合可以使用<code>@SpringCloudApplication</code>来代替，<code>@SpringCloudApplication</code>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringCloudApplication &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接着将UserController中的方法提取出来，创建一个UserService（为了简单起见，不再创建Service接口）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://Server-Provider/user/&#123;id&#125;"</span>, User.class, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://Server-Provider/user"</span>, List.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"mrbird"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        HttpStatus status = <span class="keyword">this</span>.restTemplate.postForEntity(<span class="string">"http://Server-Provider/user"</span>, user, <span class="keyword">null</span>).getStatusCode();</span><br><span class="line">        <span class="keyword">if</span> (status.is2xxSuccessful()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"新增用户成功"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"新增用户失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"mrbird"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">this</span>.restTemplate.put(<span class="string">"http://Server-Provider/user"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.restTemplate.delete(<span class="string">"http://Server-Provider/user/&#123;1&#125;"</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接着改造UserService的<code>getUser</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"getUserDefault"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://Server-Provider/user/&#123;id&#125;"</span>, User.class, id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserDefault</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(-<span class="number">1L</span>);</span><br><span class="line">    user.setUsername(<span class="string">"defaultUser"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们在<code>getUser</code>方法上加入了<code>@HystrixCommand</code>注解，注解的<code>fallbackMethod</code>属性指定了被调用的方法不可用时的回调方法（服务熔断时的回调处理逻辑，即服务降级），这里为<code>getUserDefault</code>方法（必须与<code>getUser</code>方法的参数及返回值类型一致）。</p><p>在UserController中调用UserService的<code>getUser</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>修改完后启动Ribbon-Consumer并重重新启动8082端口的Eureka-Client，发送数次GET请求<a href="http://localhost:9000/user/1" target="_blank" rel="noopener">http://localhost:9000/user/1</a>后，再次关闭8082端口的Eureka-Client。</p><p>断开后，继续发送GET请求<a href="http://localhost:9000/user/1" target="_blank" rel="noopener">http://localhost:9000/user/1</a>，当轮询到8082端口时返回数据如下图所示：</p><p><img src="img/QQ截图20180710154714.png" alt="QQ截图20180710154714.png"></p><p>可以看到，当轮询到服务不可用时，触发了熔断机制，接口回调了<code>fallbackMethod</code>指定的方法。</p><p>我们也可以模拟服务超时的情况，可以在Eureka-Client提供的接口方法中设置线程等待，等待时间大于2000（Hystrix默认超时时间为2000 毫秒）即可触发调用方Ribbon-Consumer的服务熔断。</p><h2 id="HystrixCommand详解"><a href="#HystrixCommand详解" class="headerlink" title="@HystrixCommand详解"></a>@HystrixCommand详解</h2><p><code>@HystrixCommand</code>注解还包含许多别的属性功能，下面介绍一些常用的属性配置。</p><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>上面TestController中的<code>getUser</code>中我们用<code>@HystrixCommand</code>注解指定了服务降级方法<code>getUserDefault</code>。如果<code>getUserDefault</code>方法也抛出异常，那么我们可以再次使用<code>@HystrixCommand</code>注解指定<code>getUserDefault</code>方法降级的方法，比如定义一个<code>getUserDefault2</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"getUserDefault2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserDefault</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    String a = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 测试服务降级</span></span><br><span class="line">    a.toString();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(-<span class="number">1L</span>);</span><br><span class="line">    user.setUsername(<span class="string">"defaultUser"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserDefault2</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(-<span class="number">2L</span>);</span><br><span class="line">    user.setUsername(<span class="string">"defaultUser2"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启Ribbon-Consumer，并关闭8082端口的Eureka Client服务，访问<a href="http://localhost:9000/user/1" target="_blank" rel="noopener">http://localhost:9000/user/1</a>：</p><p><img src="img/QQ截图20180712112335.png" alt="QQ截图20180712112335.png"></p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>在使用<code>@HystrixCommand</code>注解标注的方法中，除了<code>HystrixBadRequestException</code>异常外，别的异常都会触发服务降级。假如我们想指定某个异常不触发服务降级，可以使用<code>@HystrixCommand</code>注解的<code>ignoreExceptions</code>属性进行忽略。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"getUserDefault2"</span>, ignoreExceptions = &#123;NullPointerException.class&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserDefault</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    String a = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 测试服务降级</span></span><br><span class="line">    a.toString();</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(-<span class="number">1L</span>);</span><br><span class="line">    user.setUsername(<span class="string">"defaultUser"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HystrixBadRequestException()</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>此外，对于方法抛出的异常信息，我们可以在服务降级的方法中使用<code>Throwable</code>对象获取，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"getUserDefault2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserDefault</span><span class="params">(Long id, Throwable e)</span> </span>&#123;</span><br><span class="line">    System.out.println(e.getMessage());</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(-<span class="number">2L</span>);</span><br><span class="line">    user.setUsername(<span class="string">"defaultUser2"</span>);</span><br><span class="line">    user.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="命名与分组"><a href="#命名与分组" class="headerlink" title="命名与分组"></a>命名与分组</h3><p>通过指定<code>@HystrixCommand</code>注解的<code>commandKey</code>、<code>groupKey</code>以及<code>threadPoolKey</code>属性可以设置命令名称、分组以及线程池划分，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"getUserDefault"</span>, commandKey = <span class="string">"getUserById"</span>, groupKey = <span class="string">"userGroup"</span>,</span><br><span class="line">        threadPoolKey = <span class="string">"getUserThread"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">	log.info(<span class="string">"获取用户信息"</span>);</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://Server-Provider/user/&#123;id&#125;"</span>, User.class, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面的配置指定了命令的名称为<code>getUserById</code>，组名为<code>userGroup</code>，线程池名称为<code>getUserThread</code>。</p><p>通过设置命令组，Hystrix会根据组来组织和统计命令的告警、仪表盘等信息。默认情况下，Hystrix命令通过组名来划分线程池，即组名相同的命令放到同一个线程池里，如果通过<code>threadPoolKey</code>设置了线程池名称，则按照线程池名称划分。</p><p>当<code>getUser</code>方法被调用时，日志打印如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-06-06 15:32:55.945  INFO 16192 --- [getUserThread-1] com.example.demo.Service.UserService  : 获取用户信息</span><br></pre></td></tr></table></figure><p></p><p>可看到线程名称为getUserThread-1。</p><h3 id="Hystrix缓存"><a href="#Hystrix缓存" class="headerlink" title="Hystrix缓存"></a>Hystrix缓存</h3><p>我们在Controller中调用三次<code>getUser</code>方法，参数都为1L：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"testCache"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.getUser(<span class="number">1L</span>);</span><br><span class="line">        userService.getUser(<span class="number">1L</span>);</span><br><span class="line">        userService.getUser(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>当访问<a href="http://localhost:9000/testCache" target="_blank" rel="noopener">http://localhost:9000/testCache</a>时，控制台输出如下： <img src="img/QQ截图20180712173742.png" alt="QQ截图20180712173742.png"></p><p>开启缓存可以让<code>getUser</code>方法只被调用一次，剩下两次直接从缓存里获取。</p><p><strong>开启缓存</strong></p><p>要在Hystrix中开启缓存很简单，只需使用<code>@CacheResult</code>注解即可，修改UserService的<code>getUser</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheResult</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://Server-Provider/user/&#123;id&#125;"</span>, User.class, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>通过上面的设定，Hystrix会将返回的User对象进行缓存，缓存的key默认为方法的所有参数，这里只有一个id参数，所以缓存的key为用户id。</p><p>这里在测试的时候遇到一个异常：</p><div class="note danger"><p>java.lang.IllegalStateException: Request caching is not available. Maybe you need to initialize the HystrixRequestContext? at com.netflix.hystrix.HystrixRequestCache.get(HystrixRequestCache.java:104) ~[hystrix-core-1.5.12.jar:1.5.12] at com.netflix.hystrix.AbstractCommand$7.call(AbstractCommand.java:478) ~[hystrix-core-1.5.12.jar:1.5.12] at com.netflix.hystrix.AbstractCommand$7.call(AbstractCommand.java:454) ~[hystrix-core-1.5.12.jar:1.5.12] …</p></div><p></p><p>在Hystrix的issue中找到了类似的提问：<a href="https://github.com/Netflix/Hystrix/issues/1314" target="_blank" rel="noopener">https://github.com/Netflix/Hystrix/issues/1314</a>。</p><p>大致意思是在使用Hytrix缓存之前，需要通过<code>HystrixRequestContext.initializeContext</code>初始化Hystrix请求上下文，请求结束之后需要调用<code>shutdown</code>方法关闭请求。</p><p>所以我们可以定义一个过滤器来实现这个过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"hystrixRequestContextServletFilter"</span>, urlPatterns = <span class="string">"/*"</span>, asyncSupported = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixRequestContextServletFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HystrixRequestContext context = HystrixRequestContext.initializeContext();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>到这里，我才意识到，其实Hystrix的缓存还是蛮鸡肋的，请求缓存不是只写入一次结果就不再变化的，而是每次请求到达Controller的时候，我们都需要为HystrixRequestContext进行初始化，之前的缓存也就是不存在了，我们是在同一个请求中保证结果相同，同一次请求中的第一次访问后对结果进行缓存，缓存的生命周期只有一次请求！</p></div><p>改造完毕后，重启项目再次访问<a href="http://localhost:9000/testCache" target="_blank" rel="noopener">http://localhost:9000/testCache</a>，控制台输出如下：</p><p><img src="img/QQ截图20180712181439.png" alt="QQ截图20180712181439.png"></p><p><strong>设定key值</strong></p><p>我们也可以明确的指定缓存的key值是什么。指定key的值有两种方式：</p><ol><li><p>通过<code>@CacheKey</code>注解指定，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheResult</span></span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"getUserDefault"</span>, commandKey = <span class="string">"getUserById"</span>, groupKey = <span class="string">"userGroup"</span>,</span><br><span class="line">        threadPoolKey = <span class="string">"getUserThread"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@CacheKey(<span class="string">"id"</span>)</span> @PathVariable Long id) </span>&#123;</span><br><span class="line">    log.info(<span class="string">"获取用户信息"</span>);</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://Server-Provider/user/&#123;id&#125;"</span>, User.class, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以指定参数对象内部属性为key值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheResult</span></span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"getUserDefault"</span>, commandKey = <span class="string">"getUserById"</span>, groupKey = <span class="string">"userGroup"</span>,</span><br><span class="line">        threadPoolKey = <span class="string">"getUserThread"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@CacheKey(<span class="string">"id"</span>)</span> User user) </span>&#123;</span><br><span class="line">    log.info(<span class="string">"获取用户信息"</span>);</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://Server-Provider/user/&#123;id&#125;"</span>, User.class, user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过方法来指定，方法的返回值必须是String类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCacheKey</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheResult</span>(cacheKeyMethod = <span class="string">"getCacheKey"</span>)</span><br><span class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"getUserDefault"</span>, commandKey = <span class="string">"getUserById"</span>, groupKey = <span class="string">"userGroup"</span>,</span><br><span class="line">        threadPoolKey = <span class="string">"getUserThread"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"获取用户信息"</span>);</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://Server-Provider/user/&#123;id&#125;"</span>, User.class, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>值得注意的是，方法2的优先级比方法1高。</p><p><strong>缓存清除</strong></p><p>在涉及到更新User信息的方法上，我们要及时的清除相应的缓存，否则将会导致缓存数据和实际数据不一致的问题。我们在UserService的<code>updateUser</code>方法上做缓存清除操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheRemove</span>(commandKey = <span class="string">"getUserById"</span>)</span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(@CacheKey(<span class="string">"id"</span>)</span> User user) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.restTemplate.put(<span class="string">"http://Server-Provider/user"</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>@CacheRemove</code>的<code>commandKey</code>属性和<code>getUser</code>里定义的一致。</p><h3 id="请求合并"><a href="#请求合并" class="headerlink" title="请求合并"></a>请求合并</h3><p>请求合并就是将多个单个请求合并成一个请求，去调用服务提供者，从而降低服务提供者负载的，一种应对高并发的解决办法。</p><p>Hystrix中提供了一个<code>@HystrixCollapser</code>注解，该注解可以将处于一个很短的时间段（默认10 毫秒）内对同一依赖服务的多个请求进行整合并以批量方式发起请求。为了演示<code>@HystrixCollapser</code>注解的使用方法，我们改造下Eureka-Client（服务提供者）的UserController接口，提供一个批量处理的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"users"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">get</span><span class="params">(String ids)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"批量获取用户信息"</span>);</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String id : ids.split(<span class="string">","</span>)) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> User(Long.valueOf(id), <span class="string">"user"</span> + id, <span class="string">"123456"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后在Ribbon-Consumer的UserService里添加两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HystrixCollapser</span>(batchMethod = <span class="string">"findUserBatch"</span>, collapserProperties = &#123;</span><br><span class="line">        <span class="meta">@HystrixProperty</span>(name = <span class="string">"timerDelayInMilliseconds"</span>, value = <span class="string">"100"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;User&gt; <span class="title">findUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"获取单个用户信息"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;User&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://Server-Provider/user/&#123;id&#125;"</span>, User.class, id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserBatch</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"批量获取用户信息,ids: "</span> + ids);</span><br><span class="line">    User[] users = restTemplate.getForObject(<span class="string">"http://Server-Provider/user/users?ids=&#123;1&#125;"</span>, User[].class, StringUtils.join(ids, <span class="string">","</span>));</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>@HystrixCollapser</code>注解的<code>batchMethod</code>属性指定了批量处理的方法为下面定义的<code>findUserBatch</code>方法，<code>timerDelayInMilliseconds</code>的值为100（毫秒），意思是在100毫秒这个时间范围内的所有对<code>findUser</code>的调用，都将被合并为一个批量处理操作，进行批量处理操作的方法就是<code>findUserBatch</code>。</p><p>我们在TestController中添加一个测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"testRequestMerge"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRequerstMerge</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">    Future&lt;User&gt; f1 = userService.findUser(<span class="number">1L</span>);</span><br><span class="line">    Future&lt;User&gt; f2 = userService.findUser(<span class="number">2L</span>);</span><br><span class="line">    Future&lt;User&gt; f3 = userService.findUser(<span class="number">3L</span>);</span><br><span class="line">    f1.get();</span><br><span class="line">    f2.get();</span><br><span class="line">    f3.get();</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    Future&lt;User&gt; f4 = userService.findUser(<span class="number">4L</span>);</span><br><span class="line">    f4.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面的测试方法中对<code>findUser</code>方法进行了4次的调用，最后一次调用（f4）之前先让线程等待200毫秒（大于<code>timerDelayInMilliseconds</code>中定义的100毫秒），所以我们的预期是前三次调用会被合并，而最后一次调用不会被合并进去。</p><p>启动Ribbon-Consumer，访问<a href="http://localhost:9000/testRequestMerge" target="_blank" rel="noopener">http://localhost:9000/testRequestMerge</a>,控制台输出如下：</p><p><img src="img/QQ截图20180712185806.png" alt="QQ截图20180712185806.png"></p><p>可以看到，控制台的输出符合我们的预期，f1、f2和f3被合并成了一个请求。</p><p>而且可以看到，控制台并没有打印出<code>findUser</code>方法中的<code>获取单个用户信息</code>的日志，实际上<code>findUser</code>方法并不会被调用，所以上面的代码可以简化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@HystrixCollapser</span>(batchMethod = <span class="string">"findUserBatch"</span>, collapserProperties = &#123;</span><br><span class="line">        <span class="meta">@HystrixProperty</span>(name = <span class="string">"timerDelayInMilliseconds"</span>, value = <span class="string">"100"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;User&gt; <span class="title">findUser</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"获取单个用户信息"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@HystrixCommand</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserBatch</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"批量获取用户信息,ids: "</span> + ids);</span><br><span class="line">    User[] users = restTemplate.getForObject(<span class="string">"http://Server-Provider/user/users?ids=&#123;1&#125;"</span>, User[].class, StringUtils.join(ids, <span class="string">","</span>));</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>虽然通过请求的合并可以减轻带宽和服务的压力，但合并请求的过程也会带来额外的开销。就拿上面的<code>testCache</code>来说，比如我们对单个<code>findUser</code>的方法调用耗时5ms，那么调用4次耗时可以粗略的估算为20ms。当我们使用Hystrix的请求合并功能后，前3次请求（f1、f2和f3）进行了合并，第4次请求（f4）没有进行合并，那么耗时可以粗略的估算为<code>3*5+100+5=120ms</code>（100为上面<code>timerDelayInMilliseconds</code>中指定的时间范围，在该时间段过后，才会调用第4次请求），结果明显比单独调用4次来得高。所以实际中是否该使用Hystrix的请求合并功能，需结合实际需求进行抉择。</p><h2 id="Hystrix属性"><a href="#Hystrix属性" class="headerlink" title="Hystrix属性"></a>Hystrix属性</h2><p>除了上面涉及到的Hystrix属性配置外，其还包含了大量的别的可用配置。配置可以分为四个级别，优先级从低到高分别为：全局默认配置、全局配置、实例默认值、实例配置。</p><h3 id="Commond"><a href="#Commond" class="headerlink" title="Commond"></a>Commond</h3><h4 id="execution"><a href="#execution" class="headerlink" title="execution"></a>execution</h4><p><code>execution.isolation.strategy</code>： 该属性用来设置执行的隔离策略，它有如下两个选项。</p><ol><li><p><code>THREAD</code>: 通过线程池隔离的策略。它在独立的线程上执行， 并且它的并发限制受线程池中线程数量的限制。</p></li><li><p><code>SEMAPHORE</code>: 通过信号量隔离的策略。它在调用线程上执行， 并且它的并发限制受信号量计数的限制。</p></li></ol><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>THREAD</td></tr><tr><td>全局配置</td><td>hystrix.command.default.execution.isolation.strategy</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”execution.isolation.strategy”, value=”THREAD”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.execution.isolation.strategy</td></tr></table><div class="note info"><p>实例配置中的HystrixCommandKey对应@HystrixCommand注解中commandKey 属性指定的值。</p></div><p><code>execution.isolation.thread.timeoutinMilliseconds</code>： 该属性用来配置HystrixCommand执行的超时时间，单位为毫秒。当HystrixCommand执行时间超过该配置值之后， Hystrix会将该执行命令标记为TIMEOUT并进入服务降级处理逻辑。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>1000亳秒</td></tr><tr><td>全局配置</td><td>hystrix.command.default.execution.isolation.thread. timeoutinMilliseconds</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”execution.isolation.thread.timeoutinMilliseconds”,value=”2000”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.execution.isolation.thread.timeoutinMilliseconds</td></tr></table><p><code>execution.timeout.enabled</code>: 该属性用来配置HystrixCommand的执行是否启用超时时间。默认为true, 如果设置为false, 那么<code>execution.isolation.thread.timeoutinMilliseconds</code>属性的配置将不再起作用。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>true</td></tr><tr><td>全局配置</td><td>hystrix.command.default.execution.timeout.enabled</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”execution.timeout.enabled”, value=”false”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.execution.timeout.enabled</td></tr></table><p><code>execution.isolation.thread.interruptOnTimeout</code>: 该属性用来配置当HystrixCommand执行超时的时候是否要将它中断。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>true</td></tr><tr><td>全局配置</td><td>hystrix.command.default.execution.isolation.thread.interruptOnTimeout</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”execution.isolation.thread.interruptOnTimeout”,value=”false”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.execution.isolation.thread.interruptOnTimeout</td></tr></table><p><code>execution.isolation.thread.interruptOnCancel</code>: 该属性用来配置当HystrixCommand执行被取消的时候是否要将它中断。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>true</td></tr><tr><td>全局配置</td><td>hystrix.command.default.execution.isolation.thread.interruptOnCancel</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”execution.isolation.thread.interruptOnCancel”,value= “false”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.execution.isolation.thread.interruptOnCancel</td></tr></table><p><code>execution.isolation.semaphore.maxConcurrentRequests</code>: 当HystrixCommand的隔离策略使用信号量的时候，该属性用来配置信号量的大小（并发请求数）。当最大并发请求数达到该设置值时，后续的请求将会被拒绝。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>10</td></tr><tr><td>全局配置</td><td>hystrix.command.default.execution.isolation.semaphore.maxConcurrentRequests</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”execution.isolation.semaphore.maxConcurrentRequests”, value=”2”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.execution.isolation.semaphore.maxConcurrentRequests</td></tr></table><h4 id="fallback"><a href="#fallback" class="headerlink" title="fallback"></a>fallback</h4><p><code>fallback.enabled</code>: 该属性用来设置服务降级策略是否启用，如果设置为false,那么当请求失败或者拒绝发生时，将不会调用降级服务。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>true</td></tr><tr><td>全局配置</td><td>hystrix.command.default.fallback.enabled</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name= “fallback.enabled”, value=”false”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.fallback.enabled</td></tr></table><h4 id="circuitBreaker断路器"><a href="#circuitBreaker断路器" class="headerlink" title="circuitBreaker断路器"></a>circuitBreaker断路器</h4><p><code>circuitBreaker.enabled</code>: 该属性用来确定当服务请求命令失败时， 是否使用断路器来跟踪其健康指标和熔断请求。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>true</td></tr><tr><td>全局配置</td><td>hystrix.command.default.circuitBreaker.enabled</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”circutBreaker.enabled”,value=”false”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.circuitBreaker.enabled</td></tr></table><p><code>circuitBreaker.requestVolumeThreshold</code>: 该属性用来设置在滚动时间窗中，断路器熔断的最小请求数。例如，默认该值为20 的时候，如果滚动时间窗（默认10秒）内仅收到了19个请求， 即使这19个请求都失败了，断路器也不会打开。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>20</td></tr><tr><td>全局配置</td><td>hystrix.command.default.circuitBreaker.requestVolumeThreshold</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”circuitBreaker.requestVolumeThreshold”, value=”30”)</td></tr><tr><td>实例配置</td><td>hystrix.comrnand.HystrixComrnandKey.circuitBreaker.requestVolumeThreshold</td></tr></table><p><code>circuitBreaker.sleepWindowinMilliseconds</code>: 该属性用来设置当断路器打开之后的休眠时间窗。休眠时间窗结束之后，会将断路器置为“半开” 状态， 尝试熔断的请求命令，如果依然失败就将断路器继续设置为“打开” 状态，如果成功就设置为“关闭” 状态。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>5000</td></tr><tr><td>全局配置</td><td>hystrix.command.default.circuitBreaker.sleepWindowinMilliseconds</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”circuitBreaker.sleepWindowinMilliseconds”,value=”3000”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.circuitBreaker.sleepWindowinMilliseconds</td></tr></table><p><code>circuitBreaker.errorThresholdPercentage</code>: 该属性用来设置断路器打开的错误百分比条件。例如，默认值为5000 的情况下，表示在滚动时间窗中，在请求数量超过<code>circuitBreaker.requestVolumeThreshold</code>阅值的前提下，如果错误请求数的百分比超过50, 就把断路器设置为“打开” 状态， 否则就设置为“关闭” 状态。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>50</td></tr><tr><td>全局配置</td><td>hystrix.command.default.circuitBreaker.errorThresholdPercentage</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”circuitBreaker.errorThresholdPercentage”, value=”40”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.circuitBreaker.errorThresholdPercentage</td></tr></table><p><code>circuitBreaker.forceOpen</code>: 如果将该属性设置为true, 断路器将强制进入“打开” 状态，它会拒绝所有请求。该属性优先于<code>circuitBreaker.forceClosed</code>属性。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>false</td></tr><tr><td>全局配置</td><td>hystrix.command.default.circuitBreaker.forceOpen</td></tr><tr><td>实例默认值</td><td>@HystrixProperty (name=”circuitBreaker.forceOpen”, value=”true”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.circuitBreaker.forceOpen</td></tr></table><p><code>circuitBreaker.forceClosed</code>: 如果将该属性设置为true, 断路器将强制进入“关闭” 状态， 它会接收所有请求。如果<code>circuitBreaker.forceOpen</code>属性为true, 该属性不会生效。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>false</td></tr><tr><td>全局配置</td><td>hystrix.command.default.circuitBreaker.forceClosed</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”circui七Breaker.forceClosed”, value=”true”)</td></tr><tr><td>实例配置</td><td>hystrix.comrnand.HystrixComrnandKey.circuitBreaker.forceClosed</td></tr></table><h4 id="metrics配置"><a href="#metrics配置" class="headerlink" title="metrics配置"></a>metrics配置</h4><p>该配置与HystrixCommand执行中捕获的指标信息有关。</p><p><code>metrics.rollingStats.timeinMilliseconds</code>: 该属性用来设置滚动时间窗的长度， 单位为毫秒。该时间用于断路器判断健康度时需要收集信息的持续时间。断路器在收集指标信息的时候会根据设置的时间窗长度拆分成多个“桶” 来累计各度量值，每个“桶” 记录了一段时间内的采集指标。例如，当采用默认值10000毫秒时， 断路器默认将其拆分成10个桶（桶的数量也可通过<code>metrics.rollingStats.numBuckets</code>参数设置），每个桶记录1000毫秒内的指标信息。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>10000</td></tr><tr><td>全局配置</td><td>hystrix.command.default.metrics.rollingStats.timeinMilliseconds</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”metrics.rollingStats.timeinMilliseconds”,value=”20000”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.metrics.rollingStats.timeinMilliseconds</td></tr></table><p><code>metrics.rollingstats.numBuckets</code>: 该属性用来设置滚动时间窗统计指标信息时划分“桶” 的数量。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>10</td></tr><tr><td>全局配置</td><td>hystrix.command.default.metrics.rollingStats.numBuckets</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”metrics.rollingStats.numBuckets”,value=”20”)</td></tr><tr><td>实例配置</td><td>hystrix.comrnand.HystrixComrnandKey.metrics.rollingStats.numBuckets</td></tr></table><p><code>metrics.rollingPercentile.enabled</code>: 该属性用来设置对命令执行的延迟是否使用百分位数来跟踪和计算。如果设置为false，那么所有的概要统计都将返回-1。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>true</td></tr><tr><td>全局配置</td><td>hystrix.command.default.metrics.rollingPercentile.enabled</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”metrics.rollingPercentile.enabled”, value=”false”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.metrics.rollingPercentile.enabled</td></tr></table><p><code>metrics.rollingPercentile.timeinMilliseconds</code>: 该属性用来设置百分位统计的滚动窗口的持续时间，单位为毫秒。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>60000</td></tr><tr><td>全局配置</td><td>hystrix.command.default.metrics.rollingPercentile.timeinMilliseconds</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”metrics.rollingPercentile.timeinMilliseconds”, value=”50000”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.metrics.rollingPercentile.timeinMilliseconds</td></tr></table><p><code>metrics.rollingPercentile.numBuckets</code>: 该属性用来设置百分位统计滚动窗口中使用“桶”的数量。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>6</td></tr><tr><td>全局配置</td><td>hystrix.command.default.metrics.rollingPercentile.numBuckets</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”metrics.rollingPercentilee.numBuckets”,value=”5”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.metrics.rollingPercentile.numBuckets</td></tr></table><p><code>metrics.rollingPercentile.bucketSize</code>: 该属性用来设置在执行过程中每个“桶” 中保留的最大执行次数。如果在滚动时间窗内发生超过该设定值的执行次数，就从最初的位置开始重写。例如，将该值设置为100, 滚动窗口为10秒，若在10秒内一个“桶”中发生了500次执行，那么该“桶”中只保留最后的100次执行的统计。另外，增加该值的大小将会增加内存量的消耗，并增加排序百分位数所需的计算时间。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>100</td></tr><tr><td>全局配置</td><td>hystrix.command.default.metrics.rollingPercentile.bucketSize</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”metrics.rollingPercentile.bucketSize”,value= “120”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.metrics.rollingPercentile.bucketSize</td></tr></table><p><code>metrics.healthSnapshot.intervalinMilliseconds</code>: 该属性用来设置采集影响断路器状态的健康快照（请求的成功、错误百分比）的间隔等待时间。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>500</td></tr><tr><td>全局配置</td><td>hystrix.comrnand.default.metrics.healthSnapshot.intervalinMilliseconds</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”metrics.healthSnapshot.intervalinMilliseconds”,value=”600”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.metrics.healthSnapshot.intervalinMilliseconds</td></tr></table><h4 id="requestContext"><a href="#requestContext" class="headerlink" title="requestContext"></a>requestContext</h4><p><code>requestCache.enabled</code>: 此属性用来配置是否开启请求缓存。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>true</td></tr><tr><td>全局配置</td><td>hystrix.command.default.requestCache.enabled</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”requestCache.enabled”, value=”false”)</td></tr><tr><td>实例配置</td><td>hystrix.command.HystrixCommandKey.requestCache.enabled</td></tr></table><h3 id="collapser"><a href="#collapser" class="headerlink" title="collapser"></a>collapser</h3><p><code>maxRequestsinBatch</code>: 该参数用来设置一次请求合并批处理中允许的最大请求数。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>Integer.MAX_VALUE</td></tr><tr><td>全局配置</td><td>hystrix.collapser.default.maxRequestsinBatch</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”maxRequestsinBatch”,value=”false”)</td></tr><tr><td>实例配置</td><td>hystrix.collapser.HystrixCollapserKey.maxRequestsinBatch</td></tr></table><p><code>timerDelayinMilliseconds</code>: 该参数用来设置批处理过程中每个命令延迟的时间，单位为毫秒。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>10</td></tr><tr><td>全局配置</td><td>hystrix.collapser.default.timerDelayinMilliseconds</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”timerDelayinMilliseconds”,value=”20”)</td></tr><tr><td>实例配置</td><td>hystrix.collapser.HystrixCollapserKey.timerDelayinMilliseconds</td></tr></table><p><code>request Cache.enabled</code>: 该参数用来设置批处理过程中是否开启请求缓存。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>true</td></tr><tr><td>全局配置</td><td>hystrix.collapser.default.requestCache.enabled</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”requestCache.enabled”, value=”false”)</td></tr><tr><td>实例配置</td><td>hystrix.collapser.HystrixCollapserKey.requestCache.enabled</td></tr></table><h3 id="threadPool"><a href="#threadPool" class="headerlink" title="threadPool"></a>threadPool</h3><p><code>coreSize</code>: 该参数用来设置执行命令线程池的核心线程数，该值也就是命令执行的最大并发量。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>10</td></tr><tr><td>全局配置</td><td>hystrix.threadpool.default.coreSize</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”coreSize”, value=”false”)</td></tr><tr><td>实例配置</td><td>hystrix.threadpool.HystrixThreadPoolKey.coreSize</td></tr></table><p><code>maxQueueSize</code>: 该参数用来设置线程池的最大队列大小。当设置为-1时，线程池将使用<code>SynchronousQueue</code>实现的队列，否则将使用<code>LinkedBlockingQueue</code>实现的队列。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>-1</td></tr><tr><td>全局配置</td><td>hystrix.threadpool.default.maxQueueSize</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”maxQueueSize”,value=”lO”)</td></tr><tr><td>实例配置</td><td>hystrix.threadpool.HystrixThreadPoolKey.maxQueueSize</td></tr></table><p><code>queueSizeRejectionThreshold</code>: 该参数用来为队列设置拒绝阈值。通过该参数，即使队列没有达到最大值也能拒绝请求。该参数主要是对<code>LinkedBlockingQueue</code>队列的补充， 因为<code>LinkedBlockingQueue</code>队列不能动态修改它的对象大小，而通过该属性就可以调整拒绝请求的队列大小了。</p><table><tr><th>属性级别</th><th>默认值、配置方式、配置属性</th></tr><tr><td>全局默认配置</td><td>5</td></tr><tr><td>全局配置</td><td>hystrix.threadpool.default.queueSizeRejectionThreshold</td></tr><tr><td>实例默认值</td><td>@HystrixProperty(name=”queueSizeRejectionThreshold”, value=”lO”</td></tr><tr><td>实例配置</td><td>hystrix.threadpool.HystrixThreadPoolKey.queueSizeRejectionThreshold</td></tr></table><p>不得不说，配置是真的多……</p><p><img src="img/QQ图片20180713111516.gif" alt="QQ图片20180713111516.gif"></p><p>源码链接：<a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/30.Spring-Cloud-Hystrix-Circuit-Breaker" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/30.Spring-Cloud-Hystrix-Circuit-Breaker</a></p><blockquote><p>参考文章 <a href="https://book.douban.com/subject/27025912/" target="_blank" rel="noopener">《Spring Cloud微服务实战》</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在微服务的架构中，服务间通常会形成相互依赖的关系，比如现在有三个微服务节点：A，B和C，B为A的消费者，C为B的消费者。假如由于网络波动或者A服务自身故障，导致B调用A服务的线程被挂起进入长时间的等待。在高并发的情况下可能导致B的资源被耗竭随之崩溃，从而导致C服务也不可用。这种连环式的雪崩效应在微服务中较为常见，为了解决这个问题，服务熔断技术应运而出。熔断一词来自电路学，指的是电路在出现短路状况时，“断路器”能够及时地切断故障电路，避免电路过载发热引发火灾。&lt;/p&gt;&lt;p&gt;类似的，微服务架构中的断路器能够及时地发现故障服务，并向服务调用方返回错误响应，而不是长时间的等待。Spring Cloud Hystrix在Hystrix（又是一款由Netflix开发的开源软件，Github地址&lt;a href=&quot;https://github.com/Netflix/Hystrix&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Netflix/Hystrix&lt;/a&gt;）的基础上进行了封装，提供了服务熔断，服务降级，线程隔离等功能，通过这些功能可以提供服务的容错率。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
      <category term="Hystrix" scheme="http://mrbird.cc/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Ribbon客户端负载均衡</title>
    <link href="http://mrbird.cc/Spring-Cloud-Ribbon-LoadBalance.html"/>
    <id>http://mrbird.cc/Spring-Cloud-Ribbon-LoadBalance.html</id>
    <published>2018-06-03T01:51:49.000Z</published>
    <updated>2018-08-21T08:55:40.497Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>为了提高服务的可用性，我们一般会将相同的服务部署多个实例，负载均衡的作用就是使获取服务的请求被均衡的分配到各个实例中。负载均衡一般分为<strong>服务端负载均衡</strong>和<strong>客户端负载均衡</strong>，服务端的负载均衡通过硬件（如F5）或者软件（如Nginx）来实现，而Ribbon实现的是客户端负载均衡。服务端负载均衡是在硬件设备或者软件模块中维护一份可用服务清单，然后客户端发送服务请求到这些负载均衡的设备上，这些设备根据一些算法均衡的将请求转发出去。而客户端负载均衡则是客户端自己从服务注册中心（如之前提到的Eureka Server）中获取服务清单缓存到本地，然后通过Ribbon内部算法均衡的去访问这些服务。<a id="more"></a></p><h2 id="Ribbon简介"><a href="#Ribbon简介" class="headerlink" title="Ribbon简介"></a>Ribbon简介</h2><p>Ribbon是由<a href="https://github.com/Netflix" target="_blank" rel="noopener">Netflix</a>开发的一款基于HTTP和TCP的负载均衡的开源软件。我们可以直接给Ribbon配置好服务列表清单，也可以配合Eureka主动的去获取服务清单，需要使用到这些服务的时候Ribbon通过轮询或者随机等均衡算法去获取服务。</p><p>在<a href="/Spring-Cloud-Eureka.html">Spring Cloud Eureka服务治理</a>一节中，我们已经在Server-Consumer中配置了Ribbon，并通过加了<code>@LoadBalanced</code>注解的RestTemplate对象去均衡的消费服务，所以这节主要记录的是RestTemplate的详细使用方法和一些额外的Ribbon配置。</p><h2 id="RestTemplate详解"><a href="#RestTemplate详解" class="headerlink" title="RestTemplate详解"></a>RestTemplate详解</h2><p>从名称上来看就可以知道它是一个用来发送REST请求的摸板，所以包含了GET,POST,PUT,DELETE等HTTP Method对应的方法。</p><h3 id="发送Get请求"><a href="#发送Get请求" class="headerlink" title="发送Get请求"></a>发送Get请求</h3><p>RestTemplate中与GET请求对应的方法有<code>getForEntity</code>和<code>getForObject</code>。</p><p><strong>getForEntity</strong></p><p><code>getForEntity</code>方法返回<code>ResponseEntity</code>对象，该对象包含了返回报文头，报文体和状态码等信息。<code>getForEntity</code>有三个重载方法：</p><ol><li><p><code>getForEntity(String url, Class&lt;T&gt; responseType, Object... uriVariables)</code>；</p></li><li><p><code>getForEntity(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</code>；</p></li><li><p><code>getForEntity(URI url, Class&lt;T&gt; responseType)</code>；</p></li></ol><p>第一个参数为Url，第二个参数为返回值的类型，第三个参数为请求的参数（可以是数组，也可以是Map）。</p><p>举个<code>getForEntity(String url, Class&lt;T&gt; responseType, Object... uriVariables)</code>的使用例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"user/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForEntity(<span class="string">"http://Server-Provider/user/&#123;name&#125;"</span>, User.class, id).getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>{1}</code>为参数的占位符，匹配参数数组的第一个元素。因为第二个参数指定了类型为User，所以调用<code>getBody</code>方法返回类型也为User。</p><p>方法参数除了可以放在数组里外，也可以放在Map里，举个<code>getForEntity(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</code>使用例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"user/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">"id"</span>, id);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForEntity(<span class="string">"http://Server-Provider/user/&#123;id&#125;"</span>, User.class, params).getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>只有两个参数的重载方法<code>getForEntity(URI url, Class&lt;T&gt; responseType)</code>第一个参数接收<code>java.net.URI</code>类型，可以通过<code>org.springframework.web.util.UriComponentsBuilder</code>来创建，举个该方法的使用例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"user/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">"id"</span>, id);</span><br><span class="line">    URI uri = UriComponentsBuilder.fromUriString(<span class="string">"http://Server-Provider/user/&#123;id&#125;"</span>)</span><br><span class="line">            .build().expand(params).encode().toUri();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForEntity(uri, User.class).getBody();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中<code>expand</code>方法也可以接收数组和Map两种类型的参数。</p><p><strong>getForObject</strong></p><p><code>getForObject</code>方法和<code>getForEntity</code>方法类似，<code>getForObject</code>方法相当于<code>getForEntity</code>方法调用了<code>getBody</code>方法，直接返回结果对象，为不是<code>ResponseEntity</code>对象。</p><p><code>getForObject</code>方法和<code>getForEntity</code>方法一样，也有三个重载方法，参数类型和<code>getForEntity</code>方法一致，所以不再列出。</p><h3 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h3><p>使用RestTemplate发送POST请求主要有<code>postForEntity</code>，<code>postForObject</code>和<code>postForLocation</code>（这个目前较少使用，所以不做介绍）三个方法。</p><p><code>postForEntity</code>和<code>postForObject</code>也分别有三个重载方法，方法参数和使用方式和上面介绍的<code>getForEntity</code>和<code>getForObject</code>一样，所以不再详细介绍。简单举个<code>getForObject</code>的使用例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@GetMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://Server-Provider/user"</span>, List.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="发送PUT请求"><a href="#发送PUT请求" class="headerlink" title="发送PUT请求"></a>发送PUT请求</h3><p>使用RestTemplate发送PUT请求，使用的是它的<code>put</code>方法，<code>put</code>方法返回值是<code>void</code>类型，该方法也有三个重载方法：</p><ol><li><p><code>put(String url, Object request, Object... uriVariables)</code>；</p></li><li><p><code>put(String url, Object request, Map&lt;String, ?&gt; uriVariables)</code>；</p></li><li><p><code>put(URI url, Object request)</code>。</p></li></ol><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"user/update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"mrbird"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    <span class="keyword">this</span>.restTemplate.put(<span class="string">"http://Server-Provider/user"</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在RESTful风格的接口中，判断成功失败不再是通过返回值的某个标识来判断的，而是通过返回报文的状态码是否为200来判断。当这个方法成功执行并返回时，返回报文状态为200，即可判断方法执行成功。</p><h3 id="发送DELETE请求"><a href="#发送DELETE请求" class="headerlink" title="发送DELETE请求"></a>发送DELETE请求</h3><p>使用RestTemplate发送DELETE请求，使用的是它的<code>delete</code>方法，<code>delete</code>方法返回值是<code>void</code>类型，该方法也有三个重载方法：</p><ol><li><p><code>delete(String url, Object... uriVariables)</code>；</p></li><li><p><code>delete(String url, Map&lt;String, ?&gt; uriVariables)</code>;</p></li><li><p><code>delete(URI url)</code>。</p></li></ol><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"user/delete/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.restTemplate.delete(<span class="string">"http://Server-Provider/user/&#123;1&#125;"</span>, id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="RestTemplates实战"><a href="#RestTemplates实战" class="headerlink" title="RestTemplates实战"></a>RestTemplates实战</h2><p>我们在<a href="/Spring-Cloud-Eureka.html">Spring Cloud Eureka服务治理</a>中的Eureka客户端（Server-Provider）中编写一套RESTful风格的测试接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"获取用户id为 "</span> + id + <span class="string">"的信息"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(id, <span class="string">"mrbird"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"mrbird"</span>, <span class="string">"123456"</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="number">2L</span>, <span class="string">"scott"</span>, <span class="string">"123456"</span>));</span><br><span class="line">        log.info(<span class="string">"获取用户信息 "</span> + list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"新增用户成功 "</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"更新用户成功 "</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"删除用户成功 "</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>User对象代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1339434510787399891L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", username='"</span> + username + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get,set略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>需要注意的是，User对象必须有默认的构造方法，否则在JSON与实体对象转换的时候会抛出如下异常：</p><div class="note danger"><p>JSON parse error: Can not construct instance of model.Class: no suitable constructor found</p></div><p></p><p>然后在Server-Consumer中使用RestTemplates分别去获取这些服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user/&#123;id:\\d+&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">"id"</span>, id);</span><br><span class="line">        URI uri = UriComponentsBuilder.fromUriString(<span class="string">"http://Server-Provider/user/&#123;id&#125;"</span>)</span><br><span class="line">                .build().expand(params).encode().toUri();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForEntity(uri, User.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://Server-Provider/user"</span>, List.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user/add"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"mrbird"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        HttpStatus status = <span class="keyword">this</span>.restTemplate.postForEntity(<span class="string">"http://Server-Provider/user"</span>, user, <span class="keyword">null</span>).getStatusCode();</span><br><span class="line">        <span class="keyword">if</span> (status.is2xxSuccessful()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"新增用户成功"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"新增用户失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user/update"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"mrbird"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        <span class="keyword">this</span>.restTemplate.put(<span class="string">"http://Server-Provider/user"</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"user/delete/&#123;id:\\d+&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.restTemplate.delete(<span class="string">"http://Server-Provider/user/&#123;1&#125;"</span>, id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们分别启动两个Eureka Server用于集群，两个Eureka Client（Server-Provider）实例，然后启动Server-Consumer。</p><p>使用Restlet Client访问<a href="http://localhost:9000/user/1" target="_blank" rel="noopener">http://localhost:9000/user/1</a>（<span>后面每个方法我们都访问两次，用于观察负载均衡</span>），返回结果如下：</p><p><img src="img/QQ截图20180705173808.png" alt="QQ截图20180705173808.png"></p><p>剩下的方法测试结果这里不贴出来了，当我们分别访问下面的连接后：</p><ul><li><p><a href="http://localhost:9000/user/" target="_blank" rel="noopener">http://localhost:9000/user/</a></p></li><li><p><a href="http://localhost:9000/user/add" target="_blank" rel="noopener">http://localhost:9000/user/add</a></p></li><li><p><a href="http://localhost:9000/user/update" target="_blank" rel="noopener">http://localhost:9000/user/update</a></p></li><li><p><a href="http://localhost:9000/user/delete/1" target="_blank" rel="noopener">http://localhost:9000/user/delete/1</a></p></li></ul><p>查看Eureka客户端8082和8083的后台日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">2018-06-03 18:17:26.231  INFO 11188 --- [           main] .s.c.n.e.s.EurekaAutoServiceRegistration : Updating port to 8083</span><br><span class="line">2018-06-03 18:17:26.236  INFO 11188 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 52.252 seconds (JVM running for 54.321)</span><br><span class="line">2018-06-03 18:21:29.097  INFO 11188 --- [io-8083-exec-10] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet &apos;dispatcherServlet&apos;</span><br><span class="line">2018-06-03 18:21:29.098  INFO 11188 --- [io-8083-exec-10] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &apos;dispatcherServlet&apos;: initialization started</span><br><span class="line">2018-06-03 18:21:29.177  INFO 11188 --- [io-8083-exec-10] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &apos;dispatcherServlet&apos;: initialization completed in 79 ms</span><br><span class="line">2018-06-03 18:21:29.312  INFO 11188 --- [io-8083-exec-10] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-03 18:21:50.798  INFO 11188 --- [nio-8083-exec-9] c.e.demo.controller.UserController       : 获取用户信息 [User&#123;id=1, username=&apos;mrbird&apos;, password=&apos;123456&apos;&#125;, User&#123;id=2, username=&apos;scott&apos;, password=&apos;123456&apos;&#125;]</span><br><span class="line">2018-06-03 18:22:25.351  INFO 11188 --- [trap-executor-0] c.n.d.s.r.aws.ConfigClusterResolver      : Resolving eureka endpoints via configuration</span><br><span class="line">2018-06-03 18:22:44.718  INFO 11188 --- [nio-8083-exec-8] c.e.demo.controller.UserController       : 新增用户成功 User&#123;id=1, username=&apos;mrbird&apos;, password=&apos;123456&apos;&#125;</span><br><span class="line">2018-06-03 18:24:34.313  INFO 11188 --- [nio-8083-exec-6] c.e.demo.controller.UserController       : 删除用户成功 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2018-06-03 18:17:21.296  INFO 16188 --- [           main] .s.c.n.e.s.EurekaAutoServiceRegistration : Updating port to 8082</span><br><span class="line">2018-06-03 18:17:21.303  INFO 16188 --- [           main] com.example.demo.DemoApplication         : Started DemoApplication in 57.152 seconds (JVM running for 58.239)</span><br><span class="line">2018-06-03 18:21:27.517  INFO 16188 --- [io-8082-exec-10] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet &apos;dispatcherServlet&apos;</span><br><span class="line">2018-06-03 18:21:27.517  INFO 16188 --- [io-8082-exec-10] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &apos;dispatcherServlet&apos;: initialization started</span><br><span class="line">2018-06-03 18:21:27.567  INFO 16188 --- [io-8082-exec-10] o.s.web.servlet.DispatcherServlet        : FrameworkServlet &apos;dispatcherServlet&apos;: initialization completed in 50 ms</span><br><span class="line">2018-06-03 18:21:27.732  INFO 16188 --- [io-8082-exec-10] c.e.demo.controller.UserController       : 获取用户id为 1的信息</span><br><span class="line">2018-06-03 18:21:49.639  INFO 16188 --- [nio-8082-exec-9] c.e.demo.controller.UserController       : 获取用户信息 [User&#123;id=1, username=&apos;mrbird&apos;, password=&apos;123456&apos;&#125;, User&#123;id=2, username=&apos;scott&apos;, password=&apos;123456&apos;&#125;]</span><br><span class="line">2018-06-03 18:22:12.313  INFO 16188 --- [trap-executor-0] c.n.d.s.r.aws.ConfigClusterResolver      : Resolving eureka endpoints via configuration</span><br><span class="line">2018-06-03 18:22:46.111  INFO 16188 --- [nio-8082-exec-8] c.e.demo.controller.UserController       : 新增用户成功 User&#123;id=1, username=&apos;mrbird&apos;, password=&apos;123456&apos;&#125;</span><br><span class="line">2018-06-03 18:23:55.732  INFO 16188 --- [nio-8082-exec-6] c.e.demo.controller.UserController       : 更新用户成功 User&#123;id=1, username=&apos;mrbird&apos;, password=&apos;123456&apos;&#125;</span><br><span class="line">2018-06-03 18:23:58.297  INFO 16188 --- [nio-8082-exec-5] c.e.demo.controller.UserController       : 更新用户成功 User&#123;id=1, username=&apos;mrbird&apos;, password=&apos;123456&apos;&#125;</span><br><span class="line">2018-06-03 18:24:37.266  INFO 16188 --- [nio-8082-exec-3] c.e.demo.controller.UserController       : 删除用户成功 1</span><br><span class="line">2018-06-03 18:27:12.314  INFO 16188 --- [trap-executor-0] c.n.d.s.r.aws.ConfigClusterResolver      : Resolving eureka endpoints via configuration</span><br></pre></td></tr></table></figure><p></p><p>发现方法都成功调用，并且是均衡的。</p><h2 id="Spring-Cloud-Ribbon配置"><a href="#Spring-Cloud-Ribbon配置" class="headerlink" title="Spring Cloud Ribbon配置"></a>Spring Cloud Ribbon配置</h2><p>Spring Cloud Ribbon的配置分为全局和指定服务名称。比如我要指定全局的服务请求连接超时时间为200毫秒：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">  ConnectTimeout:</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><p></p><p>如果只是设置获取Server Provider服务的请求连接超时时间，我们只需要在配置最前面加上服务名称就行了，如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Server-Provider:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    ConnectTimeout:</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><p></p><p>设置获取Server-Provider服务的负载均衡算法从轮询改为随机：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Server-Provider:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure><p></p><p>设置处理Server-Provider服务的超时时间：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Server-Provider:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    ReadTimeout:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><p></p><p>开启重试机制，即获取服务失败是否从另外一个节点重试，默认值为false：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    loadbalancer:</span></span><br><span class="line"><span class="attr">      retry:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><p>对Server-Provider的所有请求在失败的时候都进行重试：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Server-Provider:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    OkToRetryOnAllOperations:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><p>切换Server-Provider实例的重试次数：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Server-Provider:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    MaxAutoRetriesNextServer:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p>对Server-Provider当前实例的重试次数：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Server-Provider:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    MaxAutoRetries:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p></p><p>根据如上配置当访问Server-Provider服务实例（比如是8082）遇到故障的时候，Ribbon会再尝试访问一次当前实例（次数由MaxAutoRetries配置），如果不行，就换到8083实例进行访问（更换次数由 MaxAutoRetriesNextServer决定），如果还是不行，那就GG思密达，返回失败。</p><p>如果不和Eureka搭配使用的话，我们就需要手动指定服务清单给Ribbon：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Server-Provider:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    listOfServers:</span> <span class="attr">localhost:8082,localhost:8083</span></span><br></pre></td></tr></table></figure><p></p><p>上面配置了名称为Server-Provider的服务，有两个节点可供使用（8082和8083）。</p><p>源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/29.Spring-Cloud-Ribbon-LoadBalance" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/29.Spring-Cloud-Ribbon-LoadBalance</a></p><blockquote><p>参考文章 <a href="https://book.douban.com/subject/27025912/" target="_blank" rel="noopener">《Spring Cloud微服务实战》</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;为了提高服务的可用性，我们一般会将相同的服务部署多个实例，负载均衡的作用就是使获取服务的请求被均衡的分配到各个实例中。负载均衡一般分为&lt;strong&gt;服务端负载均衡&lt;/strong&gt;和&lt;strong&gt;客户端负载均衡&lt;/strong&gt;，服务端的负载均衡通过硬件（如F5）或者软件（如Nginx）来实现，而Ribbon实现的是客户端负载均衡。服务端负载均衡是在硬件设备或者软件模块中维护一份可用服务清单，然后客户端发送服务请求到这些负载均衡的设备上，这些设备根据一些算法均衡的将请求转发出去。而客户端负载均衡则是客户端自己从服务注册中心（如之前提到的Eureka Server）中获取服务清单缓存到本地，然后通过Ribbon内部算法均衡的去访问这些服务。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
      <category term="Ribbon" scheme="http://mrbird.cc/tags/Ribbon/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Eureka服务治理</title>
    <link href="http://mrbird.cc/Spring-Cloud-Eureka.html"/>
    <id>http://mrbird.cc/Spring-Cloud-Eureka.html</id>
    <published>2018-06-01T08:59:43.000Z</published>
    <updated>2018-11-16T03:40:24.112Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>考虑当前有两个微服务实例A和B，A服务需要调用B服务的某个REST接口。假如某一天B服务迁移到了另外一台服务器，IP和端口也发生了变化，这时候我们不得不去修改A服务中调用B服务REST接口的静态配置。随着公司业务的发展，微服务的数量也越来越多，服务间的关系可能变得非常复杂，传统的微服务维护变得愈加困难，也很容易出错。所谓服务治理就是用来实现各个微服务实例的自动化注册与发现，在这种模式下，服务间的调用不再通过指定具体的实例地址来实现，而是通过向服务注册中心获取服务名并发起请求调用实现。<a id="more"></a></p><p>Eureka是由<a href="https://github.com/Netflix" target="_blank" rel="noopener">Netflix</a>开发的一款服务治理开源框架，Spring-cloud对其进行了集成。Eureka既包含了服务端也包含了客户端，Eureka服务端是一个<strong>服务注册中心(Eureka Server)</strong>，提供服务的注册和发现，即当前有哪些服务注册进来可供使用；Eureka客户端为<strong>服务提供者(Server Provider)</strong>，它将自己提供的服务注册到Eureka服务端，并周期性地发送心跳来更新它的服务租约，同时也能从服务端查询当前注册的服务信息并把它们缓存到本地并周期性地刷新服务状态。这样<strong>服务消费者(Server Consumer)</strong>便可以从服务注册中心获取服务名称，并消费服务。</p><p>三者关系如下图所示:</p><p><img src="img/687474703a2f2f6e6f74652e796f7564616f2e636f6d2f7977732f6170692f706572736f6e616c2f66696c652f33363341343841303839344634334330394143433739433042443237383335443f6d6574686f643d646f776e6c6f61642673686172654b65793d61.png" alt="687474703a2f2f6e6f74652e796f7564616f2e636f6d2f7977732f6170692f706572736f6e616c2f66696c652f33363341343841303839344634334330394143433739433042443237383335443f6d6574686f643d646f776e6c6f61642673686172654b65793d61.png"></p><h2 id="搭建Eureka-Server服务注册中心"><a href="#搭建Eureka-Server服务注册中心" class="headerlink" title="搭建Eureka-Server服务注册中心"></a>搭建Eureka-Server服务注册中心</h2><p>说了那么多，我们先来搭建一个Eureka服务端来充当服务注册中心。</p><p>新建一个Spring Boot项目，<code>artifactId</code>填Eureka-Service，然后引入<code>Spring Cloud Edgware.SR3</code>和<code>spring-cloud-starter-eureka-server</code>:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在启动类上添加<code>@EnableEurekaServer</code>注解，表明这是一个Eureka服务端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接着在application.yml中添加一些配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure><p></p><p>上面配置了服务的端口为8080，剩下几个为Eureka配置：</p><ul><li><p><code>eureka.instance.hostname</code>指定了Eureka服务端的IP；</p></li><li><p><code>eureka.client.register-with-eureka</code>表示是否将服务注册到Eureka服务端，由于自身就是Eureka服务端，所以设置为false；</p></li><li><p><code>eureka.client.fetch-registry</code>表示是否从Eureka服务端获取服务信息，因为这里只搭建了一个Eureka服务端，并不需要从别的Eureka服务端同步服务信息，所以这里设置为false；</p></li><li><p><code>eureka.client.serviceUrl.defaultZone</code>指定Eureka服务端的地址，默认值为<code>http://localhost:8761/eureka</code>。</p></li></ul><p>配置完毕后启动服务，访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>，可看到：</p><p><img src="img/QQ截图20180703185733.png" alt="QQ截图20180703185733.png"></p><p>由于还没有Eureka客户端将服务注册进来，所以Instances currently registered with Eureka列表是空的。</p><p>下面我们接着搭建一个Eureka客户端来提供服务。</p><h2 id="搭建Eureka-Client服务提供者"><a href="#搭建Eureka-Client服务提供者" class="headerlink" title="搭建Eureka-Client服务提供者"></a>搭建Eureka-Client服务提供者</h2><p>新建一个Spring Boot项目，<code>artifactId</code>填Eureka-Client，然后引入以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>接着编写一个TestController，对外提供一些REST服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/info"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">        ServiceInstance instance = client.getLocalServiceInstance();</span><br><span class="line">        String info = <span class="string">"host："</span> + instance.getHost() + <span class="string">"，service_id："</span> + instance.getServiceId();</span><br><span class="line">        log.info(info);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码注入了<code>org.springframework.cloud.client.discovery.DiscoveryClient</code>对象，可以获取当前服务的一些信息。</p><p>编写启动类，在启动类上加<code>@EnableDiscoveryClient</code>注解，表明这是一个Eureka客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后配置application.yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8082</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Server-Provider</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8080/eureka/</span></span><br></pre></td></tr></table></figure><p></p><p>稍微说明下这些配置的意思：</p><ul><li><p><code>server.port</code>指定了服务的端口为8082；</p></li><li><p><code>spring.application.name</code>指定服务名称为<code>Server-Provider</code>，后续服务消费者要获取上面TestController中接口的时候会用到这个服务名；</p></li><li><p><code>eureka.client.serviceUrl.defaultZone</code>指定Eureka服务端的地址，这里为上面定义的Eureka服务端地址；</p></li><li><p><code>eureka.client.register-with-eureka</code>和<code>eureka.client.fetch-registry</code>上面已经解释了其意思，虽然这两个配置的默认值就是true，但这里还是显式配置下，使Eureka客户端的功能更为直观（即向服务端注册服务并定时从服务端获取服务缓存到本地）。</p></li></ul><p>配置好后，启动Eureka-Client，可以从控制台中看到注册成功的消息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Registered Applications size is zero : true</span><br><span class="line">Application version is -1: true</span><br><span class="line">Getting all instance registry info from the eureka server</span><br><span class="line">The response status is 200</span><br><span class="line">Starting heartbeat executor: renew interval is: 30</span><br><span class="line">InstanceInfoReplicator onDemand update allowed rate per min is 4</span><br><span class="line">Discovery Client initialized at timestamp 1530667498944 with initial instances </span><br><span class="line">Registering application Server-Provider with eureka with status UP</span><br><span class="line">Saw local status change event StatusChangeEvent [timestamp=1530667498949, current=UP, previous=STARTING] </span><br><span class="line">DiscoveryClient_SERVER-PROVIDER/192.168.73.109:Server-Provider:8082: registering service... </span><br><span class="line">DiscoveryClient_SERVER-PROVIDER/192.168.73.109:Server-Provider:8082 - registration status: 204</span><br><span class="line">Tomcat started on port(s): 8082 (http)</span><br><span class="line">Updating port to 8082</span><br><span class="line">Started DemoApplication in 7.007 seconds (JVM running for 8.355)</span><br></pre></td></tr></table></figure><p>第3，4行输出表示已经成功从Eureka服务端获取到了服务；第5行表示发送心跳给Eureka服务端，续约（renew）服务；第8到11行表示已经成功将服务注册到了Eureka服务端。</p><p>再次访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>，可看到服务列表里已经出现了名字为Server-providerde服务了：</p><p><img src="img/QQ截图20180704085804.png" alt="QQ截图20180704085804.png"></p><p>UP表示在线的意思（如果Eureka客户端正常关闭，那么这里的状态将变为DOWN），点击后面的链接<a href="192.168.73.109:Server-Provider:8082" target="_blank" rel="noopener">192.168.73.109:Server-Provider:8082</a>将访问该服务的<code>/info</code>接口：</p><p><img src="img/QQ截图20180704090853.png" alt="QQ截图20180704090853.png"></p><p>这时候关闭Eureka客户端，再次刷新<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>：</p><p><img src="img/QQ截图20180704091123.png" alt="QQ截图20180704091123.png"></p><p>可看到虽然Eureka客户端已经关闭了，但是Eureka服务端页面的服务服务列表中依然还有该服务，并且页面红色文字提示：</p><div class="note danger"><p>EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</p></div><p>大致意思是Eureka已经进入了<strong>保护模式</strong>。微服务在部署之后可能由于网络问题造成Eureka客户端无法成功的发送心跳给Eureka服务端，这时候Eureka服务端认定Eureka客户端已经挂掉了，虽然实际上Eureka客户端还在正常的运行着。而保护模式就是为了解决这个问题，即当Eureka服务端在短时间内同时丢失了过多的Eureka客户端时，Eureka服务端会进入保护模式，不去剔除这些客户端。因为我们这里只部署了一个Eureka客户端服务，所以关闭客户端后满足“短时间内丢失过多Eureka客户端”的条件。</p><p>在开发中可以先将保护模式给关了，我们在Eureka服务端加上一条配置:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p></p><h2 id="Eureka-Server集群"><a href="#Eureka-Server集群" class="headerlink" title="Eureka-Server集群"></a>Eureka-Server集群</h2><p>Eureka服务端充当了重要的角色，所有Eureka客户端都将自己提供的服务注册到Eureka服务端，然后供所有服务消费者使用。如果单节点的Eureka服务端宕机了，那么所有服务都无法正常的访问，这必将是灾难性的。为了提高Eureka服务端的可用性，我们一般会对其集群部署，即同时部署多个Eureka服务端，并且可以相互间同步服务。</p><p>在搭建Eureka服务端的时候我们曾把下面两个配置给关闭了：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p></p><p>实际上在Eureka集群模式中，开启这两个参数可以让当前Eureka服务端将自己也作为服务注册到别的Eureka服务端，并且从别的Eureka服务端获取服务进行同步。所以这里我们将这两个参数置为true（默认就是true），下面开始搭建Eureka服务端集群，为了简单起见这里只搭建两个节点的Eureka服务端集群。</p><p>在Eureka-Server项目的<code>src/main/resource</code>目录下新建application-peer1.yml，配置如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Eureka-Server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">peer1</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer2:8081/eureka/</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p></p><p><code>server.port=8080</code>指定端口为8080；<code>spring.application.name=Eureka-Server</code>指定了服务名称为Eureka-Server；<code>eureka.instance.hostname=peer1</code>指定地址为peer1；<code>eureka.client.serviceUrl.defaultZone=http://peer2:8081/eureka/</code>指定Eureka服务端的地址为另外一个Eureka服务端的地址peer2。</p><p>下面我们创建另外一个Eureka服务端peer2的yml配置application-peer2.yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Eureka-Server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">peer2</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8080/eureka/</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    enable-self-preservation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p></p><p>peer2中的<code>serviceUrl</code>我们指向Eureka服务端peer1。</p><p>为了让这种在一台机器上配置两个hostname的方式生效，我们需要修改下hosts文件（位置C:\Windows\System32\drivers\etc）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1       peer1</span><br><span class="line">127.0.0.1       peer2</span><br></pre></td></tr></table></figure><p></p><p>我们将Eureka-Server项目打包成jar，然后分别运行以下两条命令来部署peer1和peer2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar Eureka-Service-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer1</span><br><span class="line">java -jar Eureka-Service-0.0.1-SNAPSHOT.jar --spring.profiles.active=peer2</span><br></pre></td></tr></table></figure><p></p><p>启动后，我们来访问peer1<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>：</p><p><img src="img/QQ截图20180704100749.png" alt="QQ截图20180704100749.png"></p><p>可看到DS Replicas(副本)指向了peer2，registered-replicas和available-replicas都指向了<a href="http://peer2:8081/eureka/" target="_blank" rel="noopener">http://peer2:8081/eureka/</a>。</p><p>访问<a href="http://localhost:8081/" target="_blank" rel="noopener">http://localhost:8081/</a>我们也可以看到类似的信息。</p><p>因为Eureka服务端做了集群处理，所以Eureka客户端指定的服务端地址也要进行修改：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8080/eureka/,http://peer2:8081/eureka/</span></span><br></pre></td></tr></table></figure><p></p><p>我们将Eureka客户端（Server-Provider）打成jar包，然后分别用端口8082和8083启动两个服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar Eureka-Client-0.0.1-SNAPSHOT.jar --server.port=8082</span><br><span class="line">java -jar Eureka-Client-0.0.1-SNAPSHOT.jar --server.port=8083</span><br></pre></td></tr></table></figure><p></p><p>然后访问<a href="http://peer2:8080/eureka/" target="_blank" rel="noopener">http://peer2:8080/eureka/</a>或者<a href="http://peer2:8081/eureka/" target="_blank" rel="noopener">http://peer2:8081/eureka/</a>： <img src="img/QQ截图20180704104219.png" alt="QQ截图20180704104219.png"></p><h2 id="搭建Server-Consumer服务消费者"><a href="#搭建Server-Consumer服务消费者" class="headerlink" title="搭建Server-Consumer服务消费者"></a>搭建Server-Consumer服务消费者</h2><p>在实际项目中，Eureka客户端即是服务提供者，也是服务消费者，即自身的接口可能被别的服务访问，同时也可能调用别的服务接口。这里为了更好的演示，我们把服务消费者单独的分开来演示。</p><p>新建一个Spring Boot项目，<code>artifactId</code>填Server-Consumer，其主要的任务就是将自身的服务注册到Eureka服务端，并且获取Eureka服务端提供的服务并进行消费。这里服务的消费我们用<a href="https://github.com/Netflix/ribbon" target="_blank" rel="noopener">Ribbon</a>来完成，Ribbon是一款实现服务负载均衡的开源软件，这里不做详细介绍。</p><p>引入Eureka客户端和Ribbon依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>同样的，在入口类中加入<code>@EnableDiscoveryClient</code>注解用于发现服务和注册服务，并配置一个<code>RestTemplate Bean</code>，然后加上<code>@LoadBalanced</code>注解来开启负载均衡：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接着编写一个TestController，用于消费服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/info"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForEntity(<span class="string">"http://Server-Provider/info"</span>, String.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码注入了<code>RestTemplate</code>，<code>getInfo</code>中使用<code>RestTemplate</code>对象均衡的去获取服务并消费。可以看到我们使用服务名称（Server-Provider）去获取服务的，而不是使用传统的IP加端口的形式。这就体现了使用Eureka去获取服务的好处，我们只要保证这个服务名称不变即可，IP和端口不再是我们关心的点。</p><p>最后编写下配置文件application.yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9000</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Server-Consumer</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    serviceUrl:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8080/eureka/,http://peer2:8081/eureka/</span></span><br></pre></td></tr></table></figure><p></p><p>端口为9000，服务名称为<code>Server-Consumer</code>并指定了Eureka服务端的地址。</p><p>启动该项目，访问<a href="http://localhost:9000/info" target="_blank" rel="noopener">http://localhost:9000/info</a>：</p><p><img src="img/QQ截图20180704112445.png" alt="QQ截图20180704112445.png"></p><p>成功获取到了信息，我们多次访问这个接口，然后观察8082和8083Eureka客户端的后台：</p><p><img src="img/QQ截图20180704112611.png" alt="QQ截图20180704112611.png"></p><p><img src="img/QQ截图20180704112650.png" alt="QQ截图20180704112650.png"></p><p>可以看到它们的后台都打印出了信息，说明我们从9000去获取服务是均衡的。</p><p>这时候我们关闭一个Eureka服务端，再次访问<a href="http://localhost:9000/info" target="_blank" rel="noopener">http://localhost:9000/info</a>，还是可以成功获取到信息，这就是Eureka服务端集群的好处。</p><h2 id="Eureka-Server添加认证"><a href="#Eureka-Server添加认证" class="headerlink" title="Eureka-Server添加认证"></a>Eureka-Server添加认证</h2><p>出于安全的考虑，我们可能会对Eureka服务端添加用户认证的功能。我们在Eureka-Server引入Spring-Security依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后在application.yml中配置用户名和密码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">  basic:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  user:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">mrbird</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p></p><p>Eureka服务端配置了密码之后，所有<code>eureka.client.serviceUrl.defaultZone</code>的配置也必须配置上用户名和密码，格式为：<code>eureka.client.serviceUrl.defaultZone=http://${userName}:${password}@${hosetname}:${port}/eureka/</code>，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:<span class="comment">//mrbird:123456@peer2:8081/eureka/</span></span><br></pre></td></tr></table></figure><p></p><p>重新打包并部署后，访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>，页面将弹出验证窗口，输入用户名和密码后即可访问。</p><h2 id="Eureka配置"><a href="#Eureka配置" class="headerlink" title="Eureka配置"></a>Eureka配置</h2><p>下面我们总结一下在Eureka中常用的配置选项及代表的含义：</p><table><tr><th>配置</th><th>含义</th><th>默认值</th></tr><tr><td>eureka.client.enabled</td><td>是否启用Eureka Client</td><td>true</td></tr><tr><td>eureka.client.register-with-eureka</td><td>表示是否将自己注册到Eureka Server</td><td>true</td></tr><tr><td>eureka.client.fetch-registry</td><td>表示是否从Eureka Server获取注册的服务信息</td><td>true</td></tr><tr><td>eureka.client.serviceUrl.defaultZone</td><td>配置Eureka Server地址，用于注册服务和获取服务</td><td><a href="http://localhost:8761/eureka" target="_blank" rel="noopener">http://localhost:8761/eureka</a></td></tr><tr><td>eureka.client.registry-fetch-interval-seconds</td><td>默认值为30秒，即每30秒去Eureka Server上获取服务并缓存</td><td>30</td></tr><tr><td>eureka.instance.lease-renewal-interval-in-seconds</td><td>向Eureka Server发送心跳的间隔时间，单位为秒，用于服务续约</td><td>30</td></tr><tr><td>eureka.instance.lease-expiration-duration-in-seconds</td><td>定义服务失效时间，即Eureka Server检测到Eureka Client木有心跳后（客户端意外下线）多少秒将其剔除</td><td>90</td></tr><tr><td>eureka.server.enable-self-preservation</td><td>用于开启Eureka Server自我保护功能</td><td>true</td></tr><tr><td>eureka.client.instance-info-replication-interval-seconds</td><td>更新实例信息的变化到Eureka服务端的间隔时间，单位为秒</td><td>30</td></tr><tr><td>eureka.client.eureka-service-url-poll-interval-seconds</td><td>轮询Eureka服务端地址更改的间隔时间，单位为秒。</td><td>300</td></tr><tr><td>eureka.instance.prefer-ip-address</td><td>表示使用IP进行配置为不是域名</td><td>false</td></tr><tr><td>eureka.client.healthcheck.enabled</td><td>默认Erueka Server是通过心跳来检测Eureka Client的健康状况的，通过置为true改变Eeureka Server对客户端健康检测的方式，改用Actuator的/health端点来检测。</td><td>false</td></tr></table><p>Eureka还有许多别的配置，具体可以参考<code>EurekaClientConfigBean</code>，<code>EurekaServerConfigBean</code>和<code>EurekaInstanceConfigBean</code>配置类的源码。</p><p>参考链接：<a href="http://cloud.spring.io/spring-cloud-netflix/1.4.x/multi/multi__service_discovery_eureka_clients.html" target="_blank" rel="noopener">http://cloud.spring.io/spring-cloud-netflix/1.4.x/multi/multi__service_discovery_eureka_clients.html</a></p><p>源码链接：<a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/28.Spring-Cloud-Eureka-Server-Discovery" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/28.Spring-Cloud-Eureka-Server-Discovery</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;考虑当前有两个微服务实例A和B，A服务需要调用B服务的某个REST接口。假如某一天B服务迁移到了另外一台服务器，IP和端口也发生了变化，这时候我们不得不去修改A服务中调用B服务REST接口的静态配置。随着公司业务的发展，微服务的数量也越来越多，服务间的关系可能变得非常复杂，传统的微服务维护变得愈加困难，也很容易出错。所谓服务治理就是用来实现各个微服务实例的自动化注册与发现，在这种模式下，服务间的调用不再通过指定具体的实例地址来实现，而是通过向服务注册中心获取服务名并发起请求调用实现。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
      <category term="Eureka" scheme="http://mrbird.cc/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记</title>
    <link href="http://mrbird.cc/Vue-Learn-Note.html"/>
    <id>http://mrbird.cc/Vue-Learn-Note.html</id>
    <published>2018-05-25T07:56:54.000Z</published>
    <updated>2018-12-13T05:42:11.688Z</updated>
    
    <content type="html"><![CDATA[<!-- <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> -->
<div id="hbe-security">
  <div class="hbe-input-container">
  	<input type="password" style="display: none;"/>
  	<input type="text" autocomplete="off" style="display: none;"/>
  <input type="password" class="hbe-form-control" id="pass" placeholder="文章已加密，请输入密码 😛：" autocomplete="new-password"/>
    <label for="pass">文章已加密，请输入密码 😛：</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">密码错误 😭</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。
    
    </summary>
    
    
      <category term="Vue" scheme="http://mrbird.cc/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security短信验证码登录</title>
    <link href="http://mrbird.cc/Spring-Security-SmsCode.html"/>
    <id>http://mrbird.cc/Spring-Security-SmsCode.html</id>
    <published>2018-05-11T09:06:02.000Z</published>
    <updated>2018-09-20T03:30:56.470Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>在<a href="/Spring-Security-ValidateCode.html">Spring Security添加图形验证码</a>一节中，我们已经实现了基于Spring Boot + Spring Security的账号密码登录，并集成了图形验证码功能。时下另一种非常常见的网站登录方式为手机短信验证码登录，但Spring Security默认只提供了账号密码的登录认证逻辑，所以要实现手机短信验证码登录认证功能，我们需要模仿Spring Security账号密码登录逻辑代码来实现一套自己的认证逻辑。<a id="more"></a></p><h2 id="短信验证码生成"><a href="#短信验证码生成" class="headerlink" title="短信验证码生成"></a>短信验证码生成</h2><p>我们在上一节<a href="/Spring-Security-ValidateCode.html">Spring Security添加图形验证码</a>的基础上来集成短信验证码登录的功能。</p><p>和图形验证码类似，我们先定义一个短信验证码对象SmsCode：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsCode</span><span class="params">(String code, <span class="keyword">int</span> expireIn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.expireTime = LocalDateTime.now().plusSeconds(expireIn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsCode</span><span class="params">(String code, LocalDateTime expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.expireTime = expireTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isExpire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().isAfter(expireTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get,set略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>SmsCode对象包含了两个属性：code验证码和expireTime过期时间。isExpire方法用于判断短信验证码是否已过期。</p><p>接着在ValidateCodeController中加入生成短信验证码相关请求对应的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SESSION_KEY_SMS_CODE = <span class="string">"SESSION_KEY_SMS_CODE"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SessionStrategy sessionStrategy = <span class="keyword">new</span> HttpSessionSessionStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/code/sms"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createSmsCode</span><span class="params">(HttpServletRequest request, HttpServletResponse response, String mobile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SmsCode smsCode = createSMSCode();</span><br><span class="line">        sessionStrategy.setAttribute(<span class="keyword">new</span> ServletWebRequest(request), SESSION_KEY_SMS_CODE + mobile, smsCode);</span><br><span class="line">        <span class="comment">// 输出验证码到控制台代替短信发送服务</span></span><br><span class="line">        System.out.println(<span class="string">"您的登录验证码为："</span> + smsCode.getCode() + <span class="string">"，有效时间为60秒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> SmsCode <span class="title">createSMSCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String code = RandomStringUtils.randomNumeric(<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsCode(code, <span class="number">60</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这里我们使用<code>createSMSCode</code>方法生成了一个6位的纯数字随机数，有效时间为60秒。然后通过<code>SessionStrategy</code>对象的<code>setAttribute</code>方法将短信验证码保存到了Session中，对应的key为<code>SESSION_KEY_SMS_CODE</code>。</p><p>至此，短信验证码生成模块编写完毕，下面开始改造登录页面。</p><h2 id="改造登录页"><a href="#改造登录页" class="headerlink" title="改造登录页"></a>改造登录页</h2><p>我们在登录页面中加入一个与手机短信验证码认证相关的Form表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"login-page"</span> <span class="attr">action</span>=<span class="string">"/login/mobile"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>短信验证码登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"手机号"</span> <span class="attr">name</span>=<span class="string">"mobile"</span> <span class="attr">value</span>=<span class="string">"17777777777"</span> <span class="attr">required</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"display: inline"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"smsCode"</span> <span class="attr">placeholder</span>=<span class="string">"短信验证码"</span> <span class="attr">style</span>=<span class="string">"width: 50%;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/code/sms?mobile=17777777777"</span>&gt;</span>发送验证码<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>其中a标签的<code>href</code>属性值对应我们的短信验证码生成方法的请求URL。Form的action对应处理短信验证码登录方法的请求URL，这个方法下面在进行具体实现。同时，我们需要在Spring Security中配置<code>/code/sms</code>路径免验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    http.addFilterBefore(validateCodeFilter, UsernamePasswordAuthenticationFilter.class) <span class="comment">// 添加验证码校验过滤器</span></span><br><span class="line">            .formLogin() <span class="comment">// 表单登录</span></span><br><span class="line">                <span class="comment">// http.httpBasic() // HTTP Basic</span></span><br><span class="line">                .loginPage(<span class="string">"/authentication/require"</span>) <span class="comment">// 登录跳转 URL</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 处理表单登录 URL</span></span><br><span class="line">                .successHandler(authenticationSucessHandler) <span class="comment">// 处理登录成功</span></span><br><span class="line">                .failureHandler(authenticationFailureHandler) <span class="comment">// 处理登录失败</span></span><br><span class="line">            .and()</span><br><span class="line">                .authorizeRequests() <span class="comment">// 授权配置</span></span><br><span class="line">                .antMatchers(<span class="string">"/authentication/require"</span>,</span><br><span class="line">                        <span class="string">"/login.html"</span>, <span class="string">"/code/image"</span>,<span class="string">"/code/sms"</span>).permitAll() <span class="comment">// 无需认证的请求路径</span></span><br><span class="line">                .anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">                .authenticated() <span class="comment">// 都需要认证</span></span><br><span class="line">            .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，访问<a href="http://localhost:8080/login.html" target="_blank" rel="noopener">http://localhost:8080/login.html</a>：</p><p><img src="img/QQ截图20180729204953.png" alt="QQ截图20180729204953.png"></p><p>点击发送验证码，控制台输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">您的登录验证码为：693583，有效时间为60秒</span><br></pre></td></tr></table></figure><p></p><p>接下来开始实现使用短信验证码登录认证逻辑。</p><h2 id="添加短信验证码认证"><a href="#添加短信验证码认证" class="headerlink" title="添加短信验证码认证"></a>添加短信验证码认证</h2><p>在Spring Security中，使用用户名密码认证的过程大致如下图所示：</p><p><img src="img/QQ截图20180730220603.png" alt="QQ截图20180730220603.png"></p><p>Spring Security使用<code>UsernamePasswordAuthenticationFilter</code>过滤器来拦截用户名密码认证请求，将用户名和密码封装成一个<code>UsernamePasswordToken</code>对象交给<code>AuthenticationManager</code>处理。<code>AuthenticationManager</code>将挑出一个支持处理该类型Token的<code>AuthenticationProvider</code>（这里为<code>DaoAuthenticationProvider</code>，<code>AuthenticationProvider</code>的其中一个实现类）来进行认证，认证过程中<code>DaoAuthenticationProvider</code>将调用<code>UserDetailService</code>的<code>loadUserByUsername</code>方法来处理认证，如果认证通过（即<code>UsernamePasswordToken</code>中的用户名和密码相符）则返回一个<code>UserDetails</code>类型对象，并将认证信息保存到Session中，认证后我们便可以通过<code>Authentication</code>对象获取到认证的信息了。</p><p>由于Spring Security并没用提供短信验证码认证的流程，所以我们需要仿照上面这个流程来实现：</p><p><img src="img/QQ截图20180730224103.png" alt="QQ截图20180730224103.png"></p><p>在这个流程中，我们自定义了一个名为<code>SmsAuthenticationFitler</code>的过滤器来拦截短信验证码登录请求，并将手机号码封装到一个叫<code>SmsAuthenticationToken</code>的对象中。在Spring Security中，认证处理都需要通过<code>AuthenticationManager</code>来代理，所以这里我们依旧将<code>SmsAuthenticationToken</code>交由<code>AuthenticationManager</code>处理。接着我们需要定义一个支持处理<code>SmsAuthenticationToken</code>对象的<code>SmsAuthenticationProvider</code>，<code>SmsAuthenticationProvider</code>调用<code>UserDetailService</code>的<code>loadUserByUsername</code>方法来处理认证。与用户名密码认证不一样的是，这里是通过<code>SmsAuthenticationToken</code>中的手机号去数据库中查询是否有与之对应的用户，如果有，则将该用户信息封装到<code>UserDetails</code>对象中返回并将认证后的信息保存到<code>Authentication</code>对象中。</p><p>为了实现这个流程，我们需要定义<code>SmsAuthenticationFitler</code>、<code>SmsAuthenticationToken</code>和<code>SmsAuthenticationProvider</code>，并将这些组建组合起来添加到Spring Security中。下面我们来逐步实现这个过程。</p><h3 id="定义SmsAuthenticationToken"><a href="#定义SmsAuthenticationToken" class="headerlink" title="定义SmsAuthenticationToken"></a>定义SmsAuthenticationToken</h3><p>查看<code>UsernamePasswordAuthenticationToken</code>的源码，将其复制出来重命名为<code>SmsAuthenticationToken</code>，并稍作修改，修改后的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsAuthenticationToken</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationToken</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object principal;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsAuthenticationToken</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.principal = mobile;</span><br><span class="line">        setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsAuthenticationToken</span><span class="params">(Object principal, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(authorities);</span><br><span class="line">        <span class="keyword">this</span>.principal = principal;</span><br><span class="line">        <span class="keyword">super</span>.setAuthenticated(<span class="keyword">true</span>); <span class="comment">// must use super, as we override</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.principal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticated</span><span class="params">(<span class="keyword">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isAuthenticated) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eraseCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eraseCredentials();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>SmsAuthenticationToken</code>包含一个<code>principal</code>属性，从它的两个构造函数可以看出，在认证之前<code>principal</code>存的是手机号，认证之后存的是用户信息。<code>UsernamePasswordAuthenticationToken</code>原来还包含一个<code>credentials</code>属性用于存放密码，这里不需要就去掉了。</p><h3 id="定义SmsAuthenticationFilter"><a href="#定义SmsAuthenticationFilter" class="headerlink" title="定义SmsAuthenticationFilter"></a>定义SmsAuthenticationFilter</h3><p>定义完<code>SmsAuthenticationToken</code>后，我们接着定义用于处理短信验证码登录请求的过滤器<code>SmsAuthenticationFilter</code>，同样的复制<code>UsernamePasswordAuthenticationFilter</code>源码并稍作修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationProcessingFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MOBILE_KEY = <span class="string">"mobile"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mobileParameter = MOBILE_KEY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> postOnly = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsAuthenticationFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> AntPathRequestMatcher(<span class="string">"/login/mobile"</span>, <span class="string">"POST"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (postOnly &amp;&amp; !request.getMethod().equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(</span><br><span class="line">                    <span class="string">"Authentication method not supported: "</span> + request.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line">        String mobile = obtainMobile(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mobile == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mobile = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mobile = mobile.trim();</span><br><span class="line"></span><br><span class="line">        SmsAuthenticationToken authRequest = <span class="keyword">new</span> SmsAuthenticationToken(mobile);</span><br><span class="line"></span><br><span class="line">        setDetails(request, authRequest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">obtainMobile</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getParameter(mobileParameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setDetails</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                              SmsAuthenticationToken authRequest)</span> </span>&#123;</span><br><span class="line">        authRequest.setDetails(authenticationDetailsSource.buildDetails(request));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMobileParameter</span><span class="params">(String mobileParameter)</span> </span>&#123;</span><br><span class="line">        Assert.hasText(mobileParameter, <span class="string">"mobile parameter must not be empty or null"</span>);</span><br><span class="line">        <span class="keyword">this</span>.mobileParameter = mobileParameter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPostOnly</span><span class="params">(<span class="keyword">boolean</span> postOnly)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.postOnly = postOnly;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getMobileParameter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mobileParameter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>构造函数中指定了当请求为<code>/login/mobile</code>，请求方法为<strong>POST</strong>的时候该过滤器生效。<code>mobileParameter</code>属性值为mobile，对应登录页面手机号输入框的name属性。<code>attemptAuthentication</code>方法从请求中获取到mobile参数值，并调用<code>SmsAuthenticationToken</code>的<code>SmsAuthenticationToken(String mobile)</code>构造方法创建了一个<code>SmsAuthenticationToken</code>。下一步就如流程图中所示的那样，<code>SmsAuthenticationFilter</code>将<code>SmsAuthenticationToken</code>交给<code>AuthenticationManager</code>处理。</p><h3 id="定义SmsAuthenticationProvider"><a href="#定义SmsAuthenticationProvider" class="headerlink" title="定义SmsAuthenticationProvider"></a>定义SmsAuthenticationProvider</h3><p>在创建完<code>SmsAuthenticationFilter</code>后，我们需要创建一个支持处理该类型Token的类，即<code>SmsAuthenticationProvider</code>，该类需要实现<code>AuthenticationProvider</code>的两个抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDetailService userDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        SmsAuthenticationToken authenticationToken = (SmsAuthenticationToken) authentication;</span><br><span class="line">        UserDetails userDetails = userDetailService.loadUserByUsername((String) authenticationToken.getPrincipal());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userDetails == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalAuthenticationServiceException(<span class="string">"未找到与该手机号对应的用户"</span>);</span><br><span class="line"></span><br><span class="line">        SmsAuthenticationToken authenticationResult = <span class="keyword">new</span> SmsAuthenticationToken(userDetails, userDetails.getAuthorities());</span><br><span class="line"></span><br><span class="line">        authenticationResult.setDetails(authenticationToken.getDetails());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> authenticationResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SmsAuthenticationToken.class.isAssignableFrom(aClass);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailService <span class="title">getUserDetailService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDetailService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDetailService</span><span class="params">(UserDetailService userDetailService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDetailService = userDetailService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中<code>supports</code>方法指定了支持处理的Token类型为<code>SmsAuthenticationToken</code>，<code>authenticate</code>方法用于编写具体的身份认证逻辑。在<code>authenticate</code>方法中，我们从<code>SmsAuthenticationToken</code>中取出了手机号信息，并调用了<code>UserDetailService</code>的<code>loadUserByUsername</code>方法。该方法在用户名密码类型的认证中，主要逻辑是通过用户名查询用户信息，如果存在该用户并且密码一致则认证成功；而在短信验证码认证的过程中，该方法需要通过手机号去查询用户，如果存在该用户则认证通过。认证通过后接着调用<code>SmsAuthenticationToken</code>的<code>SmsAuthenticationToken(Object principal, Collection&lt;? extends GrantedAuthority&gt; authorities)</code>构造函数构造一个认证通过的Token，包含了用户信息和用户权限。</p><p>你可能会问，为什么这一步没有进行短信验证码的校验呢？实际上短信验证码的校验是在<code>SmsAuthenticationFilter</code>之前完成的，即只有当短信验证码正确以后才开始走认证的流程。所以接下来我们需要定一个过滤器来校验短信验证码的正确性。</p><h3 id="定义SmsCodeFilter"><a href="#定义SmsCodeFilter" class="headerlink" title="定义SmsCodeFilter"></a>定义SmsCodeFilter</h3><p>短信验证码的校验逻辑其实和图形验证码的校验逻辑基本一致，所以我们在图形验证码过滤器的基础上稍作修改，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandler authenticationFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SessionStrategy sessionStrategy = <span class="keyword">new</span> HttpSessionSessionStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, </span></span></span><br><span class="line"><span class="function"><span class="params">    	FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.equalsIgnoreCase(<span class="string">"/login/mobile"</span>, httpServletRequest.getRequestURI())</span><br><span class="line">                &amp;&amp; StringUtils.equalsIgnoreCase(httpServletRequest.getMethod(), <span class="string">"post"</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                validateCode(<span class="keyword">new</span> ServletWebRequest(httpServletRequest));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ValidateCodeException e) &#123;</span><br><span class="line">                authenticationFailureHandler.onAuthenticationFailure(httpServletRequest, httpServletResponse, e);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateSmsCode</span><span class="params">(ServletWebRequest servletWebRequest)</span> <span class="keyword">throws</span> ServletRequestBindingException </span>&#123;</span><br><span class="line">        String smsCodeInRequest = ServletRequestUtils.getStringParameter(servletWebRequest.getRequest(), <span class="string">"smsCode"</span>);</span><br><span class="line">        String mobile = ServletRequestUtils.getStringParameter(servletWebRequest.getRequest(), <span class="string">"mobile"</span>);</span><br><span class="line">        ValidateCode codeInSession = (ValidateCode) sessionStrategy.getAttribute(servletWebRequest, FebsConstant.SESSION_KEY_SMS_CODE + mobile);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(smsCodeInRequest)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码不能为空！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (codeInSession == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码不存在，请重新发送！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (codeInSession.isExpire()) &#123;</span><br><span class="line">            sessionStrategy.removeAttribute(servletWebRequest, FebsConstant.SESSION_KEY_SMS_CODE + mobile);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码已过期，请重新发送！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.equalsIgnoreCase(codeInSession.getCode(), smsCodeInRequest)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码不正确！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sessionStrategy.removeAttribute(servletWebRequest, FebsConstant.SESSION_KEY_SMS_CODE + mobile);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>方法的基本逻辑和之前定义的<code>ValidateCodeFilter</code>一致，这里不再赘述。</p><h3 id="配置生效"><a href="#配置生效" class="headerlink" title="配置生效"></a>配置生效</h3><p>在定义完所需的组件后，我们需要进行一些配置，将这些组件组合起来形成一个和上面流程图对应的流程。创建一个配置类<code>SmsAuthenticationConfig</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsAuthenticationConfig</span> <span class="keyword">extends</span> <span class="title">SecurityConfigurerAdapter</span>&lt;<span class="title">DefaultSecurityFilterChain</span>, <span class="title">HttpSecurity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationSuccessHandler authenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandler authenticationFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailService userDetailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SmsAuthenticationFilter smsAuthenticationFilter = <span class="keyword">new</span> SmsAuthenticationFilter();</span><br><span class="line">        smsAuthenticationFilter.setAuthenticationManager(http.getSharedObject(AuthenticationManager.class));</span><br><span class="line">        smsAuthenticationFilter.setAuthenticationSuccessHandler(authenticationSuccessHandler);</span><br><span class="line">        smsAuthenticationFilter.setAuthenticationFailureHandler(authenticationFailureHandler);</span><br><span class="line">        </span><br><span class="line">        SmsAuthenticationProvider smsAuthenticationProvider = <span class="keyword">new</span> SmsAuthenticationProvider();</span><br><span class="line">        smsAuthenticationProvider.setUserDetailService(userDetailService);</span><br><span class="line"></span><br><span class="line">        http.authenticationProvider(smsAuthenticationProvider)</span><br><span class="line">                .addFilterAfter(smsAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在流程中第一步需要配置<code>SmsAuthenticationFilter</code>，分别设置了<code>AuthenticationManager</code>、<code>AuthenticationSuccessHandler</code>和<code>AuthenticationFailureHandler</code>属性。这些属性都是来自<code>SmsAuthenticationFilter</code>继承的<code>AbstractAuthenticationProcessingFilter</code>类中。</p><p>第二步配置<code>SmsAuthenticationProvider</code>，这一步只需要将我们自个的<code>UserDetailService</code>注入进来即可。</p><p>最后调用<code>HttpSecurity</code>的<code>authenticationProvider</code>方法指定了<code>AuthenticationProvider</code>为<code>SmsAuthenticationProvider</code>，并将<code>SmsAuthenticationFilter</code>过滤器添加到了<code>UsernamePasswordAuthenticationFilter</code>后面。</p><p>到这里我们已经将短信验证码认证的各个组件组合起来了，最后一步需要做的是配置短信验证码校验过滤器，并且将短信验证码认证流程加入到Spring Security中。在<code>BrowserSecurityConfig</code>的<code>configure</code>方法中添加如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyAuthenticationSucessHandler authenticationSucessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyAuthenticationFailureHandler authenticationFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ValidateCodeFilter validateCodeFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsCodeFilter smsCodeFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SmsAuthenticationConfig smsAuthenticationConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        http.addFilterBefore(validateCodeFilter, UsernamePasswordAuthenticationFilter.class) <span class="comment">// 添加验证码校验过滤器</span></span><br><span class="line">            .addFilterBefore(smsCodeFilter, UsernamePasswordAuthenticationFilter.class) <span class="comment">// 添加短信验证码校验过滤器</span></span><br><span class="line">                .formLogin() <span class="comment">// 表单登录</span></span><br><span class="line">                    <span class="comment">// http.httpBasic() // HTTP Basic</span></span><br><span class="line">                    .loginPage(<span class="string">"/authentication/require"</span>) <span class="comment">// 登录跳转 URL</span></span><br><span class="line">                    .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 处理表单登录 URL</span></span><br><span class="line">                    .successHandler(authenticationSucessHandler) <span class="comment">// 处理登录成功</span></span><br><span class="line">                    .failureHandler(authenticationFailureHandler) <span class="comment">// 处理登录失败</span></span><br><span class="line">                .and()</span><br><span class="line">                    .authorizeRequests() <span class="comment">// 授权配置</span></span><br><span class="line">                    .antMatchers(<span class="string">"/authentication/require"</span>,</span><br><span class="line">                            <span class="string">"/login.html"</span>,</span><br><span class="line">                            <span class="string">"/code/image"</span>,<span class="string">"/code/sms"</span>).permitAll() <span class="comment">// 无需认证的请求路径</span></span><br><span class="line">                    .anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">                    .authenticated() <span class="comment">// 都需要认证</span></span><br><span class="line">                .and()</span><br><span class="line">                    .csrf().disable()</span><br><span class="line">                .apply(smsAuthenticationConfig); <span class="comment">// 将短信验证码认证配置加到 Spring Security 中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>具体含义见注释，这里不再赘述。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>重启项目，访问<a href="http://localhost:8080/login.html" target="_blank" rel="noopener">http://localhost:8080/login.html</a>，点击发送验证码，控制台输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">您的登录验证码为：169638，有效时间为60秒</span><br></pre></td></tr></table></figure><p></p><p>输入该验证码，点击登录后页面如下所示：</p><p><img src="img/QQ截图20180731230532.png" alt="QQ截图20180731230532.png"></p><p>认证成功。</p><blockquote><p>源码链接 <a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/38.Spring-Security-SmsCode" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/38.Spring-Security-SmsCode</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在&lt;a href=&quot;/Spring-Security-ValidateCode.html&quot;&gt;Spring Security添加图形验证码&lt;/a&gt;一节中，我们已经实现了基于Spring Boot + Spring Security的账号密码登录，并集成了图形验证码功能。时下另一种非常常见的网站登录方式为手机短信验证码登录，但Spring Security默认只提供了账号密码的登录认证逻辑，所以要实现手机短信验证码登录认证功能，我们需要模仿Spring Security账号密码登录逻辑代码来实现一套自己的认证逻辑。
    
    </summary>
    
    
      <category term="Security" scheme="http://mrbird.cc/tags/Security/"/>
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Security" scheme="http://mrbird.cc/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security添加记住我功能</title>
    <link href="http://mrbird.cc/Spring-Security-RememberMe.html"/>
    <id>http://mrbird.cc/Spring-Security-RememberMe.html</id>
    <published>2018-05-08T09:05:29.000Z</published>
    <updated>2018-09-14T01:11:40.460Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>在网站的登录页面中，记住我选项是一个很常见的功能，勾选记住我后在一段时间内，用户无需进行登录操作就可以访问系统资源。在Spring Security中添加记住我功能很简单，大致过程是：当用户勾选了记住我选项并登录成功后，Spring Security会生成一个token标识，然后将该token标识持久化到数据库，并且生成一个与该token相对应的cookie返回给浏览器。当用户过段时间再次访问系统时，如果该cookie没有过期，Spring Security便会根据cookie包含的信息从数据库中获取相应的token信息，然后帮用户自动完成登录操作。<a id="more"></a></p><h2 id="token持久化"><a href="#token持久化" class="headerlink" title="token持久化"></a>token持久化</h2><p>Spring Security的记住我功能的实现需要使用数据库来持久化token。我们在上一节<a href="/Spring-Security-ValidateCode.html">Spring Security添加图形验证码</a>的基础上来添加记住我的功能。</p><p>在application.yml中添加数据源配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/security?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p></p><p>添加数据库依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后我们在<code>BrowserSecurityConfig</code>中配置个token持久化对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailService userDetailService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JdbcTokenRepositoryImpl jdbcTokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">        jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">        jdbcTokenRepository.setCreateTableOnStartup(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>PersistentTokenRepository</code>为一个接口类，这里我们用的是数据库持久化，所以实例用的是<code>PersistentTokenRepository</code>的实现类<code>JdbcTokenRepositoryImpl</code>。</p><p><code>JdbcTokenRepositoryImpl</code>需要指定数据源，所以我们将配置好的数据源对象<code>DataSource</code>注入进来并配置到<code>JdbcTokenRepositoryImpl</code>的<code>dataSource</code>属性中。<code>createTableOnStartup</code>属性用于是否启动项目时创建保存token信息的数据表，这里设置为false，我们自己手动创建。</p><p>查看<code>JdbcTokenRepositoryImpl</code>的源码，可以看到其包含了一个<code>CREATE_TABLE_SQL</code>属性：</p><p><img src="img/QQ截图20180717102926.png" alt="QQ截图20180717102926.png"></p><p>这个其实就是用于保存token对象数据表的SQL语句，我们复制出来手动执行创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> persistent_logins (</span><br><span class="line">    username <span class="built_in">VARCHAR</span> (<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    series <span class="built_in">VARCHAR</span> (<span class="number">64</span>) PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    token <span class="built_in">VARCHAR</span> (<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    last_used <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p><h2 id="修改登录页"><a href="#修改登录页" class="headerlink" title="修改登录页"></a>修改登录页</h2><p>完成上述配置后，我们稍微改造下登录页，加入记住我的勾选选项：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"remember-me"</span>/&gt;</span> 记住我</span><br></pre></td></tr></table></figure><p></p><p>其中<code>name</code>属性必须为<code>remember-me</code>。</p><h2 id="配置生效"><a href="#配置生效" class="headerlink" title="配置生效"></a>配置生效</h2><p>最后我们需要在Spring Security的认证流程中启用记住我的功能，在<code>BrowserSecurityConfig</code>的<code>configure</code>方法中开启记住我功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.addFilterBefore(validateCodeFilter, UsernamePasswordAuthenticationFilter.class) <span class="comment">// 添加验证码校验过滤器</span></span><br><span class="line">            .formLogin() <span class="comment">// 表单登录</span></span><br><span class="line">                <span class="comment">// http.httpBasic() // HTTP Basic</span></span><br><span class="line">                .loginPage(<span class="string">"/authentication/require"</span>) <span class="comment">// 登录跳转 URL</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 处理表单登录 URL</span></span><br><span class="line">                .successHandler(authenticationSucessHandler) <span class="comment">// 处理登录成功</span></span><br><span class="line">                .failureHandler(authenticationFailureHandler) <span class="comment">// 处理登录失败</span></span><br><span class="line">                .and()</span><br><span class="line">            .rememberMe()</span><br><span class="line">                .tokenRepository(persistentTokenRepository()) <span class="comment">// 配置 token 持久化仓库</span></span><br><span class="line">                .tokenValiditySeconds(<span class="number">3600</span>) <span class="comment">// remember 过期时间，单为秒</span></span><br><span class="line">                .userDetailsService(userDetailService) <span class="comment">// 处理自动登录逻辑</span></span><br><span class="line">            .and()</span><br><span class="line">                .authorizeRequests() <span class="comment">// 授权配置</span></span><br><span class="line">                .antMatchers(<span class="string">"/authentication/require"</span>,</span><br><span class="line">                        <span class="string">"/login.html"</span>,</span><br><span class="line">                        <span class="string">"/image/code"</span>).permitAll() <span class="comment">// 无需认证的请求路径</span></span><br><span class="line">                .anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">                .authenticated() <span class="comment">// 都需要认证</span></span><br><span class="line">            .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>rememberMe()</code>用于开启记住我功能；<code>tokenRepository(persistentTokenRepository())</code>用于指定token持久化方法；<code>tokenValiditySeconds</code>配置了token的有效时长，单为为秒；<code>userDetailsService(userDetailService)</code>用于处理通过token对象自动登录，这里为我们自定义的<code>UserDetailsService</code>接口实现。</p><p>配置好后，重启项目，登录页面如下所示：</p><p><img src="img/QQ截图20180717104322.png" alt="QQ截图20180717104322.png"></p><p>比较难看，无伤大雅。勾选并成功登录后，可以看到网页多了个remember-me的cookie对象：</p><p><img src="img/QQ截图20180717104759.png" alt="QQ截图20180717104759.png"></p><p>查看数据库表persistent_logins：</p><p><img src="img/QQ截图20180717105037.png" alt="QQ截图20180717105037.png"></p><p>可以看到token信息已经成功持久化了，并且浏览器也成功生成了相应的cookie。在cookie未失效之前，无论是重开浏览器或者重启项目，用户都无需再次登录就可以访问系统资源了。</p><blockquote><p>源码链接 <a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/37.Spring-Security-RememberMe" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/37.Spring-Security-RememberMe</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在网站的登录页面中，记住我选项是一个很常见的功能，勾选记住我后在一段时间内，用户无需进行登录操作就可以访问系统资源。在Spring Security中添加记住我功能很简单，大致过程是：当用户勾选了记住我选项并登录成功后，Spring Security会生成一个token标识，然后将该token标识持久化到数据库，并且生成一个与该token相对应的cookie返回给浏览器。当用户过段时间再次访问系统时，如果该cookie没有过期，Spring Security便会根据cookie包含的信息从数据库中获取相应的token信息，然后帮用户自动完成登录操作。
    
    </summary>
    
    
      <category term="Security" scheme="http://mrbird.cc/tags/Security/"/>
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Security" scheme="http://mrbird.cc/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security添加图形验证码</title>
    <link href="http://mrbird.cc/Spring-Security-ValidateCode.html"/>
    <id>http://mrbird.cc/Spring-Security-ValidateCode.html</id>
    <published>2018-05-05T01:50:41.000Z</published>
    <updated>2018-09-14T01:11:17.297Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>添加验证码大致可以分为三个步骤：根据随机数生成验证码图片；将验证码图片显示到登录页面；认证流程中加入验证码校验。Spring Security的认证校验是由<code>UsernamePasswordAuthenticationFilter</code>过滤器完成的，所以我们的验证码校验逻辑应该在这个过滤器之前。下面一起学习下如何在上一节<a href="/Spring-Security-Authentication.html">Spring Security自定义用户认证</a>的基础上加入验证码校验功能。<a id="more"></a></p><h2 id="生成图形验证码"><a href="#生成图形验证码" class="headerlink" title="生成图形验证码"></a>生成图形验证码</h2><p>验证码功能需要用到<code>spring-social-config</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.social<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-social-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>首先定义一个验证码对象ImageCode：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BufferedImage image;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageCode</span><span class="params">(BufferedImage image, String code, <span class="keyword">int</span> expireIn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.image = image;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.expireTime = LocalDateTime.now().plusSeconds(expireIn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageCode</span><span class="params">(BufferedImage image, String code, LocalDateTime expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.image = image;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.expireTime = expireTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isExpire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().isAfter(expireTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// get,set 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ImageCode对象包含了三个属性：<code>image</code>图片，<code>code</code>验证码和<code>expireTime</code>过期时间。<code>isExpire</code>方法用于判断验证码是否已过期。</p><p>接着定义一个ValidateCodeController，用于处理生成验证码请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SESSION_KEY_IMAGE_CODE = <span class="string">"SESSION_KEY_IMAGE_CODE"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SessionStrategy sessionStrategy = <span class="keyword">new</span> HttpSessionSessionStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/code/image"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCode</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ImageCode imageCode = createImageCode();</span><br><span class="line">        sessionStrategy.setAttribute(<span class="keyword">new</span> ServletWebRequest(request), SESSION_KEY, imageCode);</span><br><span class="line">        ImageIO.write(imageCode.getImage(), <span class="string">"jpeg"</span>, response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>createImageCode</code>方法用于生成验证码对象，<code>org.springframework.social.connect.web.HttpSessionSessionStrategy</code>对象封装了一些处理Session的方法，包含了<code>setAttribute</code>、<code>getAttribute</code>和<code>removeAttribute</code>方法，具体可以查看该类的源码。使用<code>sessionStrategy</code>将生成的验证码对象存储到Session中，并通过IO流将生成的图片输出到登录页面上。</p><p>其中<code>createImageCode</code>方法代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ImageCode <span class="title">createImageCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> width = <span class="number">100</span>; <span class="comment">// 验证码图片宽度</span></span><br><span class="line">    <span class="keyword">int</span> height = <span class="number">36</span>; <span class="comment">// 验证码图片长度</span></span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">4</span>; <span class="comment">// 验证码位数</span></span><br><span class="line">    <span class="keyword">int</span> expireIn = <span class="number">60</span>; <span class="comment">// 验证码有效时间 60s</span></span><br><span class="line"></span><br><span class="line">    BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">    Graphics g = image.getGraphics();</span><br><span class="line"></span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    g.setColor(getRandColor(<span class="number">200</span>, <span class="number">250</span>));</span><br><span class="line">    g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    g.setFont(<span class="keyword">new</span> Font(<span class="string">"Times New Roman"</span>, Font.ITALIC, <span class="number">20</span>));</span><br><span class="line">    g.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">155</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = random.nextInt(width);</span><br><span class="line">        <span class="keyword">int</span> y = random.nextInt(height);</span><br><span class="line">        <span class="keyword">int</span> xl = random.nextInt(<span class="number">12</span>);</span><br><span class="line">        <span class="keyword">int</span> yl = random.nextInt(<span class="number">12</span>);</span><br><span class="line">        g.drawLine(x, y, x + xl, y + yl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StringBuilder sRand = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        String rand = String.valueOf(random.nextInt(<span class="number">10</span>));</span><br><span class="line">        sRand.append(rand);</span><br><span class="line">        g.setColor(<span class="keyword">new</span> Color(<span class="number">20</span> + random.nextInt(<span class="number">110</span>), <span class="number">20</span> + random.nextInt(<span class="number">110</span>), <span class="number">20</span> + random.nextInt(<span class="number">110</span>)));</span><br><span class="line">        g.drawString(rand, <span class="number">13</span> * i + <span class="number">6</span>, <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    g.dispose();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ImageCode(image, sRand.toString(), expireIn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Color <span class="title">getRandColor</span><span class="params">(<span class="keyword">int</span> fc, <span class="keyword">int</span> bc)</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">if</span> (fc &gt; <span class="number">255</span>) &#123;</span><br><span class="line">        fc = <span class="number">255</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bc &gt; <span class="number">255</span>) &#123;</span><br><span class="line">        bc = <span class="number">255</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> r = fc + random.nextInt(bc - fc);</span><br><span class="line">    <span class="keyword">int</span> g = fc + random.nextInt(bc - fc);</span><br><span class="line">    <span class="keyword">int</span> b = fc + random.nextInt(bc - fc);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Color(r, g, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>生成验证码的方法写好后，接下来开始改造登录页面。</p><h2 id="改造登录页"><a href="#改造登录页" class="headerlink" title="改造登录页"></a>改造登录页</h2><p>在登录页面加上如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"display: inline"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"imageCode"</span> <span class="attr">placeholder</span>=<span class="string">"验证码"</span> <span class="attr">style</span>=<span class="string">"width: 50%;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/code/image"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><code>&lt;img&gt;</code>标签的<code>src</code>属性对应ValidateController的<code>createImageCode</code>方法。</p><p>要使生成验证码的请求不被拦截，需要在<code>BrowserSecurityConfig</code>的<code>configure</code>方法中配置免拦截：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.formLogin() <span class="comment">// 表单登录</span></span><br><span class="line">            <span class="comment">// http.httpBasic() // HTTP Basic</span></span><br><span class="line">            .loginPage(<span class="string">"/authentication/require"</span>) <span class="comment">// 登录跳转 URL</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 处理表单登录 URL</span></span><br><span class="line">            .successHandler(authenticationSucessHandler) <span class="comment">// 处理登录成功</span></span><br><span class="line">            .failureHandler(authenticationFailureHandler) <span class="comment">// 处理登录失败</span></span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests() <span class="comment">// 授权配置</span></span><br><span class="line">            .antMatchers(<span class="string">"/authentication/require"</span>,</span><br><span class="line">                    <span class="string">"/login.html"</span>,</span><br><span class="line">                    <span class="string">"/image/code"</span>).permitAll() <span class="comment">// 无需认证的请求路径</span></span><br><span class="line">            .anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">            .authenticated() <span class="comment">// 都需要认证</span></span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，访问<a href="http://localhost:8080/login.html" target="_blank" rel="noopener">http://localhost:8080/login.html</a>，效果如下：</p><p><img src="img/QQ截图20180715105219.png" alt="QQ截图20180715105219.png"></p><h2 id="认证流程添加验证码校验"><a href="#认证流程添加验证码校验" class="headerlink" title="认证流程添加验证码校验"></a>认证流程添加验证码校验</h2><p>在校验验证码的过程中，可能会抛出各种验证码类型的异常，比如“验证码错误”、“验证码已过期”等，所以我们定义一个验证码类型的异常类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeException</span> <span class="keyword">extends</span> <span class="title">AuthenticationException</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5022575393500654458L</span>;</span><br><span class="line"></span><br><span class="line">    ValidateCodeException(String message) &#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>注意，这里继承的是<code>AuthenticationException</code>而不是<code>Exception</code>。</p><p>我们都知道，Spring Security实际上是由许多过滤器组成的过滤器链，处理用户登录逻辑的过滤器为<code>UsernamePasswordAuthenticationFilter</code>，而验证码校验过程应该是在这个过滤器之前的，即只有验证码校验通过后采去校验用户名和密码。由于Spring Security并没有直接提供验证码校验相关的过滤器接口，所以我们需要自己定义一个验证码校验的过滤器<code>ValidateCodeFilter</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationFailureHandler authenticationFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SessionStrategy sessionStrategy = <span class="keyword">new</span> HttpSessionSessionStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, </span></span></span><br><span class="line"><span class="function"><span class="params">    	FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.equalsIgnoreCase(<span class="string">"/login"</span>, httpServletRequest.getRequestURI())</span><br><span class="line">                &amp;&amp; StringUtils.equalsIgnoreCase(httpServletRequest.getMethod(), <span class="string">"post"</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                validateCode(<span class="keyword">new</span> ServletWebRequest(httpServletRequest));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ValidateCodeException e) &#123;</span><br><span class="line">                authenticationFailureHandler.onAuthenticationFailure(httpServletRequest, httpServletResponse, e);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(httpServletRequest, httpServletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateCode</span><span class="params">(ServletWebRequest servletWebRequest)</span> <span class="keyword">throws</span> ServletRequestBindingException </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ValidateCodeFilter</code>继承了<code>org.springframework.web.filter.OncePerRequestFilter</code>，该过滤器只会执行一次。</p><p>在<code>doFilterInternal</code>方法中我们判断了请求URL是否为<code>/login</code>，该路径对应登录<code>form</code>表单的<code>action</code>路径，请求的方法是否为<strong><code>POST</code></strong>，是的话进行验证码校验逻辑，否则直接执行<code>filterChain.doFilter</code>让代码往下走。当在验证码校验的过程中捕获到异常时，调用Spring Security的校验失败处理器<code>AuthenticationFailureHandler</code>进行处理。</p><p><code>validateCode</code>的校验逻辑如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validateCode</span><span class="params">(ServletWebRequest servletWebRequest)</span> <span class="keyword">throws</span> ServletRequestBindingException </span>&#123;</span><br><span class="line">    ImageCode codeInSession = (ImageCode) sessionStrategy.getAttribute(servletWebRequest, ValidateController.SESSION_KEY);</span><br><span class="line">    String codeInRequest = ServletRequestUtils.getStringParameter(servletWebRequest.getRequest(), <span class="string">"imageCode"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(codeInRequest)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码不能为空！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (codeInSession == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码不存在！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (codeInSession.isExpire()) &#123;</span><br><span class="line">        sessionStrategy.removeAttribute(servletWebRequest, ValidateController.SESSION_KEY);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码已过期！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.equalsIgnoreCase(codeInSession.getCode(), codeInRequest)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码不正确！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sessionStrategy.removeAttribute(servletWebRequest, ValidateController.SESSION_KEY);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们分别从<code>Session</code>中获取了<code>ImageCode</code>对象和请求参数<code>imageCode</code>（对应登录页面的验证码<code>&lt;input&gt;</code>框<code>name</code>属性）,然后进行了各种判断并抛出相应的异常。当验证码过期或者验证码校验通过时，我们便可以删除<code>Session</code>中的<code>ImageCode</code>属性了。</p><p>验证码校验过滤器定义好了，怎么才能将其添加到<code>UsernamePasswordAuthenticationFilter</code>前面呢？很简单，只需要在<code>BrowserSecurityConfig</code>的<code>configure</code>方法中添加些许配置即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ValidateCodeFilter validateCodeFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.addFilterBefore(validateCodeFilter, UsernamePasswordAuthenticationFilter.class) <span class="comment">// 添加验证码校验过滤器</span></span><br><span class="line">            .formLogin() <span class="comment">// 表单登录</span></span><br><span class="line">            <span class="comment">// http.httpBasic() // HTTP Basic</span></span><br><span class="line">            .loginPage(<span class="string">"/authentication/require"</span>) <span class="comment">// 登录跳转 URL</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 处理表单登录 URL</span></span><br><span class="line">            .successHandler(authenticationSucessHandler) <span class="comment">// 处理登录成功</span></span><br><span class="line">            .failureHandler(authenticationFailureHandler) <span class="comment">// 处理登录失败</span></span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests() <span class="comment">// 授权配置</span></span><br><span class="line">            .antMatchers(<span class="string">"/authentication/require"</span>,</span><br><span class="line">                    <span class="string">"/login.html"</span>,</span><br><span class="line">                    <span class="string">"/image/code"</span>).permitAll() <span class="comment">// 无需认证的请求路径</span></span><br><span class="line">            .anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">            .authenticated() <span class="comment">// 都需要认证</span></span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，我们注入了<code>ValidateCodeFilter</code>，然后通过<code>addFilterBefore</code>方法将<code>ValidateCodeFilter</code>验证码校验过滤器添加到了<code>UsernamePasswordAuthenticationFilter</code>前面。</p><p>大功告成，重启项目，访问<a href="http://localhost:8080/login.html" target="_blank" rel="noopener">http://localhost:8080/login.html</a>，当不输入验证码时点击登录，页面显示如下：</p><p><img src="img/QQ截图20180715114011.png" alt="QQ截图20180715114011.png"></p><p>当输入错误的验证码时点击登录，页面显示如下：</p><p><img src="img/QQ截图20180715114052.png" alt="QQ截图20180715114052.png"></p><p>当页面加载60秒后再输入验证码点击登录，页面显示如下：</p><p><img src="img/QQ截图20180715114539.png" alt="QQ截图20180715114539.png"></p><p>当验证码通过，并且用户名密码正确时，页面显示如下：</p><p><img src="img/QQ截图20180715114654.png" alt="QQ截图20180715114654.png"></p><blockquote><p>源码链接 <a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/36.Spring-Security-ValidateCode" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/36.Spring-Security-ValidateCode</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;添加验证码大致可以分为三个步骤：根据随机数生成验证码图片；将验证码图片显示到登录页面；认证流程中加入验证码校验。Spring Security的认证校验是由&lt;code&gt;UsernamePasswordAuthenticationFilter&lt;/code&gt;过滤器完成的，所以我们的验证码校验逻辑应该在这个过滤器之前。下面一起学习下如何在上一节&lt;a href=&quot;/Spring-Security-Authentication.html&quot;&gt;Spring Security自定义用户认证&lt;/a&gt;的基础上加入验证码校验功能。
    
    </summary>
    
    
      <category term="Security" scheme="http://mrbird.cc/tags/Security/"/>
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Security" scheme="http://mrbird.cc/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security自定义用户认证</title>
    <link href="http://mrbird.cc/Spring-Security-Authentication.html"/>
    <id>http://mrbird.cc/Spring-Security-Authentication.html</id>
    <published>2018-05-04T12:57:51.000Z</published>
    <updated>2018-09-14T01:10:51.307Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>在<a href="/Spring-Boot&amp;Spring-Security.html">Spring Boot中开启Spring Security</a>一节中我们简单搭建了个Spring Boot + Spring Security的项目，认证的用户名和密码都是由Spring Security生成。Spring Security支持我们自定义认证的过程，如处理用户信息获取逻辑，使用我们自定义的登录页面替换Spring Security默认的登录页及自定义登录成功或失败后的处理逻辑等。这里将在上一节的源码基础上进行改造。<a id="more"></a></p><h2 id="自定义认证过程"><a href="#自定义认证过程" class="headerlink" title="自定义认证过程"></a>自定义认证过程</h2><p>自定义认证的过程需要实现Spring Security提供的<code>UserDetailService</code>接口，该接口只有一个抽象方法<code>loadUserByUsername</code>，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="function">UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>loadUserByUsername</code>方法返回一个<code>UserDetail</code>对象，该对象也是一个接口，包含一些用于描述用户信息的方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这些方法的含义如下：</p><ul><li><p><code>getAuthorities</code>获取用户包含的权限，返回权限集合，权限是一个继承了<code>GrantedAuthority</code>的对象；</p></li><li><p><code>getPassword</code>和<code>getUsername</code>用于获取密码和用户名；</p></li><li><p><code>isAccountNonExpired</code>方法返回boolean类型，用于判断账户是否未过期，未过期返回true反之返回false；</p></li><li><p><code>isAccountNonLocked</code>方法用于判断账户是否未锁定；</p></li><li><p><code>isCredentialsNonExpired</code>用于判断用户凭证是否没过期，即密码是否未过期；</p></li><li><p><code>isEnabled</code>方法用于判断用户是否可用。</p></li></ul><p>实际中我们可以自定义<code>UserDetails</code>接口的实现类，也可以直接使用Spring Security提供的<code>UserDetails</code>接口实现类<code>org.springframework.security.core.userdetails.User</code>。</p><p>说了那么多，下面我们来开始实现<code>UserDetailService</code>接口的<code>loadUserByUsername</code>方法。</p><p>首先创建一个<code>MyUser</code>对象，用于存放模拟的用户数据（实际中一般从数据库获取，这里为了方便直接模拟）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUser</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3497935890426858541L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> accountNonExpired = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> accountNonLocked= <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> credentialsNonExpired= <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enabled= <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get,set略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接着创建<code>MyUserDetailService</code>实现<code>UserDetailService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟一个用户，替代数据库获取逻辑</span></span><br><span class="line">        MyUser user = <span class="keyword">new</span> MyUser();</span><br><span class="line">        user.setUserName(username);</span><br><span class="line">        user.setPassword(<span class="keyword">this</span>.passwordEncoder.encode(<span class="string">"123456"</span>));</span><br><span class="line">        <span class="comment">// 输出加密后的密码</span></span><br><span class="line">        System.out.println(user.getPassword());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(username, user.getPassword(), user.isEnabled(),</span><br><span class="line">                user.isAccountNonExpired(), user.isCredentialsNonExpired(),</span><br><span class="line">                user.isAccountNonLocked(), AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">"admin"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这里我们使用了<code>org.springframework.security.core.userdetails.User</code>类包含7个参数的构造器，其还包含一个三个参数的构造器<code>User(String username, String password,Collection&lt;? extends GrantedAuthority&gt; authorities)</code>，由于权限参数不能为空，所以这里先使用<code>AuthorityUtils.commaSeparatedStringToAuthorityList</code>方法模拟一个admin的权限，该方法可以将逗号分隔的字符串转换为权限集合。</p><p>此外我们还注入了<code>PasswordEncoder</code>对象，该对象用于密码加密，注入前需要手动配置。我们在<code>BrowserSecurityConfig</code>中配置它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>PasswordEncoder</code>是一个密码加密接口，而<code>BCryptPasswordEncoder</code>是Spring Security提供的一个实现方法，我们也可以自己实现<code>PasswordEncoder</code>。不过Spring Security实现的<code>BCryptPasswordEncoder</code>已经足够强大，它对相同的密码进行加密后可以生成不同的结果。</p><p>这时候重启项目，访问<a href="http://localhost:8080/login" target="_blank" rel="noopener">http://localhost:8080/login</a>，便可以使用任意用户名以及123456作为密码登录系统。我们多次进行登录操作，可以看到控制台输出的加密后的密码如下：</p><p><img src="img/3ieuqei349h39.png" alt="QQ截图20180712210522.png"></p><p>可以看到，<code>BCryptPasswordEncoder</code>对相同的密码生成的结果每次都是不一样的。</p><h2 id="替换默认登录页"><a href="#替换默认登录页" class="headerlink" title="替换默认登录页"></a>替换默认登录页</h2><p>默认的登录页面过于简陋，我们可以自己定义一个登录页面。为了方便起见，我们直接在src/main/resources/resources目录下定义一个login.html（不需要Controller跳转）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/login.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"login-page"</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>账户登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span>=<span class="string">"required"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>要怎么做才能让Spring Security跳转到我们自己定义的登录页面呢？很简单，只需要在<code>BrowserSecurityConfig</code>的<code>configure</code>中添加一些配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.formLogin() <span class="comment">// 表单登录</span></span><br><span class="line">            <span class="comment">// http.httpBasic() // HTTP Basic</span></span><br><span class="line">            .loginPage(<span class="string">"/login.html"</span>) </span><br><span class="line">            .loginProcessingUrl(<span class="string">"/login"</span>)</span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests() <span class="comment">// 授权配置</span></span><br><span class="line">            .antMatchers(<span class="string">"/login.html"</span>).permitAll()</span><br><span class="line">            .anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">            .authenticated(); <span class="comment">// 都需要认证</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中<code>.loginPage(&quot;/login.html&quot;)</code>指定了跳转到登录页面的请求URL，<code>.loginProcessingUrl(&quot;/login&quot;)</code>对应登录页面form表单的<code>action=&quot;/login&quot;</code>，<code>.antMatchers(&quot;/login.html&quot;).permitAll()</code>表示跳转到登录页面的请求不被拦截，否则会进入无限循环。</p><p>这时候启动系统，访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a>，会看到页面已经被重定向到了<a href="http://localhost:8080/login.html" target="_blank" rel="noopener">http://localhost:8080/login.html</a>：</p><p><img src="img/QQ截图20180713211112.png" alt="QQ截图20180713211112.png"></p><p>输入用户名和密码发现页面报错：</p><p><img src="img/QQ截图20180713212002.png" alt="QQ截图20180713212002.png"></p><p>我们先把CSRF攻击防御关了，修改<code>BrowserSecurityConfig</code>的<code>configure</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Override</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.formLogin() <span class="comment">// 表单登录</span></span><br><span class="line">            <span class="comment">// http.httpBasic() // HTTP Basic</span></span><br><span class="line">            .loginPage(<span class="string">"/login.html"</span>) <span class="comment">// 登录跳转 URL</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 处理表单登录 URL</span></span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests() <span class="comment">// 授权配置</span></span><br><span class="line">            .antMatchers(<span class="string">"/login.html"</span>).permitAll() <span class="comment">// 登录跳转 URL 无需认证</span></span><br><span class="line">            .anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">            .authenticated() <span class="comment">// 都需要认证</span></span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目便可正常登录。</p><p>假如现在有这样一个需求：在未登录的情况下，当用户访问html资源的时候跳转到登录页，否则返回JSON格式数据，状态码为401。</p><p>要实现这个功能我们将<code>loginPage</code>的URL改为<code>/authentication/require</code>，并且在<code>antMatchers</code>方法中加入该URL，让其免拦截:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.formLogin() <span class="comment">// 表单登录</span></span><br><span class="line">            <span class="comment">// http.httpBasic() // HTTP Basic</span></span><br><span class="line">            .loginPage(<span class="string">"/authentication/require"</span>) <span class="comment">// 登录跳转 URL</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 处理表单登录 URL</span></span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests() <span class="comment">// 授权配置</span></span><br><span class="line">            .antMatchers(<span class="string">"/authentication/require"</span>, <span class="string">"/login.html"</span>).permitAll() <span class="comment">// 登录跳转 URL 无需认证</span></span><br><span class="line">            .anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">            .authenticated() <span class="comment">// 都需要认证</span></span><br><span class="line">            .and().csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后定义一个控制器<code>BrowserSecurityController</code>，处理这个请求：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RequestCache requestCache = <span class="keyword">new</span> HttpSessionRequestCache();</span><br><span class="line">    <span class="keyword">private</span> RedirectStrategy redirectStrategy = <span class="keyword">new</span> DefaultRedirectStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/authentication/require"</span>)</span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.UNAUTHORIZED)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">requireAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SavedRequest savedRequest = requestCache.getRequest(request, response);</span><br><span class="line">        <span class="keyword">if</span> (savedRequest != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String targetUrl = savedRequest.getRedirectUrl();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.endsWithIgnoreCase(targetUrl, <span class="string">".html"</span>))</span><br><span class="line">                redirectStrategy.sendRedirect(request, response, <span class="string">"/login.html"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"访问的资源需要身份认证！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中<code>HttpSessionRequestCache</code>为Spring Security提供的用于缓存请求的对象，通过调用它的<code>getRequest</code>方法可以获取到本次请求的HTTP信息。<code>DefaultRedirectStrategy</code>的<code>sendRedirect</code>为Spring Security提供的用于处理重定向的方法。</p><p>上面代码获取了引发跳转的请求，根据请求是否以<code>.html</code>为结尾来对应不同的处理方法。如果是以<code>.html</code>结尾，那么重定向到登录页面，否则返回”访问的资源需要身份认证！”信息，并且HTTP状态码为401（<code>HttpStatus.UNAUTHORIZED</code>）。</p><p>这样当我们访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a>的时候页面便会跳转到<a href="http://localhost:8080/authentication/require" target="_blank" rel="noopener">http://localhost:8080/authentication/require</a>，并且输出”访问的资源需要身份认证！”，当我们访问<a href="http://localhost:8080/hello.html" target="_blank" rel="noopener">http://localhost:8080/hello.html</a>的时候，页面将会跳转到登录页面。</p><h2 id="处理成功和失败"><a href="#处理成功和失败" class="headerlink" title="处理成功和失败"></a>处理成功和失败</h2><p>Spring Security有一套默认的处理登录成功和失败的方法：当用户登录成功时，页面会跳转会引发登录的请求，比如在未登录的情况下访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a>，页面会跳转到登录页，登录成功后再跳转回来；登录失败时则是跳转到Spring Security默认的错误提示页面。下面我们通过一些自定义配置来替换这套默认的处理机制。</p><h3 id="自定义登录成功逻辑"><a href="#自定义登录成功逻辑" class="headerlink" title="自定义登录成功逻辑"></a>自定义登录成功逻辑</h3><p>要改变默认的处理成功逻辑很简单，只需要实现<code>org.springframework.security.web.authentication.AuthenticationSuccessHandler</code>接口的<code>onAuthenticationSuccess</code>方法即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSucessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        response.getWriter().write(mapper.writeValueAsString(authentication));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中<code>Authentication</code>参数既包含了认证请求的一些信息，比如IP，请求的SessionId等，也包含了用户信息，即前面提到的<code>User</code>对象。通过上面这个配置，用户登录成功后页面将打印出<code>Authentication</code>对象的信息。</p><p>要使这个配置生效，我们还的在<code>BrowserSecurityConfig</code>的<code>configure</code>中配置它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyAuthenticationSucessHandler authenticationSucessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.formLogin() <span class="comment">// 表单登录</span></span><br><span class="line">                <span class="comment">// http.httpBasic() // HTTP Basic</span></span><br><span class="line">                .loginPage(<span class="string">"/authentication/require"</span>) <span class="comment">// 登录跳转 URL</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 处理表单登录 URL</span></span><br><span class="line">                .successHandler(authenticationSucessHandler) <span class="comment">// 处理登录成功</span></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests() <span class="comment">// 授权配置</span></span><br><span class="line">                .antMatchers(<span class="string">"/authentication/require"</span>, <span class="string">"/login.html"</span>).permitAll() <span class="comment">// 登录跳转 URL 无需认证</span></span><br><span class="line">                .anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">                .authenticated() <span class="comment">// 都需要认证</span></span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们将<code>MyAuthenticationSucessHandler</code>注入进来，并通过<code>successHandler</code>方法进行配置。</p><p>这时候重启项目登录后页面将会输出如下JSON信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"authorities"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"authority"</span>: <span class="string">"admin"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"details"</span>: &#123;</span><br><span class="line">    <span class="attr">"remoteAddress"</span>: <span class="string">"0:0:0:0:0:0:0:1"</span>,</span><br><span class="line">    <span class="attr">"sessionId"</span>: <span class="string">"8D50BAF811891F4397E21B4B537F0544"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"authenticated"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"principal"</span>: &#123;</span><br><span class="line">    <span class="attr">"password"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"mrbird"</span>,</span><br><span class="line">    <span class="attr">"authorities"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"authority"</span>: <span class="string">"admin"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"accountNonExpired"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"accountNonLocked"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"credentialsNonExpired"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"enabled"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"credentials"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"mrbird"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>像<code>password</code>，<code>credentials</code>这些敏感信息，Spring Security已经将其屏蔽。</p><p>除此之外，我们也可以在登录成功后做页面的跳转，修改<code>MyAuthenticationSucessHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSucessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RequestCache requestCache = <span class="keyword">new</span> HttpSessionRequestCache();</span><br><span class="line">    <span class="keyword">private</span> RedirectStrategy redirectStrategy = <span class="keyword">new</span> DefaultRedirectStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Authentication authentication)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SavedRequest savedRequest = requestCache.getRequest(request, response);</span><br><span class="line">        redirectStrategy.sendRedirect(request, response, savedRequest.getRedirectUrl());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>通过上面配置，登录成功后页面将跳转回引发跳转的页面。如果想指定跳转的页面，比如跳转到<code>/index</code>，可以将<code>savedRequest.getRedirectUrl()</code>修改为<code>/index</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationSucessHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RedirectStrategy redirectStrategy = <span class="keyword">new</span> DefaultRedirectStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Authentication authentication)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        redirectStrategy.sendRedirect(request, response, <span class="string">"/index"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后在TestController中定义一个处理该请求的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>登录成功后，便可以使用<code>SecurityContextHolder.getContext().getAuthentication()</code>获取到<code>Authentication</code>对象信息。除了通过这种方式获取<code>Authentication</code>对象信息外，也可以使用下面这种方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">index</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authentication;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，登录成功后，页面将跳转到<a href="http://localhost:8080/index" target="_blank" rel="noopener">http://localhost:8080/index</a>：</p><p><img src="img/QQ截图20180714103649.png" alt="QQ截图20180714103649.png"></p><h3 id="自定义登录失败逻辑"><a href="#自定义登录失败逻辑" class="headerlink" title="自定义登录失败逻辑"></a>自定义登录失败逻辑</h3><p>和自定义登录成功处理逻辑类似，自定义登录失败处理逻辑需要实现<code>org.springframework.security.web.authentication.AuthenticationFailureHandler</code>的<code>onAuthenticationFailure</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        AuthenticationException exception)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>onAuthenticationFailure</code>方法的<code>AuthenticationException</code>参数是一个抽象类，Spring Security根据登录失败的原因封装了许多对应的实现类，查看<code>AuthenticationException</code>的Hierarchy：</p><p><img src="img/QQ截图20180714104551.png" alt="QQ截图20180714104551.png"></p><p>不同的失败原因对应不同的异常，比如用户名或密码错误对应的是<code>BadCredentialsException</code>，用户不存在对应的是<code>UsernameNotFoundException</code>，用户被锁定对应的是<code>LockedException</code>等。</p><p>假如我们需要在登录失败的时候返回失败信息，可以这样处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthenticationFailureHandler</span> <span class="keyword">implements</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        AuthenticationException exception)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        response.getWriter().write(mapper.writeValueAsString(exception.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>状态码定义为500（<code>HttpStatus.INTERNAL_SERVER_ERROR.value()</code>），即系统内部异常。</p><p>同样的，我们需要在<code>BrowserSecurityConfig</code>的<code>configure</code>中配置它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyAuthenticationSucessHandler authenticationSucessHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyAuthenticationFailureHandler authenticationFailureHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.formLogin() <span class="comment">// 表单登录</span></span><br><span class="line">                <span class="comment">// http.httpBasic() // HTTP Basic</span></span><br><span class="line">                .loginPage(<span class="string">"/authentication/require"</span>) <span class="comment">// 登录跳转 URL</span></span><br><span class="line">                .loginProcessingUrl(<span class="string">"/login"</span>) <span class="comment">// 处理表单登录 URL</span></span><br><span class="line">                .successHandler(authenticationSucessHandler) <span class="comment">// 处理登录成功</span></span><br><span class="line">                .failureHandler(authenticationFailureHandler) <span class="comment">// 处理登录失败</span></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests() <span class="comment">// 授权配置</span></span><br><span class="line">                .antMatchers(<span class="string">"/authentication/require"</span>, <span class="string">"/login.html"</span>).permitAll() <span class="comment">// 登录跳转 URL 无需认证</span></span><br><span class="line">                .anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">                .authenticated() <span class="comment">// 都需要认证</span></span><br><span class="line">                .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，当输入错误的密码时，页面输出如下：</p><p><img src="img/QQ截图20180714105620.png" alt="QQ截图20180714105620.png"></p><p>源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/35.Spring-Security-Authentication" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/35.Spring-Security-Authentication</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;在&lt;a href=&quot;/Spring-Boot&amp;amp;Spring-Security.html&quot;&gt;Spring Boot中开启Spring Security&lt;/a&gt;一节中我们简单搭建了个Spring Boot + Spring Security的项目，认证的用户名和密码都是由Spring Security生成。Spring Security支持我们自定义认证的过程，如处理用户信息获取逻辑，使用我们自定义的登录页面替换Spring Security默认的登录页及自定义登录成功或失败后的处理逻辑等。这里将在上一节的源码基础上进行改造。
    
    </summary>
    
    
      <category term="Security" scheme="http://mrbird.cc/tags/Security/"/>
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Security" scheme="http://mrbird.cc/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot中开启Spring Security</title>
    <link href="http://mrbird.cc/Spring-Boot&amp;Spring-Security.html"/>
    <id>http://mrbird.cc/Spring-Boot&amp;Spring-Security.html</id>
    <published>2018-04-30T12:41:00.000Z</published>
    <updated>2018-08-21T08:07:59.105Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>Spring Security是一款基于Spring的安全框架，主要包含认证和授权两大安全模块，和另外一款流行的安全框架Apache Shiro相比，它拥有更为强大的功能。Spring Security也可以轻松的自定义扩展以满足各种需求，并且对常见的Web安全攻击提供了防护支持。如果你的Web框架选择的是Spring，那么在安全方面Spring Security会是一个不错的选择。</p><p>这里我们使用Spring Boot来集成Spring Security，Spring Boot版本为<code>1.5.14.RELEASE</code>，Spring Security版本为<code>4.2.7RELEASE</code>。<a id="more"></a></p><h2 id="开启Spring-Security"><a href="#开启Spring-Security" class="headerlink" title="开启Spring Security"></a>开启Spring Security</h2><p>创建一个Spring Boot项目，然后引入spring-boot-starter-security：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>接下来我们创建一个TestController，对外提供一个<code>/hello</code>服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello spring security"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这时候我们直接启动项目，访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a>，可看到页面弹出了个HTTP Basic认证框：</p><p><img src="img/QQ截图20180707095933.png" alt="QQ截图20180707095933.png"></p><p>当Spring项目中引入了Spring Security依赖的时候，项目会默认开启如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">  basic:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><p>这个配置开启了一个HTTP basic类型的认证，所有服务的访问都必须先过这个认证，默认的用户名为user，密码由Sping Security自动生成，回到IDE的控制台，可以找到密码信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using default security password: e9ed391c-93de-4611-ac87-d871d9e749ac</span><br></pre></td></tr></table></figure><p></p><p>输入用户名user，密码e9ed391c-93de-4611-ac87-d871d9e749ac后，我们便可以成功访问<code>/hello</code>接口。</p><h2 id="基于表单认证"><a href="#基于表单认证" class="headerlink" title="基于表单认证"></a>基于表单认证</h2><p>我们可以通过一些配置将HTTP Basic认证修改为基于表单的认证方式。</p><p>创建一个配置类<code>BrowserSecurityConfig</code>继承<code>org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</code>这个抽象类并重写<code>configure(HttpSecurity http)</code>方法。<code>WebSecurityConfigurerAdapter</code>是由Spring Security提供的Web应用安全配置的适配器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.formLogin() <span class="comment">// 表单方式</span></span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests() <span class="comment">// 授权配置</span></span><br><span class="line">                .anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">                .authenticated(); <span class="comment">// 都需要认证</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Spring Security提供了这种链式的方法调用。上面配置指定了认证方式为表单登录，并且所有请求都需要进行认证。这时候我们重启项目，再次访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a>，可以看到认证方式已经是form表单的方式了：</p><p><img src="img/QQ截图20180707102535.png" alt="QQ截图20180707102535.png"></p><p>用户名依旧是user，密码由Spring Security自动生成。当输入凭证错误时，页面上将显示错误信息：</p><p><img src="img/QQ截图20180707103009.png" alt="QQ截图20180707103009.png"></p><p>如果需要换回HTTP Basic的认证方式，我们只需要简单修改<code>configure</code>方法中的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// http.formLogin() // 表单方式</span></span><br><span class="line">    http.httpBasic() <span class="comment">// HTTP Basic方式</span></span><br><span class="line">            .and()</span><br><span class="line">            .authorizeRequests() <span class="comment">// 授权配置</span></span><br><span class="line">            .anyRequest()  <span class="comment">// 所有请求</span></span><br><span class="line">            .authenticated(); <span class="comment">// 都需要认证</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>上面我们开启了一个最简单的Spring Security安全配置，下面我们来了解下Spring Security的基本原理。通过上面的的配置，代码的执行过程可以简化为下图表示：</p><p><img src="img/QQ截图20180707111356.png" alt="QQ截图20180707111356.png"></p><p>如上图所示，Spring Security包含了众多的过滤器，这些过滤器形成了一条链，所有请求都必须通过这些过滤器后才能成功访问到资源。其中<code>UsernamePasswordAuthenticationFilter</code>过滤器用于处理基于表单方式的登录认证，而<code>BasicAuthenticationFilter</code>用于处理基于HTTP Basic方式的登录验证，后面还可能包含一系列别的过滤器（可以通过相应配置开启）。在过滤器链的末尾是一个名为<code>FilterSecurityInterceptor</code>的拦截器，用于判断当前请求身份认证是否成功，是否有相应的权限，当身份认证失败或者权限不足的时候便会抛出相应的异常。<code>ExceptionTranslateFilter</code>捕获并处理，所以我们在<code>ExceptionTranslateFilter</code>过滤器用于处理了<code>FilterSecurityInterceptor</code>抛出的异常并进行处理，比如需要身份认证时将请求重定向到相应的认证页面，当认证失败或者权限不足时返回相应的提示信息。</p><p>下面我们通过debug来验证这个过程（登录方式改回表单的方式）。</p><p>我们在<code>/hello</code>服务上打个断点：</p><p><img src="img/QQ截图20180707132345.png" alt="QQ截图20180707132345.png"></p><p>在<code>FilterSecurityInterceptor</code>的invoke方法的<code>super.beforeInvocation</code>上打个断点：</p><p><img src="img/QQ截图20180707132824.png" alt="QQ截图20180707132824.png"></p><p>当这行代码执行通过后，便可以调用下一行的<code>doFilter</code>方法来真正调用<code>/hello</code>服务，否则将抛出相应的异常。</p><p>当<code>FilterSecurityInterceptor</code>抛出异常时，异常将由<code>ExceptionTranslateFilter</code>捕获并处理，所以我们在<code>ExceptionTranslateFilter</code>的<code>doFilter</code>方法<code>catch</code>代码块第一行打个断点：</p><p><img src="img/QQ截图20180707133347.png" alt="QQ截图20180707133347.png"></p><p>我们待会模拟的是用户未登录直接访问<code>/hello</code>，所以应该是抛出用户未认证的异常，所以接下来应该跳转到<code>UsernamePasswordAuthenticationFilter</code>处理表单方式的用户认证。在<code>UsernamePasswordAuthenticationFilter</code>的<code>attemptAuthentication</code>方法上打个断点：</p><p><img src="img/QQ截图20180707134106.png" alt="QQ截图20180707134106.png"></p><p>准备完毕后，我们启动项目，然后访问<a href="http://localhost:8080/hello" target="_blank" rel="noopener">http://localhost:8080/hello</a>，代码直接跳转到<code>FilterSecurityInteceptor</code>的断点上：</p><p><img src="img/QQ截图20180707134540.png" alt="QQ截图20180707134540.png"></p><p>往下执行，因为当前请求没有经过身份认证，所以将抛出异常并被<code>ExceptionTranslateFilter</code>捕获：</p><p><img src="img/QQ截图20180707134915.png" alt="QQ截图20180707134540.png"></p><p>捕获异常后重定向到登录表单登录页面，当我们在表单登录页面输入信息点login后，代码跳转到<code>UsernamePasswordAuthenticationFilter</code>过滤器的<code>attemptAuthentication</code>方法上：</p><p><img src="img/QQ截图20180707135743.png" alt="QQ截图20180707135743.png"></p><p>判断用户名和密码是否正确之后，代码又跳回<code>FilterSecurityInterceptor</code>的<code>beforeInvocation</code>方法执行上：</p><p><img src="img/QQ截图20180707140158.png" alt="QQ截图20180707140158.png"></p><p>当认证通过时，<code>FilterSecurityInterceptor</code>代码往下执行<code>doFilter</code>，然后代码最终跳转到<code>/hello</code>上：</p><p><img src="img/QQ截图20180707140532.png" alt="QQ截图20180707140532.png"></p><p>浏览器页面将显示<code>hello spring security</code>信息。</p><p>源码链接：<a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/34.Start-Spring-Security" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/34.Start-Spring-Security</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Spring Security是一款基于Spring的安全框架，主要包含认证和授权两大安全模块，和另外一款流行的安全框架Apache Shiro相比，它拥有更为强大的功能。Spring Security也可以轻松的自定义扩展以满足各种需求，并且对常见的Web安全攻击提供了防护支持。如果你的Web框架选择的是Spring，那么在安全方面Spring Security会是一个不错的选择。&lt;/p&gt;&lt;p&gt;这里我们使用Spring Boot来集成Spring Security，Spring Boot版本为&lt;code&gt;1.5.14.RELEASE&lt;/code&gt;，Spring Security版本为&lt;code&gt;4.2.7RELEASE&lt;/code&gt;。
    
    </summary>
    
    
      <category term="Security" scheme="http://mrbird.cc/tags/Security/"/>
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Security" scheme="http://mrbird.cc/tags/Spring-Security/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot中使用过滤器和拦截器</title>
    <link href="http://mrbird.cc/Spring-Boot-Filter-Interceptor.html"/>
    <id>http://mrbird.cc/Spring-Boot-Filter-Interceptor.html</id>
    <published>2018-04-24T12:33:18.000Z</published>
    <updated>2018-08-21T07:50:04.556Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>过滤器（Filter）和拦截器（Interceptor）是Web项目中常用的两个功能，本文将简单介绍在Spring Boot中使用过滤器和拦截器来计算Controller中方法的执行时长，并且简单对比两者的区别。<a id="more"></a></p><p>现有如下Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>下面通过配置过滤器和拦截器来实现对<code>get</code>方法执行时间计算的功能。</p><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>定义一个<code>TimeFilter</code>类，实现<code>javax.servlet.Filter</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"过滤器初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始执行过滤器"</span>);</span><br><span class="line">        Long start = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">"【过滤器】耗时 "</span> + (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">        System.out.println(<span class="string">"结束执行过滤器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"过滤器销毁"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>TimeFilter</code>重写了<code>Filter</code>的三个方法，方法名称已经很直白的描述了其作用，这里不再赘述。</p><p>要使该过滤器在Spring Boot中生效，还需要一些配置。这里主要有两种配置方式。</p><h3 id="配置方式一"><a href="#配置方式一" class="headerlink" title="配置方式一"></a>配置方式一</h3><p>可通过在<code>TimeFilter</code>上加上如下注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = &#123;<span class="string">"/*"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>@Component</code>注解让<code>TimeFilter</code>成为Spring上下文中的一个Bean，<code>@WebFilter</code>注解的<code>urlPatterns</code>属性配置了哪些请求可以进入该过滤器，<code>/*</code>表示所有请求。</p><p>启动项目时可以看到控制台输出了<code>过滤器初始化</code>，启动后访问<a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a>，控制台输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开始执行过滤器</span><br><span class="line">1</span><br><span class="line">【过滤器】耗时 31</span><br><span class="line">结束执行过滤器</span><br></pre></td></tr></table></figure><p></p><h3 id="配置方式二"><a href="#配置方式二" class="headerlink" title="配置方式二"></a>配置方式二</h3><p>除了在过滤器类上加注解外，我们也可以通过<code>FilterRegistrationBean</code>来注册过滤器。</p><p>定义一个<code>WebConfig</code>类，加上<code>@Configuration</code>注解表明其为配置类，然后通过<code>FilterRegistrationBean</code>来注册过滤器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">timeFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        TimeFilter timeFilter = <span class="keyword">new</span> TimeFilter();</span><br><span class="line">        filterRegistrationBean.setFilter(timeFilter);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; urlList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        urlList.add(<span class="string">"/*"</span>);</span><br><span class="line"></span><br><span class="line">        filterRegistrationBean.setUrlPatterns(urlList);</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>FilterRegistrationBean</code>除了注册过滤器<code>TimeFilter</code>外还通过<code>setUrlPatterns</code>方法配置了URL匹配规则。重启项目访问<a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a>，我们可以看到和上面一样的效果。</p><div class="note info"><p>通过过滤器我们只可以获取到servletRequest对象，所以并不能获取到方法的名称，所属类，参数等额外的信息。</p></div><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>定义一个<code>TimeInterceptor</code>类，实现<code>org.springframework.web.servlet.HandlerInterceptor</code>接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理拦截之前"</span>);</span><br><span class="line">        httpServletRequest.setAttribute(<span class="string">"startTime"</span>, <span class="keyword">new</span> Date().getTime());</span><br><span class="line">        System.out.println(((HandlerMethod) o).getBean().getClass().getName());</span><br><span class="line">        System.out.println(((HandlerMethod) o).getMethod().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始处理拦截"</span>);</span><br><span class="line">        Long start = (Long) httpServletRequest.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">        System.out.println(<span class="string">"【拦截器】耗时 "</span> + (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"处理拦截之后"</span>);</span><br><span class="line">        Long start = (Long) httpServletRequest.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">        System.out.println(<span class="string">"【拦截器】耗时 "</span> + (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">        System.out.println(<span class="string">"异常信息 "</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>TimeInterceptor</code>实现了<code>HandlerInterceptor</code>接口的三个方法。<code>preHandle</code>方法在处理拦截之前执行，<code>postHandle</code>只有当被拦截的方法没有抛出异常成功时才会处理，<code>afterCompletion</code>方法无论被拦截的方法抛出异常与否都会执行。</p><p>通过这三个方法的参数可以看到，相较于过滤器，拦截器多了Object和Exception对象，所以可以获取的信息比过滤器要多的多。但过滤器仍无法获取到方法的参数等信息，我们可以通过切面编程来实现这个目的，具体可参考<a href="https://mrbird.cc/Spring-Boot-AOP%20log.html">https://mrbird.cc/Spring-Boot-AOP%20log.html</a>。</p><p>要使拦截器在Spring Boot中生效，还需要如下两步配置：</p><p>1.在拦截器类上加入<code>@Component</code>注解；</p><p>2.在<code>WebConfig</code>中通过<code>InterceptorRegistry</code>注册过滤器:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TimeInterceptor timeInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(timeInterceptor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动项目，访问<a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a>，控制台输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">处理拦截之前</span><br><span class="line">cc.mrbird.controller.UserController</span><br><span class="line">get</span><br><span class="line">1</span><br><span class="line">开始处理拦截</span><br><span class="line">【拦截器】耗时 24</span><br><span class="line">处理拦截之后</span><br><span class="line">【拦截器】耗时 24</span><br><span class="line">异常信息 null</span><br></pre></td></tr></table></figure><p></p><p>从输出中我们可以了解到三个方法的执行顺序，并且三个方法都被执行了。</p><p>我们在<code>UserController</code>的<code>get</code>方法中手动抛出一个异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"user not exist"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目后，访问<a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a>，控制台输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">处理拦截之前</span><br><span class="line">cc.mrbird.controller.UserController</span><br><span class="line">get</span><br><span class="line">1</span><br><span class="line">处理拦截之后</span><br><span class="line">【拦截器】耗时 0</span><br><span class="line">异常信息 java.lang.RuntimeException: user not exist</span><br></pre></td></tr></table></figure><p></p><p>可看到，<code>postHandle</code>方法并没有被执行。</p><h2 id="执行时机对比"><a href="#执行时机对比" class="headerlink" title="执行时机对比"></a>执行时机对比</h2><p>我们将过滤器和拦截器都配置上，然后启动项目访问<a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">开始执行过滤器</span><br><span class="line">处理拦截之前</span><br><span class="line">cc.mrbird.controller.UserController</span><br><span class="line">get</span><br><span class="line">1</span><br><span class="line">开始处理拦截</span><br><span class="line">【拦截器】耗时 25</span><br><span class="line">处理拦截之后</span><br><span class="line">【拦截器】耗时 25</span><br><span class="line">异常信息 null</span><br><span class="line">【过滤器】耗时 34</span><br><span class="line">结束执行过滤器</span><br></pre></td></tr></table></figure><p></p><p>可看到过滤器要先于拦截器执行，晚于拦截器结束。下图很好的描述了它们的执行时间区别：</p><p><img src="img/32361-20180530095349427-444141538.png" alt="32361-20180530095349427-444141538.png"></p><p>源码链接<a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/26.Spring-Boot-Filter-Interceptor" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/26.Spring-Boot-Filter-Interceptor</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;过滤器（Filter）和拦截器（Interceptor）是Web项目中常用的两个功能，本文将简单介绍在Spring Boot中使用过滤器和拦截器来计算Controller中方法的执行时长，并且简单对比两者的区别。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot异常处理</title>
    <link href="http://mrbird.cc/Spring-Boot-Exception.html"/>
    <id>http://mrbird.cc/Spring-Boot-Exception.html</id>
    <published>2018-04-20T07:39:37.000Z</published>
    <updated>2018-08-21T07:47:22.998Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --><p>Spring Boot对异常的处理有一套默认的机制：当应用中产生异常时，Spring Boot根据发送请求头中的<code>accept</code>是否包含<code>text/html</code>来分别返回不同的响应信息。当从浏览器地址栏中访问应用接口时，请求头中的<code>accept</code>便会包含<code>text/html</code>信息，产生异常时，Spring Boot通过<code>org.springframework.web.servlet.ModelAndView</code>对象来装载异常信息，并以HTML的格式返回；而当从客户端访问应用接口产生异常时（客户端访问时，请求头中的<code>accept</code>不包含<code>text/html</code>），Spring Boot则以JSON的格式返回异常信息。下面来验证一下。<a id="more"></a></p><h2 id="默认异常处理机制"><a href="#默认异常处理机制" class="headerlink" title="默认异常处理机制"></a>默认异常处理机制</h2><p>假设应用中有如下一个Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"user not exist"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在代码中我们主动的抛出了一个<code>RuntimeException</code>，使用浏览器访问<a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a>： <img src="img/QQ截图20180701163610.png" alt="QQ截图20180701163610.png"> 可看到页面返回了一些异常描述，并且请求头的<code>accpet</code>包含了<code>text/html</code>片段。</p><p>接着使用模拟发送REST请求的Chrome插件<a href="https://restlet.com/modules/client/" target="_blank" rel="noopener">Restlet Client</a>发送<a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a>：</p><p><img src="img/QQ截图20180701165348.png" alt="QQ截图20180701165348.png"></p><p>可以看到请求头的<code>accept</code>值为<code>*/*</code>，并且返回一段JSON格式的信息。</p><p>查看Spring Boot的<code>BasicErrorController</code>类便可看到这一默认机制的具体实现：</p><p><img src="img/111111.png" alt="QQ图片20180701165727.png"></p><p>可看到<code>errorHtml</code>和<code>error</code>方法的请求地址和方法是一样的，唯一的区别就是<code>errorHtml</code>通过<code>produces = {&quot;text/html&quot;}</code>判断请求头的<code>accpet</code>属性中是否包含<code>text/html</code>，如果包含，便走该方法。</p><h2 id="自定义html异常页面"><a href="#自定义html异常页面" class="headerlink" title="自定义html异常页面"></a>自定义html异常页面</h2><p>我们可以通过在<code>src/main/resources/resources/error</code>路径下定义友好的异常页面，比如定义一个500.html页面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>500<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    系统内部异常</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后再次通过浏览器访问:<a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a>：</p><p><img src="img/QQ截图20180701170558.png" alt="QQ截图20180701170558.png"></p><p>同样的，我们也可以定义404.html等常见的HTTP状态码对应的异常页面。</p><p>通过自定义html异常页面并不会影响客户端发送请求异常返回的结果。</p><h2 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h2><p>除了可以通过自定义html异常页面来改变浏览器访问接口时产生的异常信息，我们也可以自定义异常处理来改表默认的客户端访问接口产生的异常信息。</p><p>我们手动定义一个<code>UserNotExistException</code>，继承<code>RuntimeException</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNotExistException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1574716826948451793L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserNotExistException</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"user not exist"</span>);</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后定义一个Controller异常处理类<code>ControllerExceptionHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.INTERNAL_SERVER_ERROR)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">handleUserNotExistsException</span><span class="params">(UserNotExistException e)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"id"</span>, e.getId());</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中注解<code>@ExceptionHandler</code>指定了要处理的异常类型，注解<code>@ResponseStatus</code>指定异常处理方法返回的HTTP状态码为<code>HttpStatus.INTERNAL_SERVER_ERROR</code>，即500。<code>HttpStatus</code>是一个spring自带的枚举类型，封装了常见的HTTP状态码及描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> HttpStatus &#123;</span><br><span class="line">    CONTINUE(<span class="number">100</span>, <span class="string">"Continue"</span>),</span><br><span class="line">    SWITCHING_PROTOCOLS(<span class="number">101</span>, <span class="string">"Switching Protocols"</span>),</span><br><span class="line">    PROCESSING(<span class="number">102</span>, <span class="string">"Processing"</span>),</span><br><span class="line">    CHECKPOINT(<span class="number">103</span>, <span class="string">"Checkpoint"</span>),</span><br><span class="line">    OK(<span class="number">200</span>, <span class="string">"OK"</span>),</span><br><span class="line">    CREATED(<span class="number">201</span>, <span class="string">"Created"</span>),</span><br><span class="line">    ACCEPTED(<span class="number">202</span>, <span class="string">"Accepted"</span>),</span><br><span class="line">    NON_AUTHORITATIVE_INFORMATION(<span class="number">203</span>, <span class="string">"Non-Authoritative Information"</span>),</span><br><span class="line">    NO_CONTENT(<span class="number">204</span>, <span class="string">"No Content"</span>),</span><br><span class="line">    RESET_CONTENT(<span class="number">205</span>, <span class="string">"Reset Content"</span>),</span><br><span class="line">    PARTIAL_CONTENT(<span class="number">206</span>, <span class="string">"Partial Content"</span>),</span><br><span class="line">    MULTI_STATUS(<span class="number">207</span>, <span class="string">"Multi-Status"</span>),</span><br><span class="line">    ALREADY_REPORTED(<span class="number">208</span>, <span class="string">"Already Reported"</span>),</span><br><span class="line">    IM_USED(<span class="number">226</span>, <span class="string">"IM Used"</span>),</span><br><span class="line">    MULTIPLE_CHOICES(<span class="number">300</span>, <span class="string">"Multiple Choices"</span>),</span><br><span class="line">    MOVED_PERMANENTLY(<span class="number">301</span>, <span class="string">"Moved Permanently"</span>),</span><br><span class="line">    FOUND(<span class="number">302</span>, <span class="string">"Found"</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    MOVED_TEMPORARILY(<span class="number">302</span>, <span class="string">"Moved Temporarily"</span>),</span><br><span class="line">    SEE_OTHER(<span class="number">303</span>, <span class="string">"See Other"</span>),</span><br><span class="line">    NOT_MODIFIED(<span class="number">304</span>, <span class="string">"Not Modified"</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    USE_PROXY(<span class="number">305</span>, <span class="string">"Use Proxy"</span>),</span><br><span class="line">    TEMPORARY_REDIRECT(<span class="number">307</span>, <span class="string">"Temporary Redirect"</span>),</span><br><span class="line">    PERMANENT_REDIRECT(<span class="number">308</span>, <span class="string">"Permanent Redirect"</span>),</span><br><span class="line">    BAD_REQUEST(<span class="number">400</span>, <span class="string">"Bad Request"</span>),</span><br><span class="line">    UNAUTHORIZED(<span class="number">401</span>, <span class="string">"Unauthorized"</span>),</span><br><span class="line">    PAYMENT_REQUIRED(<span class="number">402</span>, <span class="string">"Payment Required"</span>),</span><br><span class="line">    FORBIDDEN(<span class="number">403</span>, <span class="string">"Forbidden"</span>),</span><br><span class="line">    NOT_FOUND(<span class="number">404</span>, <span class="string">"Not Found"</span>),</span><br><span class="line">    METHOD_NOT_ALLOWED(<span class="number">405</span>, <span class="string">"Method Not Allowed"</span>),</span><br><span class="line">    NOT_ACCEPTABLE(<span class="number">406</span>, <span class="string">"Not Acceptable"</span>),</span><br><span class="line">    PROXY_AUTHENTICATION_REQUIRED(<span class="number">407</span>, <span class="string">"Proxy Authentication Required"</span>),</span><br><span class="line">    REQUEST_TIMEOUT(<span class="number">408</span>, <span class="string">"Request Timeout"</span>),</span><br><span class="line">    CONFLICT(<span class="number">409</span>, <span class="string">"Conflict"</span>),</span><br><span class="line">    GONE(<span class="number">410</span>, <span class="string">"Gone"</span>),</span><br><span class="line">    LENGTH_REQUIRED(<span class="number">411</span>, <span class="string">"Length Required"</span>),</span><br><span class="line">    PRECONDITION_FAILED(<span class="number">412</span>, <span class="string">"Precondition Failed"</span>),</span><br><span class="line">    PAYLOAD_TOO_LARGE(<span class="number">413</span>, <span class="string">"Payload Too Large"</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    REQUEST_ENTITY_TOO_LARGE(<span class="number">413</span>, <span class="string">"Request Entity Too Large"</span>),</span><br><span class="line">    URI_TOO_LONG(<span class="number">414</span>, <span class="string">"URI Too Long"</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    REQUEST_URI_TOO_LONG(<span class="number">414</span>, <span class="string">"Request-URI Too Long"</span>),</span><br><span class="line">    UNSUPPORTED_MEDIA_TYPE(<span class="number">415</span>, <span class="string">"Unsupported Media Type"</span>),</span><br><span class="line">    REQUESTED_RANGE_NOT_SATISFIABLE(<span class="number">416</span>, <span class="string">"Requested range not satisfiable"</span>),</span><br><span class="line">    EXPECTATION_FAILED(<span class="number">417</span>, <span class="string">"Expectation Failed"</span>),</span><br><span class="line">    I_AM_A_TEAPOT(<span class="number">418</span>, <span class="string">"I'm a teapot"</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    INSUFFICIENT_SPACE_ON_RESOURCE(<span class="number">419</span>, <span class="string">"Insufficient Space On Resource"</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    METHOD_FAILURE(<span class="number">420</span>, <span class="string">"Method Failure"</span>),</span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    DESTINATION_LOCKED(<span class="number">421</span>, <span class="string">"Destination Locked"</span>),</span><br><span class="line">    UNPROCESSABLE_ENTITY(<span class="number">422</span>, <span class="string">"Unprocessable Entity"</span>),</span><br><span class="line">    LOCKED(<span class="number">423</span>, <span class="string">"Locked"</span>),</span><br><span class="line">    FAILED_DEPENDENCY(<span class="number">424</span>, <span class="string">"Failed Dependency"</span>),</span><br><span class="line">    UPGRADE_REQUIRED(<span class="number">426</span>, <span class="string">"Upgrade Required"</span>),</span><br><span class="line">    PRECONDITION_REQUIRED(<span class="number">428</span>, <span class="string">"Precondition Required"</span>),</span><br><span class="line">    TOO_MANY_REQUESTS(<span class="number">429</span>, <span class="string">"Too Many Requests"</span>),</span><br><span class="line">    REQUEST_HEADER_FIELDS_TOO_LARGE(<span class="number">431</span>, <span class="string">"Request Header Fields Too Large"</span>),</span><br><span class="line">    UNAVAILABLE_FOR_LEGAL_REASONS(<span class="number">451</span>, <span class="string">"Unavailable For Legal Reasons"</span>),</span><br><span class="line">    INTERNAL_SERVER_ERROR(<span class="number">500</span>, <span class="string">"Internal Server Error"</span>),</span><br><span class="line">    NOT_IMPLEMENTED(<span class="number">501</span>, <span class="string">"Not Implemented"</span>),</span><br><span class="line">    BAD_GATEWAY(<span class="number">502</span>, <span class="string">"Bad Gateway"</span>),</span><br><span class="line">    SERVICE_UNAVAILABLE(<span class="number">503</span>, <span class="string">"Service Unavailable"</span>),</span><br><span class="line">    GATEWAY_TIMEOUT(<span class="number">504</span>, <span class="string">"Gateway Timeout"</span>),</span><br><span class="line">    HTTP_VERSION_NOT_SUPPORTED(<span class="number">505</span>, <span class="string">"HTTP Version not supported"</span>),</span><br><span class="line">    VARIANT_ALSO_NEGOTIATES(<span class="number">506</span>, <span class="string">"Variant Also Negotiates"</span>),</span><br><span class="line">    INSUFFICIENT_STORAGE(<span class="number">507</span>, <span class="string">"Insufficient Storage"</span>),</span><br><span class="line">    LOOP_DETECTED(<span class="number">508</span>, <span class="string">"Loop Detected"</span>),</span><br><span class="line">    BANDWIDTH_LIMIT_EXCEEDED(<span class="number">509</span>, <span class="string">"Bandwidth Limit Exceeded"</span>),</span><br><span class="line">    NOT_EXTENDED(<span class="number">510</span>, <span class="string">"Not Extended"</span>),</span><br><span class="line">    NETWORK_AUTHENTICATION_REQUIRED(<span class="number">511</span>, <span class="string">"Network Authentication Required"</span>);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>编写完自定义异常处理逻辑后，我们将UserController中的方法抛出的异常改为<code>UserNotExistException</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UserNotExistException(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，使用Restlet Client再次访问<a href="http://localhost:8080/user/1" target="_blank" rel="noopener">http://localhost:8080/user/1</a>，响应如下： <img src="img/QQ图片20180701172030.png" alt="QQ图片20180701172030.png"></p><blockquote><p>源码链接 <a href="https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/25.Spring-Boot-Exception" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/Spring-Boot-Demos/tree/master/25.Spring-Boot-Exception</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:48 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Spring Boot对异常的处理有一套默认的机制：当应用中产生异常时，Spring Boot根据发送请求头中的&lt;code&gt;accept&lt;/code&gt;是否包含&lt;code&gt;text/html&lt;/code&gt;来分别返回不同的响应信息。当从浏览器地址栏中访问应用接口时，请求头中的&lt;code&gt;accept&lt;/code&gt;便会包含&lt;code&gt;text/html&lt;/code&gt;信息，产生异常时，Spring Boot通过&lt;code&gt;org.springframework.web.servlet.ModelAndView&lt;/code&gt;对象来装载异常信息，并以HTML的格式返回；而当从客户端访问应用接口产生异常时（客户端访问时，请求头中的&lt;code&gt;accept&lt;/code&gt;不包含&lt;code&gt;text/html&lt;/code&gt;），Spring Boot则以JSON的格式返回异常信息。下面来验证一下。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>【Java8实战】新的日期和时间API</title>
    <link href="http://mrbird.cc/java8-new-time-date-api.html"/>
    <id>http://mrbird.cc/java8-new-time-date-api.html</id>
    <published>2018-04-20T02:18:28.000Z</published>
    <updated>2018-07-02T07:26:23.284Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Dec 13 2018 13:42:49 GMT+0800 (中国标准时间) --><p>Java 8之前的库对日期和时间的支持并不理想，为了解决这个问题，Java 8引入了一套全新的时间日期API，位于<code>java.time</code>路径下。</p><h2 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h2><p><code>LocalDate</code>类型包含了年月日信息，下面举些<code>LocalDate</code>的使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.of(<span class="number">2018</span>, <span class="number">4</span>, <span class="number">20</span>); <span class="comment">// 2018-04-20</span></span><br><span class="line"><span class="keyword">int</span> year = date.getYear(); <span class="comment">// 2018</span></span><br><span class="line"><span class="keyword">int</span> month = date.getMonth().getValue(); <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">int</span> day = date.getDayOfMonth(); <span class="comment">// 20</span></span><br><span class="line"><span class="comment">// 查看该月有多少天</span></span><br><span class="line"><span class="keyword">int</span> days = date.lengthOfMonth(); <span class="comment">// 30</span></span><br><span class="line"><span class="comment">// 是否是闰年</span></span><br><span class="line"><span class="keyword">boolean</span> isLeap = date.isLeapYear(); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>可以使用<code>LocalDate.now()</code>获取当天的日期信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看当天 年月日</span></span><br><span class="line">LocalDate today = LocalDate.now(); <span class="comment">// 2018-04-20</span></span><br></pre></td></tr></table></figure><p></p><p>除了调用<code>LocalDate</code>的<code>getYear</code>方法外，我们也可以使用<code>ChronoField</code>枚举类型来实现相同的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> year1 = date.get(ChronoField.YEAR); <span class="comment">// 2018</span></span><br><span class="line"><span class="keyword">int</span> month1 = date.get(ChronoField.MONTH_OF_YEAR); <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">int</span> day1 = date.get(ChronoField.DAY_OF_MONTH); <span class="comment">// 20</span></span><br><span class="line"><span class="comment">// 当前日期属于该月第几周</span></span><br><span class="line"><span class="keyword">int</span> weekOfMonth = date.get(ChronoField.ALIGNED_WEEK_OF_MONTH); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p></p><p><code>ChronoField</code>枚举类型包含了诸多的属性可供选择： <img src="img/QQ截图20180702142403.png" alt="QQ截图20180702142403.png"></p><p>我们也可以修改<code>LocalDate</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date3 = LocalDate.of(<span class="number">2018</span>, <span class="number">4</span>, <span class="number">20</span>); <span class="comment">// 2018-04-20</span></span><br><span class="line">LocalDate date4 = date3.withDayOfMonth(<span class="number">22</span>); <span class="comment">// 2018-04-22</span></span><br><span class="line">LocalDate date5 = date3.with(ChronoField.DAY_OF_MONTH, <span class="number">22</span>); <span class="comment">// 2018-04-22</span></span><br><span class="line">LocalDate date6 = date3.withYear(<span class="number">2019</span>); <span class="comment">// 2019-04-20</span></span><br><span class="line">LocalDate date7 = date3.plusDays(<span class="number">5</span>); <span class="comment">// 2018-04-25</span></span><br><span class="line">LocalDate date8 = date3.plus(<span class="number">5</span>, ChronoUnit.DAYS); <span class="comment">// 2018-04-25</span></span><br><span class="line">LocalDate date9 = date3.minusYears(<span class="number">10</span>); <span class="comment">// 2008-04-20</span></span><br></pre></td></tr></table></figure><p></p><p><code>TemporalAdjusters</code>类提供了许多静态方法来修改<code>LocalDate</code>对象。当我们需要获取下一个周天，下一个工作日，本月的最后一天等信息时，<code>TemporalAdjusters</code>类便可派上用场：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.temporal.TemporalAdjusters.*;</span><br><span class="line"></span><br><span class="line">LocalDate date10 = date3.with(nextOrSame(DayOfWeek.MONDAY)); <span class="comment">// 2018-04-23</span></span><br><span class="line">LocalDate date11 = date3.with(lastDayOfMonth()); <span class="comment">// 2018-04-30</span></span><br><span class="line">LocalDate date12 = date3.with(previous(DayOfWeek.SATURDAY)); <span class="comment">// 2018-04-14</span></span><br></pre></td></tr></table></figure><p></p><p>可参考4月的日历来理解上面的结果： <img src="img/QQ截图20180702144931.png" alt="QQ截图20180702144931.png"></p><p>我们还可以对<code>LocalDate</code>进行格式化操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str1 = date.format(DateTimeFormatter.BASIC_ISO_DATE); <span class="comment">// 20180420</span></span><br><span class="line">String str2 = date.format(DateTimeFormatter.ISO_LOCAL_DATE); <span class="comment">// 2018-04-20</span></span><br><span class="line"></span><br><span class="line">DateTimeFormatter dtf = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">String str5 = date.format(dtf); <span class="comment">// 2018-04-20</span></span><br><span class="line">LocalDate date13 = LocalDate.parse(str5, dtf); <span class="comment">// 2018-04-20</span></span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>LocalDate和下面要介绍的LocalTime，LocalDateTime之间共享了许多类似的方法，上面介绍的LocalDate修改、格式化等方法通用适用于LocalTime和LocalDateTime。</p></div><h2 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h2><p><code>LocalTime</code>和<code>LocalDate</code>类似，区别在于<code>LocalTime</code>包含的是时分秒（毫秒）信息。举些<code>LocalTime</code>的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalTime time = LocalTime.of(<span class="number">20</span>, <span class="number">13</span>, <span class="number">54</span>); <span class="comment">// 20:13:54</span></span><br><span class="line"><span class="keyword">int</span> hour = time.getHour(); <span class="comment">// 20</span></span><br><span class="line"><span class="keyword">int</span> minute = time.getMinute(); <span class="comment">// 13</span></span><br><span class="line"><span class="keyword">int</span> second = time.getSecond(); <span class="comment">// 54</span></span><br></pre></td></tr></table></figure><p></p><p><code>LocalDate</code>和<code>LocalTime</code>都可以通过字符串来创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date = LocalDate.parse(<span class="string">"2018-04-20"</span>);</span><br><span class="line">LocalTime time = LocalTime.parse(<span class="string">"20:13:54"</span>);</span><br></pre></td></tr></table></figure><p></p><h2 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h2><p><code>LocalDateTime</code>是<code>LocalDate</code>和<code>LocalTime</code>的组合形式，包含了年月日时分秒信息。举些<code>LocalDateTime</code>的使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime ldt1 = LocalDateTime.of(<span class="number">2018</span>, <span class="number">4</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">54</span>); <span class="comment">// 2018-04-20T20:13:54</span></span><br><span class="line">LocalDateTime ldt2 = LocalDateTime.of(date, time); <span class="comment">// 2018-04-20T20:13:54</span></span><br></pre></td></tr></table></figure><p></p><p><code>LocalDateTime</code>可以转换为<code>LocalDate</code>和<code>LocalTime</code>，转换后包含的信息减少了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date1 = ldt1.toLocalDate(); <span class="comment">// 2018-04-20</span></span><br><span class="line">LocalTime time1 = ldt1.toLocalTime(); <span class="comment">// 20:13:54</span></span><br></pre></td></tr></table></figure><p></p><p>同样的，<code>LocalDate</code>和<code>LocalTime</code>也可以转换为<code>LocalDateTime</code>，只需要补上日期或者时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime ldt3 = date.atTime(time); <span class="comment">// 2018-04-20T20:13:54</span></span><br><span class="line">LocalDateTime ldt4 = date.atTime(<span class="number">20</span>, <span class="number">13</span>, <span class="number">54</span>); <span class="comment">// 2018-04-20T20:13:54</span></span><br><span class="line">LocalDateTime ldt5 = time.atDate(date); <span class="comment">// 2018-04-20T20:13:54</span></span><br></pre></td></tr></table></figure><p></p><h2 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h2><p><code>Duration</code>用于计算两个<code>LocalTime</code>或者<code>LocalDateTime</code>的时间差，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalTime time2 = LocalTime.of(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line">Duration duration = Duration.between(time1, time2);</span><br><span class="line"><span class="keyword">long</span> seconds = duration.getSeconds(); <span class="comment">// 13565</span></span><br></pre></td></tr></table></figure><p></p><p>time1和time2之间相差了13565秒。</p><p>手动创建<code>Duration</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Duration threeMinutes = Duration.ofMinutes(<span class="number">3</span>);</span><br><span class="line">threeMinutes = Duration.of(<span class="number">3</span>, ChronoUnit.MINUTES); <span class="comment">// 创建了一个3分钟的Duration，两种创建方式等价</span></span><br></pre></td></tr></table></figure><p></p><h2 id="Period"><a href="#Period" class="headerlink" title="Period"></a>Period</h2><p><code>Period</code>用于计算两个<code>LocalDate</code>之间的时长。举些例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date2 = LocalDate.of(<span class="number">2018</span>, <span class="number">5</span>, <span class="number">21</span>);</span><br><span class="line">Period period = Period.between(date1, date2);</span><br><span class="line"><span class="keyword">int</span> monthsBetween = period.getMonths(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">int</span> daysBetween = period.getDays(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p></p><p>2018-04-21和2018-04-20之间月份相差1，天数相差1。</p><p>同样的，我们也可以手动创建<code>Period</code>对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Period tenDays = Period.ofDays(<span class="number">10</span>);</span><br><span class="line">Period threeWeeks = Period.ofWeeks(<span class="number">3</span>);</span><br><span class="line">Period twoYearsSixMonthsOneDay = Period.of(<span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p></p><h2 id="其他一些常用的方法"><a href="#其他一些常用的方法" class="headerlink" title="其他一些常用的方法"></a>其他一些常用的方法</h2><h3 id="比较两个时间的先后"><a href="#比较两个时间的先后" class="headerlink" title="比较两个时间的先后"></a>比较两个时间的先后</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date15 = LocalDate.of(<span class="number">2018</span>,<span class="number">4</span>,<span class="number">21</span>);</span><br><span class="line">date.isEqual(date15); <span class="comment">// false</span></span><br><span class="line">date.isAfter(date15); <span class="comment">// false</span></span><br><span class="line">date.isBefore(date15); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="MonthDay类的使用"><a href="#MonthDay类的使用" class="headerlink" title="MonthDay类的使用"></a>MonthDay类的使用</h3><p><code>MonthDay</code>只包含月日信息，可以用于存放类似于生日，结婚纪念日等信息。举个使用<code>MonthDay</code>的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LocalDate birthday = LocalDate.of(<span class="number">1999</span>, <span class="number">9</span>, <span class="number">9</span>);</span><br><span class="line">MonthDay monthDay = MonthDay.of(birthday.getMonth(), birthday.getDayOfMonth());</span><br><span class="line">MonthDay currentMonthDay = MonthDay.from(LocalDate.now());</span><br><span class="line"><span class="keyword">if</span> (currentMonthDay.equals(monthDay)) &#123;</span><br><span class="line">    System.out.println(<span class="string">"happy birthday!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>假如用户的生日是1999年9月9号，那么可以通过这种方法来判断今天是否是用户的生日，如果是的话便发送生日祝福。同样的也有<code>YearMonth</code>类。</p><div class="note danger"><p>Java 8 新的日期时间API还提供了不同时区和历法的获取方法，由于较少使用而且不易于理解，这里不再列出。😕</p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Thu Dec 13 2018 13:42:49 GMT+0800 (中国标准时间) --&gt;&lt;p&gt;Java 8之前的库对日期和时间的支持并不理想，为了解决这个问题，Java 8引入了一套全新的时间日期API，位于&lt;code&gt;java.time&lt;/code&gt;路径下。&lt;/p&gt;&lt;h2 id=&quot;LocalDate&quot;&gt;&lt;a href=&quot;#LocalDate&quot; class=&quot;headerlink&quot; title=&quot;LocalDate&quot;&gt;&lt;/a&gt;LocalDate&lt;/h2&gt;&lt;p&gt;&lt;code&gt;LocalDate&lt;/code&gt;类型包含了年月日信息，下面举些&lt;code&gt;LocalDate&lt;/code&gt;的使用示例：&lt;/p&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;LocalDate date = LocalDate.of(&lt;span class=&quot;number&quot;&gt;2018&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 2018-04-20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; year = date.getYear(); &lt;span class=&quot;comment&quot;&gt;// 2018&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; month = date.getMonth().getValue(); &lt;span class=&quot;comment&quot;&gt;// 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; day = date.getDayOfMonth(); &lt;span class=&quot;comment&quot;&gt;// 20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 查看该月有多少天&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; days = date.lengthOfMonth(); &lt;span class=&quot;comment&quot;&gt;// 30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 是否是闰年&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; isLeap = date.isLeapYear(); &lt;span class=&quot;comment&quot;&gt;// false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://mrbird.cc/tags/Java/"/>
    
      <category term="Java 8" scheme="http://mrbird.cc/tags/Java-8/"/>
    
  </entry>
  
</feed>
