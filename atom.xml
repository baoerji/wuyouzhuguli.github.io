<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MrBird</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mrbird.cc/"/>
  <updated>2019-04-10T02:53:41.310Z</updated>
  <id>http://mrbird.cc/</id>
  
  <author>
    <name>MrBird</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FEBS-Vue文档</title>
    <link href="http://mrbird.cc/FEBS-Vue-Document.html"/>
    <id>http://mrbird.cc/FEBS-Vue-Document.html</id>
    <published>2019-01-01T01:24:51.000Z</published>
    <updated>2019-04-10T02:53:41.310Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:37 GMT+0800 (GMT+08:00) --><p>FEBS-Vue为<a href="https://github.com/wuyouzhuguli/FEBS-Shiro" target="_blank" rel="noopener">FEBS-Shiro</a>的前后端分离版本，前端使用Vue全家桶，组件库采用<a href="https://vuecomponent.github.io/ant-design-vue/docs/vue/introduce-cn/" target="_blank" rel="noopener">Ant-Design-Vue</a>。</p><p>文档里介绍的示例是在Windows10操作系统下完成的，后端编辑器使用IDEA，前端编辑器使用WebStorm。<a id="more"></a></p><h2 id="项目导入"><a href="#项目导入" class="headerlink" title="项目导入"></a>项目导入</h2><p>为了方便，我直接在桌面上通过git bash克隆项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/wuyouzhuguli/FEBS-Vue.git</span><br></pre></td></tr></table></figure><p></p><p>克隆后，桌面上多出一个FEBS-Vue文件夹：</p><p><img src="img/febsvue/20190409165245.png" alt="QQ截图20190409165245.png"></p><p>backend为后端项目源码，frontend为前端项目源码，sql为数据库初始化脚本。</p><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p>因为项目用到了JDK 8的一些特性，所以JDK最低版本不能低于8。</p><p>JDK 8官方下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads。" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads。</a></p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Node.js下载地址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a>，直接安装即可，安装后查看其版本：</p><p><img src="img/febsvue/QQ截图20190409170853.png" alt="QQ截图20190409170853.png"></p><p>Node.js集成了npm，所以安装好Node.js后npm可就可以使用了：</p><p><img src="img/febsvue/QQ截图20190409171301.png" alt="QQ截图20190409171301.png"></p><h3 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h3><p>在CMD中执行<code>npm install -g yarn</code>：</p><p><img src="img/febsvue/QQ截图20190409171954.png" alt="QQ截图20190409171954.png"></p><p>因为我之前已经安装过了，所以这里就相当于更新操作了。</p><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><p>项目缓存数据库使用的是Redis，所以在导入项目前需先安装Redis。</p><p>Redis Windows版本下载地址：<a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="noopener">https://github.com/MicrosoftArchive/redis/releases</a>。直接下载zip版本解压到任意目录即可。</p><p>下载后，使用cmd命令切换到Redis根目录，然后运行<code>redis-server.exe redis.windows.conf</code>启动即可：</p><p><img src="img/febsvue/QQ截图20190409172902.png" alt="QQ截图20190409172902.png"></p><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>项目数据库采用MySQL社区版，版本为5.7.x。</p><p>下载地址：<a href="https://dev.mysql.com/downloads/windows/installer/5.7.html" target="_blank" rel="noopener">https://dev.mysql.com/downloads/windows/installer/5.7.html</a></p><h3 id="导入SQL"><a href="#导入SQL" class="headerlink" title="导入SQL"></a>导入SQL</h3><p>使用Navicat新建一个数据库：</p><p><img src="img/febsvue/QQ截图20190409173934.png" alt="QQ截图20190409173934.png"></p><p>然后导入SQL脚本即可。</p><h3 id="导入后端项目"><a href="#导入后端项目" class="headerlink" title="导入后端项目"></a>导入后端项目</h3><p>IDEA选择backend： <img src="img/febsvue/QQ截图20190409184301.png" alt="QQ截图20190409184301.png"></p><p>导入项目后安装lombok插件（不懂lombok可以自行百度）：</p><p><img src="img/febsvue/QQ截图20190409185417.png" alt="QQ截图20190409185417.png"></p><p>安装完重启IDEA才能生效。</p><p>接着修改application.yml中的数据库和Redis配置，修改完后通过Spring Boot入口类FebsApplication启动即可：</p><p><img src="img/febsvue/QQ截图20190409184818.png" alt="QQ截图20190409184818.png"></p><p><img src="img/febsvue/QQ截图20190409185112.png" alt="QQ截图20190409185112.png"></p><p>接着开始导入前端项目。</p><h3 id="导入前端项目"><a href="#导入前端项目" class="headerlink" title="导入前端项目"></a>导入前端项目</h3><p>使用WebStorm打开frontend：</p><p><img src="img/febsvue/QQ截图20190409185643.png" alt="QQ截图20190409185643.png"></p><p>在终端输入<code>yarn install</code>命令安装依赖：</p><p><img src="img/febsvue/QQ截图20190409190322.png" alt="QQ截图20190409190322.png"></p><p>稍等片刻，坐与放宽。</p><p>依赖下载完毕后，输入yarn start启动前端项目：</p><p><img src="img/febsvue/QQ截图20190409191649.png" alt="QQ截图20190409191649.png"></p><p>浏览器访问<a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a>：</p><p><img src="img/febsvue/QQ截图20190409191833.png" alt="QQ截图20190409191833.png"></p><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>下面演示如何在Linux上部署项目（例子采用CentOS7）。</p><h3 id="Vagrant创建CentOS"><a href="#Vagrant创建CentOS" class="headerlink" title="Vagrant创建CentOS"></a>Vagrant创建CentOS</h3><p>如果没有CentOS7环境可以使用Vagrant快速构建一个CentOS虚拟机，具体可以参考：<a href="https://mrbird.cc/Create-Virtual-Machine-By-Vagrant.html">https://mrbird.cc/Create-Virtual-Machine-By-Vagrant.html</a>。我的CentOS虚拟机IP为：192.168.33.11。</p><div class="note danger"><p>使用命令<code>timedatectl set-timezone Asia/Shanghai</code>设置CentOS的时区，以避免因时区带来的BUG。</p></div><h3 id="Java环境配置"><a href="#Java环境配置" class="headerlink" title="Java环境配置"></a>Java环境配置</h3><ol><li>下载JDK8：</li></ol><p><img src="img/febsvue/QQ截图20190409204143.png" alt="QQ截图20190409204143.png"></p><p>下载后通过Vagrant共享到CentOS上（我的Vagrantfile共享配置为<code>config.vm.synced_folder &quot;./sync&quot;, &quot;/vagrant&quot;, create:true, owner: &quot;root&quot;, group: &quot;root&quot;</code>）：</p><p><img src="img/febsvue/QQ截图20190409204745.png" alt="QQ截图20190409204745.png"></p><ol start="2"><li>安装JDK8：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jdk-8u201-linux-x64.rpm</span><br></pre></td></tr></table></figure><p><img src="img/febsvue/QQ截图20190409204849.png" alt="QQ截图20190409204849.png"></p><ol start="3"><li>配置环境变量</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_201</span><br><span class="line">JRE_HOME=/usr/java/jdk1.8.0_201/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure><p>然后执行以下命令生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p></p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><p>官方安装教程：<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p>安装好后：</p><p><img src="img/febsvue/QQ截图20190409205834.png" alt="QQ截图20190409205834.png"></p><h3 id="Docker安装MySQL"><a href="#Docker安装MySQL" class="headerlink" title="Docker安装MySQL"></a>Docker安装MySQL</h3><ol><li>拉取MySQL镜像：</li></ol><p><img src="img/febsvue/QQ截图20190409210335.png" alt="QQ截图20190409210335.png"></p><ol start="2"><li>创建目录/home/febs/mysql，用于挂载MySQL volume:</li></ol><p><img src="img/febsvue/QQ截图20190409210901.png" alt="QQ截图20190409210901.png"></p><ol start="3"><li>创建MySQL容器：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql -p 3306:3306 \</span><br><span class="line"> -v $(<span class="built_in">pwd</span>):/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7.25</span><br></pre></td></tr></table></figure><p><img src="img/febsvue/QQ截图20190409211225.png" alt="QQ截图20190409211225.png"></p><ol start="4"><li>使用Navicat连接MySQL，创建数据库并导入数据：</li></ol><p>连接：</p><p><img src="img/febsvue/QQ截图20190409211912.png" alt="QQ截图20190409211912.png"></p><p>新增数据库：</p><p><img src="img/febsvue/QQ截图20190409212130.png" alt="QQ截图20190409212130.png"></p><p>导入SQL：</p><p><img src="img/febsvue/QQ截图20190409212334.png" alt="QQ截图20190409212334.png"></p><h3 id="Docker安装Redis"><a href="#Docker安装Redis" class="headerlink" title="Docker安装Redis"></a>Docker安装Redis</h3><ol><li>拉取Redis镜像:</li></ol><p><img src="img/febsvue/QQ截图20190409213345.png" alt="QQ截图20190409213345.png"></p><ol start="2"><li>创建文件/home/febs/redis/conf/redis.conf，用于挂载Redis配置文件：</li></ol><p><img src="img/febsvue/QQ截图20190409223016.png" alt="QQ截图20190409213604.png"></p><ol start="3"><li>创建Redis容器：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 6379:6379 \</span><br><span class="line"> -v /home/febs/redis/conf/redis.conf:/usr/<span class="built_in">local</span>/etc/redis/redis.conf \</span><br><span class="line"> --name redis redis:4.0.14</span><br></pre></td></tr></table></figure><p>测试连接：</p><p><img src="img/febsvue/2019-04-10_094404.png" alt="QQ截图20190410094147.png"></p><h3 id="Docker安装Nginx"><a href="#Docker安装Nginx" class="headerlink" title="Docker安装Nginx"></a>Docker安装Nginx</h3><ol><li>拉取Nginx镜像:</li></ol><p><img src="img/febsvue/QQ截图20190409220000.png" alt="QQ截图20190409220000.png"></p><ol start="2"><li>创建目录/home/febs/nginx/html、/home/febs/nginx/logs和文件/home/febs/nginx/conf/nginx.conf，分别用于挂载Nginx html,logs和配置文件：</li></ol><p><img src="img/febsvue/20190409225225.png" alt="QQ截图20190409225225.png"> <img src="img/febsvue/20190409223442.png" alt="QQ截图20190409220212.png"></p><ol start="3"><li>修改Nginx配置：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /home/febs/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">error_log</span>   /var/log/nginx/error.log;</span><br><span class="line"><span class="attribute">pid</span>   /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> mime.types;</span><br><span class="line">        <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">server_names_hash_bucket_size</span> <span class="number">512</span>;</span><br><span class="line">        <span class="attribute">client_header_buffer_size</span> <span class="number">32k</span>;</span><br><span class="line">        <span class="attribute">large_client_header_buffers</span> <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">50m</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">sendfile</span>   <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">tcp_nopush</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">keepalive_timeout</span> <span class="number">60</span>;</span><br><span class="line">        <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">fastcgi_connect_timeout</span> <span class="number">300</span>;</span><br><span class="line">        <span class="attribute">fastcgi_send_timeout</span> <span class="number">300</span>;</span><br><span class="line">        <span class="attribute">fastcgi_read_timeout</span> <span class="number">300</span>;</span><br><span class="line">        <span class="attribute">fastcgi_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line">        <span class="attribute">fastcgi_buffers</span> <span class="number">4</span> <span class="number">64k</span>;</span><br><span class="line">        <span class="attribute">fastcgi_busy_buffers_size</span> <span class="number">128k</span>;</span><br><span class="line">        <span class="attribute">fastcgi_temp_file_write_size</span> <span class="number">256k</span>;</span><br><span class="line">        <span class="attribute">fastcgi_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">gzip_min_length</span>  <span class="number">1k</span>;</span><br><span class="line">        <span class="attribute">gzip_buffers</span>     <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line">        <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line">        <span class="attribute">gzip_types</span>     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;</span><br><span class="line">        <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">gzip_proxied</span>   expired <span class="literal">no</span>-cache <span class="literal">no</span>-store private auth;</span><br><span class="line">        <span class="attribute">gzip_disable</span>   <span class="string">"MSIE [1-6]\."</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">limit_conn_zone</span> <span class="variable">$binary_remote_addr</span> zone=perip:<span class="number">10m</span>;</span><br><span class="line">        <span class="attribute">limit_conn_zone</span> <span class="variable">$server_name</span> zone=perserver:<span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建Nginx容器：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx -d -p 80:80  \</span><br><span class="line">-v /home/febs/nginx/conf/nginx.conf:/etc/ng inx/nginx.conf  \</span><br><span class="line">-v /home/febs/nginx/html:/etc/nginx/html \</span><br><span class="line">-v /home/febs/nginx/logs:/var/<span class="built_in">log</span>/nginx n ginx:1.14.2</span><br></pre></td></tr></table></figure><h3 id="后端部署"><a href="#后端部署" class="headerlink" title="后端部署"></a>后端部署</h3><p>修改application.yml中数据库和redis的连接配置，然后将项目打包成jar文件：</p><p><img src="img/febsvue/2019-04-10_094842.png" alt="2019-04-10_094842.png"></p><p>将其上传到CentOS虚拟机的/home/febs/backend目录下：</p><p><img src="img/febsvue/asdfasdfasd.png" alt="2019-04-10_100008.png"></p><p>编写一个启动项目的shell脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim start.sh</span><br></pre></td></tr></table></figure><p></p><p>内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar febs_shiro_jwt-1.0.0-release.jar &amp;</span><br></pre></td></tr></table></figure><p></p><p>编写一个关停项目的shell脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim stop.sh</span><br></pre></td></tr></table></figure><p></p><p>内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PID=`ps -ef | grep febs_shiro_jwt-1.0.0-release.jar | grep -v grep | awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">if [ -z &quot;$PID&quot; ]</span><br><span class="line">then</span><br><span class="line">    echo Application is already stopped</span><br><span class="line">else</span><br><span class="line">    echo kill $PID</span><br><span class="line">    kill -9 $PID</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p></p><p>授权，让其可执行：</p><p><img src="img/febsvue/2019-04-10_100815.png" alt="2019-04-10_100815.png"></p><p>启动项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./start.sh</span><br><span class="line"></span><br><span class="line">tail -f nohup.out</span><br></pre></td></tr></table></figure><p></p><p>看到如下输出的时候说明后端项目启动成功：</p><p><img src="img/febsvue/2019-04-10_101222.png" alt="2019-04-10_101222.png"></p><h3 id="前端部署"><a href="#前端部署" class="headerlink" title="前端部署"></a>前端部署</h3><p>点击build：</p><p><img src="img/febsvue/2019-04-10_095141.png" alt="2019-04-10_095141.png"></p><p>build成功后，项目目录下会多出个dist文件夹：</p><p><img src="img/febsvue/2019-04-10_095533.png" alt="2019-04-10_095533.png"></p><p>将这个目录下的文件上传到CentOS虚拟机的/home/febs/nginx/html目录下：</p><p><img src="img/febsvue/2019-04-10_101510.png" alt="2019-04-10_101510.png"></p><p>浏览器访问<a href="http://192.168.33.11/#/login" target="_blank" rel="noopener">http://192.168.33.11/#/login</a>：</p><p><img src="img/febsvue/2019-04-10_101826.png" alt="2019-04-10_101826.png"></p><p><img src="img/febsvue/2019-04-10_104514.png" alt="2019-04-10_104514.png"></p><p>部署成功。</p><h2 id="后端项目介绍"><a href="#后端项目介绍" class="headerlink" title="后端项目介绍"></a>后端项目介绍</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>后端项目目录含义如下图所示：</p><p><img src="img/febsvue/backend-xmind.png" alt="backend-xmind.png"></p><p>Common模块文件含义如下图所示：</p><p><img src="img/febsvue/2019-04-08_113758.png" alt="2019-04-08_113758.png"></p><p>其他模块文件较为简单，略。</p><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>application.yml中除了各个插件的配置外，下面这段配置为系统配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">febs:</span></span><br><span class="line"><span class="attr">  openAopLog:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  max:</span></span><br><span class="line"><span class="attr">    batch:</span></span><br><span class="line"><span class="attr">      insert:</span></span><br><span class="line"><span class="attr">        num:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">  shiro:</span></span><br><span class="line"><span class="attr">    anonUrl:</span> <span class="string">/login,/logout/**,/regist,/user/check/**</span></span><br><span class="line"><span class="attr">    jwtTimeOut:</span> <span class="number">3600</span></span><br></pre></td></tr></table></figure><p></p><ul><li><p><code>febs.opAopLog</code>：Boolean类型，取值true或者false，为true时表示开启Aop记录用户的操作日志，需和<code>@Log</code>注解搭配使用。</p></li><li><p><code>febs.max.batch.insert.num</code>：大于0的Integer类型，表示Excel导入数据当次最大入库数据量。比如配置为1000时表示入库数据为0 - 1000 时只会执行一次数据库commit操作。</p></li><li><p><code>febs.shiro.anonUrl</code>：逗号分隔的字符串，表示无需认证的资源路径。</p></li><li><p><code>febs.shiro.jwtTimeOut</code>：定义token的有效时间，单位为秒，比如配置为3600表示token一个小时内有效，超过一个小时后需要重新认证。</p></li></ul><h3 id="RESTful风格"><a href="#RESTful风格" class="headerlink" title="RESTful风格"></a>RESTful风格</h3><p>系统Controller暴露的接口风格为RESTful，通过HTTP请求method对应增删改查类型，响应以HTTP Code为判断依据。</p><p>以UserController为例子：</p><table><tr><th>描述</th><th>请求URI</th><th>HTTP Method</th><th>对应注解</th></tr><tr><td>查询所有用户</td><td>/user</td><td>GET</td><td>@GetMapping</td></tr><tr><td>通过用户名查找用户</td><td>/user/{username}</td><td>GET</td><td>@GetMapping</td></tr><tr><td>新增用户</td><td>/user</td><td>POST</td><td>@PostMapping</td></tr><tr><td>修改用户</td><td>/user</td><td>PUT</td><td>@PutMapping</td></tr><tr><td>删除用户</td><td>/user/{userIds}</td><td>DELETE</td><td>@DeleteMapping</td></tr></table><p>Controller方法默认返回200状态码，当Controller抛出异常时，将被<code>GlobalExceptionHandler</code>捕获，根据异常类型，返回不同的HTTP状态码：</p><table><tr><th>异常类型</th><th>异常描述</th><th>状态码</th><th>对应常量</th></tr><tr><td>UnauthorizedException</td><td>未授权异常，权限不足异常</td><td>403</td><td>HttpStatus.FORBIDDEN</td></tr><tr><td>LimitAccessException</td><td>限制访问异常，访问接口频率超限</td><td>429</td><td>HttpStatus.TOO_MANY_REQUESTS</td></tr><tr><td>ConstraintViolationException</td><td>参数校验异常（普通传参）</td><td>400</td><td>HttpStatus.BAD_REQUEST</td></tr><tr><td>BindException</td><td>参数校验异常（实体对象传参）</td><td>400</td><td>HttpStatus.BAD_REQUEST</td></tr><tr><td>FebsException</td><td>Febs系统异常</td><td>500</td><td>HttpStatus.INTERNAL_SERVER_ERROR</td></tr><tr><td>Exception</td><td>剩下的别的异常</td><td>500</td><td>HttpStatus.INTERNAL_SERVER_ERROR</td></tr></table><h3 id="数据层介绍"><a href="#数据层介绍" class="headerlink" title="数据层介绍"></a>数据层介绍</h3><p>首先看看表结构，数据表分为两大类：定时任务表和系统表。</p><p><img src="img/febsvue/20190408141755.png" alt="QQ截图20190408141755.png"></p><p>以qrtz_开头的为定时任务表，定时任务有基于内存和基于数据库的，本项目使用的是基于数据库持久化的方案。要详细了解这些表可以参考文章：<a href="http://www.ibloger.net/article/2650.html" target="_blank" rel="noopener">http://www.ibloger.net/article/2650.html</a>。</p><p>以t_开头的为系统表，他们的关系如下所示:</p><p><img src="img/febsvue/2019-04-08_145115.png" alt="2019-04-08_145115.png"></p><p>其中用户，角色和权限之间的关系使用的是经典的RBAC（Role-Based Access Control，基于角色的访问控制）模型。简单地说，一个用户拥有若干角色，每一个角色拥有若干权限。这样，就构造成“用户-角色-权限”的授权模型。在这种模型中，用户与角色之间，角色与权限之间，一般者是多对多的关系。如下图所示：</p><p><img src="img/febsvue/QQ截图20190408145646.png" alt="QQ截图20190408145646.png"></p><p>比如获取用户名为mrbrid的用户权限过程为：</p><ol><li><p>通过mrbrid的user_id从t_user_role表获取对应的role_id；</p></li><li><p>通过第1步获取的role_id从t_role_menu表获取对应的menu_id；</p></li><li><p>通过第2步获取的menu_id从t_menu获取menu相关信息（t_menu表的permission为权限信息）。</p></li></ol><p>数据层框架采用的是<a href="https://mp.baomidou.com/guide/" target="_blank" rel="noopener">MybatisPlus</a>，具体可以参考其官方文档。</p><h3 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑"></a>登录逻辑</h3><p>登录逻辑如下图所示：</p><p><img src="img/febsvue/QQ截图20190408153154.png" alt="QQ截图20190408153154.png"></p><p>这里详细说明下登录成功后的第2步、第3步和第4步过程：</p><ul><li><p>登录成功后，构建一个ActiveUser对象，对应<code>LoginController</code>的<code>saveTokenToRedis</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建在线用户</span></span><br><span class="line">ActiveUser activeUser = <span class="keyword">new</span> ActiveUser();</span><br><span class="line">activeUser.setUsername(user.getUsername());</span><br><span class="line">activeUser.setIp(ip);</span><br><span class="line">activeUser.setToken(token.getToken());</span><br><span class="line">activeUser.setLoginAddress(AddressUtil.getCityInfo(DbSearcher.BTREE_ALGORITHM, ip));</span><br><span class="line"></span><br><span class="line"><span class="comment">// zset 存储登录用户，score 为过期时间戳</span></span><br><span class="line"><span class="keyword">this</span>.redisService.zadd(FebsConstant.ACTIVE_USERS_ZSET_PREFIX, Double.valueOf(token.getExipreAt()), mapper.writeValueAsString(activeUser));</span><br></pre></td></tr></table></figure><p>然后将<code>activeUser</code>通过<code>ObjectMapper</code>序列化，存储到Redis的Zset结构中，key为<code>FebsConstant.ACTIVE_USERS_ZSET_PREFIX</code>（即febs.user.active），score为该用户的登录过期时间点（即Tokean失效时间），value为<code>activeUser</code>序列化值。</p><div class="note info"><p>Zset它在set的基础上增加了一个顺序属性(score)，这一属性在添加修改元素时候可以指定，每次指定后，zset会自动重新按新的值调整顺序。可以理解为有两列字段的数据表，一列存value,一列存顺序编号。</p></div><p>Zset相关Redis命令：</p><p><img src="img/febsvue/redis-zset.png" alt="redis-zset.png"></p><p>比如当用户mrbird和scott登录成功后，查看Redis中key为febs.user.active的值:</p><p><img src="img/febsvue/QQ截图20190408154805.png" alt="QQ截图20190408154805.png"></p></li><li><p>将Token存储到Redis中：key为febs.cache.token.token值.IP地址，value为token值，有效期为token的有效时长，对应的源码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.redisService.set(FebsConstant.TOKEN_CACHE_PREFIX + token.getToken() + StringPool.DOT + ip, token.getToken(), properties.getShiro().getJwtTimeOut() * <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p>返回前端数据包括:</p><p>1.token：token；</p><p>2.exipreTime：token过期时间；</p><p>3.roles：用户角色；</p><p>4.permissions：用户权限；</p><p>5.config：用户前端系统的个性化配置；</p><p>6.user：用户信息（不包括密码）。</p><p>比如，当scott登录成功后，接口返回数据如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"data"</span>: &#123;</span><br><span class="line">        <span class="attr">"permissions"</span>: [</span><br><span class="line">            <span class="string">"user:view"</span>,</span><br><span class="line">            <span class="string">"dept:add"</span>,</span><br><span class="line">            <span class="string">"job:export"</span>,</span><br><span class="line">            <span class="string">"role:add"</span>,</span><br><span class="line">            <span class="string">"weather:view"</span>,</span><br><span class="line">            <span class="string">"dict:add"</span>,</span><br><span class="line">            <span class="string">"role:export"</span>,</span><br><span class="line">            <span class="string">"menu:export"</span>,</span><br><span class="line">            <span class="string">"dict:view"</span>,</span><br><span class="line">            <span class="string">"dept:export"</span>,</span><br><span class="line">            <span class="string">"menu:view"</span>,</span><br><span class="line">            <span class="string">"role:view"</span>,</span><br><span class="line">            <span class="string">"user:export"</span>,</span><br><span class="line">            <span class="string">"job:add"</span>,</span><br><span class="line">            <span class="string">"dept:view"</span>,</span><br><span class="line">            <span class="string">"article:view"</span>,</span><br><span class="line">            <span class="string">"log:view"</span>,</span><br><span class="line">            <span class="string">"jobLog:view"</span>,</span><br><span class="line">            <span class="string">"job:view"</span>,</span><br><span class="line">            <span class="string">"menu:add"</span>,</span><br><span class="line">            <span class="string">"redis:view"</span>,</span><br><span class="line">            <span class="string">"log:export"</span>,</span><br><span class="line">            <span class="string">"movie:coming"</span>,</span><br><span class="line">            <span class="string">"movie:hot"</span>,</span><br><span class="line">            <span class="string">"dict:export"</span>,</span><br><span class="line">            <span class="string">"jobLog:export"</span>,</span><br><span class="line">            <span class="string">"user:online"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"roles"</span>: [</span><br><span class="line">            <span class="string">"注册用户"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"exipreTime"</span>: <span class="string">"20190408164521"</span>,</span><br><span class="line">        <span class="attr">"config"</span>: &#123;</span><br><span class="line">            <span class="attr">"userId"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"theme"</span>: <span class="string">"light"</span>,</span><br><span class="line">            <span class="attr">"layout"</span>: <span class="string">"side"</span>,</span><br><span class="line">            <span class="attr">"multiPage"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"fixSiderbar"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"fixHeader"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"color"</span>: <span class="string">"rgb(24, 144, 255)"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"user"</span>: &#123;</span><br><span class="line">            <span class="attr">"userId"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"username"</span>: <span class="string">"scott"</span>,</span><br><span class="line">            <span class="attr">"password"</span>: <span class="string">"it's a secret"</span>,</span><br><span class="line">            <span class="attr">"deptId"</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">"deptName"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"email"</span>: <span class="string">"scott@qq.com"</span>,</span><br><span class="line">            <span class="attr">"mobile"</span>: <span class="string">"15134627380"</span>,</span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="attr">"createTime"</span>: <span class="string">"2017-12-30 00:16:39"</span>,</span><br><span class="line">            <span class="attr">"modifyTime"</span>: <span class="string">"2019-01-18 08:59:09"</span>,</span><br><span class="line">            <span class="attr">"lastLoginTime"</span>: <span class="string">"2019-01-23 15:34:28"</span>,</span><br><span class="line">            <span class="attr">"ssex"</span>: <span class="string">"0"</span>,</span><br><span class="line">            <span class="attr">"description"</span>: <span class="string">"我是scott，嗯嗯"</span>,</span><br><span class="line">            <span class="attr">"avatar"</span>: <span class="string">"gaOngJwsRYRaVAuXXcmB.png"</span>,</span><br><span class="line">            <span class="attr">"roleId"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"roleName"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"sortField"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"sortOrder"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"createTimeFrom"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"createTimeTo"</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"YBeNsMJ0ZJm9GLJP1rlO"</span>,</span><br><span class="line">            <span class="attr">"authCacheKey"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"token"</span>: <span class="string">"b25e39b47e774b4a05b3cb1555fc377f209457c3fd339d373d3fca7b1ea8be56fdc6ed05b7ffb0700e7300d242fb83b57b35f45ee1b155b380 50a0671bc7ec54c2f2c5bb1aee0651db69ce657e8ab4cb79c7806209103eda8a3bc96aa043a0144ae3c06a5c549ac168183c37384cf4347e450bf11644d0 62c31ffc3059e63722f849a5de4540b0d1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"认证成功"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Redis缓存使用"><a href="#Redis缓存使用" class="headerlink" title="Redis缓存使用"></a>Redis缓存使用</h3><p>在系统启动过程中，会执行缓存初始化操作，对应<code>CacheInitRunner</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheInitRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserManager userManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            List&lt;User&gt; list = <span class="keyword">this</span>.userService.list();</span><br><span class="line">            <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">                userManager.loadUserRedisCache(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>loadUserRedisCache</code>方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将用户相关信息添加到 Redis缓存中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadUserRedisCache</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 缓存用户</span></span><br><span class="line">    cacheService.saveUser(user.getUsername());</span><br><span class="line">    <span class="comment">// 缓存用户角色</span></span><br><span class="line">    cacheService.saveRoles(user.getUsername());</span><br><span class="line">    <span class="comment">// 缓存用户权限</span></span><br><span class="line">    cacheService.savePermissions(user.getUsername());</span><br><span class="line">    <span class="comment">// 缓存用户个性化配置</span></span><br><span class="line">    cacheService.saveUserConfigs(String.valueOf(user.getUserId()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这一过程缓存了用户信息，用户角色信息，用户权限信息，用户的个性化配置信息，缓存的具体key，value可以查看上述方法的源码。通过这些缓存，可以一定程度减轻数据库压力。</p><p>为了确保缓存数据和数据库数据的一致性，我们必须在相应的增删改方法中对缓存进行相应的操作。比如在更新用户后，我们必须更新相应的缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新将用户信息，用户角色信息，用户权限信息 加载到 redis中</span></span><br><span class="line">    cacheService.saveUser(user.getUsername());</span><br><span class="line">    cacheService.saveRoles(user.getUsername());</span><br><span class="line">    cacheService.savePermissions(user.getUsername());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><div class="note danger"><p>总而言之，由于我们在启动系统的时候缓存了用户信息，用户角色信息，用户权限信息，用户的个性化配置信息，之后凡是涉及到用户，用户角色，用户权限和用户个性化配置的相关增删改操作都应该及时更新相应的缓存。</p></div><h3 id="动态路由构建"><a href="#动态路由构建" class="headerlink" title="动态路由构建"></a>动态路由构建</h3><p>不同的用户拥有不同的角色，不同的角色对应不同的菜单权限，所以我们需要通过用户查询出对应的菜单列表，然后将列表构建成前端需要的路由（前端根据路由信息构建相应的菜单）。</p><p>获取用户路由的方法为<code>UserManage#getUserRouters</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过用户名构建 Vue路由</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 路由集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;VueRouter&lt;Menu&gt;&gt; getUserRouters(String username) &#123;</span><br><span class="line">    List&lt;VueRouter&lt;Menu&gt;&gt; routes = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Menu&gt; menus = <span class="keyword">this</span>.menuService.findUserMenus(username);</span><br><span class="line">    menus.forEach(menu -&gt; &#123;</span><br><span class="line">        VueRouter&lt;Menu&gt; route = <span class="keyword">new</span> VueRouter&lt;&gt;();</span><br><span class="line">        route.setId(menu.getMenuId().toString());</span><br><span class="line">        route.setParentId(menu.getParentId().toString());</span><br><span class="line">        route.setIcon(menu.getIcon());</span><br><span class="line">        route.setPath(menu.getPath());</span><br><span class="line">        route.setComponent(menu.getComponent());</span><br><span class="line">        route.setName(menu.getMenuName());</span><br><span class="line">        route.setMeta(<span class="keyword">new</span> RouterMeta(<span class="keyword">true</span>, <span class="keyword">null</span>));</span><br><span class="line">        routes.add(route);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> TreeUtil.buildVueRouter(routes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>比如用户mrbird对应的前端路由为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"/"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"主页"</span>,</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"MenuView"</span>,</span><br><span class="line">        <span class="attr">"icon"</span>: <span class="string">"none"</span>,</span><br><span class="line">        <span class="attr">"redirect"</span>: <span class="string">"/home"</span>,</span><br><span class="line">        <span class="attr">"children"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"path"</span>: <span class="string">"/home"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"系统主页"</span>,</span><br><span class="line">                <span class="attr">"component"</span>: <span class="string">"HomePageView"</span>,</span><br><span class="line">                <span class="attr">"icon"</span>: <span class="string">"home"</span>,</span><br><span class="line">                <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                    <span class="attr">"closeable"</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="attr">"isShow"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"path"</span>: <span class="string">"/system"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"系统管理"</span>,</span><br><span class="line">                <span class="attr">"component"</span>: <span class="string">"PageView"</span>,</span><br><span class="line">                <span class="attr">"icon"</span>: <span class="string">"appstore-o"</span>,</span><br><span class="line">                <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                    <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"children"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/system/user"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"用户管理"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"system/user/User"</span>,</span><br><span class="line">                        <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/system/role"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"角色管理"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"system/role/Role"</span>,</span><br><span class="line">                        <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/system/menu"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"菜单管理"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"system/menu/Menu"</span>,</span><br><span class="line">                        <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/system/dept"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"部门管理"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"system/dept/Dept"</span>,</span><br><span class="line">                        <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/system/dict"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"字典管理"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"system/dict/Dict"</span>,</span><br><span class="line">                        <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"path"</span>: <span class="string">"/monitor"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"系统监控"</span>,</span><br><span class="line">                <span class="attr">"component"</span>: <span class="string">"PageView"</span>,</span><br><span class="line">                <span class="attr">"icon"</span>: <span class="string">"dashboard"</span>,</span><br><span class="line">                <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                    <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"children"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/monitor/online"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"在线用户"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"monitor/Online"</span>,</span><br><span class="line">                        <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/monitor/systemlog"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"系统日志"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"monitor/SystemLog"</span>,</span><br><span class="line">                        <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/monitor/redis/info"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"Redis监控"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"monitor/RedisInfo"</span>,</span><br><span class="line">                        <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/monitor/httptrace"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"请求追踪"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"monitor/Httptrace"</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/monitor/system"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"系统信息"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"EmptyPageView"</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">"children"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"path"</span>: <span class="string">"/monitor/system/jvminfo"</span>,</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"JVM信息"</span>,</span><br><span class="line">                                <span class="attr">"component"</span>: <span class="string">"monitor/JvmInfo"</span>,</span><br><span class="line">                                <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                                    <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"path"</span>: <span class="string">"/monitor/system/tomcatinfo"</span>,</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"Tomcat信息"</span>,</span><br><span class="line">                                <span class="attr">"component"</span>: <span class="string">"monitor/TomcatInfo"</span>,</span><br><span class="line">                                <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                                    <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"path"</span>: <span class="string">"/monitor/system/info"</span>,</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"服务器信息"</span>,</span><br><span class="line">                                <span class="attr">"component"</span>: <span class="string">"monitor/SystemInfo"</span>,</span><br><span class="line">                                <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                                    <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"path"</span>: <span class="string">"/job"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"任务调度"</span>,</span><br><span class="line">                <span class="attr">"component"</span>: <span class="string">"PageView"</span>,</span><br><span class="line">                <span class="attr">"icon"</span>: <span class="string">"clock-circle-o"</span>,</span><br><span class="line">                <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                    <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"children"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/job/job"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"定时任务"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"quartz/job/Job"</span>,</span><br><span class="line">                        <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/job/log"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"调度日志"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"quartz/log/JobLog"</span>,</span><br><span class="line">                        <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"path"</span>: <span class="string">"/web"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"网络资源"</span>,</span><br><span class="line">                <span class="attr">"component"</span>: <span class="string">"PageView"</span>,</span><br><span class="line">                <span class="attr">"icon"</span>: <span class="string">"compass"</span>,</span><br><span class="line">                <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                    <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"children"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/web/weather"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"天气查询"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"web/Weather"</span>,</span><br><span class="line">                        <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/web/dailyArticle"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"每日一文"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"web/DailyArticle"</span>,</span><br><span class="line">                        <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/web/movie"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"影视资讯"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"EmptyPageView"</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="attr">"children"</span>: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"path"</span>: <span class="string">"/web/movie/hot"</span>,</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"正在热映"</span>,</span><br><span class="line">                                <span class="attr">"component"</span>: <span class="string">"web/MovieHot"</span>,</span><br><span class="line">                                <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                                <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                                    <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">"path"</span>: <span class="string">"/web/movie/coming"</span>,</span><br><span class="line">                                <span class="attr">"name"</span>: <span class="string">"即将上映"</span>,</span><br><span class="line">                                <span class="attr">"component"</span>: <span class="string">"web/MovieComing"</span>,</span><br><span class="line">                                <span class="attr">"icon"</span>: <span class="string">""</span>,</span><br><span class="line">                                <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                                    <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"path"</span>: <span class="string">"/others"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"其他模块"</span>,</span><br><span class="line">                <span class="attr">"component"</span>: <span class="string">"PageView"</span>,</span><br><span class="line">                <span class="attr">"icon"</span>: <span class="string">"coffee"</span>,</span><br><span class="line">                <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                    <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"children"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"path"</span>: <span class="string">"/others/excel"</span>,</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"导入导出"</span>,</span><br><span class="line">                        <span class="attr">"component"</span>: <span class="string">"others/Excel"</span>,</span><br><span class="line">                        <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                            <span class="attr">"closeable"</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"path"</span>: <span class="string">"/profile"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"个人中心"</span>,</span><br><span class="line">                <span class="attr">"component"</span>: <span class="string">"personal/Profile"</span>,</span><br><span class="line">                <span class="attr">"icon"</span>: <span class="string">"none"</span>,</span><br><span class="line">                <span class="attr">"meta"</span>: &#123;</span><br><span class="line">                    <span class="attr">"closeable"</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">"isShow"</span>: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"path"</span>: <span class="string">"*"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"404"</span>,</span><br><span class="line">        <span class="attr">"component"</span>: <span class="string">"error/404"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p></p><p>关于Vue Router可以参考：<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a>。</p><h3 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h3><p>我们可以在Controller的方法上通过Shiro相关的权限注解进行权限控制，比如下面这个方法只有当用户拥有<code>user:add</code>权限才能访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"user:add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(@Valid User user)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>当用户没有<code>user:add</code>权限时，系统将抛出<code>UnauthorizedException</code>异常，由<code>GlobalExceptionHandler</code>捕获，返回403状态码。</p><p>更多Shiro提供的权限注解可以参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示当前Subject已经通过login进行了身份验证；即Subject.isAuthenticated()返回true。</span></span><br><span class="line"><span class="meta">@RequiresAuthentication</span>  </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 表示当前Subject已经身份验证或者通过记住我登录的。</span></span><br><span class="line"><span class="meta">@RequiresUser</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前Subject没有身份验证或通过记住我登录过，即是游客身份。</span></span><br><span class="line"><span class="meta">@RequiresGuest</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前Subject需要角色admin和user。  </span></span><br><span class="line"><span class="meta">@RequiresRoles</span>(value=&#123;<span class="string">"admin"</span>, <span class="string">"user"</span>&#125;, logical= Logical.AND)  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示当前Subject需要权限user:a或user:b。</span></span><br><span class="line"><span class="meta">@RequiresPermissions</span> (value=&#123;<span class="string">"user:a"</span>, <span class="string">"user:b"</span>&#125;, logical= Logical.OR)</span><br></pre></td></tr></table></figure><p></p><h3 id="多数据源"><a href="#多数据源" class="headerlink" title="多数据源"></a>多数据源</h3><p>多数据源采用的是MyBatis Plus提供的方案：<a href="https://mp.baomidou.com/guide/dynamic-datasource.html" target="_blank" rel="noopener">https://mp.baomidou.com/guide/dynamic-datasource.html</a></p><h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><p>目前只有后端代码生成器，采用的是MyBatis Plus提供的方案，对应源码<code>cc.mrbird.febs.common.generator.CodeGenerator</code>，执行其main方法，然后输入表名，就可以生成相应的domain、dao、service、controller、mapper.xml。</p><h3 id="Excel导入导出"><a href="#Excel导入导出" class="headerlink" title="Excel导入导出"></a>Excel导入导出</h3><p>Excel导入导出使用的插件为：<a href="https://gitee.com/wuwenze/ExcelKit" target="_blank" rel="noopener">https://gitee.com/wuwenze/ExcelKit</a>，具体操作规则可以仔细阅读这个项目的Readme.md</p><h3 id="统一参数校验"><a href="#统一参数校验" class="headerlink" title="统一参数校验"></a>统一参数校验</h3><p>统一参数校验可以参考我的博客：<a href="https://mrbird.cc/Spring-Boot-Hibernate-Validator-Params-Check.html">Spring Boot配合Hibernate Validator参数校验</a>。</p><h3 id="SQL打印"><a href="#SQL打印" class="headerlink" title="SQL打印"></a>SQL打印</h3><p>SQL打印采用的插件为<a href="https://p6spy.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">p6spy</a>，要开启p6spy的SQL打印功能，只需将配置文件application.yml中的<code>spring.datasource.dynamic.p6spy</code>改为<code>true</code>即可。</p><p>在p6spy.properties文件中可以配置打印规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 使用日志系统记录 sql</span><br><span class="line">appender=com.p6spy.engine.spy.appender.Slf4JLogger</span><br><span class="line"># 自定义日志打印</span><br><span class="line">logMessageFormat=cc.mrbird.febs.common.config.P6spySqlFormatConfig</span><br><span class="line"># 是否开启慢 SQL记录</span><br><span class="line">outagedetection=true</span><br><span class="line"># 慢 SQL记录标准 2 秒</span><br><span class="line">outagedetectioninterval=2</span><br><span class="line"># 开启过滤</span><br><span class="line">filter=true</span><br><span class="line"># 包含 QRTZ的不打印</span><br><span class="line">exclude=QRTZ</span><br></pre></td></tr></table></figure><p></p><p>SQL打印效果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2019-04-08 15:29:50 | INFO  | http-nio-9527-exec-1 | p6spy | 2019-04-08 15:29:50 | 耗时 73 ms | SQL 语句：</span><br><span class="line">UPDATE t_user SET last_login_time=&apos;2019-04-08T15:29:50.724+0800&apos; WHERE username = &apos;mrbird&apos;;</span><br><span class="line">2019-04-08 15:29:50 | INFO  | http-nio-9527-exec-1 | p6spy | 2019-04-08 15:29:50 | 耗时 0 ms | SQL 语句：</span><br><span class="line">SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = &apos;mrbird&apos;;</span><br><span class="line">2019-04-08 15:29:52 | INFO  | http-nio-9527-exec-1 | p6spy | 2019-04-08 15:29:52 | 耗时 489 ms | SQL 语句：</span><br><span class="line">INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( &apos;mrbird&apos;, &apos;2019-04-08T15:29:50.874+0800&apos;, &apos;&apos;, &apos;127.0.0.1&apos; );</span><br><span class="line">2019-04-08 15:45:20 | INFO  | http-nio-9527-exec-7 | p6spy | 2019-04-08 15:45:20 | 耗时 1 ms | SQL 语句：</span><br><span class="line">UPDATE t_user SET last_login_time=&apos;2019-04-08T15:45:20.193+0800&apos; WHERE username = &apos;scott&apos;;</span><br><span class="line">2019-04-08 15:45:20 | INFO  | http-nio-9527-exec-7 | p6spy | 2019-04-08 15:45:20 | 耗时 0 ms | SQL 语句：</span><br><span class="line">SELECT USER_ID,username,password,dept_id,email,mobile,status,create_time,modify_time,last_login_time,ssex,description,avatar FROM t_user WHERE username = &apos;scott&apos;;</span><br><span class="line">2019-04-08 15:45:21 | INFO  | http-nio-9527-exec-7 | p6spy | 2019-04-08 15:45:21 | 耗时 89 ms | SQL 语句：</span><br><span class="line">INSERT INTO t_login_log ( username, login_time, location, ip ) VALUES ( &apos;scott&apos;, &apos;2019-04-08T15:45:20.466+0800&apos;, &apos;&apos;, &apos;127.0.0.1&apos; );</span><br></pre></td></tr></table></figure><div class="note info"><p>开启这个功能方便我们开发调试，生产环境最好关闭这个功能，因为它在一定程度上会造成性能耗损。</p></div><p>更多p6psy的配置可以参考：<a href="https://p6spy.readthedocs.io/en/latest/configandusage.html" target="_blank" rel="noopener">https://p6spy.readthedocs.io/en/latest/configandusage.html</a></p><h3 id="AOP记录操作日志"><a href="#AOP记录操作日志" class="headerlink" title="AOP记录操作日志"></a>AOP记录操作日志</h3><p>具体可以参考我的博客：<a href="https://mrbird.cc/Spring-Boot-AOP%20log.html">Spring Boot AOP记录用户操作日志</a>。</p><p>记录操作日志的过程可以改为异步的方式，这样不会造成接口性能损耗，可以参考我的博客：<a href="https://mrbird.cc/Spring-Boot-Async.html">Spring Boot 中的异步调用</a>。</p><h3 id="接口限流"><a href="#接口限流" class="headerlink" title="接口限流"></a>接口限流</h3><p>项目中<code>@Limit</code>注解可以实现接口的限流。即规定一段时间内最多可以访问该接口的次数，超过这个次数则抛出<code>LimitAccessException</code>异常。<code>@Limit</code>注解如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cc.mrbird.common.domain.LimitType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Limit &#123;</span><br><span class="line">    <span class="comment">// 资源名称，用于描述接口功能</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="comment">// 资源 key</span></span><br><span class="line">    <span class="function">String <span class="title">key</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="comment">// key prefix</span></span><br><span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">    <span class="comment">// 时间的，单位秒</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">period</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 限制访问次数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 限制类型</span></span><br><span class="line">    <span class="function">LimitType <span class="title">limitType</span><span class="params">()</span> <span class="keyword">default</span> LimitType.CUSTOMER</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中，limitType包含传统类型限流和根据IP限流，其为枚举类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> LimitType &#123;</span><br><span class="line">    <span class="comment">// 传统类型</span></span><br><span class="line">    CUSTOMER,</span><br><span class="line">    <span class="comment">// 根据 IP 限制</span></span><br><span class="line">    IP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>下面举个使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cc.mrbird.common.annotation.Limit;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger ATOMIC_INTEGER = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Limit</span>(key = <span class="string">"test"</span>, period = <span class="number">600</span>, count = <span class="number">10</span>, name = <span class="string">"resource"</span>, prefix = <span class="string">"limit"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">testLimiter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ATOMIC_INTEGER.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面配置表示使用传统限流的方式，testLimiter方法在600秒内最多只能访问10次。当600秒内第11次访问该接口时，接口将抛出<code>LimitAccessException</code>异常。</p><h3 id="Shiro教程"><a href="#Shiro教程" class="headerlink" title="Shiro教程"></a>Shiro教程</h3><ol><li><p><a href="https://mrbird.cc/Apache%20Shiro%E7%AE%80%E4%BB%8B.html">Apache Shiro简介</a></p></li><li><p><a href="https://mrbird.cc/Spring-Boot-shiro%20Authentication.html">Spring Boot Shiro用户认证</a></p></li><li><p><a href="https://mrbird.cc/Spring-Boot-Shiro%20Remember-Me.html">Spring Boot Shiro 添加记住我功能</a></p></li><li><p><a href="https://mrbird.cc/Spring-Boot-Shiro%20Authorization.html">Spring Boot Shiro权限控制</a></p></li><li><p><a href="https://mrbird.cc/Spring-Boot-Shiro%20cache.html">Spring Boot Shiro中使用缓存</a></p></li><li><p><a href="https://mrbird.cc/Spring-Boot-Themeleaf%20Shiro%20tag.html">Spring Boot Thymeleaf中使用Shiro标签</a></p></li><li><p><a href="https://mrbird.cc/Spring-Boot-Shiro%20session.html">Spring Boot Shiro在线会话管理</a></p></li></ol><h3 id="Shiro如何整合JWT"><a href="#Shiro如何整合JWT" class="headerlink" title="Shiro如何整合JWT"></a>Shiro如何整合JWT</h3><p>Shiro如何整合JWT可以参考：<a href="https://gitlab.com/wuyouzhuguli/shiro_jwt" target="_blank" rel="noopener">https://gitlab.com/wuyouzhuguli/shiro_jwt</a></p><p>为了简化过程，例子没有使用数据库和Redis，在内存中模拟了两个用户：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟两个用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;User&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;User&gt; <span class="title">users</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 模拟两个用户：</span></span><br><span class="line">    <span class="comment">// 1. 用户名 admin，密码 123456，角色 admin（管理员），权限 "user:add"，"user:view"</span></span><br><span class="line">    <span class="comment">// 1. 用户名 scott，密码 123456，角色 regist（注册用户），权限 "user:view"</span></span><br><span class="line">    users.add(<span class="keyword">new</span> User(</span><br><span class="line">            <span class="string">"admin"</span>,</span><br><span class="line">            <span class="string">"bfc62b3f67a4c3e57df84dad8cc48a3b"</span>,</span><br><span class="line">            <span class="keyword">new</span> HashSet&lt;&gt;(Collections.singletonList(<span class="string">"admin"</span>)),</span><br><span class="line">            <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">"user:add"</span>, <span class="string">"user:view"</span>))));</span><br><span class="line">    users.add(<span class="keyword">new</span> User(</span><br><span class="line">            <span class="string">"scott"</span>,</span><br><span class="line">            <span class="string">"11bd73355c7bbbac151e4e4f943e59be"</span>,</span><br><span class="line">            <span class="keyword">new</span> HashSet&lt;&gt;(Collections.singletonList(<span class="string">"regist"</span>)),</span><br><span class="line">            <span class="keyword">new</span> HashSet&lt;&gt;(Collections.singletonList(<span class="string">"user:view"</span>))));</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以使用PostMan进行接口测试。</p><h2 id="前端项目介绍"><a href="#前端项目介绍" class="headerlink" title="前端项目介绍"></a>前端项目介绍</h2><h3 id="项目结构-1"><a href="#项目结构-1" class="headerlink" title="项目结构"></a>项目结构</h3><p>项目机构如下图所示：</p><p><img src="img/febsvue/2019-04-08_185510.png" alt="2019-04-08_185510.png"></p><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>在用户登录成功后，项目会通过Vuex和localstorage存储一些数据供项目全局使用。</p><p>正如前面所说，当用户登录成功后，后端会返回如下数据：</p><ol><li><p>token：token；</p></li><li><p>exipreTime：token过期时间；</p></li><li><p>roles：用户角色；</p></li><li><p>permissions：用户权限；</p></li><li><p>config：用户前端系统的个性化配置；</p></li><li><p>user：用户信息（不包括密码）。</p></li></ol><p>在src/views/login/Login.vue文件中你会看到如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">...mapMutations(&#123;</span><br><span class="line">  setToken: <span class="string">'account/setToken'</span>,</span><br><span class="line">  setExpireTime: <span class="string">'account/setExpireTime'</span>,</span><br><span class="line">  setPermissions: <span class="string">'account/setPermissions'</span>,</span><br><span class="line">  setRoles: <span class="string">'account/setRoles'</span>,</span><br><span class="line">  setUser: <span class="string">'account/setUser'</span>,</span><br><span class="line">  setTheme: <span class="string">'setting/setTheme'</span>,</span><br><span class="line">  setLayout: <span class="string">'setting/setLayout'</span>,</span><br><span class="line">  setMultipage: <span class="string">'setting/setMultipage'</span>,</span><br><span class="line">  fixSiderbar: <span class="string">'setting/fixSiderbar'</span>,</span><br><span class="line">  fixHeader: <span class="string">'setting/fixHeader'</span>,</span><br><span class="line">  setColor: <span class="string">'setting/setColor'</span></span><br><span class="line">&#125;),</span><br><span class="line">saveLoginData (data) &#123;</span><br><span class="line">  <span class="keyword">this</span>.setToken(data.token)</span><br><span class="line">  <span class="keyword">this</span>.setExpireTime(data.exipreTime)</span><br><span class="line">  <span class="keyword">this</span>.setUser(data.user)</span><br><span class="line">  <span class="keyword">this</span>.setPermissions(data.permissions)</span><br><span class="line">  <span class="keyword">this</span>.setRoles(data.roles)</span><br><span class="line">  <span class="keyword">this</span>.setTheme(data.config.theme)</span><br><span class="line">  <span class="keyword">this</span>.setLayout(data.config.layout)</span><br><span class="line">  <span class="keyword">this</span>.setMultipage(data.config.multiPage === <span class="string">'1'</span>)</span><br><span class="line">  <span class="keyword">this</span>.fixSiderbar(data.config.fixSiderbar === <span class="string">'1'</span>)</span><br><span class="line">  <span class="keyword">this</span>.fixHeader(data.config.fixHeader === <span class="string">'1'</span>)</span><br><span class="line">  <span class="keyword">this</span>.setColor(data.config.color)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这将把登录接口返回的数据存储到Vuex和浏览器的localstorage中。</p><p>存储Token的原因是，后续需要认证的请求，都会在请求头中携带这个Token；存储ExpireTime的原因是为了优化认证过期时的用户体验；存储用户信息的原因是为了供个人中心和系统主页使用；存储角色和权限是为了判断页面按钮渲染与否；存储用户个性化配置的原因是为了通过这些配置渲染不同的系统界面。</p><h3 id="路由导航守卫"><a href="#路由导航守卫" class="headerlink" title="路由导航守卫"></a>路由导航守卫</h3><p>路由导航守卫代码位置：frontend/src/router/index.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">'/login'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> asyncRouter</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导航守卫，渲染动态路由</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (whiteList.indexOf(to.path) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> token = db.get(<span class="string">'USER_TOKEN'</span>)</span><br><span class="line">  <span class="keyword">let</span> user = db.get(<span class="string">'USER'</span>)</span><br><span class="line">  <span class="keyword">let</span> userRouter = get(<span class="string">'USER_ROUTER'</span>)</span><br><span class="line">  <span class="keyword">if</span> (token.length &amp;&amp; user) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!asyncRouter) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!userRouter) &#123;</span><br><span class="line">        request.get(<span class="string">`menu/<span class="subst">$&#123;user.username&#125;</span>`</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          asyncRouter = res.data</span><br><span class="line">          save(<span class="string">'USER_ROUTER'</span>, asyncRouter)</span><br><span class="line">          go(to, next)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        asyncRouter = userRouter</span><br><span class="line">        go(to, next)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next(<span class="string">'/login'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">go</span> (<span class="params">to, next</span>) </span>&#123;</span><br><span class="line">  asyncRouter = filterAsyncRouter(asyncRouter)</span><br><span class="line">  router.addRoutes(asyncRouter)</span><br><span class="line">  next(&#123;...to, <span class="attr">replace</span>: <span class="literal">true</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>主要逻辑分为下面几步：</p><ol><li><p>判断要跳转的路由地址是否在路由白名单内，是的话放行，不是的话进行第2步；</p></li><li><p>从内存中获取token和用户信息，如果存在则进行第3步，不存在跳转到登录页；</p></li><li><p>判断动态路由信息是否存在，存在则放行，不存在则进行第4步；</p></li><li><p>判断用户路由是否已经加载，是的话将用户路由赋值给动态路由，并执行路由添加操作，然后跳转；如果用户路由不存在，则执行第5步；</p></li><li><p>根据用户名从后台获取用户路由信息，并将其保存到内存中，再执行路由添加操作，然后跳转。</p></li></ol><h3 id="权限控制-1"><a href="#权限控制-1" class="headerlink" title="权限控制"></a>权限控制</h3><p>在前端页面中，我们已经实现了通过不同用户获取不同的路由，以此渲染出不同的菜单列表功能，此外页面上的操作按钮也必须进行权限控制。</p><p>正如前面所述，在登录成功后，系统会把用户的角色和权限信息存储到了内存中，所以我们可以通过这些信息结合<a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener"> 自定义Vue指令 </a>的方式来实现按钮的权限控制。</p><p>目前支持的和权限相关的Vue指令有：</p><table><thead><tr><th>指令</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>v-hasPermission</td><td>当用户拥有列出的权限的时候，渲染该元素</td><td><code>&lt;template v-hasPermission=&quot;&#39;user:add&#39;,&#39;user:update&#39;&quot;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/template&gt;</code></td></tr><tr><td>v-hasAnyPermission</td><td>当用户拥有列出的任意一项权限的时候，渲染该元素</td><td><code>&lt;template v-hasAnyPermission=&quot;&#39;user:add&#39;,&#39;user:update&#39;&quot;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/template&gt;</code></td></tr><tr><td>v-hasRole</td><td>当用户拥有列出的角色的时候，渲染该元素</td><td><code>&lt;template v-hasRole=&quot;&#39;admin&#39;,&#39;register&#39;&quot;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/template&gt;</code></td></tr><tr><td>v-hasAnyRole</td><td>当用户拥有列出的任意一个角色的时候，渲染该元素</td><td><code>&lt;template v-hasAnyRole=&quot;&#39;admin&#39;,&#39;register&#39;&quot;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/template&gt;</code></td></tr><tr><td>hasNoPermission</td><td>当用户没有列出的权限的时候，渲染该元素</td><td><code>&lt;template v-hasNoPermission=&quot;&#39;user:add&#39;,&#39;register&#39;&quot;&gt;&lt;span&gt;无操作权限&lt;/span&gt;&lt;/template&gt;</code></td></tr></tbody></table><p>以<code>v-hasPermission=&quot;user:add&quot;</code>为例，详细介绍下自定义权限Vue指令的实现过程：</p><ol><li><p>在src/utils/permissionDirect.js中定义如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">export</span> <span class="keyword">const</span> hasPermission = &#123;</span><br><span class="line">  install (Vue) &#123;</span><br><span class="line">    Vue.directive(<span class="string">'hasPermission'</span>, &#123;</span><br><span class="line">      bind (el, binding, vnode) &#123;</span><br><span class="line">        <span class="keyword">let</span> permissions = vnode.context.$store.state.account.permissions</span><br><span class="line">        <span class="keyword">let</span> value = binding.value.split(<span class="string">','</span>)</span><br><span class="line">        <span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> value) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!permissions.includes(v)) &#123;</span><br><span class="line">            flag = <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!el.parentNode) &#123;</span><br><span class="line">            el.style.display = <span class="string">'none'</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            el.parentNode.removeChild(el)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，我们从Vuex中获取了用户所拥有的权限，然后判断这些权限中是否包含<code>user:add</code>，如果不包含，则将对应的元素（el）移除或者隐藏。所以当用户没有<code>user:add</code>权限时，下面的按钮将不会被渲染在页面上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-hasPermission</span>=<span class="string">"'user:add'"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>要让自定义Vue指令生效，还需要在src/utils/install.js中将其添加到Plugins列表。</p></li></ol><h3 id="Axios封装"><a href="#Axios封装" class="headerlink" title="Axios封装"></a>Axios封装</h3><p>项目使用Axios插件来发送HTTP请求，并对它进行了封装（frontend/src/utils/request.js），这里主要讲述下request.js中主要逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统一配置</span></span><br><span class="line"><span class="keyword">let</span> FEBS_REQUEST = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'http://127.0.0.1:9527/'</span>,</span><br><span class="line">  responseType: <span class="string">'json'</span>,</span><br><span class="line">  validateStatus (status) &#123;</span><br><span class="line">    <span class="comment">// 200 外的状态码都认定为失败</span></span><br><span class="line">    <span class="keyword">return</span> status === <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面这段代码对请求进行了统一配置，baseURL定义了后端地址的基础路径，responseType定义了响应数据类型为JSON，只有状态码为200时才认定请求成功。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截请求</span></span><br><span class="line">FEBS_REQUEST.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> expireTime = store.state.account.expireTime</span><br><span class="line">  <span class="keyword">let</span> now = moment().format(<span class="string">'YYYYMMDDHHmmss'</span>)</span><br><span class="line">  <span class="comment">// 让token早10秒种过期，提升“请重新登录”弹窗体验</span></span><br><span class="line">  <span class="keyword">if</span> (now - expireTime &gt;= <span class="number">-10</span>) &#123;</span><br><span class="line">    Modal.error(&#123;</span><br><span class="line">      title: <span class="string">'登录已过期'</span>,</span><br><span class="line">      content: <span class="string">'很抱歉，登录已过期，请重新登录'</span>,</span><br><span class="line">      okText: <span class="string">'重新登录'</span>,</span><br><span class="line">      mask: <span class="literal">false</span>,</span><br><span class="line">      onOk: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    	  <span class="comment">// 为什么不直接跳转到登录页呢？那是因为Vue没有提供清空路由的方法，只能通过刷新页面的方式</span></span><br><span class="line">    	  <span class="comment">// 来清除之前动态添加的路由信息。</span></span><br><span class="line">          db.clear()</span><br><span class="line">          location.reload()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 有 token就带上</span></span><br><span class="line">  <span class="keyword">if</span> (store.state.account.token) &#123;</span><br><span class="line">    config.headers.Authentication = store.state.account.token</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在Axios的前置拦截中，我们首先判断了token是否已经过期，如果过期了则清空在登录时保存的数据，并且刷新页面。这时候通过路由导航守卫，页面会被重定向到登录页面，引导用户重新登录。</p><p>如果token没有过期，则在请求头上带上token信息。<code>headers.Authentication</code>和后端代码中的TOKEN名称相对应：</p><p><img src="img/febsvue/QQ截图20190409101831.png" alt="QQ截图20190409101831.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截响应</span></span><br><span class="line">FEBS_REQUEST.interceptors.response.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, (error) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (error.response) &#123;</span><br><span class="line">    <span class="keyword">let</span> errorMessage = error.response.data === <span class="literal">null</span> ? <span class="string">'系统内部异常，请联系网站管理员'</span> : error.response.data.message</span><br><span class="line">    <span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">        notification.error(&#123;</span><br><span class="line">          message: <span class="string">'系统提示'</span>,</span><br><span class="line">          description: <span class="string">'很抱歉，资源未找到'</span>,</span><br><span class="line">          duration: <span class="number">4</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">        notification.warn(&#123;</span><br><span class="line">          message: <span class="string">'系统提示'</span>,</span><br><span class="line">          description: <span class="string">'很抱歉，您无法访问该资源，可能是因为没有相应权限或者登录已失效'</span>,</span><br><span class="line">          duration: <span class="number">4</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        notification.error(&#123;</span><br><span class="line">          message: <span class="string">'系统提示'</span>,</span><br><span class="line">          description: errorMessage,</span><br><span class="line">          duration: <span class="number">4</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面代码中我们实现了异常响应的统一处理，根据不同的状态码给予不同的提示信息。</p><p>此外，项目还对各种HTTP请求进行了封装，下面一一列举出它们的用法：</p><p><strong>GET请求</strong></p><p>方式一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$get(<span class="string">'user'</span>, &#123;</span><br><span class="line">   ...params</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>因为我们在前面已经定义了后端地址的基础路径，所以上面这个请求的实际地址为：<a href="http://127.0.0.1:9527/user。" target="_blank" rel="noopener">http://127.0.0.1:9527/user。</a></p><p>在前面我们已经对异常响应进行统一处理，当然你也可以通过catch来覆盖：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$get(<span class="string">'user'</span>, &#123;</span><br><span class="line">   ...params</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">   alert(<span class="string">'出错啦'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>方式二（路径传参）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$get(<span class="string">`menu/<span class="subst">$&#123;user.username&#125;</span>`</span>).then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>方式三：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$get(<span class="string">`user?username=<span class="subst">$&#123;user.username&#125;</span>`</span>).then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p><strong>POST请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$post(<span class="string">'user'</span>, &#123;</span><br><span class="line">   ...params</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p><strong>PUT请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$put(<span class="string">'user'</span>, &#123;</span><br><span class="line">   ...params</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p><strong>DELETE请求</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$<span class="keyword">delete</span>(<span class="string">'user/$&#123;user.userId&#125;'</span>).then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p><strong>下载文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$download(<span class="string">'file'</span>, &#123; ...params &#125;, <span class="string">'xxx.xx'</span>)</span><br></pre></td></tr></table></figure><p></p><p>xxx.xx为下载的文件名，比如下载xlsx文件的话为 Excel文件.xlsx，后端接口返回数据流即可。</p><p><strong>上传文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> FormData($(<span class="string">"#form"</span>)[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">this</span>.$upload(<span class="string">'upload'</span>, formData).then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(r)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>后端以<code>MultipartFile</code>接收文件即可。</p><h3 id="路径配置"><a href="#路径配置" class="headerlink" title="路径配置"></a>路径配置</h3><p>在build/webpack.base.conf.js中，我们定义了一些路径变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    ...</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</span><br><span class="line">      <span class="string">'~'</span>: resolve(<span class="string">'src/components'</span>),</span><br><span class="line">      <span class="string">'utils'</span>: resolve(<span class="string">'src/utils'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>比如<code>~</code>代表<code>src/components</code>路径，在项目中，如果要引入<code>src/components/test.vue</code>只需要这样做即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ~<span class="regexp">/test.vue</span></span><br></pre></td></tr></table></figure><p></p><p>当然，你也可以使用相对路径和绝对路径，而不使用这些变量。</p><h3 id="第三方组件介绍"><a href="#第三方组件介绍" class="headerlink" title="第三方组件介绍"></a>第三方组件介绍</h3><p><a href="https://vue.ant.design/docs/vue/introduce-cn/" target="_blank" rel="noopener">Ant Design Vue</a>已经提供了非常丰富的组件，除此之外，项目里使用的图表插件为：<a href="https://apexcharts.com/vue-chart-demos/line-charts/basic/" target="_blank" rel="noopener">apexcharts.js</a>，其官方文档提供了很多示例，这里就不赘述了。</p><h3 id="开发建议"><a href="#开发建议" class="headerlink" title="开发建议"></a>开发建议</h3><p>相信正在阅读文档的你十有八九是一名后端开发者，可能对前端特别是对Vue不太熟悉，这里给出几点改造frontend的建议：</p><ol><li><p>要有一定的ES6语法基础，可以参考<a href="https://mrbird.cc/ES2015-Learn-Note.html"> ES6学习笔记 </a>，如果要系统学习ES6，推荐阮一峰的：<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener"> ECMAScript 6 入门 </a>。</p></li><li><p>Vue的官方文档还是挺详细的，建议仔细阅读，我在学习Vue的时候也做了一些笔记，可以参考：<a href="https://mrbird.cc/Vue-Learn-Note.html">https://mrbird.cc/Vue-Learn-Note.html</a>。Vue的学习路线：Vue基础语法 -&gt; Vuex -&gt; Vue Router。</p></li><li><p>前端组件用的是<a href="https://vue.ant.design/docs/vue/introduce-cn/" target="_blank" rel="noopener">Ant Design Vue</a>，所以在使用它提供的组件的时候，多阅读它的使用文档。</p></li></ol><h2 id="开发示例"><a href="#开发示例" class="headerlink" title="开发示例"></a>开发示例</h2><h3 id="新建一个页面"><a href="#新建一个页面" class="headerlink" title="新建一个页面"></a>新建一个页面</h3><p>在frontend工程的src/views下新建一个test目录，在该目录下新建一个test.vue文件： <img src="img/febsvue/QQ截图20190409133947.png" alt="QQ截图20190409133947.png"></p><p>内容如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>&#123;&#123;hello&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'test'</span>,</span></span><br><span class="line"><span class="undefined">  data () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      hello: <span class="string">'hello world'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.test</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#42b984</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">font-size</span>: 1<span class="selector-class">.1rem</span>;</span></span><br><span class="line"><span class="undefined">    font-weight: 600;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>启动项目，使用管理员账号登录，然后在菜单管理中新建一个菜单：</p><p><img src="img/febsvue/20190409134916.png" alt="QQ截图20190409134916.png"></p><ol><li><p>菜单URL：这里填写/test的话，在访问这个页面的时候，浏览器地址栏为<a href="http://localhost:8081/#/test，只要确保这个值不重复即可；" target="_blank" rel="noopener">http://localhost:8081/#/test，只要确保这个值不重复即可；</a></p></li><li><p>组件地址：对应要渲染的Vue组件地址，在路由导航守卫中有如下一段代码：</p><p><img src="img/febsvue/20190409135425.png" alt="QQ截图20190409135425.png"></p><p>所以这里填test/test，对应<code>@/views/test/test.vue</code>组件。</p></li><li><p>相关权限：访问这个页面需要<code>test:view</code>权限。</p></li></ol><p>点击确定后，这个菜单就被建好了：</p><p><img src="img/febsvue/20190409135740.png" alt="QQ截图20190409135740.png"></p><p>接着修改管理员角色，将刚刚新建的菜单授权给管理员：</p><p><img src="img/febsvue/QQ截图20190409141220.png" alt="QQ截图20190409141220.png"></p><p>点击确定修改后，重新登录系统：</p><p><img src="img/febsvue/asdfasdfasfdasdf.png" alt="QQ截图20190409141410.png"></p><h3 id="如何新建一个多级菜单"><a href="#如何新建一个多级菜单" class="headerlink" title="如何新建一个多级菜单"></a>如何新建一个多级菜单</h3><p>在新增多级菜单前，先了解下系统中的一个约定：在一个多级菜单中，<strong>顶级菜单对应的组件为PageView，末级菜单对应的组件为需要渲染的页面组件，剩下的（非顶级，非末级的中间菜单对应的组件为EmptyPageView）</strong>。</p><p>我们来建一个四级菜单，首先新增一个顶级菜单：</p><p><img src="img/febsvue/QQ截图20190409142251.png" alt="QQ截图20190409142251.png"></p><p>因为是顶级菜单，所以对应组件填PageView。</p><p>接着新增第二级菜单：</p><p><img src="img/febsvue/QQ截图20190409142642.png" alt="QQ截图20190409142642.png"></p><p>因为它数据中间菜单（非顶级非末级）所以对应组件填EmptyPageView，上级菜单勾选刚刚新建的一级菜单。</p><p>继续新增三级菜单：</p><p><img src="img/febsvue/QQ截图20190409143223.png" alt="QQ截图20190409143223.png"></p><p>因为它也是一个中间菜单，所以对应组件填EmptyPageView，上级菜单勾选刚刚新建的二级菜单。</p><p>最后将我们前面建好的测试页面作为末级，点击测试页面后面的小齿轮按钮，进行修改：</p><p><img src="img/febsvue/QQ截图20190409143905.png" alt="QQ截图20190409143905.png"></p><p>点击确定后一个四级菜单就建好了：</p><p><img src="img/febsvue/QQ截图20190409143943.png" alt="QQ截图20190409143943.png"></p><p>最后一步授权！修改管理员角色：</p><p><img src="img/febsvue/QQ截图20190409144206.png" alt="QQ截图20190409144206.png"></p><p>修改后，重新登录系统：</p><p><img src="img/febsvue/QQ截图20190409144908.png" alt="QQ截图20190409144908.png"></p><p>因为我没有设置排序，所以默认排在最前面了。</p><h3 id="如何隐藏路由"><a href="#如何隐藏路由" class="headerlink" title="如何隐藏路由"></a>如何隐藏路由</h3><p>有的时候，一些路由并不需要渲染成菜单，比如个人中心这类页面。而这些页面一般都是所有用户共有的，所以在后台系统里构建路由的时候写死即可。要隐藏路由只需要将路由meta的isShow属性设置为false即可：</p><p>参考后台代码cc.mrbird.febs.common.utils.TreeUtil：</p><p><img src="img/febsvue/20190409150427.png" alt="QQ截图20190409150427.png"></p><h3 id="如何分配权限"><a href="#如何分配权限" class="headerlink" title="如何分配权限"></a>如何分配权限</h3><p>权限是和角色绑定的，所以要分配权限实际就是对角色的增删改。假如现在要配置一个角色 ——— 系统监控管理员，负责系统监控模块的查看：</p><p><img src="img/febsvue/QQ截图20190409152413.png" alt="QQ截图20190409152413.png"></p><p>然后新增一个用户 ——— yuuki，角色为系统监控管理员：</p><p><img src="img/febsvue/QQ截图20190409152550.png" alt="QQ截图20190409152550.png"></p><p>新建好后，使用yuuki的账号登录：</p><p><img src="img/febsvue/QQ截图20190409153002.png" alt="QQ截图20190409153002.png"></p><p>可以看到，yuuki只有系统监控模块的权限。</p><h3 id="前端如何添加依赖"><a href="#前端如何添加依赖" class="headerlink" title="前端如何添加依赖"></a>前端如何添加依赖</h3><p>在<a href="https://www.npmjs.com/" target="_blank" rel="noopener">https://www.npmjs.com/</a>搜索需要安装的依赖，比如jQuery：</p><p><img src="img/febsvue/QQ截图20190409153227.png" alt="QQ截图20190409153227.png"></p><p>比如我需要安装jQuery 3.3.1版本，只需要在终端输入如下命令即可：</p><p><img src="img/febsvue/QQ截图20190409153710.png" alt="QQ截图20190409153710.png"></p><p>安装好后，在package.json的依赖列表里会多出一个jquery 3.3.1：</p><p><img src="img/febsvue/QQ截图20190409153800.png" alt="QQ截图20190409153800.png"></p><h3 id="如何处理排序"><a href="#如何处理排序" class="headerlink" title="如何处理排序"></a>如何处理排序</h3><p>对于前端来说，需要上送两个参数：</p><ol><li><p>sortField：需要排序的字段；</p></li><li><p>sortOrder：排序规则，ascend或者descend。</p></li></ol><p>对于后端来说，排序主要分为四种情况：</p><ol><li>结果需要分页的，并且是通过xml定义的SQL查询出来的结果：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SortUtil.handlePageSort(request, page, <span class="string">"userId"</span>, FebsConstant.ORDER_ASC, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p><code>userId</code>和<code>FebsConstant.ORDER_ASC</code>指定了默认的排序规则，即默认按照<code>userId</code>字段升序排序。最后一个参数表示是否需要开启驼峰转下划线，这种情况下不需要，false即可。</p><p>具体可以参考cc.mrbird.febs.system.service.impl.UserServiceImpl#findUserDetail。</p><p>如果不需要指定默认排序规则，使用handlePageSort的重载方法即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SortUtil.handlePageSort(request, page, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>结果需要分页的，并且是通过Mybatis Plus插件查询出来的结果：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SortUtil.handlePageSort(request, page, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>这种情况下，最后一个参数值必须为true。</p><p>具体可以参考cc.mrbird.febs.system.service.impl.DictServiceImpl#findDicts。</p><div class="note info"><p>1和2主要区别就是是否需要开启驼峰转下划线。</p></div><ol start="3"><li>结果不需要分页，并且是通过xml定义的SQL查询出来的结果：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SortUtil.handleWrapperSort(request, queryWrapper, <span class="string">"orderNum"</span>, FebsConstant.ORDER_ASC, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>具体可以参考：cc.mrbird.febs.system.service.impl.DeptServiceImpl#findDepts</p><ol start="4"><li>结果不需要分页，并且是通过Mybatis Plus插件查询出来的结果：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SortUtil.handleWrapperSort(request, queryWrapper, <span class="string">"orderNum"</span>, FebsConstant.ORDER_ASC, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>总之，对于处理排序的方法，第一个参数一定是cc.mrbird.febs.common.domain.QueryRequest。第二个参数如果需要分页，则传递com.baomidou.mybatisplus.extension.plugins.pagination.Page，不需要分页则传递com.baomidou.mybatisplus.core.conditions.query.QueryWrapper。最后一个参数如果查询结果是Mybatis Plus查询出来的结果，则需设置为true，否则为false。</p><h3 id="后端接口测试"><a href="#后端接口测试" class="headerlink" title="后端接口测试"></a>后端接口测试</h3><p>由于后端接口为RESTful接口，所以不能使用浏览器来测试，可以使用PostMan或者Chrome插件RestLet来测试后端接口。文档以PostMan为例。</p><p>因为后台接口大部分都需要用户认证后才能访问，所以在测试之前需要通过登录接口获取一个可用的token。</p><p><img src="img/febsvue/QQ截图20190409161742.png" alt="QQ截图20190409161742.png"></p><p>成功获取到了token。</p><p>测试获取mrbird的前端路由信息：</p><p><img src="img/febsvue/QQ截图20190409161947.png" alt="QQ截图20190409161947.png"></p><p>在Headers设置一个键值对，key为Authentication，value为刚刚获取到的token，发送请求便可以获取到mrbird的路由信息。其他接口测试以此类推。</p><p>如果token填错或者不填：</p><p><img src="img/febsvue/QQ截图20190409162214.png" alt="QQ截图20190409162214.png"></p><p>后端将返回401。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="导入项目编译出错，代码是否不全？"><a href="#导入项目编译出错，代码是否不全？" class="headerlink" title="导入项目编译出错，代码是否不全？"></a>导入项目编译出错，代码是否不全？</h3><p>编辑器安装lombok插件即可。</p><h3 id="导入SQL为何出错？"><a href="#导入SQL为何出错？" class="headerlink" title="导入SQL为何出错？"></a>导入SQL为何出错？</h3><p>MySQL数据库请使用5.7.x版本，不同版本SQL语法有差异。如果你SQL技术过硬可以通过错误信息去修改出错的SQL，更推荐的做法是安装推荐版本的MySQL数据库。</p><h3 id="ip2region是啥玩意，打开怎么乱码？"><a href="#ip2region是啥玩意，打开怎么乱码？" class="headerlink" title="ip2region是啥玩意，打开怎么乱码？"></a>ip2region是啥玩意，打开怎么乱码？</h3><p>通过ip获取地址的开源软件数据库文件，不要直接打开。ip2region地址：<a href="https://github.com/lionsoul2014/ip2region" target="_blank" rel="noopener">https://github.com/lionsoul2014/ip2region</a>。</p><h2 id="项目缺陷"><a href="#项目缺陷" class="headerlink" title="项目缺陷"></a>项目缺陷</h2><ol><li><p>不支持移动端；</p></li><li><p>前端打包后vendor.js较大，通过nginx压缩后在591kb左右，在我的渣渣服务器（1核1G1M）下，访问时间大约为7 - 8秒左右：</p></li></ol><p><img src="img/febsvue/QQ截图20190409162930.png" alt="QQ截图20190409162930.png"></p><p>如果你的服务器带宽够大，或者是部署在公司局域网内的话，这个问题可以忽略。如果要在根源上解决这个问题个人觉得可以从这几个地方入手：</p><ul><li><p>Ant Design采用SVG格式的图标后，导致项目打包体积过大，可以参考官方issue的讨论：<a href="https://github.com/vueComponent/ant-design-vue/issues/325" target="_blank" rel="noopener">https://github.com/vueComponent/ant-design-vue/issues/325</a>和<a href="https://github.com/ant-design/ant-design/issues/12011" target="_blank" rel="noopener">https://github.com/ant-design/ant-design/issues/12011</a>；</p></li><li><p>可以将依赖通过CDN来加载，参考连接：<a href="https://blog.csdn.net/qq_35844177/article/details/78599064" target="_blank" rel="noopener">https://blog.csdn.net/qq_35844177/article/details/78599064</a>；</p></li><li><p>webpack打包配置可能存在可优化的地方。</p></li></ul><p>由于我才疏学浅，前端技能薄弱，所以没能够很好地解决这个问题。欢迎来自五湖四海的能人志士pull request来改善这个问题，感激不尽。</p><p><img src="img/febsvue/QQ图片20190409164403.jpg" alt="QQ图片20190409164403.jpg"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:37 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;FEBS-Vue为&lt;a href=&quot;https://github.com/wuyouzhuguli/FEBS-Shiro&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FEBS-Shiro&lt;/a&gt;的前后端分离版本，前端使用Vue全家桶，组件库采用&lt;a href=&quot;https://vuecomponent.github.io/ant-design-vue/docs/vue/introduce-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ant-Design-Vue&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;文档里介绍的示例是在Windows10操作系统下完成的，后端编辑器使用IDEA，前端编辑器使用WebStorm。
    
    </summary>
    
    
      <category term="FEBS" scheme="http://mrbird.cc/tags/FEBS/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot WebFlux增删改查样例</title>
    <link href="http://mrbird.cc/Spring-Boot-WebFlux-CRUD.html"/>
    <id>http://mrbird.cc/Spring-Boot-WebFlux-CRUD.html</id>
    <published>2018-12-02T08:00:36.000Z</published>
    <updated>2019-04-04T03:49:46.096Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --><p>在<a href="/Spring-Boot-2-0-WebFlux.html]"> Spring Boot 2.0 WebFlux编程 </a>一节我们大致了解了WebFlux的用法，这节我们将结合Mongo DB在WebFlux的架构下实现增删改查样例。和<a href="/Spring-Boot-Mongo-DB-CRUD.html"> Spring Boot整合Mongo DB </a>不同的是，我们使用的是Reactive Mongo DB依赖，所有增删改查方法返回值类型为Flux或者Mono。</p><a id="more"></a><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><p>新建一个Spring Boot项目，版本为2.1.3.RELEASE，并引入<code>webflux</code>和<code>reactive mongodb</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>要开启<code>Reactive Mongo DB</code>的相关配置，需要在Spring Boot启动类上添加<code>@EnableReactiveMongoRepositories</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableReactiveMongoRepositories</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebfluxApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(WebfluxApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接着在配置文件application.yml里配置Mongo DB连接：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    mongodb:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">      database:</span> <span class="string">webflux</span></span><br></pre></td></tr></table></figure><p></p><p>使用的是<code>webflux</code>数据库，所以需要在Mongo DB里新建一个<code>webflux</code>数据库（并创建user文档/表，以供待会使用）：</p><p><img src="img/QQ截图20190404105640.png" alt="QQ截图20190404105640.png"></p><p>创建<code>User</code>实体类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get set 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="简单增删改查"><a href="#简单增删改查" class="headerlink" title="简单增删改查"></a>简单增删改查</h2><p>创建<code>UserDao</code>接口，继承自<code>ReactiveMongoRepository</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">ReactiveMongoRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>和<a href="/Spring-Boot-Mongo-DB-CRUD.html"> Spring Boot整合Mongo DB </a>不同的是，我们继承的是<code>ReactiveMongoRepository</code>而非<code>MongoRepository</code>，它所提供的方法都是响应式的：</p><p><img src="img/QQ截图20190404110050.png" alt="QQ截图20190404110050.png"></p><p>在<code>UserService</code>里通过<code>UserDao</code>定义简单增删改查方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title">getUser</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title">createUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">deleteUser</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userDao.findById(id)</span><br><span class="line">                .flatMap(user -&gt; <span class="keyword">this</span>.userDao.delete(user));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title">updateUser</span><span class="params">(String id, User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userDao.findById(id)</span><br><span class="line">            .flatMap(u -&gt; &#123;</span><br><span class="line">                u.setName(user.getName());</span><br><span class="line">                u.setAge(user.getAge());</span><br><span class="line">                u.setDescription(user.getDescription());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.userDao.save(u);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>大致上和<a href="/Spring-Boot-Mongo-DB-CRUD.html"> Spring Boot整合Mongo DB </a>中的<code>UserService</code>差不多，不同的是返回值类型为Flux或者Mono，即它们是响应式非阻塞的方法。</p><p>编写RESTful<code>UserController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以数组的形式一次性返回所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以 Server sent events形式多次返回数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/stream"</span>, produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">getUsersStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;User&gt; <span class="title">createUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.createUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存在返回 200，不存在返回 404</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Void&gt;&gt; deleteUser(<span class="meta">@PathVariable</span> String id) &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.deleteUser(id)</span><br><span class="line">                .then(Mono.just(<span class="keyword">new</span> ResponseEntity&lt;Void&gt;(HttpStatus.OK)))</span><br><span class="line">                .defaultIfEmpty(<span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存在返回修改后的 User</span></span><br><span class="line"><span class="comment">     * 不存在返回 404</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;User&gt;&gt; updateUser(<span class="meta">@PathVariable</span> String id, User user) &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.updateUser(id, user)</span><br><span class="line">                .map(u -&gt; <span class="keyword">new</span> ResponseEntity&lt;&gt;(u, HttpStatus.OK))</span><br><span class="line">                .defaultIfEmpty(<span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户 id查找</span></span><br><span class="line"><span class="comment">     * 存在返回，不存在返回 404</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ResponseEntity&lt;User&gt;&gt; getUser(<span class="meta">@PathVariable</span> String id) &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(id)</span><br><span class="line">                .map(user -&gt; <span class="keyword">new</span> ResponseEntity&lt;&gt;(user, HttpStatus.OK))</span><br><span class="line">                .defaultIfEmpty(<span class="keyword">new</span> ResponseEntity&lt;&gt;(HttpStatus.NOT_FOUND));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>对于返回值为<code>Flux&lt;T&gt;</code>类型的方法，推荐定义两个一样的方法，一个以普通形式返回，一个以Server Sent Event的形式返回。对于修改和删除，如果需要修改和删除的用户不存在，我们返回404。</p><p>对于Flux和Mono的操作，在<a href="/Spring-Boot-2-0-WebFlux.html]"> Spring Boot 2.0 WebFlux编程 </a>一节中已经介绍过了，这里就不再赘述了。</p><h2 id="排序与分页"><a href="#排序与分页" class="headerlink" title="排序与分页"></a>排序与分页</h2><p>在<a href="/Spring-Boot-Mongo-DB-CRUD.html"> Spring Boot整合Mongo DB </a>一节中，我们通过<code>MongoTemplate</code>实现了排序与分页。与<code>MongoTemplate</code>对于的响应式的对象为<code>ReactiveMongoTemplate</code>，所以我们照葫芦画瓢，仿照<code>MongoTemplate</code>的写法来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询，只返回分页后的数据，count值需要通过 getUserByConditionCount</span></span><br><span class="line"><span class="comment"> * 方法获取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Flux&lt;User&gt; <span class="title">getUserByCondition</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> page, User user)</span> </span>&#123;</span><br><span class="line">    Query query = getQuery(user);</span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"age"</span>);</span><br><span class="line">    Pageable pageable = PageRequest.of(page, size, sort);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> template.find(query.with(pageable), User.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回 count，配合 getUserByCondition使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;Long&gt; <span class="title">getUserByConditionCount</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    Query query = getQuery(user);</span><br><span class="line">    <span class="keyword">return</span> template.count(query, User.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Query <span class="title">getQuery</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    Query query = <span class="keyword">new</span> Query();</span><br><span class="line">    Criteria criteria = <span class="keyword">new</span> Criteria();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(user.getName())) &#123;</span><br><span class="line">        criteria.and(<span class="string">"name"</span>).is(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(user.getDescription())) &#123;</span><br><span class="line">        criteria.and(<span class="string">"description"</span>).regex(user.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line">    query.addCriteria(criteria);</span><br><span class="line">    <span class="keyword">return</span> query;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以拆分是因为没找到与<code>PageableExecutionUtils</code>类的<code>getPage</code>方法类似的方法，如果是响应式的话，返回值类型应该是<code>Mono&lt;Page&lt;User&gt;&gt;</code>，不懂大家有没别的更好的实现方法？</p><p>源码和PostMan测试样例链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/58.Spring-Boot-WebFlux-crud" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/58.Spring-Boot-WebFlux-crud</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在&lt;a href=&quot;/Spring-Boot-2-0-WebFlux.html]&quot;&gt; Spring Boot 2.0 WebFlux编程 &lt;/a&gt;一节我们大致了解了WebFlux的用法，这节我们将结合Mongo DB在WebFlux的架构下实现增删改查样例。和&lt;a href=&quot;/Spring-Boot-Mongo-DB-CRUD.html&quot;&gt; Spring Boot整合Mongo DB &lt;/a&gt;不同的是，我们使用的是Reactive Mongo DB依赖，所有增删改查方法返回值类型为Flux或者Mono。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="MongoDB" scheme="http://mrbird.cc/tags/MongoDB/"/>
    
      <category term="WebFlux" scheme="http://mrbird.cc/tags/WebFlux/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Consul服务治理</title>
    <link href="http://mrbird.cc/Spring-Cloud-Consul.html"/>
    <id>http://mrbird.cc/Spring-Cloud-Consul.html</id>
    <published>2018-11-29T08:00:31.000Z</published>
    <updated>2019-03-28T06:44:59.912Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:35 GMT+0800 (GMT+08:00) --><p>Consul是一款由<a href="https://www.hashicorp.com/" target="_blank" rel="noopener">HashiCorp</a>公司开源的，用于服务治理的软件，<a href="https://spring.io/projects/spring-cloud-consul" target="_blank" rel="noopener">Spring Cloud Consul</a>对其进行了封装。Consul具有如下特点:</p><ol><li><p>服务注册 - 自动注册和取消注册服务实例的网络位置</p></li><li><p>运行状况检查 - 检测服务实例何时启动并运行</p></li><li><p>分布式配置 - 确保所有服务实例使用相同的配置</p></li></ol><a id="more"></a><p>Consul agent有两种运行模式：Server和Client。这里的Server和Client只是Consul集群层面的区分，与搭建在Cluster之上 的应用服务无关。 以Server模式运行的Consul agent节点用于维护Consul集群的状态，官方建议每个Consul Cluster至少有3个或以上的运行在Server mode的Agent，Client节点不限。</p><h2 id="安装Consul"><a href="#安装Consul" class="headerlink" title="安装Consul"></a>安装Consul</h2><p>Consul下载地址：<a href="https://www.consul.io/downloads.html" target="_blank" rel="noopener">https://www.consul.io/downloads.html</a>，本文选择Linux 64bit 版本进行演示。</p><p>下载后解压，然后在解压目录下运行<code>./consul</code>命令：</p><p><img src="img/QQ截图20190328094517.png" alt="QQ截图20190328094517.png"></p><p>可以看到Consul所包含的命令，使用<code>consul [命令] --help</code>可以查看某个命令的具体用法。</p><p>执行下面这条命令来启动一个Consul agent：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./consul agent -dev -client 192.168.140.215</span><br></pre></td></tr></table></figure><p></p><p><code>-dev</code>表示创建一个开发环境下的server节点，不该模式下会有任何持久化操作，即不会有任何数据写入到磁盘，所以这个模式适合用于开发过程，而不适用于生产环境。<code>-client 192.168.140.215</code>表示运行客户端使用ip地址<code>192.168.140.215</code>（本文Linux环境IP地址）去访问。</p><p>启动后，默认的端口号为8500，访问<a href="http://192.168.140.215:8500" target="_blank" rel="noopener">http://192.168.140.215:8500</a></p><p><img src="img/QQ截图20190328100116.png" alt="QQ截图20190328100116.png"></p><p>当前就一个consul服务。接下来我们开始创建服务提供者和服务消费者。</p><h2 id="Server-Provider"><a href="#Server-Provider" class="headerlink" title="Server-Provider"></a>Server-Provider</h2><p>创建一个Spring Boot项目，版本为2.0.2.RELEASE，<code>artifactId</code>为server-provider，Spring Cloud版本为Finchley.RELEASE：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后在配置文件里添加如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">server-provider</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    consul:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.215</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8500</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        health-check-interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">        service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line"><span class="attr">        register-health-check:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        health-check-path:</span> <span class="string">/check</span></span><br></pre></td></tr></table></figure><p></p><p><code>spring.cloud.consul.host</code>和<code>spring.cloud.consul.port</code>配置了consul的ip和端口；<code>spring.cloud.consul.discovery.service-name</code>配置了该服务在consul里注册的服务名称；<code>spring.cloud.consul.discovery.register-health-check</code>用于开启健康检查，<code>spring.cloud.consul.discovery.health-check-interval</code>配置了健康检查的周期为10秒，<code>spring.cloud.consul.discovery.health-check-path</code>配置了健康检查路径。</p><p>接着新建TestController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"check"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"health check"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello from server provider"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>check</code>方法用于监控检查，TestController还提供了一个<code>hello</code>方法，以供后续服务消费者调用。</p><p><code>spring.cloud.consul.discovery.health-check-path</code>的默认值为<code>/actuator/health</code>，如果采用该默认值的话，还需要导入<code>spring-boot-starter-actuator</code>依赖。</p><p>最后，要开启服务注册与发行，需要在Spring Boot入口类上添加<code>@EnableDiscoveryClient</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerProviderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ServerProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>准备完毕后，打包项目，然后启动两个实例，端口号分别为9000和9001，启动后，再次访问consul管理界面：</p><p><img src="img/QQ截图20190328104441.png" alt="QQ截图20190328104441.png"></p><p><img src="img/QQ截图20190328104520.png" alt="QQ截图20190328104520.png"></p><p>服务提供者注册成功，接下来开始搭建服务消费者。</p><h2 id="Server-Consumer"><a href="#Server-Consumer" class="headerlink" title="Server-Consumer"></a>Server-Consumer</h2><p>创建一个Spring Boot项目，版本为2.0.2.RELEASE，artifactId为server-provider，Spring Cloud版本为Finchley.RELEASE：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>引入<code>spring-boot-starter-actuator</code>用于默认的健康检查。</p><p>配置application.yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">9002</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">server-consumer</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    consul:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="number">192.168</span><span class="number">.140</span><span class="number">.215</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">8500</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure><p></p><p>同样的，需要开启服务注册与发现需要在入口类上添加<code>@EnableDiscoveryClient</code>注解。</p><p>接着创建TestController来消费Server-Provider提供的<code>hello</code>服务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger loggr = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_ID = <span class="string">"server-provider"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"uri"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;URI&gt; <span class="title">getServerUris</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient.getInstances(SERVER_ID)</span><br><span class="line">                .stream()</span><br><span class="line">                .map(ServiceInstance::getUri).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceInstance instance = loadBalancerClient.choose(SERVER_ID);</span><br><span class="line">        String url = instance.getUri().toString() + <span class="string">"/hello"</span>;</span><br><span class="line">        loggr.info(<span class="string">"remote server url：&#123;&#125;"</span>, url);</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>SERVER_ID</strong>的值为服务提供者在consul注册中心的实例名称，即<code>server-provider</code>。通过<code>DiscoveryClient</code>我们可以获取到所有名称为<code>server-provider</code>的服务实例信息。通过<code>LoadBalancerClient</code>我们可以实现负载均衡地去获取服务实例，并通过<code>RestTemplate</code>去调用服务。</p><p>打包部署项目，然后查看consul控制台：</p><p><img src="img/QQ截图20190328110004.png" alt="QQ截图20190328110004.png"></p><p>访问：<a href="http://192.168.140.215:9002/uri" target="_blank" rel="noopener">http://192.168.140.215:9002/uri</a>：</p><p><img src="img/QQ截图20190328110116.png" alt="QQ截图20190328110116.png"></p><p>可以看到我们成功获取到了服务名称为<code>server-provider</code>的两个具体实例。</p><p>多次调用<a href="http://192.168.140.215:9002/hello" target="_blank" rel="noopener">http://192.168.140.215:9002/hello</a>：</p><p><img src="img/QQ截图20190328110243.png" alt="QQ截图20190328110243.png"></p><p>控制台输出如下：</p><p><img src="img/QQ截图20190328110406.png" alt="QQ截图20190328110406.png"></p><p>服务调用是均衡的。</p><p>除此之外，consul内置了Ribbon，所以我们还可以通过<code>@LoadBalanced</code>标注的<code>RestTemplate</code>来实现负载均衡服务调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_ID = <span class="string">"server-provider"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String url = <span class="string">"http://"</span> + SERVER_ID + <span class="string">"/hello"</span>;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(url, String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>效果是一样的。</p><h2 id="consul集群"><a href="#consul集群" class="headerlink" title="consul集群"></a>consul集群</h2><p>上面我们只是以<code>-dev</code>模式开启了一个单节点consul agent，生产环境下需要搭建consul集群来确保高可用。</p><p>搭建consul集群时常用的命令有:</p><table><thead><tr><th>命令</th><th>解释</th><th>示例</th></tr></thead><tbody><tr><td>agent</td><td>运行一个consul agent</td><td>consul agent -dev</td></tr><tr><td>join</td><td>将agent加入到consul集群</td><td>consul join IP</td></tr><tr><td>members</td><td>列出consul cluster集群中的members</td><td>consul members</td></tr><tr><td>leave</td><td>将节点移除所在集群</td><td>consul leave</td></tr></tbody></table><p>准备了三台Linux服务器，配置如下：</p><table><tbody><tr><th width="27px"><p>序号</p></th><th><p>节点ip</p></th><th><p>节点名称</p></th><th><p>角色</p></th></tr><tr><td><p>1</p></td><td><p>192.168.140.215</p></td><td><p>consul-server-215</p></td><td><p>server</p></td></tr><tr><td><p>2</p></td><td><p>192.168.140.213</p></td><td><p>consul-server-213</p></td><td><p>server</p></td></tr><tr><td><p>3</p></td><td><p>192.168.140.216</p></td><td><p>consul-server-216</p></td><td><p>server &amp; web ui</p></td></tr></tbody></table><p>在这三台服务器上下载并解压consul，然后在解压的根目录上创建一个data目录。</p><p>由于我们之前已经在215上启动了consul，所以先执行<code>killall consul</code>来杀掉进程，然后执行下面这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./consul agent -server -<span class="built_in">bind</span> 192.168.140.215 -client=0.0.0.0 -bootstrap-expect=3 -data-dir=data -node=consul-server-215 &amp;</span><br></pre></td></tr></table></figure><p></p><p>解释一下上面这条命令的含义:</p><ul><li><p><code>-server</code>表示以服务的形式启动agent</p></li><li><p><code>-bind</code>表示绑定到当前Linux的ip（有些服务器会绑定多块网卡，可以通过bind参数强制指定绑定的ip）</p></li><li><p><code>-client</code>指定客户端访问的ip（consul有丰富的api接口，这里的客户端指浏览器或调用方），0.0.0.0表示不限客户端ip</p></li><li><p><code>-bootstrap-expect=3</code>表示server集群最低节点数为3，低于这个值将工作不正常(注：类似zookeeper一样，通常集群数为奇数，方便选举，consul采用的是raft算法)</p></li><li><p><code>-data-dir</code>表示指定数据的存放目录（该目录必须存在）</p></li><li><p><code>-node</code>表示节点的名称</p></li></ul><p>接着在213服务器上执行下面这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./consul agent -server -<span class="built_in">bind</span> 192.168.140.213 -client=0.0.0.0 -bootstrap-expect=3 -data-dir=data -node=consul-server-213 &amp;</span><br></pre></td></tr></table></figure><p></p><p>最后在216上执行下面这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./consul agent -server -<span class="built_in">bind</span> 192.168.140.216 -client=0.0.0.0 -bootstrap-expect=3 -data-dir=data -node=consul-server-216 -ui &amp;</span><br></pre></td></tr></table></figure><p></p><p>和前两条命令相比，这条命令多了<code>-ui</code>选项，表示开启管理界面UI。</p><p>然后分别在213和215下执行下面这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./consul join 192.168.140.216</span><br></pre></td></tr></table></figure><p></p><p>这样213和215成功加入到了216构成了一个三节点集群，运行<code>./consul members</code>查看：</p><p><img src="img/QQ截图20190328143323.png" alt="QQ截图20190328143323.png"></p><p>访问<a href="http://192.168.140.216:8500" target="_blank" rel="noopener">http://192.168.140.216:8500</a>：</p><p><img src="img/QQ截图20190328143504.png" alt="QQ截图20190328143504.png"></p><p>访问<a href="http://192.168.140.215:9002/hello" target="_blank" rel="noopener">http://192.168.140.215:9002/hello</a>：</p><p><img src="img/QQ截图20190328143922.png" alt="QQ截图20190328143922.png"></p><p>这时候在215执行<code>killall consul</code>命令，杀死consul服务，然后在216上执行<code>./consul members</code>：</p><p><img src="img/QQ截图20190328143837.png" alt="QQ截图20190328143837.png"></p><p><img src="img/QQ截图20190328144326.png" alt="QQ截图20190328144326.png"></p><p>可以看到215节点已经挂了，再次访问<a href="http://192.168.140.215:9002/hello" target="_blank" rel="noopener">http://192.168.140.215:9002/hello</a>：</p><p><img src="img/QQ截图20190328143922.png" alt="QQ截图20190328143922.png"></p><p>服务依旧获取成功。</p><p>可见，虽然我们在application.yml中配置consul的地址是192.168.140.215:8500，但由于我们构建的是consul集群，所以微服务启动时会获取到整个集群信息，即使215这个节点挂了，微服务可以从别的consul节点上获取注册的服务信息。</p><p>参考文档：</p><ol><li><p><a href="https://learn.hashicorp.com/consul/getting-started/install.html" target="_blank" rel="noopener">https://learn.hashicorp.com/consul/getting-started/install.html</a></p></li><li><p><a href="https://cloud.spring.io/spring-cloud-consul/spring-cloud-consul.html#spring-cloud-consul-hystrix" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-consul/spring-cloud-consul.html#spring-cloud-consul-hystrix</a></p></li></ol><blockquote><p>源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/55.Spring-Cloud-Consul" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/55.Spring-Cloud-Consul</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:35 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Consul是一款由&lt;a href=&quot;https://www.hashicorp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HashiCorp&lt;/a&gt;公司开源的，用于服务治理的软件，&lt;a href=&quot;https://spring.io/projects/spring-cloud-consul&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Cloud Consul&lt;/a&gt;对其进行了封装。Consul具有如下特点:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;服务注册 - 自动注册和取消注册服务实例的网络位置&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;运行状况检查 - 检测服务实例何时启动并运行&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分布式配置 - 确保所有服务实例使用相同的配置&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://mrbird.cc/tags/Spring-Cloud/"/>
    
      <category term="Consul" scheme="http://mrbird.cc/tags/Consul/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot整合Kafka</title>
    <link href="http://mrbird.cc/Spring-Boot-Kafka.html"/>
    <id>http://mrbird.cc/Spring-Boot-Kafka.html</id>
    <published>2018-11-21T08:26:17.000Z</published>
    <updated>2019-03-27T02:20:01.126Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:36 GMT+0800 (GMT+08:00) --><p>Kafka是一个分布式的、可分区的、可复制的消息系统，下面是Kafka的几个基本术语：</p><ol><li><p>Kafka将消息以<strong>topic</strong>为单位进行归纳；</p></li><li><p>将向Kafka topic发布消息的程序成为<strong>producers</strong>；</p></li><li><p>将预订topics并消费消息的程序成为<strong>consumer</strong>；</p></li><li><p>Kafka以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个<strong>broker</strong>。</p></li></ol><a id="more"></a><p>producers通过网络将消息发送到Kafka集群，集群向消费者提供消息，如下图所示：</p><p><img src="img/140721072031172.png" alt="140721072031172.png"></p><p>创建一个topic时，可以指定<strong>partitions</strong>（分区）数目，partitions数越多，其吞吐量也越大，但是需要的资源也越多，同时也会导致更高的不可用性，kafka在接收到producers发送的消息之后，会根据均衡策略将消息存储到不同的partitions中：</p><p><img src="img/log_anatomy.png" alt="log_anatomy.png"></p><p>在每个partitions中，消息以顺序存储，最晚接收的的消息会最后被消费。</p><p>producers在向kafka集群发送消息的时候，可以通过指定partitions来发送到指定的partitions中。也可以通过指定均衡策略来将消息发送到不同的partitions中。如果不指定，就会采用默认的随机均衡策略，将消息随机的存储到不同的partitions中。</p><p>在consumer消费消息时，kafka使用offset来记录当前消费的位置：</p><p><img src="img/log_consumer.png" style="width:25rem"></p><p>在kafka的设计中，可以有多个不同的group来同时消费同一个topic下的消息，如图，我们有两个不同的group同时消费，他们的的消费的记录位置offset各不项目，不互相干扰。</p><p>对于一个group而言，consumer的数量不应该多于partitions的数量，因为在一个group中，每个partitions至多只能绑定到一个consumer上，即一个consumer可以消费多个partitions，一个partitions只能给一个consumer消费。因此，若一个group中的consumer数量大于partitions数量的话，多余的consumer将不会收到任何消息。</p><p><img src="img/consumer-groups.png" style="width:25rem"></p><h2 id="Kafka安装使用"><a href="#Kafka安装使用" class="headerlink" title="Kafka安装使用"></a>Kafka安装使用</h2><p>这里演示在Windows下Kafka安装与使用。Kafka下载地址：<a href="http://kafka.apache.org/downloads" target="_blank" rel="noopener">http://kafka.apache.org/downloads</a>，选择二进制文件下载（Binary downloads），然后解压即可。</p><p>Kafka的配置文件位于config目录下，因为Kafka集成了Zookeeper（Kafka存储消息的地方），所以config目录下除了有Kafka的配置文件server.properties外，还可以看到一个Zookeeper配置文件zookeeper.properties：</p><p><img src="img/QQ截图20190326103520.png" alt="QQ截图20190326103520.png"></p><p>打开server.properties，将<code>broker.id</code>的值修改为1，每个broker的id都必须设置为Integer类型，且不能重复。Zookeeper的配置保持默认即可。</p><p>接下来开始使用Kafka。</p><h3 id="启动Zookeeper"><a href="#启动Zookeeper" class="headerlink" title="启动Zookeeper"></a>启动Zookeeper</h3><p>在Windows下执行下面这些命令可能会出现<span style="color:red">找不到或无法加载主类</span>的问题，解决方案可参考：<a href="https://blog.csdn.net/cx2932350/article/details/78870135" target="_blank" rel="noopener">https://blog.csdn.net/cx2932350/article/details/78870135</a>。</p><p>在Kafka根目录下使用cmd执行下面这条命令，启动ZK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin\windows\zookeeper-server-start.bat config\zookeeper.properties</span><br></pre></td></tr></table></figure><p></p><p>在Linux下，可以使用后台进程的方式启动ZK：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span><br></pre></td></tr></table></figure><p></p><h3 id="启动Kafka"><a href="#启动Kafka" class="headerlink" title="启动Kafka"></a>启动Kafka</h3><p>执行下面这条命令启动Kafka：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin\windows\kafka-server-start.bat config\server.properties</span><br></pre></td></tr></table></figure><p></p><p>Linux对应命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure><p></p><p>当看到命令行打印如下信息，说明启动完毕:</p><p><img src="img/QQ截图20190326110506.png" alt="QQ截图20190326110506.png"></p><h3 id="创建Topic"><a href="#创建Topic" class="headerlink" title="创建Topic"></a>创建Topic</h3><p>执行下面这条命令创建一个Topic</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin\windows\kafka-topics.bat --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p></p><p>这条命令的意思是，创建一个Topic到ZK（指定ZK的地址），副本个数为1，分区数为1，Topic的名称为test。</p><p>Linux对应的命令为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p></p><p>创建好后我们可以查看Kafka里的Topic列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin\windows\kafka-topics.bat --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure><p></p><p><img src="img/QQ截图20190326111559.png" alt="QQ截图20190326111559.png"></p><p>可看到目前只包含一个我们刚创建的test Topic。</p><p>Linux对应的命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure><p></p><p>查看test Topic的具体信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin\windows\kafka-topics.bat --describe --zookeeper localhost:2181 --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p></p><p><img src="img/QQ截图20190326111928.png" alt="QQ截图20190326111928.png"></p><p>Linux对应的命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p></p><h3 id="生产消息和消费消息"><a href="#生产消息和消费消息" class="headerlink" title="生产消息和消费消息"></a>生产消息和消费消息</h3><p><strong>启动Producers</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin\windows\kafka-console-producer.bat --broker-list localhost:9092 --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p></p><p>9092为生产者的默认端口号。这里启动了生产者，准备往test Topic里发送数据。</p><p>Linux下对应的命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p></p><p><strong>启动Consumers</strong></p><p>接着启动一个消费者用于消费生产者生产的数据，新建一个cmd窗口，输入下面这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin\windows\kafka-console-consumer.bat --bootstrap-server localhost:9092 --topic <span class="built_in">test</span> --from-beginning</span><br></pre></td></tr></table></figure><p></p><p><code>from-beginning</code>表示从头开始读取数据。</p><p>Linux下对应的命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic <span class="built_in">test</span> --from-beginning</span><br></pre></td></tr></table></figure><p></p><p>启动好生产者和消费者后我们在生产者里生产几条数据:</p><p><img src="img/QQ截图20190326113911.png" alt="QQ截图20190326113911.png"></p><p>消费者成功接收到数据：</p><p><img src="img/QQ截图20190326113950.png" alt="QQ截图20190326113950.png"></p><h2 id="Spring-Boot整合Kafaka"><a href="#Spring-Boot整合Kafaka" class="headerlink" title="Spring Boot整合Kafaka"></a>Spring Boot整合Kafaka</h2><p>上面简单介绍了Kafka的使用，下面我们开始在Spring Boot里使用Kafka。</p><p>新建一个Spring Boot项目，版本为2.1.3.RELEASE，并引入如下依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="生产者配置"><a href="#生产者配置" class="headerlink" title="生产者配置"></a>生产者配置</h3><p>新建一个Java配置类<code>KafkaProducerConfig</code>，用于配置生产者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.bootstrap-servers&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bootstrapServers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerFactory&lt;String, String&gt; <span class="title">producerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; configProps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        configProps.put(</span><br><span class="line">                ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,</span><br><span class="line">                bootstrapServers);</span><br><span class="line">        configProps.put(</span><br><span class="line">                ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,</span><br><span class="line">                StringSerializer.class);</span><br><span class="line">        configProps.put(</span><br><span class="line">                ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,</span><br><span class="line">                StringSerializer.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaProducerFactory&lt;&gt;(configProps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KafkaTemplate&lt;String, String&gt; <span class="title">kafkaTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KafkaTemplate&lt;&gt;(producerFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>首先我们配置了一个<code>producerFactory</code>，方法里配置了Kafka Producer实例的策略。<code>bootstrapServers</code>为Kafka生产者的地址，我们在配置文件application.yml里配置它：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  kafka:</span></span><br><span class="line"><span class="attr">    bootstrap-servers:</span> <span class="attr">localhost:9092</span></span><br></pre></td></tr></table></figure><p></p><p><code>ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG</code>和<code>ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG</code>指定了key，value序列化策略，这里指定为Kafka提供的<code>StringSerializer</code>，因为我们暂时只发送简单的String类型的消息。</p><p>接着我们使用<code>producerFactory</code>配置了<code>kafkaTemplate</code>，其包含了发送消息的便捷方法，后面我们就用这个对象来发送消息。</p><h3 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h3><p>配置好生产者，我们就可以开始发布消息了。</p><p>新建一个<code>SendMessageController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"send/&#123;message&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(@PathVariable String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.kafkaTemplate.send(<span class="string">"test"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们注入了<code>kafkaTemplate</code>对象，key-value都为String类型，并通过它的<code>send</code>方法来发送消息。其中<code>test</code>为Topic的名称，上面我们已经使用命令创建过这个Topic了。</p><p><code>send</code>方法是一个异步方法，我们可以通过回调的方式来确定消息是否发送成功，我们改造<code>SendMessageController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"send/&#123;message&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(@PathVariable String message)</span> </span>&#123;</span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, String&gt;&gt; future = <span class="keyword">this</span>.kafkaTemplate.send(<span class="string">"test"</span>, message);</span><br><span class="line">        future.addCallback(<span class="keyword">new</span> ListenableFutureCallback&lt;SendResult&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult&lt;String, String&gt; result)</span> </span>&#123;</span><br><span class="line">                logger.info(<span class="string">"成功发送消息：&#123;&#125;，offset=[&#123;&#125;]"</span>, message, result.getRecordMetadata().offset());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable ex)</span> </span>&#123;</span><br><span class="line">                logger.error(<span class="string">"消息：&#123;&#125; 发送失败，原因：&#123;&#125;"</span>, message, ex.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>消息发送成功后，会回调<code>onSuccess</code>方法，发送失败后回调<code>onFailure</code>方法。</p><h3 id="消费者配置"><a href="#消费者配置" class="headerlink" title="消费者配置"></a>消费者配置</h3><p>接着我们来配置消费者，新建一个Java配置类<code>KafkaConsumerConfig</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.bootstrap-servers&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bootstrapServers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.consumer.group-id&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String consumerGroupId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.consumer.auto-offset-reset&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String autoOffsetReset;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumerFactory&lt;String, String&gt; <span class="title">consumerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        props.put(</span><br><span class="line">                ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,</span><br><span class="line">                bootstrapServers);</span><br><span class="line">        props.put(</span><br><span class="line">                ConsumerConfig.GROUP_ID_CONFIG,</span><br><span class="line">                consumerGroupId);</span><br><span class="line">        props.put(</span><br><span class="line">                ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,</span><br><span class="line">                autoOffsetReset);</span><br><span class="line">        props.put(</span><br><span class="line">                ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,</span><br><span class="line">                StringDeserializer.class);</span><br><span class="line">        props.put(</span><br><span class="line">                ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,</span><br><span class="line">                StringDeserializer.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaConsumerFactory&lt;&gt;(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; <span class="title">kafkaListenerContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory</span><br><span class="line">                = <span class="keyword">new</span> ConcurrentKafkaListenerContainerFactory&lt;&gt;();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>consumerGroupId</code>和<code>autoOffsetReset</code>需要在application.yml里配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  kafka:</span></span><br><span class="line"><span class="attr">    consumer:</span></span><br><span class="line"><span class="attr">      group-id:</span> <span class="string">test-consumer</span></span><br><span class="line"><span class="attr">      auto-offset-reset:</span> <span class="string">latest</span></span><br></pre></td></tr></table></figure><p></p><p>其中<code>group-id</code>将消费者进行分组（你也可以不进行分组），组名为<code>test-consumer</code>，并指定了消息读取策略，包含四个可选值：</p><p><img src="img/QQ截图20190326154735.png" alt="QQ截图20190326154735.png"></p><ul><li><p>earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费</p></li><li><p>latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据</p></li><li><p>none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常</p></li><li><p>exception:直接抛出异常</p></li></ul><p>在<code>KafkaConsumerConfig</code>中我们配置了<code>ConsumerFactory</code>和<code>KafkaListenerContainerFactory</code>。当这两个Bean成功注册到Spring IOC容器中后，我们便可以使用<code>@KafkaListener</code>注解来监听消息了。</p><p>配置类上需要<code>@EnableKafka</code>注释才能在Spring托管Bean上检测<code>@KafkaListener</code>注解。</p><h3 id="消息消费"><a href="#消息消费" class="headerlink" title="消息消费"></a>消息消费</h3><p>配置好消费者，我们就可以开始消费消息了，新建<code>KafkaMessageListener</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener</span>(topics = <span class="string">"test"</span>, groupId = <span class="string">"test-consumer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"接收消息: &#123;&#125;"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们通过<code>@KafkaListener</code>注解来监听名称为test的Topic，消费者分组的组名为<code>test-consumer</code>。</p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>启动Spring Boot项目，启动过程中，控制台会输出Kafka的配置，启动好后，访问<a href="http://localhost:8080/send/hello,mrbird" target="_blank" rel="noopener">http://localhost:8080/send/hello,mrbird</a>，控制台输出如下：</p><p><img src="img/QQ截图20190326155948.png" alt="QQ截图20190326155948.png"></p><h3 id="KafkaListener详解"><a href="#KafkaListener详解" class="headerlink" title="@KafkaListener详解"></a>@KafkaListener详解</h3><p><code>@KafkaListener</code>除了可以指定Topic名称和分组id外，我们还可以同时监听来自多个Topic的消息:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@KafkaListener</span>(topics = <span class="string">"topic1, topic2"</span>)</span><br></pre></td></tr></table></figure><p></p><p>我们还可以通过<code>@Header</code>注解来获取当前消息来自哪个分区（partitions）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@KafkaListener</span>(topics = <span class="string">"test"</span>, groupId = <span class="string">"test-consumer"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(@Payload String message,</span></span></span><br><span class="line"><span class="function"><span class="params">                   @Header(KafkaHeaders.RECEIVED_PARTITION_ID)</span> <span class="keyword">int</span> partition) </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"接收消息: &#123;&#125;，partition：&#123;&#125;"</span>, message, partition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，再次访问<a href="http://localhost:8080/send/hello,mrbird" target="_blank" rel="noopener">http://localhost:8080/send/hello,mrbird</a>，控制台输出如下：</p><p><img src="img/QQ图片20190326162014.png" alt="QQ图片20190326162014.png"></p><p>因为我们没有进行分区，所以test Topic只有一个区，下标为0。</p><p>我们可以通过<code>@KafkaListener</code>来指定只接收来自特定分区的消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@KafkaListener</span>(groupId = <span class="string">"test-consumer"</span>,</span><br><span class="line">        topicPartitions = <span class="meta">@TopicPartition</span>(topic = <span class="string">"test"</span>,</span><br><span class="line">                partitionOffsets = &#123;</span><br><span class="line">                        <span class="meta">@PartitionOffset</span>(partition = <span class="string">"0"</span>, initialOffset = <span class="string">"0"</span>)</span><br><span class="line">            &#125;))</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(@Payload String message,</span></span></span><br><span class="line"><span class="function"><span class="params">                   @Header(KafkaHeaders.RECEIVED_PARTITION_ID)</span> <span class="keyword">int</span> partition) </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"接收消息: &#123;&#125;，partition：&#123;&#125;"</span>, message, partition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如果不需要指定<code>initialOffset</code>，上面代码可以简化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@KafkaListener</span>(groupId = <span class="string">"test-consumer"</span>, </span><br><span class="line">	topicPartitions = <span class="meta">@TopicPartition</span>(topic = <span class="string">"test"</span>, partitions = &#123; <span class="string">"0"</span>, <span class="string">"1"</span> &#125;))</span><br></pre></td></tr></table></figure><h3 id="消息过滤器"><a href="#消息过滤器" class="headerlink" title="消息过滤器"></a>消息过滤器</h3><p>我们可以为消息监听添加过滤器来过滤一些特定的信息。我们在消费者配置类<code>KafkaConsumerConfig</code>的<code>kafkaListenerContainerFactory</code>方法里配置过滤规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; <span class="title">kafkaListenerContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConcurrentKafkaListenerContainerFactory&lt;String, String&gt; factory</span><br><span class="line">            = <span class="keyword">new</span> ConcurrentKafkaListenerContainerFactory&lt;&gt;();</span><br><span class="line">    factory.setConsumerFactory(consumerFactory());</span><br><span class="line">    <span class="comment">// ------- 过滤配置 --------</span></span><br><span class="line">    factory.setRecordFilterStrategy(</span><br><span class="line">            r -&gt; r.value().contains(<span class="string">"fuck"</span>)</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>setRecordFilterStrategy</code>接收<code>RecordFilterStrategy&lt;K, V&gt;</code>，他是一个函数式接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RecordFilterStrategy</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">filter</span><span class="params">(ConsumerRecord&lt;K, V&gt; var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>所以我们用lambda表达式指定了上面这条规则，即如果消息内容包含<code>fuck</code>这个粗鄙之语的时候，则不接受消息。</p><p>配置好后我们重启项目，分别发送下面这两条请求：</p><ol><li><p><a href="http://localhost:8080/send/fuck,mrbird" target="_blank" rel="noopener">http://localhost:8080/send/fuck,mrbird</a></p></li><li><p><a href="http://localhost:8080/send/love,mrbird" target="_blank" rel="noopener">http://localhost:8080/send/love,mrbird</a></p></li></ol><p>观察控制台：</p><p><img src="img/QQ截图20190326163502.png" alt="QQ截图20190326163502.png"></p><p>可以看到，fuck,mrbird这条消息没有被接收。</p><h3 id="发送复杂的消息"><a href="#发送复杂的消息" class="headerlink" title="发送复杂的消息"></a>发送复杂的消息</h3><p>截至目前位置我们只发送了简单的字符串类型的消息，我们可以自定义消息转换器来发送复杂的消息。</p><p><strong>定义消息实体</strong></p><p>创建一个Message类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6678420965611108427L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String from, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.from = from;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Message&#123;"</span> +</span><br><span class="line">                <span class="string">"from='"</span> + from + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", message='"</span> + message + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get set 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>改造消息生产者配置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.bootstrap-servers&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bootstrapServers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerFactory&lt;String, Message&gt; <span class="title">producerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; configProps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        configProps.put(</span><br><span class="line">                ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,</span><br><span class="line">                bootstrapServers);</span><br><span class="line">        configProps.put(</span><br><span class="line">                ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,</span><br><span class="line">                StringSerializer.class);</span><br><span class="line">        configProps.put(</span><br><span class="line">                ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,</span><br><span class="line">                JsonSerializer.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaProducerFactory&lt;&gt;(configProps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KafkaTemplate&lt;String, Message&gt; <span class="title">kafkaTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KafkaTemplate&lt;&gt;(producerFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们将value序列化策略指定为了Kafka提供的<code>JsonSerializer</code>，并且kafkaTemplate返回类型为<code>KafkaTemplate&lt;String, Message&gt;</code>。</p><p><strong>发送新的消息</strong></p><p>在<code>SendMessageController</code>里发送复杂的消息:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> KafkaTemplate&lt;String, Message&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"send/&#123;message&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(@PathVariable String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.kafkaTemplate.send(<span class="string">"test"</span>, <span class="keyword">new</span> Message(<span class="string">"mrbird"</span>, message));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>修改消费者配置</strong></p><p>修改消费者配置<code>KafkaConsumerConfig</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.bootstrap-servers&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bootstrapServers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.consumer.group-id&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String consumerGroupId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.kafka.consumer.auto-offset-reset&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String autoOffsetReset;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumerFactory&lt;String, Message&gt; <span class="title">consumerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        props.put(</span><br><span class="line">                ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,</span><br><span class="line">                bootstrapServers);</span><br><span class="line">        props.put(</span><br><span class="line">                ConsumerConfig.GROUP_ID_CONFIG,</span><br><span class="line">                consumerGroupId);</span><br><span class="line">        props.put(</span><br><span class="line">                ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,</span><br><span class="line">                autoOffsetReset);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaConsumerFactory&lt;&gt;(</span><br><span class="line">                props,</span><br><span class="line">                <span class="keyword">new</span> StringDeserializer(),</span><br><span class="line">                <span class="keyword">new</span> JsonDeserializer&lt;&gt;(Message.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConcurrentKafkaListenerContainerFactory&lt;String, Message&gt; <span class="title">kafkaListenerContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConcurrentKafkaListenerContainerFactory&lt;String, Message&gt; factory</span><br><span class="line">                = <span class="keyword">new</span> ConcurrentKafkaListenerContainerFactory&lt;&gt;();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory());</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><strong>修改消息监听</strong></p><p>修改<code>KafkaMessageListener</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@KafkaListener</span>(topics = <span class="string">"test"</span>, groupId = <span class="string">"test-consumer"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"接收消息: &#123;&#125;"</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，访问<a href="http://localhost:8080/send/hello" target="_blank" rel="noopener">http://localhost:8080/send/hello</a>，控制台输出如下：</p><p><img src="img/QQ截图20190326171125.png" alt="QQ截图20190326171125.png"></p><h3 id="更多配置"><a href="#更多配置" class="headerlink" title="更多配置"></a>更多配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.kafka.admin.client-id=</span> <span class="comment"># ID to pass to the server when making requests. Used for server-side logging.</span></span><br><span class="line"><span class="string">spring.kafka.admin.fail-fast=false</span> <span class="comment"># Whether to fail fast if the broker is not available on startup.</span></span><br><span class="line"><span class="string">spring.kafka.admin.properties.*=</span> <span class="comment"># Additional admin-specific properties used to configure the client.</span></span><br><span class="line"><span class="string">spring.kafka.admin.ssl.key-password=</span> <span class="comment"># Password of the private key in the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.admin.ssl.key-store-location=</span> <span class="comment"># Location of the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.admin.ssl.key-store-password=</span> <span class="comment"># Store password for the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.admin.ssl.key-store-type=</span> <span class="comment"># Type of the key store.</span></span><br><span class="line"><span class="string">spring.kafka.admin.ssl.protocol=</span> <span class="comment"># SSL protocol to use.</span></span><br><span class="line"><span class="string">spring.kafka.admin.ssl.trust-store-location=</span> <span class="comment"># Location of the trust store file.</span></span><br><span class="line"><span class="string">spring.kafka.admin.ssl.trust-store-password=</span> <span class="comment"># Store password for the trust store file.</span></span><br><span class="line"><span class="string">spring.kafka.admin.ssl.trust-store-type=</span> <span class="comment"># Type of the trust store.</span></span><br><span class="line"><span class="string">spring.kafka.bootstrap-servers=</span> <span class="comment"># Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Applies to all components unless overridden.</span></span><br><span class="line"><span class="string">spring.kafka.client-id=</span> <span class="comment"># ID to pass to the server when making requests. Used for server-side logging.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.auto-commit-interval=</span> <span class="comment"># Frequency with which the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' is set to true.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.auto-offset-reset=</span> <span class="comment"># What to do when there is no initial offset in Kafka or if the current offset no longer exists on the server.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.bootstrap-servers=</span> <span class="comment"># Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for consumers.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.client-id=</span> <span class="comment"># ID to pass to the server when making requests. Used for server-side logging.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.enable-auto-commit=</span> <span class="comment"># Whether the consumer's offset is periodically committed in the background.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.fetch-max-wait=</span> <span class="comment"># Maximum amount of time the server blocks before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by "fetch-min-size".</span></span><br><span class="line"><span class="string">spring.kafka.consumer.fetch-min-size=</span> <span class="comment"># Minimum amount of data the server should return for a fetch request.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.group-id=</span> <span class="comment"># Unique string that identifies the consumer group to which this consumer belongs.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.heartbeat-interval=</span> <span class="comment"># Expected time between heartbeats to the consumer coordinator.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.key-deserializer=</span> <span class="comment"># Deserializer class for keys.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.max-poll-records=</span> <span class="comment"># Maximum number of records returned in a single call to poll().</span></span><br><span class="line"><span class="string">spring.kafka.consumer.properties.*=</span> <span class="comment"># Additional consumer-specific properties used to configure the client.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.ssl.key-password=</span> <span class="comment"># Password of the private key in the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.ssl.key-store-location=</span> <span class="comment"># Location of the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.ssl.key-store-password=</span> <span class="comment"># Store password for the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.ssl.key-store-type=</span> <span class="comment"># Type of the key store.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.ssl.protocol=</span> <span class="comment"># SSL protocol to use.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.ssl.trust-store-location=</span> <span class="comment"># Location of the trust store file.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.ssl.trust-store-password=</span> <span class="comment"># Store password for the trust store file.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.ssl.trust-store-type=</span> <span class="comment"># Type of the trust store.</span></span><br><span class="line"><span class="string">spring.kafka.consumer.value-deserializer=</span> <span class="comment"># Deserializer class for values.</span></span><br><span class="line"><span class="string">spring.kafka.jaas.control-flag=required</span> <span class="comment"># Control flag for login configuration.</span></span><br><span class="line"><span class="string">spring.kafka.jaas.enabled=false</span> <span class="comment"># Whether to enable JAAS configuration.</span></span><br><span class="line"><span class="string">spring.kafka.jaas.login-module=com.sun.security.auth.module.Krb5LoginModule</span> <span class="comment"># Login module.</span></span><br><span class="line"><span class="string">spring.kafka.jaas.options=</span> <span class="comment"># Additional JAAS options.</span></span><br><span class="line"><span class="string">spring.kafka.listener.ack-count=</span> <span class="comment"># Number of records between offset commits when ackMode is "COUNT" or "COUNT_TIME".</span></span><br><span class="line"><span class="string">spring.kafka.listener.ack-mode=</span> <span class="comment"># Listener AckMode. See the spring-kafka documentation.</span></span><br><span class="line"><span class="string">spring.kafka.listener.ack-time=</span> <span class="comment"># Time between offset commits when ackMode is "TIME" or "COUNT_TIME".</span></span><br><span class="line"><span class="string">spring.kafka.listener.client-id=</span> <span class="comment"># Prefix for the listener's consumer client.id property.</span></span><br><span class="line"><span class="string">spring.kafka.listener.concurrency=</span> <span class="comment"># Number of threads to run in the listener containers.</span></span><br><span class="line"><span class="string">spring.kafka.listener.idle-event-interval=</span> <span class="comment"># Time between publishing idle consumer events (no data received).</span></span><br><span class="line"><span class="string">spring.kafka.listener.log-container-config=</span> <span class="comment"># Whether to log the container configuration during initialization (INFO level).</span></span><br><span class="line"><span class="string">spring.kafka.listener.monitor-interval=</span> <span class="comment"># Time between checks for non-responsive consumers. If a duration suffix is not specified, seconds will be used.</span></span><br><span class="line"><span class="string">spring.kafka.listener.no-poll-threshold=</span> <span class="comment"># Multiplier applied to "pollTimeout" to determine if a consumer is non-responsive.</span></span><br><span class="line"><span class="string">spring.kafka.listener.poll-timeout=</span> <span class="comment"># Timeout to use when polling the consumer.</span></span><br><span class="line"><span class="string">spring.kafka.listener.type=single</span> <span class="comment"># Listener type.</span></span><br><span class="line"><span class="string">spring.kafka.producer.acks=</span> <span class="comment"># Number of acknowledgments the producer requires the leader to have received before considering a request complete.</span></span><br><span class="line"><span class="string">spring.kafka.producer.batch-size=</span> <span class="comment"># Default batch size.</span></span><br><span class="line"><span class="string">spring.kafka.producer.bootstrap-servers=</span> <span class="comment"># Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for producers.</span></span><br><span class="line"><span class="string">spring.kafka.producer.buffer-memory=</span> <span class="comment"># Total memory size the producer can use to buffer records waiting to be sent to the server.</span></span><br><span class="line"><span class="string">spring.kafka.producer.client-id=</span> <span class="comment"># ID to pass to the server when making requests. Used for server-side logging.</span></span><br><span class="line"><span class="string">spring.kafka.producer.compression-type=</span> <span class="comment"># Compression type for all data generated by the producer.</span></span><br><span class="line"><span class="string">spring.kafka.producer.key-serializer=</span> <span class="comment"># Serializer class for keys.</span></span><br><span class="line"><span class="string">spring.kafka.producer.properties.*=</span> <span class="comment"># Additional producer-specific properties used to configure the client.</span></span><br><span class="line"><span class="string">spring.kafka.producer.retries=</span> <span class="comment"># When greater than zero, enables retrying of failed sends.</span></span><br><span class="line"><span class="string">spring.kafka.producer.ssl.key-password=</span> <span class="comment"># Password of the private key in the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.producer.ssl.key-store-location=</span> <span class="comment"># Location of the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.producer.ssl.key-store-password=</span> <span class="comment"># Store password for the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.producer.ssl.key-store-type=</span> <span class="comment"># Type of the key store.</span></span><br><span class="line"><span class="string">spring.kafka.producer.ssl.protocol=</span> <span class="comment"># SSL protocol to use.</span></span><br><span class="line"><span class="string">spring.kafka.producer.ssl.trust-store-location=</span> <span class="comment"># Location of the trust store file.</span></span><br><span class="line"><span class="string">spring.kafka.producer.ssl.trust-store-password=</span> <span class="comment"># Store password for the trust store file.</span></span><br><span class="line"><span class="string">spring.kafka.producer.ssl.trust-store-type=</span> <span class="comment"># Type of the trust store.</span></span><br><span class="line"><span class="string">spring.kafka.producer.transaction-id-prefix=</span> <span class="comment"># When non empty, enables transaction support for producer.</span></span><br><span class="line"><span class="string">spring.kafka.producer.value-serializer=</span> <span class="comment"># Serializer class for values.</span></span><br><span class="line"><span class="string">spring.kafka.properties.*=</span> <span class="comment"># Additional properties, common to producers and consumers, used to configure the client.</span></span><br><span class="line"><span class="string">spring.kafka.ssl.key-password=</span> <span class="comment"># Password of the private key in the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.ssl.key-store-location=</span> <span class="comment"># Location of the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.ssl.key-store-password=</span> <span class="comment"># Store password for the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.ssl.key-store-type=</span> <span class="comment"># Type of the key store.</span></span><br><span class="line"><span class="string">spring.kafka.ssl.protocol=</span> <span class="comment"># SSL protocol to use.</span></span><br><span class="line"><span class="string">spring.kafka.ssl.trust-store-location=</span> <span class="comment"># Location of the trust store file.</span></span><br><span class="line"><span class="string">spring.kafka.ssl.trust-store-password=</span> <span class="comment"># Store password for the trust store file.</span></span><br><span class="line"><span class="string">spring.kafka.ssl.trust-store-type=</span> <span class="comment"># Type of the trust store.</span></span><br><span class="line"><span class="string">spring.kafka.streams.application-id=</span> <span class="comment"># Kafka streams application.id property; default spring.application.name.</span></span><br><span class="line"><span class="string">spring.kafka.streams.auto-startup=true</span> <span class="comment"># Whether or not to auto-start the streams factory bean.</span></span><br><span class="line"><span class="string">spring.kafka.streams.bootstrap-servers=</span> <span class="comment"># Comma-delimited list of host:port pairs to use for establishing the initial connections to the Kafka cluster. Overrides the global property, for streams.</span></span><br><span class="line"><span class="string">spring.kafka.streams.cache-max-size-buffering=</span> <span class="comment"># Maximum memory size to be used for buffering across all threads.</span></span><br><span class="line"><span class="string">spring.kafka.streams.client-id=</span> <span class="comment"># ID to pass to the server when making requests. Used for server-side logging.</span></span><br><span class="line"><span class="string">spring.kafka.streams.properties.*=</span> <span class="comment"># Additional Kafka properties used to configure the streams.</span></span><br><span class="line"><span class="string">spring.kafka.streams.replication-factor=</span> <span class="comment"># The replication factor for change log topics and repartition topics created by the stream processing application.</span></span><br><span class="line"><span class="string">spring.kafka.streams.ssl.key-password=</span> <span class="comment"># Password of the private key in the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.streams.ssl.key-store-location=</span> <span class="comment"># Location of the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.streams.ssl.key-store-password=</span> <span class="comment"># Store password for the key store file.</span></span><br><span class="line"><span class="string">spring.kafka.streams.ssl.key-store-type=</span> <span class="comment"># Type of the key store.</span></span><br><span class="line"><span class="string">spring.kafka.streams.ssl.protocol=</span> <span class="comment"># SSL protocol to use.</span></span><br><span class="line"><span class="string">spring.kafka.streams.ssl.trust-store-location=</span> <span class="comment"># Location of the trust store file.</span></span><br><span class="line"><span class="string">spring.kafka.streams.ssl.trust-store-password=</span> <span class="comment"># Store password for the trust store file.</span></span><br><span class="line"><span class="string">spring.kafka.streams.ssl.trust-store-type=</span> <span class="comment"># Type of the trust store.</span></span><br><span class="line"><span class="string">spring.kafka.streams.state-dir=</span> <span class="comment"># Directory location for the state store.</span></span><br><span class="line"><span class="string">spring.kafka.template.default-topic=</span> <span class="comment"># Default topic to which messages are sent.</span></span><br></pre></td></tr></table></figure><p>源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/54.Spring-Boot-Kafka" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/54.Spring-Boot-Kafka</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Kafka是一个分布式的、可分区的、可复制的消息系统，下面是Kafka的几个基本术语：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;Kafka将消息以&lt;strong&gt;topic&lt;/strong&gt;为单位进行归纳；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;将向Kafka topic发布消息的程序成为&lt;strong&gt;producers&lt;/strong&gt;；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;将预订topics并消费消息的程序成为&lt;strong&gt;consumer&lt;/strong&gt;；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Kafka以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个&lt;strong&gt;broker&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="Kafka" scheme="http://mrbird.cc/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.0 WebFlux编程</title>
    <link href="http://mrbird.cc/Spring-Boot-2-0-WebFlux.html"/>
    <id>http://mrbird.cc/Spring-Boot-2-0-WebFlux.html</id>
    <published>2018-11-19T07:25:54.000Z</published>
    <updated>2019-04-04T02:43:35.816Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:36 GMT+0800 (GMT+08:00) --><p>Spring MVC Web架构是基于阻塞式Servlet API构建的。Servlet 3.1后提供了非阻塞API，Spring 5.0后基于这些API构建了一套全新的非阻塞Web框架 —— WebFlux。Spring Boot 2.0基于Spring 5.0构建，所以要在Spring Boot中使用WebFlux架构，版本必须大于2.0。</p><p>通过下面这张图了解下Spring MVC和Spring WebFlux的区别：<a id="more"></a></p><p><img src="img/diagram-boot-reactor.svg" style="width:35rem"> <a href="img/https://www.cnblogs.com/javabg/p/7976977.html">https://www.cnblogs.com/javabg/p/7976977.html</a></p><p>可以看到，Spring WebFlux是非阻塞式的，支持 Reactive Streams背压，并在Netty，Undertow和Servlet 3.1+容器等服务器上运行。其目前只支持非关系型数据库，如Mongo，Redis等。非阻塞式的编程模型可以提高程序的并发量，提升性能和吞吐量。</p><h2 id="异步Servlet"><a href="#异步Servlet" class="headerlink" title="异步Servlet"></a>异步Servlet</h2><p>既然WebFlux是基于异步Servelt API构建的，那么我们先来看看什么是异步Servlet。</p><p>使用IDEA创建一个传统的Java Web应用（可以参考<a href="https://www.cnblogs.com/javabg/p/7976977.html" target="_blank" rel="noopener">https://www.cnblogs.com/javabg/p/7976977.html</a>），然后创建一个<code>SyncServlet</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/sync"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7583536145022393360L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(SyncServlet.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">this</span>.execute(request, response);</span><br><span class="line">        log.info(<span class="string">"总耗时："</span> + (System.currentTimeMillis() - start) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.getWriter().append(<span class="string">"hello"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>doGet</code>方法中线程阻塞2秒，然后打印hello。部署项目到Tomcat，context-path为/servlet，启动后访问<a href="http://localhost:8080/servlet/sync" target="_blank" rel="noopener">http://localhost:8080/servlet/sync</a>:</p><p><img src="img/QQ截图20190401110755.png" alt="QQ截图20190401110755.png"></p><p>传统的Servlet API是阻塞的，<code>log.info(&quot;总耗时：&quot; + (System.currentTimeMillis() - start) + &quot;ms&quot;)</code>这行代码必须等待<code>this.execute()</code>执行完毕后才开始执行。</p><p>接下来看看非阻塞Servlet API是怎么搞的。新建一个<code>AsyncServlet</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/async"</span>, asyncSupported = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">393375716683413545L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(AsyncServlet.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        AsyncContext asyncContext = request.startAsync();</span><br><span class="line"></span><br><span class="line">        CompletableFuture.runAsync(() -&gt; execute(</span><br><span class="line">            asyncContext, </span><br><span class="line">            asyncContext.getRequest(), </span><br><span class="line">            asyncContext.getResponse())</span><br><span class="line">        );</span><br><span class="line">        log.info(<span class="string">"总耗时："</span> + (System.currentTimeMillis() - start) + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(AsyncContext asyncContext, ServletRequest request, ServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.getWriter().append(<span class="string">"hello"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        asyncContext.complete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在类上使用<code>@WebServlet(asyncSupported = true)</code>开启异步支持，通过<code>AsyncContext asyncContext = request.startAsync();</code>获取异步上下文<code>AsyncContext</code>，<code>AsyncContext</code>的<code>complete</code>方法用于标识异步调用结束。<code>CompletableFuture</code>为Java 8提供的<code>Future</code>接口实现类，可以方便的处理异步调用。</p><p>启动项目，访问<a href="http://localhost:8080/servlet/async" target="_blank" rel="noopener">http://localhost:8080/servlet/async</a>，响应耗时也在2秒左右，但是这个过程是异步的，查看控制台日志就可以证明这点：</p><p><img src="img/QQ截图20190401113446.png" alt="QQ截图20190401113446.png"></p><p>所以，异步调用适用于那些对方法返回值没有影响的操作，比如异步记录用户操作日志等。如果方法的返回值依赖于异步调用的结果，那么方法耗时在同步和异步上是没有区别的。</p><h2 id="Mono和Flux"><a href="#Mono和Flux" class="headerlink" title="Mono和Flux"></a>Mono和Flux</h2><p>了解了异步Servlet后，我们回到WebFlux，新建一个SpringBoot程序，版本为2.1.3.RELEASE，并引入<code>spring-boot-starter-webflux</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p><a href="https://github.com/reactor/reactor" target="_blank" rel="noopener">Reactor</a> 是Spring WebFlux所使用的响应式库，其提供了两个特殊的类Mono和Flux。</p><p>Mono和Flux在发布订阅模式中都属于发布者（不清楚的可以参考<a href="/Java-9-Flow-API-Learn.html">Java 9 Flow API学习</a>），查看源码会发现它们都实现了Publisher接口。</p><p>Mono表示0 ~ 1个元素的数据发布者，Flux表示 0 ~ N个元素的数据发布者。我们可以通过一个例子来了解Mono和Flux，创建<code>MonoFluxTest</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonoFluxTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subscriber&lt;Integer&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="keyword">private</span> Subscription subscription;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.subscription = subscription;</span><br><span class="line">                <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer item)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"接受到数据: "</span> + item);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                throwable.printStackTrace();</span><br><span class="line">                <span class="keyword">this</span>.subscription.cancel();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"处理完了!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        String[] strs = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</span><br><span class="line">        Flux.fromArray(strs).map(Integer::parseInt).subscribe(subscriber);</span><br><span class="line">        Mono.fromSupplier(() -&gt; <span class="number">1</span>).map(s -&gt; s + <span class="number">1</span>).subscribe(subscriber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序首先创建了一个订阅者（参考<a href="/Java-9-Flow-API-Learn.html">Java 9 Flow API学习</a>），然后分别使用<code>Flux.fromArray</code>和<code>Mono.fromSupplier</code>构造了<code>Flux</code>类型发布者和<code>Mono</code>类型发布者，并和订阅者保持订阅关系。</p><p>运行main方法，控制台输出：</p><p><img src="img/QQ截图20190401134616.png" alt="QQ截图20190401134616.png"></p><p>了解了Mono和Flux后，我们新建一个TestController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"sync"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"sync method start"</span>);</span><br><span class="line">        String result = <span class="keyword">this</span>.execute();</span><br><span class="line">        logger.info(<span class="string">"sync method end"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"async/mono"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;String&gt; <span class="title">asyncMono</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"async method start"</span>);</span><br><span class="line">        Mono&lt;String&gt; result = Mono.fromSupplier(<span class="keyword">this</span>::execute);</span><br><span class="line">        logger.info(<span class="string">"async method end"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>execute</code>方法返回一个值hello，所以可以使用Mono来处理返回值，使它成为一个异步方法。<code>asyncMono</code>方法返回<code>Mono&lt;String&gt;</code>类型，也就是一个String类型的数据发布者，我们不用去手动处理订阅关系，Spring会帮我们处理，我们直接返回即可。</p><p>启动项目，可以看到WebFlux默认使用的是Netty服务器：</p><p><img src="img/QQ截图20190401135918.png" alt="QQ截图20190401135918.png"></p><p>分别访问<a href="http://localhost:8080/sync" target="_blank" rel="noopener">http://localhost:8080/sync</a>和<a href="http://localhost:8080/async/mono" target="_blank" rel="noopener">http://localhost:8080/async/mono</a>，控制台输出如下：</p><p><img src="img/QQ截图20190401140024.png" alt="QQ截图20190401140024.png"></p><p><img src="img/QQ截图20190401140239.png" alt="QQ截图20190401140239.png"></p><p>可以看到<code>asyncMono</code>方法里的<code>Mono&lt;String&gt; result = Mono.fromSupplier(this::execute)</code>是异步非阻塞的，并且<a href="http://localhost:8080/async/mono" target="_blank" rel="noopener">http://localhost:8080/async/mono</a>返回的值为字符串hello。</p><p>下面我们来看一个返回类型为<code>Flux&lt;String&gt;</code>类型的例子。</p><h2 id="Server-Sent-Events"><a href="#Server-Sent-Events" class="headerlink" title="Server Sent Events"></a>Server Sent Events</h2><p>返回值类型为<code>Flux</code>的时候，它是一个数据流，不是一次性数据包，服务端会不断地（假如Flux数据长度大于1）往客户端发送数据。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流。这种模式称为Server-Sent Events。</p><p>在TestController新增一个<code>asyncFlux</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"async/flux"</span>, produces = MediaType.TEXT_EVENT_STREAM_VALUE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Flux&lt;String&gt; <span class="title">asyncFlux</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"async method start"</span>);</span><br><span class="line">    Flux&lt;String&gt; result = Flux.fromStream(IntStream.range(<span class="number">1</span>, <span class="number">5</span>).mapToObj(i -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"int value："</span> + i;</span><br><span class="line">    &#125;));</span><br><span class="line">    logger.info(<span class="string">"async method end"</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>@GetMapping</code>必须通过<code>produces</code>指定数据类型为<code>text/event-stream</code>，重启项目，访问<a href="http://localhost:8080/async/flux" target="_blank" rel="noopener">http://localhost:8080/async/flux</a>：</p><p><img src="img/flux.gif" alt="flux.gif"></p><p>前端可以通过H5的<code>EventSource</code>来接收。</p><p>引入thymeleaf依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后在resources/templates下新建flux.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test sse<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> es = <span class="keyword">new</span> EventSource(<span class="string">"async/flux"</span>);</span></span><br><span class="line"><span class="javascript">    es.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(evt.data);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (evt.data === <span class="string">"int value：4"</span>) &#123;</span></span><br><span class="line"><span class="undefined">            es.close();</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>需要调用<code>es.close()</code>来关闭事件流，不然<code>EventSource</code>会在数据传输完毕会自动重连，这样就会不间断的调用<code>localhost:8080/async/flux</code>请求了。</p><p>添加一个ViewController，用来访问flux.html：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"flux"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">flux</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"flux"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，访问<a href="http://localhost:8080/flux" target="_blank" rel="noopener">http://localhost:8080/flux</a>，浏览器控制台输出如下所示:</p><p><img src="img/asfasfdvvasd.gif" alt="asfasfdvvasd.gif"></p><h2 id="Mono-Flux常用方法"><a href="#Mono-Flux常用方法" class="headerlink" title="Mono,Flux常用方法"></a>Mono,Flux常用方法</h2><p>通过上面的例子，我们简单了解了Mono和Flux的用法和区别，下面我们列举一些它们的常用方法。</p><h3 id="源头操作"><a href="#源头操作" class="headerlink" title="源头操作"></a>源头操作</h3><p><strong>Flux</strong></p><p>可以通过Flux类的静态方法来生成：</p><ol><li><p><code>just()</code>：可以指定序列中包含的全部元素。创建出来的 Flux 序列在发布这些元素之后会自动结束。</p></li><li><p><code>fromArray()</code>，<code>fromIterable()</code>和 <code>fromStream()</code>：可以从一个数组、Iterable 对象或 Stream 对象中创建 Flux 对象。</p></li><li><p><code>empty()</code>：创建一个不包含任何元素，只发布结束消息的序列。</p></li><li><p><code>error(Throwable error)</code>：创建一个只包含错误消息的序列。</p></li><li><p><code>never()</code>：创建一个不包含任何消息通知的序列。</p></li><li><p><code>range(int start, int count)</code>：创建包含从 start 起始的 count 个数量的 Integer 对象的序列。</p></li><li><p><code>interval(Duration period)</code>和 <code>interval(Duration delay, Duration period)</code>：创建一个包含了从 0 开始递增的 Long 对象的序列。其中包含的元素按照指定的间隔来发布。除了间隔时间之外，还可以指定起始元素发布之前的延迟时间。</p></li></ol><p>举些例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Flux.just(<span class="string">"Hello"</span>, <span class="string">"World"</span>).subscribe(System.out::println);</span><br><span class="line">    Flux.fromArray(<span class="keyword">new</span> Integer[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;).subscribe(System.out::println);</span><br><span class="line">    Flux.empty().subscribe(System.out::println);</span><br><span class="line">    Flux.range(<span class="number">1</span>, <span class="number">4</span>).subscribe(System.out::println);</span><br><span class="line">    Flux.interval(Duration.of(<span class="number">1</span>, ChronoUnit.SECONDS)).subscribe(System.out::println);</span><br><span class="line">    <span class="comment">// 线程延迟关闭，不然最后一个例子木有输出</span></span><br><span class="line">    Thread.currentThread().join(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>输出如下所示： <img src="img/QQ截图20190401170048.png" alt="QQ截图20190401170048.png"></p><p>上面的这些静态方法适合于简单的Flux序列生成，当序列的生成需要复杂的逻辑时，则应该使用<code>generate()</code>或<code>create()</code>方法。</p><p><strong>generate()</strong></p><p>generate()方法通过同步和逐一的方式来产生 Flux 序列。序列的产生是通过调用所提供的 SynchronousSink 对象的 next()，complete()和 error(Throwable)方法来完成的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Flux.generate(sink -&gt; &#123;</span><br><span class="line">    sink.next(<span class="string">"Hello"</span>);</span><br><span class="line">    sink.complete();</span><br><span class="line">&#125;).subscribe(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line">Flux.generate(ArrayList::<span class="keyword">new</span>, (list, sink) -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> value = random.nextInt(<span class="number">100</span>);</span><br><span class="line">    list.add(value);</span><br><span class="line">    sink.next(value);</span><br><span class="line">    <span class="keyword">if</span> (list.size() == <span class="number">10</span>) &#123;</span><br><span class="line">        sink.complete();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;).subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>输出如下所示:</p><p><img src="img/QQ截图20190401170950.png" alt="QQ截图20190401170950.png"></p><p>如果不调用 complete()方法，所产生的是一个无限序列。</p><p><strong>create()</strong></p><p>create()方法与 generate()方法的不同之处在于所使用的是 FluxSink 对象。FluxSink 支持同步和异步的消息产生，并且可以在一次调用中产生多个元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Flux.create(sink -&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        sink.next(i);</span><br><span class="line">    &#125;</span><br><span class="line">    sink.complete();</span><br><span class="line">&#125;).subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>Mono</strong></p><p>Mono 的创建方式与之前介绍的 Flux 比较相似。Mono 类中也包含了一些与 Flux 类中相同的静态方法。这些方法包括 just()，empty()，error()和 never()等。除了这些方法之外，Mono 还有一些独有的静态方法：</p><ol><li><p><code>fromCallable()</code>、<code>fromCompletionStage()</code>、<code>fromFuture()</code>、<code>fromRunnable(</code>)和 <code>fromSupplier()</code>：分别从 Callable、CompletionStage、CompletableFuture、Runnable 和 Supplier 中创建 Mono。</p></li><li><p><code>delay(Duration duration)</code>：创建一个 Mono 序列，在指定的延迟时间之后，产生数字 0 作为唯一值。</p></li><li><p><code>ignoreElements(Publisher&lt;T&gt; source)</code>：创建一个 Mono 序列，忽略作为源的 Publisher 中的所有元素，只产生结束消息。</p></li><li><p><code>justOrEmpty(Optional&lt;? extends T&gt; data)</code>和 <code>justOrEmpty(T data)</code>：从一个 Optional 对象或可能为 null 的对象中创建 Mono。只有 Optional 对象中包含值或对象不为 null 时，Mono 序列才产生对应的元素。</p></li></ol><p>举些例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mono.just(<span class="string">"are"</span>).subscribe(System.out::println);</span><br><span class="line">Mono.empty().subscribe(System.out::println);</span><br><span class="line">Mono.fromSupplier(() -&gt; <span class="string">"you"</span>).subscribe(System.out::println);</span><br><span class="line">Mono.justOrEmpty(Optional.of(<span class="string">"ok"</span>)).subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>输出:</p><p><img src="img/QQ截图20190401173002.png" alt="QQ截图20190401173002.png"></p><p>还可以通过 create()方法来使用 MonoSink 来创建 Mono：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mono.create(sink -&gt; sink.success(<span class="string">"Hello"</span>)).subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p></p><h3 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h3><p><strong>filter</strong></p><p>对流中包含的元素进行过滤，只留下满足 Predicate 指定条件的元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Flux.range(<span class="number">1</span>, <span class="number">10</span>).filter(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>).subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>输出前10偶数。</p><p><strong>take</strong></p><p>take 系列操作符用来从当前流中提取元素。提取的方式可以有很多种。</p><ol><li><p><code>take(long n)</code>：按照指定的数量来提取。</p></li><li><p><code>takeLast(long n)</code>：提取流中的最后 N 个元素。</p></li><li><p><code>takeUntil(Predicate&lt;? super T&gt; predicate)</code>：提取元素直到 Predicate 返回 true。</p></li></ol><p>4 <code>takeWhile(Predicate&lt;? super T&gt; continuePredicate)</code>： 当 Predicate 返回 true 时才进行提取。</p><p>举些例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Flux.range(<span class="number">1</span>, <span class="number">20</span>).take(<span class="number">10</span>).subscribe(System.out::println);</span><br><span class="line">Flux.range(<span class="number">1</span>, <span class="number">20</span>).takeLast(<span class="number">10</span>).subscribe(System.out::println);</span><br><span class="line">Flux.range(<span class="number">1</span>, <span class="number">20</span>).takeWhile(i -&gt; i &lt; <span class="number">10</span>).subscribe(System.out::println);</span><br><span class="line">Flux.range(<span class="number">1</span>, <span class="number">20</span>).takeUntil(i -&gt; i == <span class="number">10</span>).subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p><strong>reduce 和 reduceWith</strong></p><p>reduce 和 reduceWith 操作符对流中包含的所有元素进行累积操作，得到一个包含计算结果的 Mono 序列。累积操作是通过一个 BiFunction 来表示的。在操作时可以指定一个初始值。如果没有初始值，则序列的第一个元素作为初始值。</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Flux.range(<span class="number">1</span>, <span class="number">10</span>).reduce((x, y) -&gt; x + y).subscribe(System.out::println);</span><br><span class="line">Flux.range(<span class="number">1</span>, <span class="number">10</span>).reduceWith(() -&gt; <span class="number">10</span>, (x, y) -&gt; x + y).subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>第一行语句对流中的元素进行相加操作，结果为 55；第二行语句同样也是进行相加操作，不过通过一个 Supplier 给出了初始值为 10，所以结果为 65。</p><p><strong>merge</strong></p><p><code>merge</code>操作符用来把多个流合并成一个 Flux 序列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Flux.merge(</span><br><span class="line">        Flux.interval(Duration.of(<span class="number">500</span>, ChronoUnit.MILLIS)).take(<span class="number">2</span>),</span><br><span class="line">        Flux.interval(Duration.of(<span class="number">500</span>, ChronoUnit.MILLIS)).take(<span class="number">2</span>)</span><br><span class="line">).toStream().forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>输出 0 0 1 1。</p><p><strong>buffer</strong></p><p>直接看例子吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flux.range(<span class="number">1</span>, <span class="number">100</span>).buffer(<span class="number">20</span>).subscribe(System.out::println);</span><br><span class="line">Flux.range(<span class="number">1</span>, <span class="number">10</span>).bufferUntil(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>).subscribe(System.out::println);</span><br><span class="line">Flux.range(<span class="number">1</span>, <span class="number">10</span>).bufferWhile(i -&gt; i % <span class="number">2</span> == <span class="number">0</span>).subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>输出如下所示：</p><p><img src="img/QQ截图20190402090631.png" alt="QQ截图20190402090631.png"></p><p>类似于数据流分区。</p><p><strong>zipWith</strong></p><p>将两个流的元素安装元素位置一一组合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>)</span><br><span class="line">    .zipWith(Flux.just(<span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>))</span><br><span class="line">    .subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>输出：</p><p><img src="img/QQ截图20190402092516.png" alt="QQ截图20190402092516.png"></p><p>没有配对上的被丢弃。</p><p>另外一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>)</span><br><span class="line">    .zipWith(Flux.just(<span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>), (s1, s2) -&gt; String.format(<span class="string">"%s-%s"</span>, s1, s2))</span><br><span class="line">    .subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>输出如下:</p><p><img src="img/QQ截图20190402092833.png" alt="QQ截图20190402092833.png"></p><p><strong>flatMap</strong></p><p>把流中的每个元素转换成一个流，再把所有流中的元素进行合并。</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">5</span>, <span class="number">10</span>).flatMap(</span><br><span class="line">            x -&gt; Flux.range(<span class="number">1</span>, x).take(x)</span><br><span class="line">    ).subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p></p><h3 id="终端处理"><a href="#终端处理" class="headerlink" title="终端处理"></a>终端处理</h3><p>通过<code>subscribe()</code>方法处理正常和错误消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    .concatWith(Mono.error(<span class="keyword">new</span> IllegalStateException()))</span><br><span class="line">    .subscribe(System.out::println, System.err::println);</span><br></pre></td></tr></table></figure><p></p><p>输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">java.lang.IllegalStateException</span><br></pre></td></tr></table></figure><p></p><p>出现错误时返回默认值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    .concatWith(Mono.error(<span class="keyword">new</span> IllegalStateException()))</span><br><span class="line">    .onErrorReturn(<span class="number">0</span>)</span><br><span class="line">    .subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p></p><p>出现错误时使用另外的流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    .concatWith(Mono.error(<span class="keyword">new</span> IllegalArgumentException()))</span><br><span class="line">    .onErrorResume(e -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> IllegalStateException) &#123;</span><br><span class="line">            <span class="keyword">return</span> Mono.just(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> IllegalArgumentException) &#123;</span><br><span class="line">            <span class="keyword">return</span> Mono.just(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Mono.empty();</span><br><span class="line">    &#125;).subscribe(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>输出如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">-1</span><br></pre></td></tr></table></figure><p></p><p>源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/57.Spring-Boot-WebFlux" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/57.Spring-Boot-WebFlux</a></p><p>参考链接:</p><ol><li><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#spring-webflux</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Server-sent_events/Using_server-sent_events" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Server-sent_events/Using_server-sent_events</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html</a></p></li><li><p><a href="https://projectreactor.io/docs/core/release/reference/#flux" target="_blank" rel="noopener">https://projectreactor.io/docs/core/release/reference/#flux</a></p></li><li><p><a href="https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html</a></p></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Spring MVC Web架构是基于阻塞式Servlet API构建的。Servlet 3.1后提供了非阻塞API，Spring 5.0后基于这些API构建了一套全新的非阻塞Web框架 —— WebFlux。Spring Boot 2.0基于Spring 5.0构建，所以要在Spring Boot中使用WebFlux架构，版本必须大于2.0。&lt;/p&gt;&lt;p&gt;通过下面这张图了解下Spring MVC和Spring WebFlux的区别：
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="WebFlux" scheme="http://mrbird.cc/tags/WebFlux/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot整合Mongo DB</title>
    <link href="http://mrbird.cc/Spring-Boot-Mongo-DB-CRUD.html"/>
    <id>http://mrbird.cc/Spring-Boot-Mongo-DB-CRUD.html</id>
    <published>2018-11-15T02:41:51.000Z</published>
    <updated>2019-04-04T06:10:50.260Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:35 GMT+0800 (GMT+08:00) --><p>这节我们将整合Spring Boot与Mongo DB实现增删改查的功能，并且实现序列递增。Mongo DB下载地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a>。Mongo DB的基本介绍和增删改查的用法可以参考我之前的文章：<a href="https://mrbird.cc/MongoDB-shell.html"> MongoDB shell </a>、<a href="https://mrbird.cc/MongoDB%E6%96%87%E6%A1%A3CUD.html"> MongoDB文档CUD </a>和<a href="https://mrbird.cc/MongoDB-%E6%96%87%E6%A1%A3%E6%9F%A5%E8%AF%A2.html"> MongoDB 文档查询 </a>。</p><a id="more"></a><p>新建一个Spring Boot项目，版本为2.1.3.RELEASE，并引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>然后可以通过Mongo Shell或者Mongo Compass工具创建一个名称为testdb的数据库，并新增user文档（文档，类似与关系型数据库里的数据表）：</p><p><img src="img/QQ截图20190402141210.png" alt="QQ截图20190402141210.png"></p><p>在配置文件application.yml里配置Mongo DB：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    mongodb:</span></span><br><span class="line"><span class="attr">      host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">      port:</span> <span class="number">27017</span></span><br><span class="line"><span class="attr">      database:</span> <span class="string">testdb</span></span><br></pre></td></tr></table></figure><p></p><p>Mongo DB的默认端口为27017，使用的数据库为刚刚创建的testdb。</p><p>创建User实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get set 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Document(collection = &quot;user&quot;)</code>表明这是一个文档对象，名称为<code>user</code>，对应Mongo DB里的user表。<code>@Id</code>标注主键字段，String类型的主键值在插入的时候Mongo DB会帮我们自动生成。如果对象中的某个属性为非表字段，可以使用注解<code>@Transient</code>进行排除。</p><p>准备好这些后，我们开始编写一些简单的增删改查样例。</p><h2 id="简单增删改查"><a href="#简单增删改查" class="headerlink" title="简单增删改查"></a>简单增删改查</h2><p>创建一个UserDao接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接口继承自<code>MongoRepository</code>，泛型分别为实体对象和主键类型。通过继承<code>MongoRepository</code>，<code>UserDao</code>包含了一些增删改查的方法，如下图所示：</p><p><img src="img/QQ截图20190404094010.png" alt="QQ截图20190404094010.png"></p><p>接着编写UserService，为了方便这里不再编写接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;User&gt; <span class="title">getUser</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增和修改都是 save方法，</span></span><br><span class="line"><span class="comment">     * id 存在为修改，id 不存在为新增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">createUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        user.setId(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> userDao.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao.findById(id)</span><br><span class="line">                .ifPresent(user -&gt; <span class="keyword">this</span>.userDao.delete(user));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(String id, User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao.findById(id)</span><br><span class="line">            .ifPresent(</span><br><span class="line">                u -&gt; &#123;</span><br><span class="line">                    u.setName(user.getName());</span><br><span class="line">                    u.setAge(user.getAge());</span><br><span class="line">                    u.setDescription(user.getDescription());</span><br><span class="line">                    <span class="keyword">this</span>.userDao.save(u);</span><br><span class="line">                &#125;</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面我们编写了基本的增删改查样例，新增和修改都是通过<code>save</code>方法完成的，当主键存在时则为修改，主键不存在则为新增。</p><p>最后编写一个RESTful的UserController（为了方便，没有对参数进行校验）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">createUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.createUser(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">        userService.deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(@PathVariable String id, User user)</span> </span>&#123;</span><br><span class="line">        userService.updateUser(id, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户 id查找</span></span><br><span class="line"><span class="comment">     * 存在返回，不存在返回 null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动项目，使用postman来测试接口的可用性。</p><p>测试新增用户：</p><p><img src="img/QQ截图20190404094900.png" alt="QQ截图20190402142923.png"></p><p>新增成功，查看数据库：</p><p><img src="img/QQ截图20190404094944.png" alt="QQ截图20190404094944.png"></p><p>测试查询用户：</p><p><img src="img/QQ截图20190404095026.png" alt="QQ截图20190402143028.png"></p><p>查询成功。</p><p>测试通过用ID查找用户：</p><p><img src="img/QQ截图20190404095104.png" alt="QQ截图20190402143107.png"></p><p>更新用户：</p><p><img src="img/QQ截图20190404095151.png" alt="QQ截图20190402143139.png"></p><p>查看数据库是否更新成功：</p><p><img src="img/QQ截图20190404095609.png" alt="QQ截图20190402143232.png"></p><p>更新成功。</p><p>最后测试通过用户ID删除用户：</p><p><img src="img/QQ截图20190404095646.png" alt="QQ截图20190402143320.png"></p><p>返回状态码200，删除成功。</p><p>查看数据库，删除成功：</p><p><img src="img/QQ截图20190404095710.png" alt="QQ截图20190404095710.png"></p><h2 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h2><p>其实<code>UserDao</code>通过继承<code>MongoRepository</code>已经具有了JPA的特性，我们可以通过方法名来构建多查询条件的SQL。比如通过用户的年龄段来查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">MongoRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据年龄段来查找</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to   to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;User&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findByAgeBetween</span><span class="params">(Integer from, Integer to)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在输入<code>findBy</code>后，IDEA会根据实体对象的属性和SQL的各种关键字自动组合提示：</p><p><img src="img/fasdfasdf.png" alt="QQ截图20190404101118.png"></p><p>比如再在创建一个通过年龄段，用户名和描述（模糊查询）查询用户的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过年龄段，用户名，描述（模糊查询）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> from        from</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to          to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name        name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> description description</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;User&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findByAgeBetweenAndNameEqualsAndDescriptionIsLike</span><span class="params">(Integer from, Integer to, String name, String description)</span></span>;</span><br></pre></td></tr></table></figure><p>方法参数个数需要和方法名中所需要的参数个数对应上。</p><h2 id="排序与分页"><a href="#排序与分页" class="headerlink" title="排序与分页"></a>排序与分页</h2><p>排序和分页需要使用<code>MongoTemplate</code>对象来完成，在<code>UserService</code>里新增一个<code>getUserByCondition</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MongoTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;User&gt; <span class="title">getUserByCondition</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> page, User user)</span> </span>&#123;</span><br><span class="line">    Query query = <span class="keyword">new</span> Query();</span><br><span class="line">    Criteria criteria = <span class="keyword">new</span> Criteria();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(user.getName())) &#123;</span><br><span class="line">        criteria.and(<span class="string">"name"</span>).is(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(user.getDescription())) &#123;</span><br><span class="line">        criteria.and(<span class="string">"description"</span>).regex(user.getDescription());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    query.addCriteria(criteria);</span><br><span class="line"></span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"age"</span>);</span><br><span class="line">    Pageable pageable = PageRequest.of(page, size, sort);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = template.find(query.with(pageable), User.class);</span><br><span class="line">    <span class="keyword">return</span> PageableExecutionUtils.getPage(users, pageable, () -&gt; template.count(query, User.class));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>size</code>表示每页显示的条数，<code>page</code>表示当前页码数，0表示第一页。上面的方法通过<code>name</code>和<code>description</code>（模糊查询）来查询用户分页信息，并且查询结果使用<code>age</code>字段降序排序。方法返回<code>Page</code>对象。</p><p>在<code>UserController</code>里添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/condition"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;User&gt; <span class="title">getUserByCondition</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> page, User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUserByCondition(size, page, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，我们往数据库里多加几条数据：</p><p><img src="img/QQ截图20190404102609.png" alt="QQ截图20190404102609.png"></p><p>获取第1页数据，每页显示10条：</p><p><img src="img/QQ截图20190404102736.png" alt="QQ截图20190404102736.png"></p><p>返回数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"content"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"5ca56ae2f08f0b6048fd470d"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"jane"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">26</span>,</span><br><span class="line">            <span class="attr">"description"</span>: <span class="string">"web developer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"5ca56ad1f08f0b6048fd470c"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"scott"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">23</span>,</span><br><span class="line">            <span class="attr">"description"</span>: <span class="string">"ui designer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"5ca56afaf08f0b6048fd470e"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"mike"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">21</span>,</span><br><span class="line">            <span class="attr">"description"</span>: <span class="string">"python developer"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"5ca56b38f08f0b6048fd470f"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"mrbird"</span>,</span><br><span class="line">            <span class="attr">"age"</span>: <span class="number">18</span>,</span><br><span class="line">            <span class="attr">"description"</span>: <span class="string">"java noob"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"pageable"</span>: &#123;</span><br><span class="line">        <span class="attr">"sort"</span>: &#123;</span><br><span class="line">            <span class="attr">"sorted"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"unsorted"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"empty"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"offset"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"pageSize"</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="attr">"pageNumber"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"unpaged"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"paged"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"last"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"totalPages"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"totalElements"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"number"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">"sort"</span>: &#123;</span><br><span class="line">        <span class="attr">"sorted"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"unsorted"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"empty"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"numberOfElements"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"first"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"empty"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>剩下可以自己测试。</p><p>postman测试样例及源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/56.Spring-Boot-MongoDB-crud" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/56.Spring-Boot-MongoDB-crud</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:35 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;这节我们将整合Spring Boot与Mongo DB实现增删改查的功能，并且实现序列递增。Mongo DB下载地址：&lt;a href=&quot;https://www.mongodb.com/download-center/community&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.mongodb.com/download-center/community&lt;/a&gt;。Mongo DB的基本介绍和增删改查的用法可以参考我之前的文章：&lt;a href=&quot;https://mrbird.cc/MongoDB-shell.html&quot;&gt; MongoDB shell &lt;/a&gt;、&lt;a href=&quot;https://mrbird.cc/MongoDB%E6%96%87%E6%A1%A3CUD.html&quot;&gt; MongoDB文档CUD &lt;/a&gt;和&lt;a href=&quot;https://mrbird.cc/MongoDB-%E6%96%87%E6%A1%A3%E6%9F%A5%E8%AF%A2.html&quot;&gt; MongoDB 文档查询 &lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
      <category term="MongoDB" scheme="http://mrbird.cc/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Java 9 Flow API 学习</title>
    <link href="http://mrbird.cc/Java-9-Flow-API-Learn.html"/>
    <id>http://mrbird.cc/Java-9-Flow-API-Learn.html</id>
    <published>2018-11-10T02:46:14.000Z</published>
    <updated>2019-02-26T11:28:18.786Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --><p>响应式编程（Reactive Programming）可以理解为一种处理数据项（Data Item）的异步流，即在数据项产生的时候，接收者就对其进行响应。在响应式编程中，会有一个数据发布者（Publisher）和数据订阅者（Subscriber），后者用于异步接收发布者发布的数据。在该模式中，还引入了一个更高级的特性：数据处理器（Processor），它用于将数据发布者发布的数据进行某些转换操作，然后再发布给数据订阅者。</p><p>总之，响应式编程是异步非阻塞编程，能够提升程序性能，可以解决传统编程模型遇到的困境。基于这个模型实现的有Java 9 Flow API、RxJava和Reactor等，这里主要介绍的是Java 9 Flow API的使用。</p><a id="more"></a><h2 id="Flow接口概览"><a href="#Flow接口概览" class="headerlink" title="Flow接口概览"></a>Flow接口概览</h2><p>Java 9 新增了一个<code>Flow</code>接口，位于<code>java.util.concurrent</code>路径下，构成如下图所示：</p><p><img src="img/QQ截图20190226141817.png" alt="QQ截图20190226141817.png"></p><p>其中<code>Publisher</code>为数据发布者，<code>Subscriber</code>为数据订阅者，<code>Subscription</code>为发布者和订阅者之间的订阅关系，<code>Processor</code>为数据处理器。</p><h3 id="Publisher"><a href="#Publisher" class="headerlink" title="Publisher"></a>Publisher</h3><p><code>Publisher</code>部分的源码如下所示:</p><p><img src="img/QQ截图20190226142214.png" alt="QQ截图20190226142214.png"></p><p>它是一个函数式接口，只包含一个<code>subscribe</code>方法，通过这个方法将数据发布出去。</p><h3 id="Subscriber"><a href="#Subscriber" class="headerlink" title="Subscriber"></a>Subscriber</h3><p><code>Subscriber</code>部分的源码如下所示: <img src="img/QQ截图20190226142519.png" alt="QQ截图20190226142519.png"></p><p>该接口包含了四个方法：</p><table><tr><th>方法</th><th>描述</th></tr><tr><td>onSubscribe</td><td>订阅成功的回调方法，用于初始化<code>Subscription</code>，并且表明可以开始接收订阅数据了</td></tr><tr><td>onNext</td><td>接收下一项订阅数据的回调方法</td></tr><tr><td>onError</td><td>在Publisher或Subcriber遇到不可恢复的错误时调用此方法，Subscriber不再接收订阅消息</td></tr><tr><td>onComplete</td><td>当接收完所有订阅数据，并且发布者已经关闭后会回调这个方法</td></tr></table><h3 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h3><p><code>Subscription</code>部分的源码如下所示：</p><p><img src="img/QQ截图20190226143424.png" alt="QQ截图20190226143424.png"></p><p>该接口包含了两个方法：</p><table><tr><th>方法</th><th>描述</th></tr><tr><td>request</td><td>用于向数据发布者请求n个数据项</td></tr><tr><td>cancel</td><td>取消消息订阅，订阅者将不再接收数据</td></tr></table><h3 id="Processor"><a href="#Processor" class="headerlink" title="Processor"></a>Processor</h3><p><code>Processor</code>部分的代码如下所示：</p><p><img src="img/QQ截图20190226143709.png" alt="QQ截图20190226143709.png"></p><p>它是一个空接口，但是它继承了<code>Publisher</code>和<code>Subscriber</code>，所以它既能发布数据也能订阅数据。基于这个特性，它可以充当数据转换的角色，先从数据发布者那接收数据项，然后经过处理后再发布给最终的数据订阅者。</p><h2 id="发布订阅示例"><a href="#发布订阅示例" class="headerlink" title="发布订阅示例"></a>发布订阅示例</h2><p>接下来我们举个数据发布和数据订阅的简单示例，以此了解Java 9 Flow API的使用。先入为主，直接贴出整个示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowApiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 定义 String 类型的数据发布者，JDK 9自带的</span></span><br><span class="line">        <span class="comment">// SubmissionPublisher 实现了 Publisher</span></span><br><span class="line">        SubmissionPublisher&lt;String&gt; publisher = <span class="keyword">new</span> SubmissionPublisher&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建一个订阅者，用于接收发布者的消息</span></span><br><span class="line">        Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;&gt;() &#123;</span><br><span class="line">            <span class="keyword">private</span> Subscription subscription;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 通过 Subscription 和发布者保持订阅关系，并用它来给发布者反馈</span></span><br><span class="line">                <span class="keyword">this</span>.subscription = subscription;</span><br><span class="line">                <span class="comment">// 请求一个数据</span></span><br><span class="line">                <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 接收发布者发布的消息</span></span><br><span class="line">                System.out.println(<span class="string">"【订阅者】接收消息 &lt;------ "</span> + item);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 接收后再次请求一个数据</span></span><br><span class="line">                <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果不想再接收数据，也可以直接调用 cancel，表示不再接收了</span></span><br><span class="line">                <span class="comment">// this.subscription.cancel();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 过程中出现异常会回调这个方法</span></span><br><span class="line">                System.out.println(<span class="string">"【订阅者】数据接收出现异常，"</span> + throwable);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 出现异常，取消订阅，告诉发布者我不再接收数据了</span></span><br><span class="line">                <span class="comment">// 实际测试发现，只要订阅者接收消息出现异常，进入了这个回调</span></span><br><span class="line">                <span class="comment">// 订阅者就不会再继续接收消息了</span></span><br><span class="line">                <span class="keyword">this</span>.subscription.cancel();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 当发布者发出的数据都被接收了，</span></span><br><span class="line">                <span class="comment">// 并且发布者关闭后，会回调这个方法</span></span><br><span class="line">                System.out.println(<span class="string">"【订阅者】数据接收完毕"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 发布者和订阅者需要建立关系</span></span><br><span class="line">        publisher.subscribe(subscriber);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 发布者开始发布数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            String message = <span class="string">"hello flow api "</span> + i;</span><br><span class="line">            System.out.println(<span class="string">"【发布者】发布消息 ------&gt; "</span> + message);</span><br><span class="line">            publisher.submit(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 发布结束后，关闭发布者</span></span><br><span class="line">        publisher.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// main线程延迟关闭，不然订阅者还没接收完消息，线程就被关闭了</span></span><br><span class="line">        Thread.currentThread().join(<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面使用JDK 自带的<code>Publisher</code>实现类<code>SubmissionPublisher</code>来发布 String类型的数据，然后用匿名实现类的方式创建了一个<code>Subscriber</code>实现类。接着使用<code>SubmissionPublisher</code>的<code>subscribe</code>方法来为发布者和订阅者建立关系。建立关系后，发布者就可以发布数据，接收者也开始接收数据。详细的说明注释里都写了，这里就不再赘述代码的逻辑了。</p><p>程序的输出如下所示：</p><p><img src="img/QQ截图20190226144617.png" alt="QQ截图20190226144617.png"></p><h2 id="模拟背压"><a href="#模拟背压" class="headerlink" title="模拟背压"></a>模拟背压</h2><p>所谓的<a href="https://en.wikipedia.org/wiki/Back_pressure" target="_blank" rel="noopener">背压</a>（Backpressure）通俗的讲就是数据接收者的压力，传统模式下，发布者只关心数据的创造与发布，而当数据发布速率远高于数据接收速率的时候，数据接收者缓冲区将被填满，无法再接收数据。发布者并不关心这些，依旧不断地发送数据，所以就造成了IO阻塞。</p><p>基于响应式模型实现的Flow API可以很好地解决这个问题。在Java 9的Flow API定义中，<code>Subscriber</code>会将<code>Publisher</code>发布的数据缓冲在<code>Subscription</code>中，其长度默认为256：</p><p><img src="img/QQ截图20190226150028.png" alt="QQ截图20190226150028.png"></p><p>假如当这个缓冲区都被填满后，<code>Publisher</code>将会停止发送数据，直到<code>Subscriber</code>接收了数据<code>Subscription</code>有空闲位置的时候，<code>Publisher</code>才会继续发布数据，而非一味地发个不停。</p><p>下面用代码来演示这个情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowApiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 定义String类型的数据发布者，JDK 9自带的</span></span><br><span class="line">        <span class="comment">// SubmissionPublisher实现了 Publisher</span></span><br><span class="line">        SubmissionPublisher&lt;String&gt; publisher = <span class="keyword">new</span> SubmissionPublisher&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建一个订阅者，用于接收发布者的消息</span></span><br><span class="line">        Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> Subscription subscription;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 通过 Subscription 和发布者保持订阅关系，并用它来给发布者反馈</span></span><br><span class="line">                <span class="keyword">this</span>.subscription = subscription;</span><br><span class="line">                <span class="comment">// 请求一个数据</span></span><br><span class="line">                <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 接收发布者发布的消息</span></span><br><span class="line">                System.out.println(<span class="string">"【订阅者】接收消息 &lt;------ "</span> + item);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 模拟接收数据缓慢，让缓冲池填满</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 接收后再次请求一个数据，表示我已经处理完了，你可以再发数据过来了</span></span><br><span class="line">                <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果不想再接收数据，也可以直接调用cancel，表示不再接收了</span></span><br><span class="line">                <span class="comment">// this.subscription.cancel();</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 过程中出现异常会回调这个方法</span></span><br><span class="line">                System.out.println(<span class="string">"【订阅者】数据接收出现异常，"</span> + throwable);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 出现异常，取消订阅，告诉发布者我不再接收数据了</span></span><br><span class="line">                <span class="comment">// 实际测试发现，只要订阅者接收消息出现异常，进入了这个回调</span></span><br><span class="line">                <span class="comment">// 订阅者就不会再继续接收消息了</span></span><br><span class="line">                <span class="keyword">this</span>.subscription.cancel();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 当发布者发出的数据都被接收了，</span></span><br><span class="line">                <span class="comment">// 并且发布者关闭后，会回调这个方法</span></span><br><span class="line">                System.out.println(<span class="string">"【订阅者】数据接收完毕"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 发布者和订阅者需要建立关系</span></span><br><span class="line">        publisher.subscribe(subscriber);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 发布者开始发布数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">            String message = <span class="string">"hello flow api "</span> + i;</span><br><span class="line">            System.out.println(<span class="string">"【发布者】发布消息 ------&gt; "</span> + message);</span><br><span class="line">            publisher.submit(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 发布结束后，关闭发布者</span></span><br><span class="line">        publisher.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// main线程延迟关闭，不然订阅者还没接收完消息，线程就被关闭了</span></span><br><span class="line">        Thread.currentThread().join(<span class="number">20000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，我们在<code>Subscriber</code>的<code>onNext</code>方法中用下面的代码模拟延迟，让数据处理过程维持在2秒左右：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后数据发布量调整到了500，当程序启动的时候，由于数据发布的速度非常快（普通for循环），所以数据订阅者的数据缓冲区瞬间被填满，于是你会看到下面这个情况，只有当数据订阅者处理了一个数据的时候，数据发布者才会相应地再次发布一个新数据：</p><p><img src="img/testasdfasdf.gif" alt="testasdfasdf.gif"></p><h2 id="Processor示例"><a href="#Processor示例" class="headerlink" title="Processor示例"></a>Processor示例</h2><p><code>Processor</code>的使用也很简单，其实它就是<code>Publisher</code>和<code>Subscriber</code>的结合体，充当数据处理的角色，通常的做法是用它来接收发布者发布的消息，然后进行相应的处理，再将数据发布出去，供消息订阅者接收。</p><p>下面是一个<code>Processor</code>用法的简单示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowApiTest2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProcessor</span> <span class="keyword">extends</span> <span class="title">SubmissionPublisher</span>&lt;<span class="title">String</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">Processor</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Subscription subscription;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 通过 Subscription 和发布者保持订阅关系，并用它来给发布者反馈</span></span><br><span class="line">            <span class="keyword">this</span>.subscription = subscription;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 请求一个数据</span></span><br><span class="line">            <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 接收发布者发布的消息</span></span><br><span class="line">            System.out.println(<span class="string">"【处理器】接收消息 &lt;------ "</span> + item);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理器将消息进行转换</span></span><br><span class="line">            String newItem = <span class="string">"【处理器加工后的数据: "</span> + item + <span class="string">"】"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.submit(newItem);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 接收后再次请求一个数据，表示我已经处理完了，你可以再发数据过来了</span></span><br><span class="line">            <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果不想再接收数据，也可以直接调用cancel，表示不再接收了</span></span><br><span class="line">            <span class="comment">// this.subscription.cancel();</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 过程中出现异常会回调这个方法</span></span><br><span class="line">            System.out.println(<span class="string">"【处理器】数据接收出现异常，"</span> + throwable);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 出现异常，取消订阅，告诉发布者我不再接收数据了</span></span><br><span class="line">            <span class="keyword">this</span>.subscription.cancel();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"【处理器】数据处理完毕"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理器处理完数据后关闭</span></span><br><span class="line">            <span class="keyword">this</span>.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 定义String类型的数据发布者，JDK 9自带的</span></span><br><span class="line">        <span class="comment">// SubmissionPublisher实现了 Publisher</span></span><br><span class="line">        SubmissionPublisher&lt;String&gt; publisher = <span class="keyword">new</span> SubmissionPublisher&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建处理器，用于接收发布者发布的消息，</span></span><br><span class="line">        <span class="comment">// 转换后再发送给订阅者</span></span><br><span class="line">        MyProcessor processor = <span class="keyword">new</span> MyProcessor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 发布者和处理器建立订阅的关系</span></span><br><span class="line">        publisher.subscribe(processor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.创建一个订阅者，用于接收处理器的消息</span></span><br><span class="line">        Subscriber&lt;String&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;&gt;() &#123;</span><br><span class="line">            <span class="keyword">private</span> Subscription subscription;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.subscription = subscription;</span><br><span class="line">                <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"【订阅者】接收消息 &lt;------ "</span> + item + <span class="string">""</span>);</span><br><span class="line">                <span class="keyword">this</span>.subscription.request(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"【订阅者】数据接收出现异常，"</span> + throwable);</span><br><span class="line">                <span class="keyword">this</span>.subscription.cancel();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"【订阅者】数据接收完毕"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 处理器和订阅者建立订阅关系</span></span><br><span class="line">        processor.subscribe(subscriber);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 发布者开始发布数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            String message = <span class="string">"hello flow api "</span> + i;</span><br><span class="line">            System.out.println(<span class="string">"【发布者】发布消息 ------&gt; "</span> + message);</span><br><span class="line">            publisher.submit(message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7. 发布结束后，关闭发布者</span></span><br><span class="line">        publisher.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// main线程延迟关闭，不然订阅者还没接收完消息，线程就被关闭了</span></span><br><span class="line">        Thread.currentThread().join(<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>程序运行结果如下所示：</p><p><img src="img/QQ截图20190226151701.png" alt="QQ截图20190226151701.png"></p><blockquote><p>参考文档：<a href="https://community.oracle.com/docs/DOC-1006738" target="_blank" rel="noopener">https://community.oracle.com/docs/DOC-1006738</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;响应式编程（Reactive Programming）可以理解为一种处理数据项（Data Item）的异步流，即在数据项产生的时候，接收者就对其进行响应。在响应式编程中，会有一个数据发布者（Publisher）和数据订阅者（Subscriber），后者用于异步接收发布者发布的数据。在该模式中，还引入了一个更高级的特性：数据处理器（Processor），它用于将数据发布者发布的数据进行某些转换操作，然后再发布给数据订阅者。&lt;/p&gt;&lt;p&gt;总之，响应式编程是异步非阻塞编程，能够提升程序性能，可以解决传统编程模型遇到的困境。基于这个模型实现的有Java 9 Flow API、RxJava和Reactor等，这里主要介绍的是Java 9 Flow API的使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://mrbird.cc/tags/Java/"/>
    
      <category term="Java 9" scheme="http://mrbird.cc/tags/Java-9/"/>
    
  </entry>
  
  <entry>
    <title>Java 10 新特性之var</title>
    <link href="http://mrbird.cc/Java10-new-feature-var.html"/>
    <id>http://mrbird.cc/Java10-new-feature-var.html</id>
    <published>2018-11-05T07:16:50.000Z</published>
    <updated>2019-02-15T06:24:13.399Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --><p>今年3月，Java 10 如期发布，Java 10 是采用新发布周期的第一个版本，提供了 109 项新特性，其中最备受关注的莫过于局部变量的类型推断。所以这里主要记录一下这个特性的用法。</p><a id="more"></a><p>看几个Java 10之前声明变量的例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">Stream&lt;String&gt; stream = list.stream();</span><br><span class="line"></span><br><span class="line">InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">HttpClient httpClient = HttpClient.newHttpClient();</span><br></pre></td></tr></table></figure><p></p><p>在Java 10 中，只要是编译器能够通过对象类型来确定变量类型的情况下，变量类型声明可以使用<code>var</code>保留字代替：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">var</span> stream = list.stream();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line"><span class="keyword">var</span> httpClient = HttpClient.newHttpClient();</span><br></pre></td></tr></table></figure><p></p><p>引入这个特性使得我们的Java 代码变得更加的简洁易读。除此之外我们也可以在增强<code>for</code>循环中使用<code>var</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hello"</span>);</span><br><span class="line">list.add(<span class="string">"java 10"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> s : list) System.out.println(s);</span><br></pre></td></tr></table></figure><p></p><p>当然，<code>var</code>并不是在何时何地都能使用，用于变量声明时，仅局限于具有构造器的变量或基本数据类型，比如下面这些例子编译是不通过的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>编译器将会告警：</p><p><img src="img/QQ截图20190214164317.png" alt="QQ截图20190214164317.png"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;今年3月，Java 10 如期发布，Java 10 是采用新发布周期的第一个版本，提供了 109 项新特性，其中最备受关注的莫过于局部变量的类型推断。所以这里主要记录一下这个特性的用法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://mrbird.cc/tags/Java/"/>
    
      <category term="Java 10" scheme="http://mrbird.cc/tags/Java-10/"/>
    
  </entry>
  
  <entry>
    <title>Java 9 新特性学习</title>
    <link href="http://mrbird.cc/Java-9-Feature.html"/>
    <id>http://mrbird.cc/Java-9-Feature.html</id>
    <published>2018-11-02T00:50:59.000Z</published>
    <updated>2019-02-14T07:12:22.428Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --><p>在Java 8 发布3年多后，Java 9 终于在2017年9月21日正式发布。Java 9 提供了超过150项新功能特性，包括备受期待的模块化系统、 可交互的REPL工具jShell、JDK编译工具、Java公共API和私有代码，以及安全增强、扩展提升和性能管理改善等。在学习这些新特性之前，我们得先安装好JDK 9，JDK 9 下载地址：<a href="https://www.oracle.com/technetwork/cn/java/javase/downloads/jdk9-downloads-3848520-zhs.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/cn/java/javase/downloads/jdk9-downloads-3848520-zhs.html</a>。<a id="more"></a></p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>Java 9 中的模块化（Module）类似于ES6中的模块化，都是为了解决项目中减少内存的开销，提供可维护性和系统性能而提出的。通俗地说，Java 9 的模块化本质上就是在包（package）上再包裹一层（Module），默认模块里的内容都是隐藏的，只能通过（exports）关键字来暴露模块里的内容，而别的模块需要用到这些内容则需要使用（requires）关键字来导入。</p><p>下面我们用代码来演示这一个新特性。</p><p>新建一个Java 工程，然后在工程下面创建一个名为<strong>ModuleOne</strong>的模块：</p><p><img src="img/QQ截图20190213094527.png" alt="QQ截图20190213094527.png"></p><p>同样的，我们再创建一个<strong>ModuleTwo</strong>模块，创建完后项目目录如下所示：</p><p><img src="img/QQ截图20190213094722.png" alt="QQ截图20190213094722.png"></p><p>接着我们在ModuleOne的src目录下创建<code>cc.mrbird.domain</code>包，并创建一个名为Person的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cc.mrbird.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后在ModuleTwo的src目录下创建一个<code>cc.mrbid.test</code>包，并且创建一个Test类，用于待会测试。</p><p>至此，工程目录结构如下所示:</p><p><img src="img/QQ截图20190213095358.png" alt="QQ截图20190213095358.png"></p><p>我们在ModuleTwo的Test类下试图引入ModuleOne的Person类，会发现是行不通的：</p><p><img src="img/QQ截图20190213095624.png" alt="QQ截图20190213095624.png"></p><p>正如上面所说，模块里的东西默认都是隐藏的，要让其可以被别的模块使用，需要通过<strong>exports</strong>关键字来暴露它们。</p><p>在ModuleOne模块下的src上右键，新建一个module-info.java：</p><p><img src="img/QQ截图20190213095840.png" alt="QQ截图20190213095840.png"></p><p>代码如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ModuleOne &#123;</span><br><span class="line">    <span class="comment">// 导出包</span></span><br><span class="line">    <span class="keyword">exports</span> cc.mrbird.domain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中导出了<code>cc.mrbird.domain</code>包下的所有内容，对别的模块来说，它们是可见的了。</p><p>然后同样地在ModuleTwo模块下的src上右键，也新建一个module-info.java，代码如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ModuleTwo &#123;</span><br><span class="line">    <span class="comment">// 导入模块</span></span><br><span class="line">    <span class="keyword">requires</span> ModuleOne;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们主要做的是将ModuleOne导入进来，所以其暴露的<code>cc.mrbird.domain</code>包下的内容就可以在ModuleTwo下被使用了。</p><p>这时候回到ModuleTwo模块下的Test类，IDEA会自动帮我们导入需要的类，代码就不会报错了：</p><p><img src="img/QQ截图20190213100532.png" alt="QQ截图20190213100532.png"></p><p>我们继续在Test类中加入一些内容：</p><p><img src="img/QQ截图20190213101203.png" alt="QQ截图20190213101203.png"></p><p>上面我们使用了<code>java.util.logging.Logger</code>来打印日志，但是代码编译是不通过的，使用<code>Alt+Enter</code>快捷键后选择第一项，IDEA会自动帮我们在module-info.java文件中导入需要的包，非常方便。</p><p>导入后，module-info.java下的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ModuleTwo &#123;</span><br><span class="line">    <span class="comment">// 导入模块</span></span><br><span class="line">    <span class="keyword">requires</span> ModuleOne;</span><br><span class="line">    <span class="keyword">requires</span> java.logging;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>总的来说，通过模块化来构建项目可以带来以下好处:</p><ol><li><p>减少内存的开销；</p></li><li><p>简化各种类库和大型应用的开发和维护；</p></li><li><p>改进其安全性，可维护性，提高性能。</p></li></ol><h2 id="jshell命令"><a href="#jshell命令" class="headerlink" title="jshell命令"></a>jshell命令</h2><p>在Java 9 之前，我们要想使用Java来输出一句hello world或者计算两个数的和都必须创建一个Java项目，然后创建类在里面写main方法来运行。Java 9 后就不必这样了，其提供了REPL工具：jshell。利用 jshell 在没有创建类的情况下直接声明变量，计算表达式，执行语句。即开发时可以在命令行里直接运行 Java 的代码，而无需创建 Java 文件。</p><p>在JDK 9 的bin目录下有个jshell.exe文件，我们运行它：</p><p><img src="img/QQ截图20190213103825.png" alt="QQ截图20190213103825.png"></p><p>下面演示一些jshell的常用操作。</p><p><strong>基本使用</strong></p><p><img src="img/QQ截图20190213104253.png" alt="QQ截图20190213104253.png"></p><div class="note info"><p>在jshell中，代码末尾的<code>;</code>是可选的。</p></div><p><strong>导包操作</strong></p><p><img src="img/QQ截图20190213104534.png" alt="QQ截图20190213104534.png"></p><p><strong>查看所有已经导入的包</strong></p><p><img src="img/QQ截图20190213104610.png" alt="QQ截图20190213104610.png"></p><p><strong>使用Tab键补全代码</strong></p><p><img src="img/QQ截图20190213104732.png" alt="QQ截图20190213104732.png"></p><p><strong>查看当前环境下所有有效代码</strong></p><p><img src="img/QQ截图20190213104840.png" alt="QQ截图20190213104840.png"></p><p><strong>查看当前环境下所有变量</strong></p><p><img src="img/QQ截图20190213104941.png" alt="QQ截图20190213104941.png"></p><p><strong>查看当前环境下所有方法</strong></p><p><img src="img/QQ截图20190213105231.png" alt="QQ截图20190213105231.png"></p><p><strong>使用外部代码编辑器来修改add方法</strong></p><p><img src="img/QQ截图20190213105412.png" alt="QQ截图20190213105412.png"></p><p>界面弹出：</p><p><img src="img/QQ截图20190213105500.png" alt="QQ截图20190213105500.png"></p><p>修改完毕点击Accept和Exit按钮即可：</p><p><img src="img/QQ截图20190213105553.png" alt="QQ截图20190213105553.png"></p><p><strong>加载外部代码</strong></p><p>在桌面新建一个Hello.java文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br><span class="line">hello();</span><br></pre></td></tr></table></figure><p></p><p>然后使用<code>/open</code>命令执行这个文件：</p><p><img src="img/QQ截图20190213110050.png" alt="QQ截图20190213110050.png"></p><p>更多关于jshell的功能介绍，可以使用<code>/help</code>命令来查看。</p><h2 id="接口中的私有方法"><a href="#接口中的私有方法" class="headerlink" title="接口中的私有方法"></a>接口中的私有方法</h2><p>我们都知道，在JDK 8之前，接口只能包含<code>public static final</code>的成员变量和<code>public abstract</code>修饰的抽象方法；而在JDK 8中，接口中可以定义静态方法和默认方法了；JDK 9的接口又加了新的特性，其允许接口中包含私有的方法，下面这个接口定义在JDK 9 中是合法的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestInterface</span> </span>&#123;</span><br><span class="line">    <span class="comment">// before jdk 7 :</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jdk 8:</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mehtod2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mehtod3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// jdk 9:</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"mehtod4"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Diamond-Operator使用升级"><a href="#Diamond-Operator使用升级" class="headerlink" title="Diamond Operator使用升级"></a>Diamond Operator使用升级</h2><p>在Java 9 之前的版本中，我们不能将钻石操作符（Diamond Operator）和匿名实现类放在一起使用，比如下面这个例子在Java 9 之前的版本中编译是不通过的：</p><p><img src="img/QQ截图20190214091025.png" alt="QQ截图20190214091025.png"></p><p>而在Java 9中取消了这个限制，我们可以通过这个特性来进行一些初始化操作:</p><p><img src="img/QQ截图20190214091154.png" alt="QQ截图20190214091154.png"></p><h2 id="try使用升级"><a href="#try使用升级" class="headerlink" title="try使用升级"></a>try使用升级</h2><p>在Java 9 之前，我们可以使用下面这种优雅的方式来进行流的关闭操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(System.in)) &#123;</span><br><span class="line">    reader.read();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在<code>try</code>后面的括号中声明初始化的流Java会自动帮我们进行关闭操作。Java 9 对这个特性进行了升级，我们可以在<code>try</code>后面的括号中使用已经初始化过的资源，此时的资源是<code>final</code>的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line"><span class="keyword">try</span> (reader) &#123;</span><br><span class="line">    reader.read();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如果对<code>reader</code>再次进行赋值操作，编译将不通过：</p><p><img src="img/QQ截图20190214093344.png" alt="QQ截图20190214093344.png"></p><h2 id="下划线标识符的限制"><a href="#下划线标识符的限制" class="headerlink" title="下划线标识符的限制"></a>下划线标识符的限制</h2><p>Java 8 中，我们可以使用下划线<code>_</code>作为标识符使用，比如下面这段代码是合法的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String _ = <span class="string">"mrbird"</span>;</span><br><span class="line">System.out.println(_);</span><br></pre></td></tr></table></figure><p></p><p>而在Java 9 中，下划线<code>_</code>已经不能用于标识符了：</p><p><img src="img/QQ截图20190214094709.png" alt="QQ截图20190214094709.png"></p><h2 id="String存储结构变更"><a href="#String存储结构变更" class="headerlink" title="String存储结构变更"></a>String存储结构变更</h2><p>Java 9 之前，字符串的底层是用<code>char[]</code>进行存储的，Java 9 中，字符串改用成了<code>byte[]</code>进行存储:</p><p><img src="img/QQ截图20190214101945.png" alt="QQ截图20190214101945.png"></p><p>之所以做出这个改变是因为：大多数<code>String</code>类型对象存储的都是拉丁字符，这些字符只占一个字节，而<code>char</code>能够存储两个字节，所以大部分情况下都浪费了一半的存储空间。Java 9 将<code>String</code>类的内部表示从<code>UTF-16</code>的<code>char</code>数组更改为<code>byte</code>数组加上<code>encoding-flag</code>字段。新<code>String</code>类将根据字符串的内容存储编码为<code>ISO-8859-1</code> / Latin-1（每个字符一个字节）或<code>UTF-16</code>（每个字符两个字节）的字符。<code>encoding-flag</code>编码标志将指示使用哪种编码。</p><p>基于<code>String</code>的类如<code>StringBuffer</code>和<code>StringBuilder</code>等也是做出了相同的改变。</p><p>具体可参考：<a href="http://openjdk.java.net/jeps/254" target="_blank" rel="noopener">http://openjdk.java.net/jeps/254</a>。</p><h2 id="集合的of方法"><a href="#集合的of方法" class="headerlink" title="集合的of方法"></a>集合的<code>of</code>方法</h2><p>Java 9 之前我们可以使用下面的方式来创建不可变集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Collections.unmodifiableList(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; set = Collections.unmodifiableSet(<span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"mrbird"</span>, <span class="number">18</span>);</span><br><span class="line">map.put(<span class="string">"kangkang"</span>, <span class="number">20</span>);</span><br><span class="line">Map&lt;String, Object&gt; map1 = Collections.unmodifiableMap(map);</span><br></pre></td></tr></table></figure><p></p><p>Java 9 中的集合类都添加了一个<code>of</code>方法，可以快速的构造不可变集合：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Set&lt;Integer&gt; set = Set.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Map&lt;String, Object&gt; map1 = Map.of(<span class="string">"mrbird"</span>, <span class="number">18</span>, <span class="string">"kangkang"</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p></p><p>对不可变集合进行赋值操作将抛出异常：</p><p><img src="img/QQ截图20190214112738.png" alt="QQ截图20190214112738.png"></p><h2 id="增强的Steam-API"><a href="#增强的Steam-API" class="headerlink" title="增强的Steam API"></a>增强的Steam API</h2><p>在 Java 9 中，Stream API变得更好，Stream接口中添加了 4 个新的方法：<code>dropWhile</code>, <code>takeWhile</code>, <code>ofNullable</code>，还有个 <code>iterate</code>方法的新重载方法，可以让你提供一个<code>Predicate</code>（判断条件）来指定什么时候结束迭代。</p><p>下面举例来演示这几个的用法：</p><p><strong>takeWhile</strong></p><p>takeWhile用于从Stream中获取一部分数据，接收一个Predicate来进行选择。在有序的Stream中，takeWhile返回从开头开始的尽量多的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">45</span>, <span class="number">43</span>, <span class="number">76</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">77</span>, <span class="number">90</span>, <span class="number">73</span>, <span class="number">67</span>, <span class="number">88</span>);</span><br><span class="line">list.stream().takeWhile(x -&gt; x &lt; <span class="number">50</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>结果输出:</p><p><img src="img/QQ截图20190214135831.png" alt="QQ截图20190214135831.png"></p><p>程序从头开始判断当前值是否小于50，当判断到第三个元素76时，发现不满足，于是程序就结束了。所以<code>takeWhile</code>不同于过滤器。</p><p><strong>dropWhile</strong></p><p>dropWhile的行为与takeWhile相反，返回剩余的元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">45</span>, <span class="number">43</span>, <span class="number">76</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">77</span>, <span class="number">90</span>, <span class="number">73</span>, <span class="number">67</span>, <span class="number">88</span>);</span><br><span class="line">list.stream().dropWhile(x -&gt; x &lt; <span class="number">50</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>程序输出:</p><p><img src="img/QQ截图20190214140313.png" alt="QQ截图20190214140313.png"></p><p><strong>ofNullable</strong></p><p>Java 8 中Stream不能完全为null（只有一个元素，且为null），否则会报空指针异常。而Java 9 中的ofNullable 方法允许我们创建一个单元素 Stream，可以包含一个非空元素，也可以创建一个空 Stream：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报 NullPointerException</span></span><br><span class="line"><span class="comment">// Stream&lt;Object&gt; stream1 = Stream.of(null);</span></span><br><span class="line"><span class="comment">// System.out.println(stream1.count());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不报异常，允许通过</span></span><br><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">"AA"</span>, <span class="string">"BB"</span>, <span class="keyword">null</span>);</span><br><span class="line">System.out.println(stringStream.count()); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不报异常，允许通过</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"AA"</span>);</span><br><span class="line">list.add(<span class="keyword">null</span>);</span><br><span class="line">System.out.println(list.stream().count()); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ofNullable()：允许值完全为 null</span></span><br><span class="line">Stream&lt;Object&gt; stream1 = Stream.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">System.out.println(stream1.count()); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">Stream&lt;String&gt; stream = Stream.ofNullable(<span class="string">"hello world"</span>);</span><br><span class="line">System.out.println(stream.count()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p></p><p><strong>Steam iterator的重载方法</strong></p><p><img src="img/QQ截图20190214141552.png" alt="QQ截图20190214141552.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8 中的</span></span><br><span class="line">Stream.iterate(<span class="number">0</span>, x -&gt; x + <span class="number">1</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">// 等价于 Java 9 中的</span></span><br><span class="line">Stream.iterate(<span class="number">0</span>, x -&gt; x &lt; <span class="number">10</span>, x -&gt; x + <span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>除了上面几个新特性外，Java 9 还支持将optional转换为流的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"mrbird"</span>);</span><br><span class="line">list.add(<span class="string">"kangkang"</span>);</span><br><span class="line">list.add(<span class="string">"maria"</span>);</span><br><span class="line"></span><br><span class="line">Optional&lt;List&lt;String&gt;&gt; optional = Optional.of(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流中的元素为 list</span></span><br><span class="line">Stream&lt;List&lt;String&gt;&gt; stream = optional.stream();</span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流中的元素为 list中的每个元素</span></span><br><span class="line">Stream&lt;String&gt; stringStream = optional.stream().flatMap(Collection::stream);</span><br><span class="line">stringStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>程序输出：</p><p><img src="img/QQ截图20190214143228.png" alt="QQ截图20190214143228.png"></p><h2 id="HTTP-Client"><a href="#HTTP-Client" class="headerlink" title="HTTP Client"></a>HTTP Client</h2><p>Java 9 中新增了全新的<code>HttpClient</code>来替代<code>HttpURLConnection</code>，其可以从<code>jdk.incubator.httpclient</code>模块中获取。因为在默认情况下，这个模块是不能根据<code>classpath</code>获取的，需要使用<code>add modules</code>命令选项配置这个模块，将这个模块添加到 classpath中。</p><p>我们在src下的module-info.java中引入这个模块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">requires</span> jdk.incubator.httpclient;</span><br></pre></td></tr></table></figure><p></p><p>写个基于<code>HttpClient</code>的例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HttpClient client = HttpClient.newHttpClient();</span><br><span class="line">HttpRequest req = HttpRequest.newBuilder(URI.create(<span class="string">"https://mrbird.cc"</span>))</span><br><span class="line">                .GET()</span><br><span class="line">                .build();</span><br><span class="line">HttpResponse&lt;String&gt; response = client.send(req, HttpResponse.BodyHandler.asString());</span><br><span class="line">System.out.println(response.statusCode());</span><br><span class="line">System.out.println(response.version().name());</span><br><span class="line">System.out.println(response.body());</span><br></pre></td></tr></table></figure><p></p><p>输出结果：</p><p><img src="img/QQ截图20190214145555.png" alt="QQ截图20190214145555.png"></p><blockquote><p>参考自：<a href="https://www.jianshu.com/u/5f70a16b98e7" target="_blank" rel="noopener">https://www.jianshu.com/u/5f70a16b98e7</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在Java 8 发布3年多后，Java 9 终于在2017年9月21日正式发布。Java 9 提供了超过150项新功能特性，包括备受期待的模块化系统、 可交互的REPL工具jShell、JDK编译工具、Java公共API和私有代码，以及安全增强、扩展提升和性能管理改善等。在学习这些新特性之前，我们得先安装好JDK 9，JDK 9 下载地址：&lt;a href=&quot;https://www.oracle.com/technetwork/cn/java/javase/downloads/jdk9-downloads-3848520-zhs.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.oracle.com/technetwork/cn/java/javase/downloads/jdk9-downloads-3848520-zhs.html&lt;/a&gt;。
    
    </summary>
    
    
      <category term="Java" scheme="http://mrbird.cc/tags/Java/"/>
    
      <category term="Java 9" scheme="http://mrbird.cc/tags/Java-9/"/>
    
  </entry>
  
  <entry>
    <title>Docker存储</title>
    <link href="http://mrbird.cc/Docker-Volume.html"/>
    <id>http://mrbird.cc/Docker-Volume.html</id>
    <published>2018-10-22T12:27:21.000Z</published>
    <updated>2019-04-08T01:51:23.282Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --><p>Docker容器在运行的时候会产生数据，为了不让这些数据随着容器的删除而删除，Docker支持数据持久化。Docker数据持久化主要有两种方式：volume和bind mount。使用volume数据将持久化在Docker管理的volume中（保存在/var/lib/docker/volumes目录下），使用bind mount，数据将持久化在我们指定的宿主机的某个目录中。</p><a id="more"></a><p>和数据持久化相关的Docker命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@mrbird vagrant]<span class="comment"># docker volume --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker volume COMMAND</span><br><span class="line"></span><br><span class="line">Manage volumes</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create      Create a volume</span><br><span class="line">  inspect     Display detailed information on one or more volumes</span><br><span class="line">  ls          List volumes</span><br><span class="line">  prune       Remove all unused <span class="built_in">local</span> volumes</span><br><span class="line">  rm          Remove one or more volumes</span><br><span class="line"></span><br><span class="line">Run <span class="string">'docker volume COMMAND --help'</span> <span class="keyword">for</span> more information on a <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><p></p><h2 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h2><p>以MySQL为例子，查看5.7.25版本的 <a href="https://github.com/docker-library/mysql/blob/bb7ea52db4e12d3fb526450d22382d5cd8cd41ca/5.7/Dockerfile" target="_blank" rel="noopener">MySQL Dockerfile</a>，会看到末尾处有这么一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME /var/lib/mysql</span><br></pre></td></tr></table></figure><p></p><p>意思是在Docker创建MySQL容器时，Docker会自动创建一个volume，MySQL容器中/var/lib/mysql目录下的内容将同步到这个volume中。</p><p>我们来创建一个MySQL容器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7.25</span><br></pre></td></tr></table></figure><p>然后查看是否创建了volume：</p><p><img src="img/QQ截图20190406102830.png" alt="QQ截图20190406102830.png"></p><p>volume默认的名称好长哦，我们可以在创建容器的时候指定volume的名称，我们删掉MySQL这个容器，重新创建个，并指定volume的名称为mysql：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v mysql:/var/lib/mysql mysql:5.7.25</span><br></pre></td></tr></table></figure><p><code>-v mysql:/var/lib/mysql</code>的意思是使用名称为mysql的volume（没有则创建），存储容器/var/lib/mysql目录下的内容（和MySQL Dockerfile中使用VOLUME指定的目录一致）。</p><p>查看volume：</p><p><img src="img/QQ截图20190406103348.png" alt="QQ截图20190406103348.png"></p><p>可以看到多了个名称为mysql的volume。</p><p>接下来我们做个实验：</p><p>进入到MySQL容器中，创建一个名称为docker的数据库：</p><p><img src="img/QQ截图20190406103840.png" alt="QQ截图20190406103840.png"></p><p>退出容器并删除该容器，然后创建一个新的MySQL容器，volume指定为mysql：</p><p><img src="img/QQ截图20190406104206.png" alt="QQ截图20190406104206.png"></p><p>可以看到docker这个数据库还在，说明数据恢复了。</p><h2 id="bind-mount"><a href="#bind-mount" class="headerlink" title="bind mount"></a>bind mount</h2><p>bind mount例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /home/aaa:/root/aaa</span><br></pre></td></tr></table></figure><p></p><p>宿主机的/home/aaa将和容器中的/root/aaa同步，宿主机/home/aaa目录下文件做了修改，容器中/root/aaa目录下文件也会被修改，反之亦然。</p><p>以Nginx为例，拉取Nginx stable镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:1.14.2</span><br></pre></td></tr></table></figure><p></p><p>创建Nginx容器:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nginx -p 80:80 -v $(pwd):/usr/share/nginx/html nginx:1.14.2</span><br></pre></td></tr></table></figure><p></p><p>通过<code>$(pwd):/usr/share/nginx/html</code>我们将宿主机的当前目录和Nginx容器内部的/usr/share/nginx/html目录进行了同步。</p><p>我们在宿主机当前目录下新建一个hello.html：</p><p><img src="img/QQ截图20190406112209.png" alt="QQ截图20190406112209.png"></p><p>然后进入到Nginx容器内的/usr/share/nginx/html目录：</p><p><img src="img/QQ截图20190406112350.png" alt="QQ截图20190406112350.png"></p><p>同步是ok的，在宿主机外访问<a href="http://192.168.33.10/hello.html" target="_blank" rel="noopener"> http://192.168.33.10/hello.html </a>看看（我的宿主机IP为192.168.33.10）：</p><p><img src="img/123412341234.png" alt="QQ截图20190406112450.png"></p><p>参考🔗：<a href="https://docs.docker.com/storage/volumes/" target="_blank" rel="noopener">https://docs.docker.com/storage/volumes/</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Docker容器在运行的时候会产生数据，为了不让这些数据随着容器的删除而删除，Docker支持数据持久化。Docker数据持久化主要有两种方式：volume和bind mount。使用volume数据将持久化在Docker管理的volume中（保存在/var/lib/docker/volumes目录下），使用bind mount，数据将持久化在我们指定的宿主机的某个目录中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://mrbird.cc/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker网络配置</title>
    <link href="http://mrbird.cc/Docker-network.html"/>
    <id>http://mrbird.cc/Docker-network.html</id>
    <published>2018-10-19T07:27:12.000Z</published>
    <updated>2019-04-08T01:51:23.284Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --><p>在安装好Docker后，其默认提供了三种网络模式：bridge、host和none。其中bridge是Docker默认的网络模式，在该模式下，容器拥有自己的IP namespace，容器可以通过宿主机上的docker0网桥与别的容器、宿主机或者外部网络进行通信。此外我们还可以通过端口映射的方式让外部环境也能访问到容器内部。</p><p>Docker默认的网络模式如下图所示：</p><a id="more"></a><p><img src="img/asdfasdfasdfasdf.png" style="width:35rem"></p><h2 id="bridge网络模式"><a href="#bridge网络模式" class="headerlink" title="bridge网络模式"></a>bridge网络模式</h2><p>Docker三种网络模式：</p><p><img src="img/QQ截图20190405212723.png" alt="QQ截图20190405212723.png"></p><p>下面我们通过busybox来进行演示。</p><div class="note info"><p>BusyBox 是一个集成了一百多个最常用 Linux 命令和工具（如 cat、echo、grep、mount、telnet 、ping、ifconfig 等）的精简工具箱，它只需要几 MB 的大小，很方便进行各种快速验证，被誉为“Linux 系统的瑞士军刀”。</p></div><p>下载busybox镜像:</p><p><img src="img/QQ截图20190405213450.png" alt="QQ截图20190405213450.png"></p><p>通过该镜像创建两个容器test1和test2：</p><p><img src="img/QQ截图20190405214111.png" alt="QQ截图20190405214111.png"></p><p>使用<code>docker network inspect bridge</code>命令查看bridge网络详情：</p><p><img src="img/QQ截图20190405214758.png" alt="QQ截图20190405214758.png"></p><p>可以看到test1和test2都连接到了bridge（因为是Docker默认的网络模式），并且test1内部IP为172.17.0.2，test2内部IP为172.17.0.3。</p><p>我们看下在test1容器内部是否可以ping通test2的IP：</p><p><img src="img/QQ截图20190405215123.png" alt="QQ截图20190405215123.png"></p><p>可以看到是没问题的。</p><p>看下test1内部ping宿主机IP（192.168.33.10）和外部网络是否可行：</p><p><img src="img/QQ截图20190405215412.png" alt="QQ截图20190405215412.png"></p><h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><p>我们可以在创建容器的使用使用<code>--link</code>来让容器间的网络建立映射关系。</p><p>我们删除test2容器，重新创建test2容器，并且让其和test1建立网络映射关系：</p><p><img src="img/QQ截图20190405215912.png" alt="QQ截图20190405215912.png"></p><p>这样我们就可以在test2容器内部使用<code>ping test1</code>ping通test1网络了：</p><p><img src="img/QQ截图20190405220104.png" alt="QQ截图20190405220104.png"></p><h2 id="创建自定义网桥"><a href="#创建自定义网桥" class="headerlink" title="创建自定义网桥"></a>创建自定义网桥</h2><p>我们可以通过<code>docker network create</code>来创建自定义的网桥，比如我们创建一个新的网桥，名称为my-bridge：</p><p><img src="img/QQ截图20190405220452.png" alt="QQ截图20190405220452.png"></p><p>模式选择的是bridge。</p><p>我们让test1和test2容器都连接到这个新的网桥上（也可以在创建容器的时候使用<code>--network</code>来指定需要连接的网桥）：</p><p><img src="img/QQ截图20190405220613.png" alt="QQ截图20190405220613.png"></p><p>查看my-bridge详情：</p><p><img src="img/QQ截图20190405220708.png" alt="QQ截图20190405220708.png"></p><p>可以看到test1和test2都连接上来了。</p><p>使用自定义网桥有个明显的好处是，容器间可以通过容器名称进行网络通信（无需在创建容器的时候使用<code>--link</code>来指定）。我们在创建test1容器的时候并没有使用<code>--link test2</code>来连接test2，我们看看在连接到my-bridge后，test1内部是否可以通过<code>ping test2</code>ping通test2 IP：</p><p><img src="img/QQ截图20190405221050.png" alt="QQ截图20190405221050.png"></p><p>可以看到是没问题的。</p><h2 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h2><p>在宿主机上我们是无法访问Docker容器内部网络的，不过我们可以通过端口映射的方式来实现这个需求。</p><p>以MySQL为例子，我们拉取MySQL镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.25</span><br></pre></td></tr></table></figure><p></p><p>在创建MySQL容器的时候可以使用<code>-p</code>或<code>-P</code>让容器暴露的端口和宿主机的端口进行映射：</p><p><img src="img/QQ截图20190405222046.png" alt="QQ截图20190405222046.png"></p><p><code>-e</code>指定环境变量。</p><p><code>-p 3306:3306</code>（冒号前面的端口为宿主机端口，后面的端口为容器端口）的意思是，让容器暴露的3306端口映射到宿主机的3306端口，这样我们就可以在宿主机外部通过192.168.33.10:3306来连接MySQL容器了：</p><p><img src="img/QQ截图20190405222358.png" alt="QQ截图20190405222358.png"></p><p>Docker的host和none网络模式使用较少这里就不介绍了。</p><p>参考🔗：<a href="https://docs.docker.com/v17.09/engine/userguide/networking/#set-the-environment-variables-manually" target="_blank" rel="noopener">https://docs.docker.com/v17.09/engine/userguide/networking/#set-the-environment-variables-manually</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在安装好Docker后，其默认提供了三种网络模式：bridge、host和none。其中bridge是Docker默认的网络模式，在该模式下，容器拥有自己的IP namespace，容器可以通过宿主机上的docker0网桥与别的容器、宿主机或者外部网络进行通信。此外我们还可以通过端口映射的方式让外部环境也能访问到容器内部。&lt;/p&gt;&lt;p&gt;Docker默认的网络模式如下图所示：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://mrbird.cc/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>学习Dockerfile</title>
    <link href="http://mrbird.cc/Dockerfile.html"/>
    <id>http://mrbird.cc/Dockerfile.html</id>
    <published>2018-10-18T09:14:26.000Z</published>
    <updated>2019-04-01T02:33:31.822Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --><p>在 <a href="https://mrbird.cc/Docker-Image-Container.html">Docker 镜像与容器</a> 一节中我们通过Dockerfile构建了镜像，这节我们来了解下Dockerfile的语法。Dockerfile包含了诸多关键字，所以要学习Dockerfile的用法，得先从这些关键字入手。</p><a id="more"></a><h2 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h2><p>位于Dockerfile开头，表示基于什么镜像构建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch # 制作base image</span><br><span class="line">FROM ubuntu:16.04 #使用ubuntu:16.04这个image</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>出于安全考虑，最好使用官方的image作为base image。</p></div><h2 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h2><p>Dockerfile的元数据，描述作用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL version=&quot;1.0&quot; author=&quot;mrbird&quot; description=&quot;dockerfile demo&quot;</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>Dockerfile最好都要有元数据，这样更易于理解。</p></div><h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><p>运行命令，每次run都会生成一个图层，所以最好将命令合并:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y vim</span><br></pre></td></tr></table></figure><p></p><p><code>\</code>换行</p><h2 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h2><p>用于指定工作目录，切换路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">WORKDIR /test # 没有则自动创建test目录</span><br><span class="line">WORKDIR demo</span><br><span class="line">RUN pwd</span><br></pre></td></tr></table></figure><p></p><p>输出 /test/demo。</p><div class="note info"><p>最好不要用RUN cd来切换目录，而使用WORKDIR，这样可以减少不必要的图层，尽量使用绝对目录。</p></div><h2 id="ADD-amp-COPY"><a href="#ADD-amp-COPY" class="headerlink" title="ADD &amp; COPY"></a>ADD &amp; COPY</h2><p>ADD 和COPY都可以将构建环境中的文件或目录复制到镜像中，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /demo</span><br><span class="line">ADD test test/</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /demo</span><br><span class="line">COPY test test/</span><br></pre></td></tr></table></figure><p>最终都会将test文件添加到/demo/test/目录下。</p><p>区别：</p><ol><li><p>ADD 添加的文件是压缩文件的话，会自动解压。</p></li><li><p>COPY 只能复制构建目录下的文件，ADD可以添加一个构建上下文中的文件或目录，也可以是一个URL，如：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD http://wordpress.org/latest.zip /</span><br></pre></td></tr></table></figure><h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><p>设置环境变量常量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV MYSQL_VERSION 5.7</span><br><span class="line">RUN apt-get install -y mysql-server=&quot;$&#123;MYSQL_VERSION&#125;&quot;</span><br></pre></td></tr></table></figure><p></p><div class="note info"><p>通过设定常量，可以提高可维护性。</p></div><h2 id="VOLUME-amp-EXPOSE"><a href="#VOLUME-amp-EXPOSE" class="headerlink" title="VOLUME &amp; EXPOSE"></a>VOLUME &amp; EXPOSE</h2><p>存储和网络，这里先略，后面学习到这一块再说。</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><ol><li><p>设置容器启动后默认执行的命令和参数。</p></li><li><p>docker run指定了其他命令，CMD命令会被忽略。</p></li><li><p>定义了多个CMD，只有最后一个有效。</p></li></ol><p>比如有如下Dockerfile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENV name mrbird</span><br><span class="line">CMD echo &quot;hello docker&quot;</span><br><span class="line">CMD echo &quot;hello $name&quot;</span><br></pre></td></tr></table></figure><p></p><p>构建镜像，运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [image]</span><br></pre></td></tr></table></figure><p></p><p>输出 hello mrbird。</p><p>如果运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it [image] /bin/bash</span><br></pre></td></tr></table></figure><p>则没有输出。</p><h2 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h2><ol><li><p>设置容器启动时运行的命令。</p></li><li><p>不会被忽略，一定会执行。</p></li><li><p>一般写一个shell脚本作为ENTRYPOINT。</p></li></ol><p>比如mongodb官方Dockerfile末尾一段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COPY docker-entrypoint.sh /usr/local/bin/</span><br><span class="line">ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 27017</span><br><span class="line">CMD [&quot;mongod&quot;]</span><br></pre></td></tr></table></figure><p></p><p>ENTRYPOINT和CMD结合使用有一个技巧：</p><p>比如有如下一个Dockerfile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENTRYPOINT [&quot;/bin/ls&quot;]</span><br><span class="line">CMD []</span><br></pre></td></tr></table></figure><p></p><p>意思是在ubuntu这个镜像上构建，通过ENTRYPOINT运行/bin/ls命令，然后<code>CMD []</code>这行可以介绍额外的参数选项。</p><p>通过这个Dockerfile构建镜像后(image id为95c35bb00761)，分别运行下面这些命令来创建容器：</p><p><img src="img/QQ截图20190331231033.png" alt="QQ截图20190331231033.png"></p><p>可以看到我们通过相同的镜像构建出了不同的容器。</p><h2 id="Shell和Exec格式"><a href="#Shell和Exec格式" class="headerlink" title="Shell和Exec格式"></a>Shell和Exec格式</h2><p>在Dockerfile中，命令的写法有Shell格式和Exec格式：</p><p>Shell格式的Dockerfile如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get install -y vim</span><br><span class="line">CMD echo &quot;hello world&quot;</span><br><span class="line">ENTRYPOINTT echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure><p></p><p>Exec格式如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN [&quot;apt-get&quot;,&quot;install&quot;,&quot;-y&quot;,&quot;vim&quot;]</span><br><span class="line">CMD [&quot;/bin/echo&quot;,&quot;hello world&quot;]</span><br><span class="line">ENTRYPOINTT [&quot;/bin/echo&quot;,&quot;hello world&quot;]</span><br></pre></td></tr></table></figure><p></p><p>在使用Exec格式的时候需要注意和常量的搭配使用问题，比如在Shell格式下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENV name mrbird</span><br><span class="line">ENTRYPOINTER echo &quot;hello $name&quot;</span><br></pre></td></tr></table></figure><p></p><p>创建镜像，运行容器后输出：hello mrbird。</p><p>但是在Exec格式下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENV name mrbird</span><br><span class="line">ENTRYPOINTER [&quot;/bin/echo&quot;,&quot;hello $name&quot;]</span><br></pre></td></tr></table></figure><p></p><p>创建镜像，运行容器后输出：hello $name。</p><p>正确的写法是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">ENV name mrbird</span><br><span class="line">ENTRYPOINTER [&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;echo hello $name&quot;]</span><br></pre></td></tr></table></figure><p></p><p>参考文档：<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/builder/</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在 &lt;a href=&quot;https://mrbird.cc/Docker-Image-Container.html&quot;&gt;Docker 镜像与容器&lt;/a&gt; 一节中我们通过Dockerfile构建了镜像，这节我们来了解下Dockerfile的语法。Dockerfile包含了诸多关键字，所以要学习Dockerfile的用法，得先从这些关键字入手。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://mrbird.cc/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 镜像与容器</title>
    <link href="http://mrbird.cc/Docker-Image-Container.html"/>
    <id>http://mrbird.cc/Docker-Image-Container.html</id>
    <published>2018-10-15T09:14:26.000Z</published>
    <updated>2019-04-01T02:33:31.821Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --><p>开始之前，可以通过<a href="https://mrbird.cc/Create-Virtual-Machine-By-Vagrant.html"> Vagrant构建一个CentOS环境 </a>，然后根据<a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener"> 官方文档 </a>来安装Dokcer，下面的例子运行在CentOS7环境下。</p><p>Docker Image俗称Docker镜像，它是由一系列图层（Layer）构成的，每个图层代表Dockerfile（通过Dockerfile我们可以创建镜像）中的一行指令，镜像是只读的。</p><p>那什么是Dockerfile呢，举个简单的Dockerfile示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum install -y vim</span><br></pre></td></tr></table></figure><a id="more"></a><p>上面的Dockerfile包含两行命令（所以它对应两个图层），第一行表示从centos这个镜像中创建一个图层，然后第二行表示接着运行<code>yum install -y vim</code>来安装vim。通过这个Dockerfile我们可以构建一个镜像，通过镜像我们可以创建一个容器（Container）。</p><p>什么是Docker容器？容器是通过镜像构建的一个隔离的应用平台，它包含了运行应用程序所需要的一切。和镜像相比，它在顶部多了一层可读写图层，就如下图所示：</p><p><img src="img/container-layers.jpg" alt="container-layers.jpg"></p><p>镜像和容器的关系就像是Java里类与对象的关系那样，镜像是构建容器的模板，容器是镜像构建出来的实例。</p><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><p>通过<code>docker image ls</code>查看当前有哪些镜像（等价于<code>docker images</code>）：</p><p><img src="img/QQ截图20190331095417.png" alt="QQ截图20190331095417.png"></p><p>当前暂无镜像，可以通过<code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code>来从<a href="https://hub.docker.com/" target="_blank" rel="noopener"> DockerHub </a>拉取镜像，比如拉取一个Ubuntu镜像：</p><p><img src="img/QQ截图20190331100325.png" alt="QQ截图20190331100325.png"></p><p><img src="img/QQ截图20190331100459.png" alt="QQ截图20190331100459.png"></p><p>不带tag则是拉取最新的镜像，可以通过tag来指定拉取的版本，比如拉取Ubuntu16.04：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:16.04</span><br></pre></td></tr></table></figure><p>可以通过<code>docker history [OPTIONS] IMAGE</code>来查看image的构建历史（图层）：</p><p><img src="img/QQ截图20190331101129.png" alt="QQ截图20190331101129.png"></p><p>可以通过镜像的名称或者镜像ID来指定。使用镜像ID的时候，可以只指定前几位，只要能唯一标识一个镜像即可，所以上面的94e814e2efa8可以简写为94e。</p><p>删除镜像使用的命令为<code>docker image rm [OPTIONS] IMAGE [IMAGE...]</code>，等价于<code>docker rmi [OPTIONS] IMAGE [IMAGE...]</code>。</p><p>更多关于镜像的命令可以使用<code>docker image --help</code>来查看：</p><p><img src="img/QQ截图20190331101445.png" alt="QQ截图20190331101445.png"></p><h2 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h2><p>可以通过<code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code>命令来运行镜像，生成容器，比如运行刚刚拉去下来的ubuntu镜像，然后通过<code>docker container ls</code>命令查看当前正在运行的容器：</p><p><img src="img/QQ截图20190331102102.png" alt="QQ截图20190331102102.png"></p><p>没有正在运行的容器，我们可以通过<code>docker container ls -a</code>命令来查看所有状态下的容器（可简写为<code>docker ps -a</code>）：</p><p><img src="img/QQ截图20190331102258.png" alt="QQ截图20190331102258.png"></p><p>可看到，ubuntu这个容器状态为Exited退出状态，要让运行容器常驻，可以使用<code>docker run -it</code>命令：</p><p><img src="img/QQ截图20190331104039.png" alt="QQ截图20190331104039.png"></p><p>我们已经进入到ubuntu容器环境里了，可以在上面执行任何ubuntu支持的操作。</p><p>这时候新开一个cmd窗口，查看目前容器的状态：</p><p><img src="img/QQ截图20190331104311.png" alt="QQ截图20190331104311.png"></p><p>上面包含了一开始创建的exited状态的容器以及常驻内存的状态为up的容器。</p><p>退出容器环境使用<code>exit</code>命令即可。</p><p>可以使用<code>docker container rm [OPTIONS] CONTAINER [CONTAINER...]</code>命令来删除容器：</p><p><img src="img/QQ截图20190331104628.png" alt="QQ截图20190331104628.png"></p><p>上面的命令也可以简化为<code>docker rm dd1</code>。</p><p>可以通过<code>docker rm $(docker container ls -aq)</code>命令来一次性删除全部的container，<code>docker container ls -aq</code>作用为列出所有container id。</p><p>可以使用<code>docker rm $(docker container ls -f &quot;status=xxx&quot; -q)</code>来删除指定状态的容器，比如仅删除状态为Exited的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm $(docker container ls -f <span class="string">"status=exited"</span> -q)</span><br></pre></td></tr></table></figure><h3 id="容器状态改变"><a href="#容器状态改变" class="headerlink" title="容器状态改变"></a>容器状态改变</h3><p>对于Exited状态的容器，我们可以使用<code>docker container start</code>来启动容器：</p><p><img src="img/QQ截图20190331114534.png" alt="QQ截图20190331114534.png"></p><p>进入运行中的容器的命令为：</p><p><img src="img/QQ截图20190331114651.png" alt="QQ截图20190331114651.png"></p><p>暂停容器：</p><p><img src="img/QQ截图20190331114904.png" alt="QQ截图20190331114904.png"></p><p>恢复容器：</p><p><img src="img/QQ截图20190331115022.png" alt="QQ截图20190331115022.png"></p><p>停止容器:</p><p><img src="img/QQ截图20190331115119.png" alt="QQ截图20190331115119.png"></p><p>下图展示了Docker容器的完整生命周期：</p><p><img src="img/1_vca4e-SjpzSL5H401p4LCg.png" alt="1_vca4e-SjpzSL5H401p4LCg.png"></p><p>更多关于container的命令可以使用<code>docker container --help</code>来查看：</p><p><img src="img/QQ截图20190331105035.png" alt="QQ截图20190331105035.png"></p><h2 id="Docker镜像的构建"><a href="#Docker镜像的构建" class="headerlink" title="Docker镜像的构建"></a>Docker镜像的构建</h2><p>Docker镜像的构建有两种方式：基于容器commit和通过Dockerfile构建。</p><h3 id="基于容器"><a href="#基于容器" class="headerlink" title="基于容器"></a>基于容器</h3><p>比如我们在刚刚运行中的unubtu容器中安装vim插件：</p><p><img src="img/QQ截图20190331110009.png" alt="QQ截图20190331110009.png"></p><p>然后exit退出，使用<code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code>命令来创建一个新的镜像：</p><p><img src="img/QQ截图20190331110834.png" alt="QQ截图20190331110612.png"></p><p>查看该镜像的history：</p><p><img src="img/QQ截图20190331111115.png" alt="QQ截图20190331111115.png"></p><p>停止容器：</p><p><img src="img/QQ截图20190331115119.png" alt="QQ截图20190331115119.png"></p><p>可以看到，它是在id为94e814e2efa8镜像上加了一层图层，id为cc7609287eaa，也就是新的镜像的id。</p><p>一般不推荐这种方式来构建镜像，因为通过修改容器commit来构建新的镜像，我们不清楚原来的容器被修改了什么（比如安装恶意软件）。推荐的做法是通过Dockerfile来构建镜像。</p><h3 id="基于Dockerfile"><a href="#基于Dockerfile" class="headerlink" title="基于Dockerfile"></a>基于Dockerfile</h3><p>新建一个目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ubuntu-vim</span><br></pre></td></tr></table></figure><p></p><p>然后在该目录下编辑Dockerfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ubuntu-vim</span><br><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure><p></p><p>Dockerfile内容如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install</span><br><span class="line">RUN apt-get install -y vim</span><br></pre></td></tr></table></figure><p></p><p>意思是在ubuntu这个镜像基础上，分别运行<code>apt-get update</code>，<code>apt-get install</code>和<code>apt-get install -y vim</code>（<code>-y</code>指的是在命令行交互提示中，直接输入 yes）。</p><p>创建好这个Dockerfile后，运行下面这条命令来构建镜像：</p><p><img src="img/QQ截图20190331113351.png" alt="QQ截图20190331113351.png"></p><p>意思是通过当前目录下的Dockerfile构建进行，镜像名称为<code>mrbird/ubuntu-vim-dk</code>。</p><p>构建好后，查看当前镜像列表：</p><p><img src="img/QQ截图20190331113531.png" alt="QQ截图20190331113531.png"></p><p>其大小和我之前通过修改容器的方式构建的镜像一样。查看其history：</p><p><img src="img/QQ截图20190331113654.png" alt="QQ截图20190331113654.png"></p><p>可以看到Dockerfile的每一行RUN指令都创建了一个新的图层，通过这种方式来构建镜像的好处是，我们可以通过分享Dockerfile的方式来分享容器，并且对原镜像的修改过程一目了然。</p><h2 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h2><p>我们可以将本地构建的镜像发布到<a href="https://hub.docker.com/" target="_blank" rel="noopener"> Docker Hub </a>上。</p><p>首先得在 Docker Hub 上注册个账号：</p><p><img src="img/QQ截图20190331161039.png" alt="QQ截图20190331161039.png"></p><p>我的id为wuyouzhuguli。</p><p>然后新建一个目录，并创建一个Dockerfile：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir hello</span><br><span class="line">cd hello</span><br><span class="line">vim Dockerfile</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">LABEL user=&quot;mrbird&quot; email=&quot;852252810@qq.com&quot; description=&quot;hello demo&quot;</span><br><span class="line">CMD echo &quot;hello docker by mrbird&quot;</span><br></pre></td></tr></table></figure><p>接着通过这个Dockerfile构建镜像:</p><p><img src="img/QQ截图20190331161533.png" alt="QQ截图20190331161533.png"></p><p>tag部分必须和上面注册账号一致。</p><p>然后使用命令<code>docker login</code>登录 Docker：</p><p><img src="img/QQ截图20190331161658.png" alt="QQ截图20190331161658.png"></p><p>登录成功，开始push操作：</p><p><img src="img/QQ截图20190331161942.png" alt="QQ截图20190331161942.png"></p><p>push成功，查看 Docker Hub：</p><p><img src="img/QQ截图20190331162042.png" alt="QQ截图20190331162042.png"></p><h3 id="关联Github创建"><a href="#关联Github创建" class="headerlink" title="关联Github创建"></a>关联Github创建</h3><p>除了通过<code>docker push</code>往Docker Hub上传镜像外，我们可以通过关联Github仓库的方式来创建镜像。</p><p>首先在Github下新建一个仓库，然后上传Dockerfile：</p><p><img src="img/QQ截图20190331164522.png" alt="QQ截图20190331164522.png"></p><p>然后回到Docker Hub，新建一个仓库：</p><p><img src="img/QQ截图20190331164646.png" alt="QQ截图20190331164646.png"></p><p>关联Github账号，然后点击Create，然后在Builds选项卡里选择Github：</p><p><img src="img/QQ截图20190331164816.png" alt="QQ截图20190331164816.png"></p><p>然后选择Github的Dockerfiles仓库，路径选择hello：</p><p><img src="img/QQ截图20190331164927.png" alt="QQ截图20190331164927.png"></p><p>点击save and build按钮后，Docker Hub会根据关联的Github仓库下的Dockerfile来构建一个镜像：</p><p><img src="img/QQ截图20190331165631.png" alt="QQ截图20190331165631.png"></p><p><img src="img/QQ截图20190331165713.png" alt="QQ截图20190331165713.png"></p><p>一般推荐这种方式。</p><p>参考链接：</p><ol><li><p><a href="https://docs.docker.com/v17.09/engine/userguide/storagedriver/imagesandcontainers/#images-and-layers" target="_blank" rel="noopener">https://docs.docker.com/v17.09/engine/userguide/storagedriver/imagesandcontainers/#images-and-layers</a></p></li><li><p><a href="https://stackoverflow.com/questions/21498832/in-docker-whats-the-difference-between-a-container-and-an-image" target="_blank" rel="noopener">https://stackoverflow.com/questions/21498832/in-docker-whats-the-difference-between-a-container-and-an-image</a></p></li></ol><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;开始之前，可以通过&lt;a href=&quot;https://mrbird.cc/Create-Virtual-Machine-By-Vagrant.html&quot;&gt; Vagrant构建一个CentOS环境 &lt;/a&gt;，然后根据&lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/centos/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; 官方文档 &lt;/a&gt;来安装Dokcer，下面的例子运行在CentOS7环境下。&lt;/p&gt;&lt;p&gt;Docker Image俗称Docker镜像，它是由一系列图层（Layer）构成的，每个图层代表Dockerfile（通过Dockerfile我们可以创建镜像）中的一行指令，镜像是只读的。&lt;/p&gt;&lt;p&gt;那什么是Dockerfile呢，举个简单的Dockerfile示例：&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM centos&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN yum install -y vim&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="http://mrbird.cc/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用Vagrant创建CentOS虚拟机</title>
    <link href="http://mrbird.cc/Create-Virtual-Machine-By-Vagrant.html"/>
    <id>http://mrbird.cc/Create-Virtual-Machine-By-Vagrant.html</id>
    <published>2018-10-10T07:07:19.000Z</published>
    <updated>2019-04-01T02:33:31.805Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --><p>Vagrant是一款由HashiCorp公司提供的，用于快速构建虚拟机环境的软件。本节我们将使用Vagrant结合Oracle VM VirtualBox快速地在win10环境下构建CentOS7虚拟机。在此之前需要先安装好 <a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">Vagrant</a> 和 <a href="https://www.virtualbox.org/" target="_blank" rel="noopener">VirtualBox</a>。</p><a id="more"></a><h2 id="构建CentOS7虚拟机"><a href="#构建CentOS7虚拟机" class="headerlink" title="构建CentOS7虚拟机"></a>构建CentOS7虚拟机</h2><p>在<a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">https://app.vagrantup.com/boxes/search</a>下搜索centos：</p><p><img src="img/QQ截图20190328162307.png" alt="QQ截图20190328162307.png"></p><p>然后在win10任意盘符下创建vagrant_vm目录（注意目录最好不要有中文和空格），然后在该目录下使用cmd执行<code>vagrant init centos/7</code>命令：</p><p><img src="img/QQ截图20190328201613.png" alt="QQ截图20190328201613.png"></p><p>然后执行<code>vagrant up</code>启动（这时候最好也打开VirtualBox）：</p><p><img src="img/QQ截图20190328202035.png" alt="QQ截图20190328202035.png"></p><p>构建完毕，这时候VirtualBox的列表里会出现一台正在运行的虚拟机：</p><p><img src="img/QQ截图20190328202353.png" alt="QQ截图20190328202353.png"></p><p>这就是我们刚刚通过Vagrant构建的CentOS7虚拟机了。</p><p>如果当你执行<code>vagrant up</code>命令后，虚拟机文件下载非常的慢的话，可以使用下面这种方式来构建：</p><p>在上面的日志中可以找到这么一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Downloading: https://vagrantcloud.com/centos/boxes/7/versions/1902.01/providers/virtualbox.box</span><br></pre></td></tr></table></figure><p></p><p>后面这个URL就是下载地址了，将它黏贴到迅雷等下载工具下载即可。然后将下载好后的xxx.box文件复制到vagrant_vm目录下，并且重命名为centos7.box（删除centos7.box之外的文件和目录，只保留centos7.box一个文件）。</p><p>接着运行<code>vagrant box add -name &#39;centos/7&#39; centos7.box</code>命令：</p><p><img src="img/QQ截图20190328203659.png" alt="QQ截图20190328203659.png"></p><p>添加成功后执行<code>vagrant init centos/7</code>初始化：</p><p><img src="img/QQ截图20190328203846.png" alt="QQ截图20190328203846.png"></p><p>初始化成功后执行<code>vagrant up</code>启动：</p><p><img src="img/QQ截图20190328204151.png" alt="QQ截图20190328204151.png"></p><p>构建成功，效果和一开始在线下载构建是一样的。</p><h2 id="连接虚拟机"><a href="#连接虚拟机" class="headerlink" title="连接虚拟机"></a>连接虚拟机</h2><p>我们先用<code>vagrant status</code>命令查看一下虚拟机的状态：</p><p><img src="img/QQ截图20190328210130.png" alt="QQ截图20190328210130.png"></p><p>可以看到虚拟机是运行中的状态，我们可以执行<code>vagrant halt</code>来关闭虚拟机：</p><p><img src="img/QQ截图20190328210245.png" alt="QQ截图20190328210245.png"></p><p><img src="img/QQ截图20190328210316.png" alt="QQ截图20190328210316.png"></p><p>启动虚拟机的命令为<code>vagrant up</code>，我们也可以使用<code>vagrant suspend</code>命令来暂停运行中的虚拟机，以保持它的运行状态：</p><p><img src="img/QQ截图20190328210643.png" alt="QQ截图20190328210643.png"></p><p><img src="img/QQ截图20190328210742.png" alt="QQ截图20190328210742.png"></p><p>暂停后可以使用<code>vagrant resume</code>命令来恢复虚拟机：</p><p><img src="img/QQ截图20190328211115.png" alt="QQ截图20190328211115.png"></p><p>连接正在运行中的虚拟机的命令为<code>vagrant ssh</code>：</p><p><img src="img/QQ截图20190328211400.png" alt="QQ截图20190328211400.png"></p><p>重启虚拟机使用的命令为<code>vagrant reload</code>。如果你不想要这个虚拟机的话可以使用<code>vagrant distroy</code>命令进行销毁。</p><h2 id="目录共享"><a href="#目录共享" class="headerlink" title="目录共享"></a>目录共享</h2><p>Vagrant的根目录（就是我们一开始创建的vagrant_vm）和虚拟机里的/vagrant目录是共享的。我们在vagrant_vm目录下新建一个hello.txt文件，内容为hello：</p><p><img src="img/QQ截图20190328212914.png" alt="QQ截图20190328212914.png"></p><p>然后连接虚拟机，查看虚拟机/vagrant目录下有什么内容:</p><p><img src="img/QQ截图20190328214455.png" alt="QQ截图20190328214455.png"></p><p>说明同步成功。</p><p>我们也可以自定义共享路劲，编辑vagrant_vm文件夹下的Vagrantfile文件：</p><p><img src="img/QQ截图20190328222933.png" alt="QQ截图20190328222933.png"></p><p>在这行下面添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.synced_folder &quot;./data&quot;, &quot;/share&quot;, create:true, owner: &quot;root&quot;, group: &quot;root&quot;</span><br></pre></td></tr></table></figure><p>这个配置的意思是将当前路径下的data文件夹和虚拟机的/share目录共享，拥有者为root，群组为root，如果路径不存在则创建。</p><p>修改了Vagrantfile文件需要执行 <code>vagrant reload</code>重启。重启后我们在data文件夹下新建一个world.txt文件，然后连接虚拟机看看是否共享成功：</p><p><img src="img/QQ截图20190328231719.png" alt="QQ截图20190328231719.png"></p><p>共享成功！</p><p>在这途中，遇到了如下问题:</p><div class="note danger"><p>Vagrant was unable to mount VirtualBox shared folders. This is usually because the filesystem “vboxsf” is not available. This filesystem is made available via the VirtualBox Guest Additions and kernel module. Please verify that these guest additions are properly installed in the guest. This is not a bug in Vagrant and is usually caused by a faulty Vagrant box. For context, the command attempted was</p><p>…</p><p>The error output from the command was: mount: unknown filesystem type ‘vboxsf’</p></div><p>安装下面这个插件可解决问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant plugin install vagrant-vbguest</span><br></pre></td></tr></table></figure><p></p><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="虚拟机私有网络"><a href="#虚拟机私有网络" class="headerlink" title="虚拟机私有网络"></a>虚拟机私有网络</h3><p>在Vagrantfile里打开下面这行配置：</p><p><img src="img/QQ截图20190329203440.png" alt="QQ截图20190329203440.png"></p><p>然后使用命令<code>vagrant reload</code>重启虚拟机，重启后我们使用<code>ping</code>命令看是否可以在windows上访问到这个ip：</p><p><img src="img/QQ截图20190329203610.png" alt="QQ截图20190329203610.png"></p><p>访问成功，连接虚拟机，使用<code>ifconfig</code>查看其IP：</p><p><img src="img/QQ截图20190329203731.png" alt="QQ截图20190329203731.png"></p><p>正是我们刚刚配置的那个IP。</p><h3 id="虚拟机公有网络"><a href="#虚拟机公有网络" class="headerlink" title="虚拟机公有网络"></a>虚拟机公有网络</h3><p>编辑Vagrantfile，将我们刚刚开启的私有网络配置注释，然后开启下面这行配置：</p><p><img src="img/QQ截图20190329204536.png" alt="QQ截图20190329204536.png"></p><p>然后重启虚拟机，重启过程中会然你根据当前网络环境选择：</p><p><img src="img/QQ截图20190329204658.png" alt="QQ截图20190329204658.png"></p><p>因为我电脑连接的是家里wifi所以选择第四个选项，重启好后连接虚拟机，查看其IP：</p><p><img src="img/QQ截图20190329204819.png" alt="QQ截图20190329204819.png"></p><p>新开一个cmd窗口，ping 这个地址看是否能通:</p><p><img src="img/QQ截图20190329204921.png" alt="QQ截图20190329204921.png"></p><p>公有网络和私有网络的区别是，公有网络是无线路由器自动分配的IP地址，并且在同一个wifi网络下的其他设备也是可以访问这个IP地址的。</p><p>比如我们在windows浏览器里输入<a href="http://192.168.28.83/" target="_blank" rel="noopener">http://192.168.28.83/</a>：</p><p><img src="img/QQ截图20190329205957.png" alt="QQ截图20190329205957.png"></p><p>然后让手机连接和电脑相同的wifi网络，并且访问<a href="http://192.168.28.83/" target="_blank" rel="noopener">http://192.168.28.83/</a>：</p><p><img alt="" src="img/QQ图片20190329210159.jpg" style="width:25rem"></p><p>结果说明公有网络配置成功。</p><h2 id="多主机配置"><a href="#多主机配置" class="headerlink" title="多主机配置"></a>多主机配置</h2><p>使用Vagrant可以轻松地创建多台虚拟主机。下面我们开始通过Vagrant来创建两台新的虚拟主机“prod”和“dev”。</p><p>在vagrant_vm目录下新建一个目录，名称为multi，然后通过现有的box来初始化一个Vagrantfile配置：</p><p><img src="img/QQ截图20190329213710.png" alt="QQ截图20190329213710.png"></p><p>接着编辑multi目录下的Vagrantfile文件，新增下面两项配置：</p><p><img src="img/QQ截图20190329213847.png" alt="QQ截图20190329213847.png"></p><p>运行<code>vagrant status</code>：</p><p><img src="img/QQ截图20190329213928.png" alt="QQ截图20190329213928.png"></p><p>可以看到多了两台状态为<code>not created</code>的虚拟机，名称分别为“prod”和“dev”。</p><p>我们可以使用<code>vagrant up</code>来启动两台主机，也可以通过<code>vagrant up prod</code>来单独启动“prod”这台虚拟主机。</p><p>启动后（第一次启动耗时可能比较长），使用<code>vagrant status</code>来查看它们的状态：</p><p><img src="img/QQ截图20190329214836.png" alt="QQ截图20190329214836.png"></p><p>通过<code>vagrant ssh 主机名</code>就可以连接上它们了。</p><h3 id="网络配置-1"><a href="#网络配置-1" class="headerlink" title="网络配置"></a>网络配置</h3><p>接下来开始配置网络，让它们之间可以通讯。</p><p>我们按照上面介绍网络配置的方式来为这两台虚拟主机配置私有网络：</p><p><img src="img/QQ截图20190329215535.png" alt="QQ截图20190329215535.png"></p><p>值得注意的是，在配置私有网络的时候，IP网段不能和Windows主机相同。</p><p>配置好后重启这两台虚拟机，然后分别连接这两台虚拟机，看是否能够ping通：</p><p><img src="img/QQ截图20190329220045.png" alt="QQ截图20190329220045.png"></p><p><img src="img/QQ截图20190329220109.png" alt="QQ截图20190329220109.png"></p><p>配置成功。</p><h3 id="自定义主机名"><a href="#自定义主机名" class="headerlink" title="自定义主机名"></a>自定义主机名</h3><p>编辑Vagrantfile，添加如下配置：</p><p><img src="img/QQ截图20190329220648.png" alt="QQ截图20190329220648.png"></p><p>重启后，连接虚拟机，可以看到hostname已经修改为我们设置的名称了：</p><p><img src="img/QQ截图20190329220747.png" alt="QQ截图20190329220747.png"></p><p><img src="img/QQ截图20190329220810.png" alt="QQ截图20190329220810.png"></p><h3 id="多主机的共享目录"><a href="#多主机的共享目录" class="headerlink" title="多主机的共享目录"></a>多主机的共享目录</h3><p>默认的这两台虚拟主机的/vagrant和当前目录multi/是共享的。我们也可以分别为它们设置不同的共享目录。</p><p>编辑Vagrantfile，添加如下配置：</p><p><img src="img/QQ截图20190329221152.png" alt="QQ截图20190329221152.png"></p><p>然后重启这两台虚拟主机就好了。</p><p>更多Vagrant的配置可以查看官方文档：<a href="https://www.vagrantup.com/docs/" target="_blank" rel="noopener">https://www.vagrantup.com/docs/</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Vagrant是一款由HashiCorp公司提供的，用于快速构建虚拟机环境的软件。本节我们将使用Vagrant结合Oracle VM VirtualBox快速地在win10环境下构建CentOS7虚拟机。在此之前需要先安装好 &lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vagrant&lt;/a&gt; 和 &lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VirtualBox&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vagrant" scheme="http://mrbird.cc/tags/Vagrant/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 中的异步调用</title>
    <link href="http://mrbird.cc/Spring-Boot-Async.html"/>
    <id>http://mrbird.cc/Spring-Boot-Async.html</id>
    <published>2018-09-28T06:42:06.000Z</published>
    <updated>2019-04-01T02:33:31.836Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:35 GMT+0800 (GMT+08:00) --><p>通常我们开发的程序都是同步调用的，即程序按照代码的顺序一行一行的逐步往下执行，每一行代码都必须等待上一行代码执行完毕才能开始执行。而异步编程则没有这个限制，代码的调用不再是阻塞的。所以在一些情景下，通过异步编程可以提高效率，提升接口的吞吐量。这节将介绍如何在Spring Boot中进行异步编程。</p><a id="more"></a><h2 id="开启异步"><a href="#开启异步" class="headerlink" title="开启异步"></a>开启异步</h2><p>新建一个Spring Boot项目，版本为2.1.0.RELEASE，并引入<code>spring-boot-starter-web</code>依赖，项目结构如下所示：</p><p><img src="img/QQ截图20190302100710.png" alt="QQ截图20190302100710.png"></p><p>要开启异步支持，首先得在Spring Boot入口类上加上<code>@EnableAsync</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接下来开始编写异步方法。</p><p>在<code>com.example.demo</code>路径下新建<code>service</code>包，并创建<code>TestService</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sleep();</span><br><span class="line">        logger.info(<span class="string">"异步方法内部线程名称：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面的Service中包含一个异步方法<code>asyncMethod</code>（开启异步支持后，只需要在方法上加上<code>@Async</code>注解便是异步方法了）和同步方法<code>syncMethod</code>。<code>sleep</code>方法用于让当前线程阻塞2秒钟。</p><p>接着在<code>com.example.demo</code>路径下新建<code>controller</code>包，然后创建<code>TestController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"async"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">"异步方法开始"</span>);</span><br><span class="line"></span><br><span class="line">        testService.asyncMethod();</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"异步方法结束"</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">"总耗时：&#123;&#125; ms"</span>, end - start);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"sync"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">"同步方法开始"</span>);</span><br><span class="line"></span><br><span class="line">        testService.syncMethod();</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">"同步方法结束"</span>);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        logger.info(<span class="string">"总耗时：&#123;&#125; ms"</span>, end - start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动项目，访问 <a href="http://localhost:8080/sync" target="_blank" rel="noopener">http://localhost:8080/sync</a> 请求，控制台输出如下：</p><p><img src="img/QQ截图20190302101932.png" alt="QQ截图20190302101932.png"></p><p>可看到默认程序是同步的，由于<code>sleep</code>方法阻塞的原因，<code>testSync</code>方法执行了2秒钟以上。</p><p>访问 <a href="http://localhost:8080/async" target="_blank" rel="noopener">http://localhost:8080/async</a> ，控制台输出如下：</p><p><img src="img/QQ截图20190302102327.png" alt="QQ截图20190302102327.png"></p><p>可看到<code>testAsync</code>方法耗时极少，因为异步的原因，程序并没有被<code>sleep</code>方法阻塞，这就是异步调用的好处。同时异步方法内部会新启一个线程来执行，这里线程名称为task - 1。</p><p>默认情况下的异步线程池配置使得线程不能被重用，每次调用异步方法都会新建一个线程，我们可以自己定义异步线程池来优化。</p><h2 id="自定义异步线程池"><a href="#自定义异步线程池" class="headerlink" title="自定义异步线程池"></a>自定义异步线程池</h2><p>在<code>com.example.demo</code>下新建<code>config</code>包，然后创建<code>AsyncPoolConfig</code>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncPoolConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">asyncThreadPoolTaskExecutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">20</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">200</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">25</span>);</span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">200</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"asyncThread"</span>);</span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">        executor.setAwaitTerminationSeconds(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line"></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们通过<code>ThreadPoolTaskExecutor</code>的一些方法自定义了一个线程池，这些方法的含义如下所示：</p><ul><li><p><code>corePoolSize</code>：线程池核心线程的数量，默认值为1（这就是默认情况下的异步线程池配置使得线程不能被重用的原因）。</p></li><li><p><code>maxPoolSize</code>：线程池维护的线程的最大数量，只有当核心线程都被用完并且缓冲队列满后，才会开始申超过请核心线程数的线程，默认值为<code>Integer.MAX_VALUE</code>。</p></li><li><p><code>queueCapacity</code>：缓冲队列。</p></li><li><p><code>keepAliveSeconds</code>：超出核心线程数外的线程在空闲时候的最大存活时间，默认为60秒。</p></li><li><p><code>threadNamePrefix</code>：线程名前缀。</p></li><li><p><code>waitForTasksToCompleteOnShutdown</code>：是否等待所有线程执行完毕才关闭线程池，默认值为false。</p></li><li><p><code>awaitTerminationSeconds</code>：<code>waitForTasksToCompleteOnShutdown</code>的等待的时长，默认值为0，即不等待。</p></li><li><p><code>rejectedExecutionHandler</code>：当没有线程可以被使用时的处理策略（拒绝任务），默认策略为<code>abortPolicy</code>，包含下面四种策略：</p><p><img src="img/QQ截图20190302111014.png" alt="QQ截图20190302111014.png"></p><ol><li><p><code>callerRunsPolicy</code>：用于被拒绝任务的处理程序，它直接在 execute 方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务。</p></li><li><p><code>abortPolicy</code>：直接抛出<code>java.util.concurrent.RejectedExecutionException</code>异常。</p></li><li><p><code>discardOldestPolicy</code>：当线程池中的数量等于最大线程数时、抛弃线程池中最后一个要执行的任务，并执行新传入的任务。</p></li><li><p><code>discardPolicy</code>：当线程池中的数量等于最大线程数时，不做任何动作。</p></li></ol></li></ul><p>要使用该线程池，只需要在<code>@Async</code>注解上指定线程池Bean名称即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span>(<span class="string">"asyncThreadPoolTaskExecutor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       ......</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启项目，再次访问 <a href="http://localhost:8080/async" target="_blank" rel="noopener">http://localhost:8080/async</a> ，控制台输出入下：</p><p><img src="img/QQ截图20190302112759.png" alt="QQ截图20190302112759.png"></p><h2 id="处理异步回调"><a href="#处理异步回调" class="headerlink" title="处理异步回调"></a>处理异步回调</h2><p>如果异步方法具有返回值的话，需要使用<code>Future</code>来接收回调值。我们修改<code>TestService</code>的<code>asyncMethod</code>方法，给其添加返回值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span>(<span class="string">"asyncThreadPoolTaskExecutor"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">asyncMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sleep();</span><br><span class="line">    logger.info(<span class="string">"异步方法内部线程名称：&#123;&#125;"</span>, Thread.currentThread().getName());</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"hello async"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>泛型指定返回值的类型，<code>AsyncResult</code>为Spring实现的<code>Future</code>实现类：</p><p><img src="img/QQ截图20190302140425.png" alt="QQ截图20190302140425.png"></p><p>接着改造<code>TestController</code>的<code>testAsync</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"async"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testAsync</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    logger.info(<span class="string">"异步方法开始"</span>);</span><br><span class="line"></span><br><span class="line">    Future&lt;String&gt; stringFuture = testService.asyncMethod();</span><br><span class="line">    String result = stringFuture.get();</span><br><span class="line">    logger.info(<span class="string">"异步方法返回值：&#123;&#125;"</span>, result);</span><br><span class="line">    </span><br><span class="line">    logger.info(<span class="string">"异步方法结束"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    logger.info(<span class="string">"总耗时：&#123;&#125; ms"</span>, end - start);</span><br><span class="line">    <span class="keyword">return</span> stringFuture.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>Future</code>接口的<code>get</code>方法用于获取异步调用的返回值。</p><p>重启项目，访问 <a href="http://localhost:8080/async" target="_blank" rel="noopener">http://localhost:8080/async</a> 控制台输出如下所示:</p><p><img src="img/QQ截图20190302141055.png" alt="QQ截图20190302141055.png"></p><p>通过返回结果我们可以看出<code>Future</code>的<code>get</code>方法为阻塞方法，只有当异步方法返回内容了，程序才会继续往下执行。<code>get</code>还有一个<code>get(long timeout, TimeUnit unit)</code>重载方法，我们可以通过这个重载方法设置超时时间，即异步方法在设定时间内没有返回值的话，直接抛出<code>java.util.concurrent.TimeoutException</code>异常。</p><p>比如设置超时时间为60秒：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String result = stringFuture.get(<span class="number">60</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><blockquote><p>源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/49.Spring-Boot-Async" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/49.Spring-Boot-Async</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:35 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;通常我们开发的程序都是同步调用的，即程序按照代码的顺序一行一行的逐步往下执行，每一行代码都必须等待上一行代码执行完毕才能开始执行。而异步编程则没有这个限制，代码的调用不再是阻塞的。所以在一些情景下，通过异步编程可以提高效率，提升接口的吞吐量。这节将介绍如何在Spring Boot中进行异步编程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 中处理跨域</title>
    <link href="http://mrbird.cc/Spring-Boot-Deal-CORS.html"/>
    <id>http://mrbird.cc/Spring-Boot-Deal-CORS.html</id>
    <published>2018-09-22T02:08:47.000Z</published>
    <updated>2019-03-13T10:48:29.195Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --><p>HTML 5中新增的跨域资源访问（Cross-Origin Resource Sharing）特性可以让我们在开发后端系统的时候决定资源是否允许被跨域访问。所谓跨域指的是域名不同或者端口不同或者协议不同，比如当从mrbrid.cc网站访问mrbird.cc:8080网站资源就会存在跨域问题。Spring从4.2版本开始就提供了跨域的支持，开箱即用。这里介绍如何在Spring Boot开发中解决跨域的问题，主要分为注解驱动和接口编程的方式。</p><a id="more"></a><h2 id="模拟跨域"><a href="#模拟跨域" class="headerlink" title="模拟跨域"></a>模拟跨域</h2><p>要解决跨域问题，我们就得先模拟一个跨域情景。新建Spring Boot项目，版本为2.1.0.RELEASE，并引如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>项目结构如下所示：</p><p><img src="img/QQ截图20190301150006.png" alt="QQ截图20190301150006.png"></p><p>在<code>com.example.demo</code>路径下新建<code>controller</code>包，并创建<code>TestController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后在resources/templates下新建index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>跨域测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.get(<span class="string">"http://test.mrbird.cc:8080/hello"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">"#hello"</span>).text(data);</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>编辑本地hosts文件，将<a href="http://test.mrbird.cc" target="_blank" rel="noopener">http://test.mrbird.cc</a>网址映射到127.0.0.1上：</p><p><img src="img/QQ截图20190301150336.png" alt="QQ截图20190301150336.png"></p><p>启动项目访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>，会发现页面并没有成功显示hello，并且F12观察浏览器控制台会发现其报错了：</p><p><img src="img/QQ截图20190301150534.png" alt="QQ截图20190301150534.png"></p><p>这是因为我们在<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>域名下试图访问<a href="http://test.mrbird.cc:8080" target="_blank" rel="noopener">http://test.mrbird.cc:8080</a>下的hello接口，这就存在跨域问题，接下来我们来解决这个问题。</p><h2 id="注解驱动"><a href="#注解驱动" class="headerlink" title="注解驱动"></a>注解驱动</h2><p>Spring 4.2后提供了<code>@CrossOrigin</code>注解，该注解可以标注于方法或者类上，包含了以下属性:</p><table><tr><th>属性</th><th>含义</th></tr><tr><td>value</td><td>指定所支持域的集合，<code>*</code>表示所有域都支持，默认值为<code>*</code>。这些值对应HTTP请求头中的<code>Access-Control-Allow-Origin</code></td></tr><tr><td>origins</td><td>同value</td></tr><tr><td>allowedHeaders</td><td>允许请求头中的header，默认都支持</td></tr><tr><td>exposedHeaders</td><td>响应头中允许访问的header，默认为空</td></tr><tr><td>methods</td><td>支持请求的方法，比如<code>GET</code>，<code>POST</code>，<code>PUT</code>等，默认和Controller中的方法上标注的一致。</td></tr><tr><td>allowCredentials</td><td>是否允许cookie随请求发送，使用时必须指定具体的域</td></tr><tr><td>maxAge</td><td>预请求的结果的有效期，默认30分钟</td></tr></table><p>我们来改造<code>TestController</code>中的<code>hello</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@CrossOrigin</span>(value = <span class="string">"*"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示允许所有域都支持，重启项目，再次访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>：</p><p><img src="img/QQ截图20190301153418.png" alt="QQ截图20190301153418.png"></p><h2 id="接口编程"><a href="#接口编程" class="headerlink" title="接口编程"></a>接口编程</h2><p>除了使用<code>@CrossOrigin</code>注解外，我们可以使用接口编程的方式进行统一配置。</p><p>在<code>com.example.demo</code>路径下新建<code>config</code>包，然后创建<code>WebConfigurer</code>，实现<code>WebMvcConfigurer</code>，重写<code>addCorsMappings</code>默认实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">"*"</span>)</span><br><span class="line">                .allowedMethods(<span class="string">"GET"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面配置表示允许所有请求支持跨域访问，并且不限定域，但是支持持GET方法。将<code>hello</code>方法上的<code>@CrossOrigin</code>注解注释掉，重启项目，再次访问<a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a>，结果也是OK的。</p><h2 id="过滤器实现"><a href="#过滤器实现" class="headerlink" title="过滤器实现"></a>过滤器实现</h2><p>查看官方文档，发现其还提供了基于过滤器的实现方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">    CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">    config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">    config.addAllowedOrigin(<span class="string">"*"</span>);</span><br><span class="line">    source.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line">    FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> CorsFilter(source));</span><br><span class="line">    bean.setOrder(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Actuator跨域"><a href="#Actuator跨域" class="headerlink" title="Actuator跨域"></a>Actuator跨域</h2><p>如果项目里集成了<code>Actuator</code>相关功能，其暴露的接口也支持跨域，只需要在配置文件中添加如下配置即可：</p><p>ENDPOINTS CORS CONFIGURATION (<a href="https://github.com/spring-projects/spring-boot/blob/v2.1.0.RELEASE/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/CorsEndpointProperties.java" target="_blank" rel="noopener">CorsEndpointProperties</a>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.cors.allow-credentials= # Whether credentials are supported. When not set, credentials are not supported.</span><br><span class="line">management.endpoints.web.cors.allowed-headers= # Comma-separated list of headers to allow in a request. &apos;*&apos; allows all headers.</span><br><span class="line">management.endpoints.web.cors.allowed-methods= # Comma-separated list of methods to allow. &apos;*&apos; allows all methods. When not set, defaults to GET.</span><br><span class="line">management.endpoints.web.cors.allowed-origins= # Comma-separated list of origins to allow. &apos;*&apos; allows all origins. When not set, CORS support is disabled.</span><br><span class="line">management.endpoints.web.cors.exposed-headers= # Comma-separated list of headers to include in a response.</span><br><span class="line">management.endpoints.web.cors.max-age=1800s # How long the response from a pre-flight request can be cached by clients. If a duration suffix is not specified, seconds will be used.</span><br></pre></td></tr></table></figure><p></p><blockquote><p>源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/48.Spring-Boot-CORS-Support" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/48.Spring-Boot-CORS-Support</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;HTML 5中新增的跨域资源访问（Cross-Origin Resource Sharing）特性可以让我们在开发后端系统的时候决定资源是否允许被跨域访问。所谓跨域指的是域名不同或者端口不同或者协议不同，比如当从mrbrid.cc网站访问mrbird.cc:8080网站资源就会存在跨域问题。Spring从4.2版本开始就提供了跨域的支持，开箱即用。这里介绍如何在Spring Boot开发中解决跨域的问题，主要分为注解驱动和接口编程的方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>自定义Spring Boot 内容协商</title>
    <link href="http://mrbird.cc/Spring-Boot-Diy-Resolver.html"/>
    <id>http://mrbird.cc/Spring-Boot-Diy-Resolver.html</id>
    <published>2018-09-16T02:08:27.000Z</published>
    <updated>2019-03-13T10:49:45.558Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:36 GMT+0800 (GMT+08:00) --><p><strong>内容协商</strong>机制是指客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。HTTP请求头中Content-Type，Accept等内容就是内容协商判断的标准。在Spring Boot中，一个完整的内容协商过程如下图所示：</p><a id="more"></a><p><img src="img/askfljasdfneiw.png" alt="askfljasdfneiw.png"></p><p>这个过程的核心组件：</p><table><tr><th>组件</th><th>名称</th><th>说明</th></tr><tr><td>ContentNegotiationManager</td><td>内容协商管理器</td><td>ContentNegotiationStrategy 控制策略</td></tr><tr><td>MediaType</td><td>媒体类型</td><td>HTTP 消息媒体类型，如 text/html</td></tr><tr><td>@RequestMapping#consumes</td><td>消费媒体类型</td><td>请求头 Content-Type 媒体类型映射</td></tr><tr><td>@RequestMapping#produces</td><td>生产媒体类型</td><td>响应头 Content-Type 媒体类型映射</td></tr><tr><td>HttpMessageConverter</td><td>HTTP消息转换器接口</td><td>HTTP 消息转换器，用于反序列化 HTTP 请求或序列化响应</td></tr><tr><td>WebMvcConfigurer</td><td>Web MVC 配置器</td><td>配置 REST 相关的组件</td></tr><tr><td>HandlerMethod</td><td>处理方法</td><td>@RequestMapping 标注的方法</td></tr><tr><td>HandlerMethodArgumentResolver</td><td>处理方法参数解析器</td><td>用于 HTTP 请求中解析 HandlerMethod 参数内容</td></tr><tr><td>HandlerMethodReturnValueHandler</td><td>处理方法返回值解析器</td><td>用于 HandlerMethod 返回值解析为 HTTP 响应内容</td></tr></table><p><code>HttpMessageConverter</code>为HTTP消息转换接口，Spring根据不同的媒体类型进行了相应的实现。比如上图中Accept为application/json，所以在第7步中，会选择使用<code>HttpMessageConverter</code>的实现类<code>MappingJackson2HttpMessageConverter</code>来处理返回值。</p><h2 id="自定义HttpMessageConverter"><a href="#自定义HttpMessageConverter" class="headerlink" title="自定义HttpMessageConverter"></a>自定义HttpMessageConverter</h2><p>除了Spring给我们提供的<code>HttpMessageConverter</code>实现外，我们也可以自定义<code>HttpMessageConverter</code>的实现，来处理一些实际业务需求。</p><p>假如现在要实现一个用于处理 Content-Type 为 text/properties 媒体类型的 HttpMessageConverter 实现类 PropertiesHttpMessageConverter，当我们在请求体中传输下面内容时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name:mrbrid</span><br><span class="line">age:18</span><br></pre></td></tr></table></figure><p></p><p>能够自动转换为Properties对象。</p><p>我们可以参照<code>MappingJackson2HttpMessageConverter</code>的实现方式来进行实现，查看<code>MappingJackson2HttpMessageConverter</code>的原型图：</p><p><img src="img/QQ截图20190228110016.png" alt="QQ截图20190228110016.png"></p><p>所以我们可以通过继承<code>AbstractGenericHttpMessageConverter</code>的方式来实现<code>HttpMessageConverter</code>接口。</p><p>新建Spring Boot项目，版本为2.1.0.RELEASE，并引入<code>spring-boot-starter-web</code>依赖，项目结构如下所示:</p><p><img src="img/QQ截图20190228110545.png" alt="QQ截图20190228110545.png"></p><p>我们在<code>com.example.demo</code>路径下新建<code>converter</code>包，然后创建<code>PropertiesHttpMessageConverter</code>，继承<code>AbstractGenericHttpMessageConverter</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractGenericHttpMessageConverter</span>&lt;<span class="title">Properties</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(Properties properties, Type type, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Properties <span class="title">readInternal</span><span class="params">(Class&lt;? extends Properties&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">read</span><span class="params">(Type type, Class&lt;?&gt; contextClass, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>其中<code>readxxx</code>为反序列化过程，即将HTTP请求反序列化为参数的过程；<code>writeInternal</code>为序列化过程，将响应序列化。</p><h3 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h3><p>我们继续编写<code>PropertiesHttpMessageConverter</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractGenericHttpMessageConverter</span>&lt;<span class="title">Properties</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(Properties properties, Type type, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Properties <span class="title">readInternal</span><span class="params">(Class&lt;? extends Properties&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">// 获取请求头</span></span><br><span class="line">        HttpHeaders headers = inputMessage.getHeaders();</span><br><span class="line">        <span class="comment">// 获取 content-type</span></span><br><span class="line">        MediaType contentType = headers.getContentType();</span><br><span class="line">        <span class="comment">// 获取编码</span></span><br><span class="line">        Charset charset = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            charset = contentType.getCharset();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        charset = charset == <span class="keyword">null</span> ? Charset.forName(<span class="string">"UTF-8"</span>) : charset;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求体</span></span><br><span class="line">        InputStream body = inputMessage.getBody();</span><br><span class="line">        InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(body, charset);</span><br><span class="line">        </span><br><span class="line">        properties.load(inputStreamReader);</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">read</span><span class="params">(Type type, Class&lt;?&gt; contextClass, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> readInternal(<span class="keyword">null</span>, inputMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在<code>readInternal</code>方法中，我们获取了HTTP请求体中的输入流和编码，然后调用Properties对象的<code>load</code>方法来将流转换为Properties对象。反序列化过程完成了，我们还需将<code>PropertiesHttpMessageConverter</code>添加到<code>HttpMessageConverter</code>集合中。</p><p>在<code>com.example.demo</code>路径下新建<code>config</code>包，然后创建<code>WebConfigurer</code>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        converters.add(<span class="keyword">new</span> PropertiesHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>extendMessageConverters</code>方法为<code>WebMvcConfigurer</code>的默认方法，这里我们重写这个方法，用于将<code>PropertiesHttpMessageConverter</code>添加到消息转换器集合中。</p><p>接着创建一个Controller来测试一波，在<code>com.example.demo</code>路径下新建<code>controller</code>包，然后创建<code>TestController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"test"</span>, consumes = <span class="string">"text/properties"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">test</span><span class="params">(@RequestBody Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们通过<code>@GetMapping</code>注解的<code>consumes</code>属性指定了方法接收的媒体类型为<code>text/properties</code>，如果方法能够成功被调用，并且可以返回<code>Properties</code>对象，则说明我们自定义的HTTP消息转换器是可行的。</p><p>启动项目，使用PostMan访问：</p><p><img src="img/QQ截图20190228142903.png" alt="QQ截图20190228142903.png"></p><p>请求头中指定Content-Type为text/properties，请求体内容如下所示:</p><p><img src="img/QQ截图20190228142955.png" alt="QQ截图20190228142955.png"></p><p>访问后，控制台输出错误如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resolved [org.springframework.http.converter.HttpMessageNotReadableException: Required request body is missing: public java.util.Properties com.example.demo.controller.TestController.test(java.util.Properties)]</span><br></pre></td></tr></table></figure><p></p><p>为什么呢？因为我们在自定义<code>PropertiesHttpMessageConverter</code>的时候需要在其构造器中指定它能够处理的媒体类型，我们查看<code>MappingJackson2HttpMessageConverter</code>的构造器，看看它是怎么实现的：</p><p><img src="img/QQ截图20190228143338.png" alt="QQ截图20190228143338.png"></p><p>所以我们在<code>PropertiesHttpMessageConverter</code>的构造器中添加相应的媒体类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PropertiesHttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="keyword">new</span> MediaType(<span class="string">"text"</span>, <span class="string">"properties"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这时候，重启项目，再次访问上面的请求，可看到响应如下所示:</p><p><img src="img/QQ截图20190228143600.png" alt="QQ截图20190228143600.png"></p><h3 id="序列化过程"><a href="#序列化过程" class="headerlink" title="序列化过程"></a>序列化过程</h3><p>序列化的过程就是处理HTTP响应的过程，对应<code>PropertiesHttpMessageConverter</code>的<code>writeInternal</code>方法。那为什么我们都还实现这个方法，上面的Controller请求却能返回正常的JSON内容呢？两个原因：</p><ol><li><p>这里我们定义的是REST接口，所以响应默认会被序列化为JSON格式；</p></li><li><p>由于使用<code>converters.add(new PropertiesHttpMessageConverter());</code>这种方式来添加自定义HTTP消息处理器默认会被添加到集合的末尾，在处理JSON响应的时候被排在前面的<code>MappingJackson2HttpMessageConverter</code>优先处理了。</p></li></ol><p>我们可以通过debug来查看<code>PropertiesHttpMessageConverter</code>是否真的被添加到集合末尾了：</p><p><img src="img/QQ截图20190228144601.png" alt="QQ截图20190228144601.png"></p><p><img src="img/QQ截图20190228144626.png" alt="QQ截图20190228144626.png"></p><p>所以我们要换下面这种方式来添加自定义HTTP处理器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// converters.add(new PropertiesHttpMessageConverter());</span></span><br><span class="line">        <span class="comment">// 指定顺序，这里为第一个</span></span><br><span class="line">        converters.add(<span class="number">0</span>, <span class="keyword">new</span> PropertiesHttpMessageConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们重启项目，再次debug：</p><p><img src="img/QQ截图20190228145054.png" alt="QQ截图20190228145054.png"></p><p>可看到，<code>PropertiesHttpMessageConverter</code>已经排在第一个了。这时候再次访问上面的请求，响应如下所示:</p><p><img src="img/QQ截图20190228145215.png" alt="QQ截图20190228145215.png"></p><p>没有任何返回值，这是因为我们还没实现<code>writeInternal</code>呢。继续实现<code>writeInternal</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">AbstractGenericHttpMessageConverter</span>&lt;<span class="title">Properties</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">writeInternal</span><span class="params">(Properties properties, Type type, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取请求头</span></span><br><span class="line">        HttpHeaders headers = outputMessage.getHeaders();</span><br><span class="line">        <span class="comment">// 获取 content-type</span></span><br><span class="line">        MediaType contentType = headers.getContentType();</span><br><span class="line">        <span class="comment">// 获取编码</span></span><br><span class="line">        Charset charset = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            charset = contentType.getCharset();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        charset = charset == <span class="keyword">null</span> ? Charset.forName(<span class="string">"UTF-8"</span>) : charset;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求体</span></span><br><span class="line">        OutputStream body = outputMessage.getBody();</span><br><span class="line">        OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(body, charset);</span><br><span class="line"></span><br><span class="line">        properties.store(outputStreamWriter, <span class="string">"Serialized by PropertiesHttpMessageConverter#writeInternal"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过程和反序化差不多，这里是通过<code>Properties</code>对象的<code>store</code>方法来进行写操作。</p><p>重启项目，再次访问上面的请求，响应如下所示：</p><p><img src="img/QQ截图20190228145908.png" alt="QQ截图20190228145908.png"></p><h2 id="自定义HandlerMethodArgumentResolver"><a href="#自定义HandlerMethodArgumentResolver" class="headerlink" title="自定义HandlerMethodArgumentResolver"></a>自定义HandlerMethodArgumentResolver</h2><p>上面这种方式必须依赖于<code>@RequestBody</code>和<code>@ResponseBody</code>注解，除此之外我们还可以通过自定义<code>HandlerMethodArgumentResolver</code>和<code>HandlerMethodReturnValueHandler</code>实现类的方式来处理内容协商。</p><p><code>HandlerMethodArgumentResolver</code>俗称方法参数解析器，用于解析由<code>@RequestMapping</code>注解（或其派生的注解）所标注的方法的参数。这里我们开始通过实现<code>HandlerMethodArgumentResolver</code>的方式来将HTTP请求体的内容自动解析为Properties对象。</p><p>在<code>com.example.demo</code>路径下新建<code>resolver</code>包，然后创建<code>PropertiesHandlerMethodReturnValueHandler</code>实现<code>HandlerMethodArgumentResolver</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesHandlerMethodArgumentResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Properties.class.equals(parameter.getParameterType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ServletWebRequest servletWebRequest = (ServletWebRequest) webRequest;</span><br><span class="line">        HttpServletRequest request = servletWebRequest.getRequest();</span><br><span class="line">        String contentType = request.getHeader(<span class="string">"Content-Type"</span>);</span><br><span class="line"></span><br><span class="line">        MediaType mediaType = MediaType.parseMediaType(contentType);</span><br><span class="line">        <span class="comment">// 获取编码</span></span><br><span class="line">        Charset charset = mediaType.getCharset() == <span class="keyword">null</span> ? Charset.forName(<span class="string">"UTF-8"</span>) : mediaType.getCharset();</span><br><span class="line">        <span class="comment">// 获取输入流</span></span><br><span class="line">        InputStream inputStream = request.getInputStream();</span><br><span class="line">        InputStreamReader inputStreamReader = <span class="keyword">new</span> InputStreamReader(inputStream, charset);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入流转换为 Properties</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        properties.load(inputStreamReader);</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>方法<code>supportsParameter</code>用于指定支持解析的参数类型，这里为Properties类型。<code>resolveArgument</code>方法用于实现解析逻辑，解析过程和上面定义的<code>PropertiesHttpMessageConverter</code>的<code>readInternal</code>方法类似。</p><p>接着，我们还需将<code>PropertiesHandlerMethodArgumentResolver</code>添加到Spring自带的<code>HandlerMethodArgumentResolver</code>实现类集合中。值得注意的是，我们不能在配置类<code>WebMvcConfigurer</code>中通过重写<code>addArgumentResolvers</code>的方式来添加，查看该方法源码上的注释：</p><p><img src="img/QQ截图20190228185749.png" alt="QQ截图20190228185749.png"></p><p>大致意思是通过这个方法来添加的方法参数解析器不会覆盖Spring内置的方法参数解析器，如果需要这么做的话，可以直接通过修改<code>RequestMappingHandlerAdapter</code>来实现。</p><p>所以我们可以通过下面这个方式来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RequestMappingHandlerAdapter requestMappingHandlerAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前 RequestMappingHandlerAdapter 所有的 ArgumentResolver对象</span></span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers = requestMappingHandlerAdapter.getArgumentResolvers();</span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; newArgumentResolvers = <span class="keyword">new</span> ArrayList&lt;&gt;(argumentResolvers.size() + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 添加 PropertiesHandlerMethodArgumentResolver 到集合第一个位置</span></span><br><span class="line">        newArgumentResolvers.add(<span class="number">0</span>, <span class="keyword">new</span> PropertiesHandlerMethodArgumentResolver());</span><br><span class="line">        <span class="comment">// 将原 ArgumentResolver 添加到集合中</span></span><br><span class="line">        newArgumentResolvers.addAll(argumentResolvers);</span><br><span class="line">        <span class="comment">// 重新设置 ArgumentResolver对象集合</span></span><br><span class="line">        requestMappingHandlerAdapter.setArgumentResolvers(newArgumentResolvers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们在<code>WebConfigurer</code>配置类装配完毕的时候，通过<code>requestMappingHandlerAdapter</code>对象的<code>setArgumentResolvers</code>方法来重新设置方法解析器集合，将<code>PropertiesHandlerMethodArgumentResolver</code>添加到集合的第一个位置。</p><p>之所以要将<code>PropertiesHandlerMethodArgumentResolver</code>添加到第一个位置是因为Properties本质也是一个Map对象，而Spring内置的<code>MapMethodProcessor</code>就是用于处理Map参数类型的，如果不将<code>PropertiesHandlerMethodArgumentResolver</code>优先级提高，那么Properties类型参数会被<code>MapMethodProcessor</code>解析，从而出错。</p><p>配置完毕后，我们改造一下<code>TestController</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @RestController</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"test"</span>, consumes = <span class="string">"text/properties"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">test</span><span class="params">(@RequestBody Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"test1"</span>, consumes = <span class="string">"text/properties"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">test1</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>test1</code>方法的参数没有被<code>@RequestBody</code>标注，启动项目，访问下面这个请求：</p><p><img src="img/QQ截图20190228190930.png" alt="QQ截图20190228190930.png"></p><p>可以看到方法成功执行，并且返回了正确的内容，说明我们自定义的方法参数解析器<code>PropertiesHandlerMethodArgumentResolver</code>是可行的。</p><p>但是方法的返回值还是由<code>PropertiesHttpMessageConverter</code>的<code>writeInternal</code>方法解析的，并且依赖于<code>@ResponseBody</code>注解，接着我们开始实现自定义方法返回值解析器，并且不依赖于<code>@ResponseBody</code>注解。</p><h2 id="自定义HandlerMethodReturnValueHandler"><a href="#自定义HandlerMethodReturnValueHandler" class="headerlink" title="自定义HandlerMethodReturnValueHandler"></a>自定义HandlerMethodReturnValueHandler</h2><p><code>HandlerMethodArgumentResolver</code>俗称方法返回值解析器，用于解析由<code>@RequestMapping</code>注解（或其派生的注解）所标注的方法的返回值。这里我们开始通过实现<code>HandlerMethodReturnValueHandler</code>的方式来自定义一个用于处理返回值类型为Properties类型的解析器。</p><p>在<code>com.example.demo</code>路径下新建<code>handler</code>包，然后创建<code>PropertiesHandlerMethodReturnValueHandler</code>实现<code>HandlerMethodReturnValueHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesHandlerMethodReturnValueHandler</span> <span class="keyword">implements</span> <span class="title">HandlerMethodReturnValueHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsReturnType</span><span class="params">(MethodParameter returnType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Properties.class.equals(returnType.getMethod().getReturnType());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Properties properties = (Properties) returnValue;</span><br><span class="line"></span><br><span class="line">        ServletWebRequest servletWebRequest = (ServletWebRequest) webRequest;</span><br><span class="line"></span><br><span class="line">        HttpServletResponse response = servletWebRequest.getResponse();</span><br><span class="line">        ServletServerHttpResponse servletServerHttpResponse = <span class="keyword">new</span> ServletServerHttpResponse(response);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求头</span></span><br><span class="line">        HttpHeaders headers = servletServerHttpResponse.getHeaders();</span><br><span class="line"></span><br><span class="line">        MediaType contentType = headers.getContentType();</span><br><span class="line">        <span class="comment">// 获取编码</span></span><br><span class="line">        Charset charset = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (contentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            charset = contentType.getCharset();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        charset = charset == <span class="keyword">null</span> ? Charset.forName(<span class="string">"UTF-8"</span>) : charset;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求体</span></span><br><span class="line">        OutputStream body = servletServerHttpResponse.getBody();</span><br><span class="line">        OutputStreamWriter outputStreamWriter = <span class="keyword">new</span> OutputStreamWriter(body, charset);</span><br><span class="line"></span><br><span class="line">        properties.store(outputStreamWriter, <span class="string">"Serialized by PropertiesHandlerMethodReturnValueHandler#handleReturnValue"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>supportsReturnType</code>方法指定了处理返回值的类型，<code>handleReturnValue</code>方法用于处理返回值，这里的逻辑和<code>PropertiesHttpMessageConverter</code>的<code>writeInternal</code>方法基本一致，不再赘述。</p><p>接着将<code>PropertiesHandlerMethodReturnValueHandler</code>添加到到Spring自带的<code>HandlerMethodReturnValueHandler</code>实现类集合中，添加方式和自定义<code>HandlerMethodArgumentResolver</code>一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RequestMappingHandlerAdapter requestMappingHandlerAdapter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前 RequestMappingHandlerAdapter 所有的 ArgumentResolver对象</span></span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers = requestMappingHandlerAdapter.getArgumentResolvers();</span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; newArgumentResolvers = <span class="keyword">new</span> ArrayList&lt;&gt;(argumentResolvers.size() + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 添加 PropertiesHandlerMethodArgumentResolver 到集合第一个位置</span></span><br><span class="line">        newArgumentResolvers.add(<span class="number">0</span>, <span class="keyword">new</span> PropertiesHandlerMethodArgumentResolver());</span><br><span class="line">        <span class="comment">// 将原 ArgumentResolver 添加到集合中</span></span><br><span class="line">        newArgumentResolvers.addAll(argumentResolvers);</span><br><span class="line">        <span class="comment">// 重新设置 ArgumentResolver对象集合</span></span><br><span class="line">        requestMappingHandlerAdapter.setArgumentResolvers(newArgumentResolvers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前 RequestMappingHandlerAdapter 所有的 returnValueHandlers对象</span></span><br><span class="line">        List&lt;HandlerMethodReturnValueHandler&gt; returnValueHandlers = requestMappingHandlerAdapter.getReturnValueHandlers();</span><br><span class="line">        List&lt;HandlerMethodReturnValueHandler&gt; newReturnValueHandlers = <span class="keyword">new</span> ArrayList&lt;&gt;(returnValueHandlers.size() + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 添加 PropertiesHandlerMethodReturnValueHandler 到集合第一个位置</span></span><br><span class="line">        newReturnValueHandlers.add(<span class="number">0</span>, <span class="keyword">new</span> PropertiesHandlerMethodReturnValueHandler());</span><br><span class="line">        <span class="comment">// 将原 returnValueHandlers 添加到集合中</span></span><br><span class="line">        newReturnValueHandlers.addAll(returnValueHandlers);</span><br><span class="line">        <span class="comment">// 重新设置 ReturnValueHandlers对象集合</span></span><br><span class="line">        requestMappingHandlerAdapter.setReturnValueHandlers(newReturnValueHandlers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>配置好后，我们将<code>TestController</code>的<code>test1</code>方法的<code>@ResponseBody</code>注解去掉，重启项目，再次访问:</p><p><img src="img/QQ截图20190228192419.png" alt="QQ截图20190228192419.png"></p><p>可以看到，返回值成功被<code>PropertiesHandlerMethodReturnValueHandler</code>的<code>handleReturnValue</code>方法解析了。</p><p>但是这里还有一个问题，我们查看控制台，会发现如下异常:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">javax.servlet.ServletException: Circular view path [test1]: would dispatch back to the current handler URL [/test1] again. Check your ViewResolver setup! (Hint: This may be the result of an unspecified view, due to default view name generation.)</span><br><span class="line">	at org.springframework.web.servlet.view.InternalResourceView.prepareForRendering(InternalResourceView.java:209) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.view.InternalResourceView.renderMergedOutputModel(InternalResourceView.java:147) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.view.AbstractView.render(AbstractView.java:316) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1370) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1116) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1055) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:998) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:890) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:875) ~[spring-webmvc-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-5.1.2.RELEASE.jar:5.1.2.RELEASE]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) [tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) [tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) [tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) [tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) [tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770) [tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415) [tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_171]</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_171]</span><br><span class="line">	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-9.0.12.jar:9.0.12]</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_171]</span><br></pre></td></tr></table></figure><p>这是因为，在Spring中如果Controller中的方法没有被<code>@ResponseBody</code>标注的话，默认会把返回值当成视图的名称，而这里我们并不希望解析的Properties值被当成视图名称，所以我们需要在<code>PropertiesHandlerMethodReturnValueHandler</code>的<code>handleReturnValue</code>方法最后一行添加如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 告诉 Spring MVC 请求已经处理完毕</span></span><br><span class="line">mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>这行代码告诉Spring，请求已经成功完成了，无需进行后续的处理。重启项目再次访问上面的请求，控制台便不再抛异常了。</p><blockquote><p>源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/47.Spring-Boot-Content-Negotiation" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/47.Spring-Boot-Content-Negotiation</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;内容协商&lt;/strong&gt;机制是指客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的基准。HTTP请求头中Content-Type，Accept等内容就是内容协商判断的标准。在Spring Boot中，一个完整的内容协商过程如下图所示：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot配合Hibernate Validator参数校验</title>
    <link href="http://mrbird.cc/Spring-Boot-Hibernate-Validator-Params-Check.html"/>
    <id>http://mrbird.cc/Spring-Boot-Hibernate-Validator-Params-Check.html</id>
    <published>2018-09-14T02:01:45.000Z</published>
    <updated>2019-03-13T10:50:11.216Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --><p>Spring Boot中结合Hibernate Validator可以实现优雅的参数校验，而不必在业务代码中写一大堆的参数校验逻辑。Hibernate Validator的基本使用可以参考<a href="/Spring表单校验.html">Spring表单校验</a>，这里介绍一种结合全局异常捕获的方式来实现低耦合简洁的参数校验解决方案。</p><a id="more"></a><h2 id="方法参数校验"><a href="#方法参数校验" class="headerlink" title="方法参数校验"></a>方法参数校验</h2><p>新建一个Spring Boot工程，版本为2.1.0.RELEASE，<code>artifactId</code>为<code>validator</code>，并引入<code>spring-boot-starter-web</code>和<code>commons-lang3</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>项目结构如下所示：</p><p><img src="img/QQ截图20190227113219.png" alt="QQ截图20190227113219.png"></p><p><code>spring-boot-starter-web</code>已经包含了<code>hibernate-validator</code>，所以无需单独引入： <img src="img/QQ截图20190227114315.png" alt="QQ截图20190227114315.png"></p><p>在<code>com.example.demo</code>下新建<code>controller</code>包，然后创建<code>TestController</code>，定义一个<code>test1</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"test1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @NotBlank(message = <span class="string">"&#123;required&#125;"</span>)</span> String name,</span></span><br><span class="line"><span class="function">            @<span class="title">Email</span><span class="params">(message = <span class="string">"&#123;invalid&#125;"</span>)</span> String email) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>test1</code>方法的<code>name</code>参数使用<code>@NotBlank</code>标注，表示不能为空，提示信息为<code>{required}</code>占位符里的内容；<code>email</code>参数使用<code>@Email</code>注解标注，表示必须为一个合法的邮箱值（可以为空），提示信息为<code>{invalid}</code>占位符里的内容。要让参数校验生效，我们还需在类上使用<code>@Validated</code>注解标注。</p><p>接下来定义上面两个占位符的内容。在resources目录下新建ValidationMessages.properties文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">required=\u4e0d\u80fd\u4e3a\u7a7a</span><br><span class="line">invalid=\u683c\u5f0f\u4e0d\u5408\u6cd5</span><br></pre></td></tr></table></figure><p></p><p>内容为中文转Unicode后的值，可以使用<a href="http://tool.chinaz.com/tools/unicode.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/tools/unicode.aspx</a>网站转换，<code>\u4e0d\u80fd\u4e3a\u7a7a</code>转为中文为“不能为空”，<code>\u683c\u5f0f\u4e0d\u5408\u6cd5</code>转为中文为“格式不合法”。</p><p>启动项目，使用Postman进行测试，参数内容如下所示：</p><p><img src="img/QQ截图20190227140409.png" alt="QQ截图20190227140409.png"></p><p>这里<code>name</code>参数值为空，<code>email</code>参数值为123，访问后，控制台输出异常如下：</p><p><img src="img/QQ截图20190227140521.png" alt="QQ截图20190227140521.png"></p><p>可见，使用这种方式参数校验不通过时，会抛出<code>javax.validation.ConstraintViolationException</code>，我们使用全局异常捕获来处理这种异常：</p><p>在<code>com.example.demo</code>下新建<code>handler</code>包，然后创建<code>GlobalExceptionHandler</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="meta">@Order</span>(value = Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统一处理请求参数校验(普通传参)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e ConstraintViolationException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> FebsResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = ConstraintViolationException.class)</span><br><span class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleConstraintViolationException</span><span class="params">(ConstraintViolationException e)</span> </span>&#123;</span><br><span class="line">        StringBuilder message = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        Set&lt;ConstraintViolation&lt;?&gt;&gt; violations = e.getConstraintViolations();</span><br><span class="line">        <span class="keyword">for</span> (ConstraintViolation&lt;?&gt; violation : violations) &#123;</span><br><span class="line">            Path path = violation.getPropertyPath();</span><br><span class="line">            String[] pathArr = StringUtils.splitByWholeSeparatorPreserveAllTokens(path.toString(), <span class="string">"."</span>);</span><br><span class="line">            message.append(pathArr[<span class="number">1</span>]).append(violation.getMessage()).append(<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        message = <span class="keyword">new</span> StringBuilder(message.substring(<span class="number">0</span>, message.length() - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> message.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面主要的逻辑是获取校验不通过的参数名称，然后拼接上提示信息，并且HTTP返回状态码为400。重启项目，再次访问刚刚的链接，响应如下所示：</p><p><img src="img/QQ截图20190227141744.png" alt="QQ截图20190227141744.png"></p><h2 id="使用实体传参"><a href="#使用实体传参" class="headerlink" title="使用实体传参"></a>使用实体传参</h2><p>当参数较少的时候可以使用上面这种方式，但如果参数众多上面的方式就略显繁琐了。这时候我们可以使用实体对象来进行传参。</p><p>为了模拟这种情况，我们在<code>com.example.demo</code>路径下新建<code>domain</code>包，然后新建<code>User</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2731598327208972274L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"&#123;required&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"&#123;invalid&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>接着在<code>TestController</code>里创建一个<code>test2</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"test2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(@Valid User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用实体对象传参的方式参数校验需要在相应的参数前加上<code>@Valid</code>注解。重启项目，再次访问下面这个请求： <img src="img/QQ截图20190227140409.png" alt="QQ截图20190227140409.png"></p><p>控制台会输出如下信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Resolved [org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors</span><br><span class="line">Field error in object &apos;user&apos; on field &apos;name&apos;: rejected value []; codes [NotBlank.user.name,NotBlank.name,NotBlank.java.lang.String,NotBlank]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.name,name]; arguments []; default message [name]]; default message [不能为空]</span><br><span class="line">Field error in object &apos;user&apos; on field &apos;email&apos;: rejected value [123]; codes [Email.user.email,Email.email,Email.java.lang.String,Email]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [user.email,email]; arguments []; default message [email],[Ljavax.validation.constraints.Pattern$Flag;@5fb82092,org.springframework.validation.beanvalidation.SpringValidatorAdapter$ResolvableAttribute@cc0c307]; default message [格式不合法]]</span><br></pre></td></tr></table></figure><p>这时候我们需要在<code>GlobalExceptionHandler</code>捕获<code>org.springframework.validation.BindException</code>异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一处理请求参数校验(实体对象传参)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e BindException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> FebsResponse</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(BindException.class)</span><br><span class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">validExceptionHandler</span><span class="params">(BindException e)</span> </span>&#123;</span><br><span class="line">    StringBuilder message = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    List&lt;FieldError&gt; fieldErrors = e.getBindingResult().getFieldErrors();</span><br><span class="line">    <span class="keyword">for</span> (FieldError error : fieldErrors) &#123;</span><br><span class="line">        message.append(error.getField()).append(error.getDefaultMessage()).append(<span class="string">","</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    message = <span class="keyword">new</span> StringBuilder(message.substring(<span class="number">0</span>, message.length() - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> message.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启项目，再次访问刚刚的请求，响应如下所示:</p><p><img src="img/QQ截图20190227143248.png" alt="QQ截图20190227143248.png"></p><p>我们将请求参数改为合法的内容：</p><p><img src="img/QQ截图20190227143400.png" alt="QQ截图20190227143400.png"></p><p>点击访问，响应如下所示:</p><p><img src="img/QQ截图20190227143434.png" alt="QQ截图20190227143434.png"></p><blockquote><p>源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/46.Spring-Boot-Hibernate-Validator" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/46.Spring-Boot-Hibernate-Validator</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:34 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Spring Boot中结合Hibernate Validator可以实现优雅的参数校验，而不必在业务代码中写一大堆的参数校验逻辑。Hibernate Validator的基本使用可以参考&lt;a href=&quot;/Spring表单校验.html&quot;&gt;Spring表单校验&lt;/a&gt;，这里介绍一种结合全局异常捕获的方式来实现低耦合简洁的参数校验解决方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>深入学习Spring Boot中的SpringApplication</title>
    <link href="http://mrbird.cc/deepin-springboot-application.html"/>
    <id>http://mrbird.cc/deepin-springboot-application.html</id>
    <published>2018-09-04T06:54:26.000Z</published>
    <updated>2019-03-13T10:50:36.507Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:36 GMT+0800 (GMT+08:00) --><p>在Spring Boot的入口类中，我们通常是通过调用<code>SpringApplication</code>的run方法来启动Spring Boot项目。这节我们来深入学习下SpringApplication的一些细节。</p><h2 id="自定义SpringApplication"><a href="#自定义SpringApplication" class="headerlink" title="自定义SpringApplication"></a>自定义SpringApplication</h2><p>默认的我们都是直接通过<code>SpringApplication</code>的run方法来直接启动Spring Boot，其实我们可以通过一些API来调整某些行为。<a id="more"></a></p><h3 id="通过SpringApplication-API调整"><a href="#通过SpringApplication-API调整" class="headerlink" title="通过SpringApplication API调整"></a>通过SpringApplication API调整</h3><p>我们新建一个SpringBoot项目，Spring Boot版本为2.1.0.RELEASE，<code>artifactId</code>为SpringApplication，并引入<code>spring-boot-starter-web</code>依赖。项目结构如下所示:</p><p><img src="img/QQ截图20190223103358.png" alt="QQ截图20190223103358.png"></p><p>我们将入口类的代码改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication application = <span class="keyword">new</span> SpringApplication(DemoApplication.class);</span><br><span class="line">application.setBannerMode(Banner.Mode.OFF);</span><br><span class="line">application.setWebApplicationType(WebApplicationType.NONE);</span><br><span class="line">application.setAdditionalProfiles(<span class="string">"dev"</span>);</span><br><span class="line">application.run(args);</span><br></pre></td></tr></table></figure><p></p><p>通过调用<code>SpringApplication</code>的方法，我们关闭了Banner的打印，设置应用环境为非WEB应用，profiles指定为dev。除此之外，<code>SpringApplication</code>还包含了许多别的方法，具体可以查看源码或者官方文档：</p><p><img src="img/QQ截图20190223101959.png" alt="QQ截图20190223101959.png"></p><h3 id="通过SpringApplicationBuilder-API调整"><a href="#通过SpringApplicationBuilder-API调整" class="headerlink" title="通过SpringApplicationBuilder API调整"></a>通过SpringApplicationBuilder API调整</h3><p><code>SpringApplicationBuilder</code>提供了Fluent API，可以实现链式调用，下面的代码和上面的效果一致，但在编写上较为方便：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> SpringApplicationBuilder(DemoApplication.class)</span><br><span class="line">        .bannerMode(Banner.Mode.OFF)</span><br><span class="line">        .web(WebApplicationType.NONE)</span><br><span class="line">        .profiles(<span class="string">"dev"</span>)</span><br><span class="line">        .run(args);</span><br></pre></td></tr></table></figure><h2 id="SpringApplication准备阶段"><a href="#SpringApplication准备阶段" class="headerlink" title="SpringApplication准备阶段"></a>SpringApplication准备阶段</h2><p><code>SpringApplicaiton</code>的生命周期阶段大致可以分为准备阶段和运行阶段。</p><p>我们通过源码来查看<code>SpringApplication</code>的有参构造器：</p><p><img src="img/QQ截图20190223102806.png" alt="QQ截图20190223102806.png"></p><p>通过有参构造器里的代码我们可以将<code>SpringApplication</code>的准备阶段分为以下几个步骤：</p><h3 id="配置源"><a href="#配置源" class="headerlink" title="配置源"></a>配置源</h3><p>构造器中<code>this.primarySources = new LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</code>这行代码用于加载我们配置的Spring Boot Bean源。通常我们使用<code>SpringApplication</code>或者<code>SpringApplicationBuilder</code>的构造器来直接指定源。</p><p>所谓的Spring Boot Bean源指的是某个被<code>@SpringBootApplication</code>注解标注的类，比如入口类：</p><p><img src="img/QQ截图20190223104742.png" alt="QQ截图20190223104742.png"></p><p>我们也可以将上面的代码改为下面这种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication application = <span class="keyword">new</span> SpringApplication(ApplicationResource.class);</span><br><span class="line">        application.run(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SpringBootApplication</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationResource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样也是可行的。查看<code>SpringApplicaiton</code>的单个参数构造器：</p><p><img src="img/QQ截图20190223105200.png" alt="QQ截图20190223105200.png"></p><p>说明我们除了配置单个源外，还可以配置多个源。</p><h3 id="推断应用类型"><a href="#推断应用类型" class="headerlink" title="推断应用类型"></a>推断应用类型</h3><p>构造器中这行<code>this.webApplicationType = WebApplicationType.deduceFromClasspath();</code>代码用于推断当前Spring Boot应用类型。</p><p>Spring Boot 2.0后，应用可以分为下面三种类型：</p><ol><li><p><code>WebApplicationType.NONE</code>：非WEB类型；</p></li><li><p><code>WebApplicationType.REACTIVE</code>：Web Reactive类型；</p></li><li><p><code>WebApplicationType.SERVLET</code>：Web Servlet类型。</p></li></ol><p><code>WebApplicationType.deduceFromClasspath()</code>或根据当前应用ClassPath中是否存在相关的实现类来判断应用类型到底是哪个，<code>deduceFromClasspath</code>方法的源码如下所示:</p><p><img src="img/QQ截图20190223105842.png" alt="QQ截图20190223105842.png"></p><p>我们也可以直接通过<code>SpringApplication</code>的<code>setWebApplicationType</code>方法或者<code>SpringApplicationBuilder</code>的<code>web</code>方法来指定当前应用的类型。</p><h3 id="加载应用上下文初始器"><a href="#加载应用上下文初始器" class="headerlink" title="加载应用上下文初始器"></a>加载应用上下文初始器</h3><p>接着下一行代码<code>setInitializers((Collection) getSpringFactoriesInstances(ApplicationContextInitializer.class));</code>用于加载应用上下文初始器<code>ApplicationContextInitializer</code>。</p><p><code>getSpringFactoriesInstances</code>方法的源码如下所示：</p><p><img src="img/QQ截图20190223110924.png" alt="QQ截图20190223110924.png"></p><p>上面代码利用Spring工厂加载机制，实例化<code>ApplicationContextInitializer</code>实现类，并进行排序。</p><p>所以我们可以通过实现<code>ApplicationContextInitializer</code>接口用于在Spring Boot应用初始化之前执行一些自定义操作。</p><p>举个例子，在<code>com.example.demo</code>下新建<code>initializer</code>包，然后创建一个<code>HelloApplicationContextInitializer</code>类，实现<code>ApplicationContextInitializer</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ConfigurableApplicationContext.id - "</span> + applicationContext.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码中实现了initialize方法，并且使用<code>@Order</code>注解指定优先级。其中<code>Ordered.HIGHEST_PRECEDENCE</code>等于<code>Integer.MIN_VALUE</code>，<code>Ordered.LOWEST_PRECEDENCE</code>等于<code>Integer.MAX_VALUE</code>。所以数值越小，优先级越高。</p><p>除了使用<code>@Order</code>注解来指定优先级外，我们也可以通过实现<code>org.springframework.core.Ordered</code>接口的<code>getOrder</code>方法来指定优先级。</p><p>接着我们来创建一个优先级比<code>HelloApplicationContextInitializer</code>低的Initializer —— <code>AfterHelloApplicationContextInitializer</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterHelloApplicationContextInitializer</span> <span class="keyword">implements</span> <span class="title">ApplicationContextInitializer</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AfterHelloApplicationContextInitializer: "</span> + applicationContext.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.LOWEST_PRECEDENCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面通过<code>getOrder</code>方法来指定了优先级为最低优先级。</p><p>创建好后，我们还需在工厂配置文件里配置这两个实现类。在resources目录下新建META-INF目录，并创建spring.factories文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">com.example.demo.initializer.HelloApplicationContextInitializer,\</span><br><span class="line">com.example.demo.initializer.AfterHelloApplicationContextInitializer</span><br></pre></td></tr></table></figure><p></p><p>这时候，启动Spring Boot项目，会发现控制台在打印Banner后就执行了这两个初始化器，并且<code>HelloApplicationContextInitializer</code>的<code>initialize</code>方法执行时机先于<code>AfterHelloApplicationContextInitializer</code>的<code>initialize</code>方法：</p><p><img src="img/QQ截图20190223155233.png" alt="QQ截图20190223155233.png"></p><h3 id="加载应用事件监听器"><a href="#加载应用事件监听器" class="headerlink" title="加载应用事件监听器"></a>加载应用事件监听器</h3><p>在加载完应用上下文初始器后，下一行的<code>setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</code>代码加载了应用事件监听器。与加载事件上下文初始器类似，Spring Boot也是通过Spring的工厂方法来实例化<code>ApplicationListener</code>的实现类，并进行排序。</p><p>既然是事件监听，那么其可以监听什么事件呢？其监听的是<code>ApplicationEvent</code>接口的实现类，我们查看一下都有哪些事件实现了这个接口：</p><p><img src="img/QQ截图20190223162205.png" alt="QQ截图20190223162205.png"></p><p>这里我们以<code>ContextClosedEvent</code>为例子来编写自定义的应用事件监听器，监听Spring上下文关闭事件。</p><p>在<code>com.example.demo</code>下新建<code>listener</code>包，然后创建一个<code>ContextClosedEventListener</code>类，实现<code>ApplicationListener</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextClosedEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextClosedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextClosedEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ContextClosedEvent: "</span> + event.getApplicationContext().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码实现了对<code>ContextClosedEvent</code>事件的监听，并且分配了最高优先级。</p><p>接着创建一个优先级比<code>ContextClosedEventListener</code>低的上面代码实现了对<code>ContextClosedEvent</code>事件监听器<code>AfterContextClosedEventListener</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterContextClosedEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextClosedEvent</span>&gt;, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextClosedEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AfterContextClosedEventr: "</span> + event.getApplicationContext().getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Ordered.HIGHEST_PRECEDENCE + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>最后，别忘了在Spring工厂配置文件里进行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">com.example.demo.listener.ContextClosedEventListener,\</span><br><span class="line">com.example.demo.listener.AfterContextClosedEventListener</span><br></pre></td></tr></table></figure><p></p><p>在Spring Boot入口类中将环境指定为非WEB环境（这样在启动后应用会马上关闭）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> SpringApplicationBuilder(DemoApplication.class)</span><br><span class="line">                .web(WebApplicationType.NONE)</span><br><span class="line">                .run(args);</span><br></pre></td></tr></table></figure><p></p><p>运行Spring Boot入口类，控制台输出如下： <img src="img/QQ截图20190223162948.png" alt="QQ截图20190223162948.png"></p><h3 id="推断入口类"><a href="#推断入口类" class="headerlink" title="推断入口类"></a>推断入口类</h3><p>接着构造器里的代码下一行<code>this.mainApplicationClass = deduceMainApplicationClass();</code>用于推断运行Spring Boot应用的入口类。查看<code>deduceMainApplicationClass</code>方法源码：</p><p><img src="img/QQ截图20190225093317.png" alt="QQ截图20190225093317.png"></p><p>代码主要逻辑是根据Main线程执行堆栈判断实际的入口类。</p><p>准备阶段介绍完毕后，接下来开始介绍运行阶段。</p><h2 id="SpringApplication运行阶段"><a href="#SpringApplication运行阶段" class="headerlink" title="SpringApplication运行阶段"></a>SpringApplication运行阶段</h2><p>SpringApplication的运行阶段对应<code>SpringApplication</code>的<code>run</code>方法，我们查看其源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    stopWatch.start();</span><br><span class="line">    ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    listeners.starting();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">                args);</span><br><span class="line">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">                applicationArguments);</span><br><span class="line">        configureIgnoreBeanInfo(environment);</span><br><span class="line">        Banner printedBanner = printBanner(environment);</span><br><span class="line">        context = createApplicationContext();</span><br><span class="line">        exceptionReporters = getSpringFactoriesInstances(</span><br><span class="line">                SpringBootExceptionReporter.class,</span><br><span class="line">                <span class="keyword">new</span> Class[]&#123;ConfigurableApplicationContext.class&#125;, context);</span><br><span class="line">        prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">                printedBanner);</span><br><span class="line">        refreshContext(context);</span><br><span class="line">        afterRefresh(context, applicationArguments);</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">            <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">                    .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line">        listeners.started(context);</span><br><span class="line">        callRunners(context, applicationArguments);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        listeners.running(context);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>运行阶段大致可以分为下面这几个过程：</p><h3 id="开启时间监听"><a href="#开启时间监听" class="headerlink" title="开启时间监听"></a>开启时间监听</h3><p><code>run</code>方法开头的这两行代码用于开启时间监听：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start();</span><br></pre></td></tr></table></figure><p></p><p>上面代码用于开启Spring Boot应用启动时间监听，配合下面的<code>stopWatch.stop();</code>便可以计算出完整的启动时间。</p><h3 id="开启运行监听器"><a href="#开启运行监听器" class="headerlink" title="开启运行监听器"></a>开启运行监听器</h3><p><code>run</code>方法的这几行代码用于加载Spring应用运行监听器（SpringApplicationRunListener）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">listeners.started();</span><br></pre></td></tr></table></figure><p></p><p><code>getRunListeners</code>方法源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SpringApplicationRunListeners <span class="title">getRunListeners</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[] &#123; SpringApplication.class, String[].class &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SpringApplicationRunListeners(logger, getSpringFactoriesInstances(</span><br><span class="line">        SpringApplicationRunListener.class, types, <span class="keyword">this</span>, args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码通过<code>SpringFactoriesLoader</code>检索META-INF/spring.factories找到声明的所有<code>SpringApplicationRunListener</code>的实现类并将其实例化，然后装配到<code>List&lt;SpringApplicationRunListener&gt;</code>运行监听器集合中。</p><p><code>listeners.started();</code>用于遍历运行监听器集合中的所有<code>SpringApplicationRunListener</code>的实现类，并逐一调用它们的<code>starting</code>方法，广播Spring Boot应用要开始启动了。</p><p>在Spring Boot中<code>SpringApplicationRunListener</code>接口用于监听整个Spring Boot应用生命周期，其代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这些方法对应着Spring Boot应用生命周期的各个阶段：</p><table><tr><th>方法名称</th><th>对应生命周期</th><th>Spring Boot起始版本</th></tr><tr><td>starting()</td><td>Spring 应用刚启动</td><td>1.0</td></tr><tr><td>environmentPrepared(ConfigurableEnvironment)</td><td>ConfigurableEnvironment 准备完毕，允许将其调整</td><td>1.0</td></tr><tr><td>contextPrepared(ConfigurableApplicationContext)</td><td>ConfigurableApplicationContext 准备完毕，允许将其调整</td><td>1.0</td></tr><tr><td>contextLoaded(ConfigurableApplicationContext)</td><td>ConfigurableApplicationContext 已装载，但仍未启动</td><td>1.0</td></tr><tr><td>started(ConfigurableApplicationContext)</td><td>ConfigurableApplicationContext 已启动，此时 Spring Bean 已初始化完成</td><td>2.0</td></tr><tr><td>running(ConfigurableApplicationContext)</td><td>Spring 应用正在运行</td><td>2.0</td></tr><tr><td>failed(ConfigurableApplicationContext,Throwable)</td><td>Spring 应用运行失败</td><td>2.0</td></tr></table><p>我们在<code>com.example.demo.linstener</code>下自定义一个<code>SpringApplicationRunListener</code>接口实现类<code>HelloSpringApplicationRunListener</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationRunListener</span> <span class="keyword">implements</span> <span class="title">SpringApplicationRunListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloApplicationRunListener</span><span class="params">(SpringApplication application, String[] args)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">starting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloApplicationRunListener starting......"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">environmentPrepared</span><span class="params">(ConfigurableEnvironment environment)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">started</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">running</span><span class="params">(ConfigurableApplicationContext context)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>通过这个实现类，我们可以在Spring Boot应用刚启动的时候在控制台输出<code>HelloApplicationRunListener starting......</code>。</p><p>因为其基于Spring的工厂方法来实现，所以我们需要在spring.factories文件里配置这个实现类:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Run Listeners</span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">com.example.demo.run.HelloApplicationRunListener</span><br></pre></td></tr></table></figure><p></p><p>启动Spring Boot应用便可以在控制台看到如下输出了：</p><p><img src="img/QQ截图20190225101411.png" alt="QQ截图20190225101411.png"></p><h3 id="创建-Environment"><a href="#创建-Environment" class="headerlink" title="创建 Environment"></a>创建 Environment</h3><p><code>run</code>方法中的这行代码用于创建并配置当前SpringBoot应用将要使用的Environment（包括配置要使用的PropertySource以及Profile）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);</span><br></pre></td></tr></table></figure><p></p><p>我们已经在准备阶段里推断出了应用类型，这里只要根据相应的应用类型来创建相应的应用环境即可，类型和环境对应关系如下：</p><ul><li><p>Web Reactive： StandardReactiveWebEnvironment</p></li><li><p>Web Servlet： StandardServletEnvironment</p></li><li><p>非 Web： StandardEnvironment</p></li></ul><p>在<code>prepareEnvironment</code>方法中会执行<code>listeners.environmentPrepared(environment);</code>，用于遍历调用所有<code>SpringApplicationRunListener</code>实现类的<code>environmentPrepared()</code>方法，广播Environment准备完毕。</p><h3 id="是否打印Banner"><a href="#是否打印Banner" class="headerlink" title="是否打印Banner"></a>是否打印Banner</h3><p><code>run</code>方法中的这行代码会根据我们的配置来决定是否打印Banner：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Banner printedBanner = printBanner(environment);</span><br></pre></td></tr></table></figure><p></p><h3 id="创建Context"><a href="#创建Context" class="headerlink" title="创建Context"></a>创建Context</h3><p><code>run</code>方法中的这行代码用于创建<code>ApplicationContext</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context = createApplicationContext();</span><br></pre></td></tr></table></figure><p></p><p>不同的环境对应不同的<code>ApplicationContext</code>：</p><ul><li><p>Web Reactive： AnnotationConfigReactiveWebServerApplicationContext</p></li><li><p>Web Servlet： AnnotationConfigServletWebServerApplicationContext</p></li><li><p>非 Web： AnnotationConfigApplicationContext</p></li></ul><h3 id="装配Context"><a href="#装配Context" class="headerlink" title="装配Context"></a>装配Context</h3><p><code>run</code>方法中的这行代码用于装配Context：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prepareContext(context, environment, listeners, applicationArguments, printedBanner);</span><br></pre></td></tr></table></figure><p></p><p>方法<code>prepareContext</code>的源码如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">                            ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">                            ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">    context.setEnvironment(environment);</span><br><span class="line">    postProcessApplicationContext(context);</span><br><span class="line">    applyInitializers(context);</span><br><span class="line">    listeners.contextPrepared(context);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">        logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">        logStartupProfileInfo(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Add boot specific singleton beans</span></span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">    beanFactory.registerSingleton(<span class="string">"springApplicationArguments"</span>, applicationArguments);</span><br><span class="line">    <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">        beanFactory.registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">        ((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">                .setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Load the sources</span></span><br><span class="line">    Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">    Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">    load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">    listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>prepareContext</code>方法开头为<code>ApplicationContext</code>加载了environment，之后通过<code>applyInitializers</code>方法逐个执行<code>ApplicationContextInitializer</code>的<code>initialize</code>方法来进一步封装<code>ApplicationContext</code>，并调用所有的<code>SpringApplicationRunListener</code>实现类的<code>contextPrepared</code>方法，广播ApplicationContext已经准备完毕了。</p><p>之后初始化IOC容器，并调用<code>SpringApplicationRunListener</code>实现类的<code>contextLoaded</code>方法，广播<code>ApplicationContext</code>加载完成，这里就包括通过<code>@EnableAutoConfiguration</code>导入的各种自动配置类。</p><h3 id="Refresh-Context"><a href="#Refresh-Context" class="headerlink" title="Refresh Context"></a>Refresh Context</h3><p><code>run</code>方法中的这行代码用于初始化所有自动配置类，并调用<code>ApplicationContext</code>的<code>refresh</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refreshContext(context);</span><br></pre></td></tr></table></figure><p></p><h3 id="广播应用已启动"><a href="#广播应用已启动" class="headerlink" title="广播应用已启动"></a>广播应用已启动</h3><p><code>run</code>方法中的这行代码用于广播Spring Boot应用已启动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listeners.started(context);</span><br></pre></td></tr></table></figure><p></p><p><code>started</code>方法会调用所有的<code>SpringApplicationRunListener</code>的<code>finished</code>方法，广播SpringBoot应用已经成功启动。</p><h3 id="执行Runner"><a href="#执行Runner" class="headerlink" title="执行Runner"></a>执行Runner</h3><p><code>run</code>方法中的这行代码<code>callRunners(context, applicationArguments);</code>遍历所有<code>ApplicationRunner</code>和<code>CommandLineRunner</code>的实现类，并执行其<code>run</code>方法。我们可以实现自己的<code>ApplicationRunner</code>或者<code>CommandLineRunner</code>，来对Spring Boot的启动过程进行扩展。</p><p>我们在<code>com.example.demo</code>下新建<code>runner</code>包，然后创建一个<code>ApplicationRunner</code>的实现类<code>HelloApplicationRunner</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloApplicationRunner: hello spring boot"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这里我们需要将<code>HelloApplicationRunner</code>使用<code>@Component</code>注解标注，让其注册到IOC容器中。</p><p>然后再创建一个<code>CommandLineRunner</code>的实现类<code>HelloCommandLineRunner</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloCommandLineRunner: hello spring boot"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动Spring Boot应用，便可以在应用刚启动好后看到如下输出：</p><p><img src="img/QQ截图20190225112601.png" alt="QQ截图20190225112601.png"></p><h3 id="广播应用运行中"><a href="#广播应用运行中" class="headerlink" title="广播应用运行中"></a>广播应用运行中</h3><p><code>run</code>方法中的这行代码<code>listeners.running(context);</code>用于调用<code>SpringApplicationRunListener</code>的<code>running</code>方法，广播Spring Boot应用正在运行中。</p><p>当<code>run</code>方法运行出现异常时，便会调用<code>handleRunFailure</code>方法来处理异常，该方法里会通过<code>listeners.failed(context, exception);</code>来调用<code>SpringApplicationRunListener</code>的<code>failed</code>方法，广播应用启动失败，并将异常扩散出去。</p><div class="note info"><p>上面所有的广播事件都是使用Spring的应用事件广播器接口<code>ApplicationEventMulticaster</code>的实现类<code>SimpleApplicationEventMulticaster</code>来进行广播的。</p></div><blockquote><p>源码链接：<a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/45.Spring-Boot-SpringApplication" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/45.Spring-Boot-SpringApplication</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:36 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在Spring Boot的入口类中，我们通常是通过调用&lt;code&gt;SpringApplication&lt;/code&gt;的run方法来启动Spring Boot项目。这节我们来深入学习下SpringApplication的一些细节。&lt;/p&gt;&lt;h2 id=&quot;自定义SpringApplication&quot;&gt;&lt;a href=&quot;#自定义SpringApplication&quot; class=&quot;headerlink&quot; title=&quot;自定义SpringApplication&quot;&gt;&lt;/a&gt;自定义SpringApplication&lt;/h2&gt;&lt;p&gt;默认的我们都是直接通过&lt;code&gt;SpringApplication&lt;/code&gt;的run方法来直接启动Spring Boot，其实我们可以通过一些API来调整某些行为。
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>深入学习Spring Boot自动装配</title>
    <link href="http://mrbird.cc/deepin-springboot-autoconfig.html"/>
    <id>http://mrbird.cc/deepin-springboot-autoconfig.html</id>
    <published>2018-09-02T06:54:26.000Z</published>
    <updated>2019-03-13T10:50:56.148Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Apr 10 2019 10:55:35 GMT+0800 (GMT+08:00) --><h2 id="模式注解"><a href="#模式注解" class="headerlink" title="模式注解"></a>模式注解</h2><p>Stereotype Annotation俗称为模式注解，Spring中常见的模式注解有<code>@Service</code>，<code>@Repository</code>，<code>@Controller</code>等，它们都“派生”自<code>@Component</code>注解。我们都知道，凡是被<code>@Component</code>标注的类都会被Spring扫描并纳入到IOC容器中，那么由<code>@Component</code>派生的注解所标注的类也会被扫描到IOC容器中。下面我们主要来通过自定义模式注解来了解<code>@Component</code>的“派生性”和“层次性”。</p><a id="more"></a><h3 id="Component-“派生性”"><a href="#Component-“派生性”" class="headerlink" title="@Component “派生性”"></a>@Component “派生性”</h3><p>新建一个Spring Boot工程，Spring Boot版本为2.1.0.RELEASE，<code>artifactId</code>为autoconfig，并引入<code>spring-boot-starter-web</code>依赖。项目结构如下所示:</p><p><img src="img/QQ截图20190220151447.png" alt="QQ截图20190220151447.png"></p><p>在<code>com.example.demo</code>下新建<code>annotation</code>包，然后创建一个<code>FirstLevelService</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FirstLevelService &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个注解定义由<code>@Service</code>标注，查看<code>@Service</code>的源码会发现其被<code>@Component</code>注解标注，所以它们的层次关系为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─@Component</span><br><span class="line">   └─@Service</span><br><span class="line">      └─@FirstLevelService</span><br></pre></td></tr></table></figure><p></p><p>即<code>@FirstLevelService</code>为<code>@Component</code>派生出来的模式注解，我们来测试一下被它标注的类是否能够被扫描到IOC容器中：</p><p>在<code>com.example.demo</code>下新建<code>service</code>包，然后创建一个<code>TestService</code>类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SecondLevelService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>在<code>com.example.demo</code>下新建<code>bootstrap</code>包，然后创建一个<code>ServiceBootStrap</code>类，用于测试注册<code>TestService</code>并从IOC容器中获取它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.example.demo.service"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceBootstrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(ServiceBootstrap.class)</span><br><span class="line">                .web(WebApplicationType.NONE)</span><br><span class="line">                .run(args);</span><br><span class="line">        TestService testService = context.getBean(<span class="string">"testService"</span>, TestService.class);</span><br><span class="line">        System.out.println(<span class="string">"TestService Bean: "</span> + testService);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>运行该类的main方法，控制台输出如下：</p><p><img src="img/QQ截图20190220152939.png" alt="QQ截图20190220152939.png"></p><h3 id="Component-“层次性”"><a href="#Component-“层次性”" class="headerlink" title="@Component “层次性”"></a>@Component “层次性”</h3><p>我们在<code>com.example.demo.annotation</code>路径下再创建一个<code>SecondLevelService</code>注解定义，该注解由上面的<code>@FirstLevelService</code>标注：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@FirstLevelService</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SecondLevelService &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这时候层次关系为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└─@Component</span><br><span class="line">   └─@Service</span><br><span class="line">      └─@FirstLevelService</span><br><span class="line">            └─@SecondLevelService</span><br></pre></td></tr></table></figure><p></p><p>我们将<code>TestService</code>上的注解换成<code>@SecondLevelService</code>，然后再次运行<code>ServiceBootStrap</code>的main方法，输出如下：</p><p><img src="img/QQ截图20190220152939.png" alt="QQ截图20190220152939.png"></p><p>可见结果也是成功的。</p><div class="note danger"><p>这里有一点需要注意的是：<code>@Component</code>注解只包含一个value属性定义，所以其“派生”的注解也只能包含一个vlaue属性定义。</p></div><h2 id="Enable模块驱动"><a href="#Enable模块驱动" class="headerlink" title="@Enable模块驱动"></a>@Enable模块驱动</h2><p><code>@Enable</code>模块驱动在Spring Framework 3.1后开始支持。这里的模块通俗的来说就是一些为了实现某个功能的组件的集合。通过<code>@Enable</code>模块驱动，我们可以开启相应的模块功能。</p><p><code>@Enable</code>模块驱动可以分为“注解驱动”和“接口编程”两种实现方式，下面逐一进行演示：</p><h3 id="注解驱动"><a href="#注解驱动" class="headerlink" title="注解驱动"></a>注解驱动</h3><p>Spring中，基于注解驱动的示例可以查看<code>@EnableWebMvc</code>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;DelegatingWebMvcConfiguration.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableWebMvc &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>该注解通过<code>@Import</code>导入一个配置类<code>DelegatingWebMvcConfiguration</code>：</p><p><img src="img/QQ截图20190220170120.png" alt="QQ截图20190220170120.png"></p><p>该配置类又继承自<code>WebMvcConfigurationSupport</code>，里面定义了一些Bean的声明。</p><div class="note info"><p>所以，基于注解驱动的<code>@Enable</code>模块驱动其实就是通过<code>@Import</code>来导入一个配置类，以此实现相应模块的组件注册，当这些组件注册到IOC容器中，这个模块对应的功能也就可以使用了。</p></div><p>我们来定义一个基于注解驱动的<code>@Enable</code>模块驱动。</p><p>在<code>com.example.demo</code>下新建<code>configuration</code>包，然后创建一个<code>HelloWorldConfiguration</code>配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这个配置类里定义了一个名为<code>hello</code>的Bean，内容为<code>hello world</code>。</p><p>在<code>com.example.demo.annotation</code>下创建一个<code>EnableHelloWorld</code>注解定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(HelloWorldConfiguration.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableHelloWorld &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>我们在该注解类上通过<code>@Import</code>导入了刚刚创建的配置类。</p><p>接着在<code>com.example.demo.bootstrap</code>下创建一个<code>TestEnableBootstap</code>启动类来测试<code>@EnableHelloWorld</code>注解是否生效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableHelloWorld</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEnableBootstap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(TestEnableBootstap.class)</span><br><span class="line">                .web(WebApplicationType.NONE)</span><br><span class="line">                .run(args);</span><br><span class="line">        String hello = context.getBean(<span class="string">"hello"</span>, String.class);</span><br><span class="line">        System.out.println(<span class="string">"hello Bean: "</span> + hello);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>运行该类的main方法，控制台输出如下：</p><p><img src="img/QQ截图20190220171218.png" alt="QQ截图20190220171218.png"></p><p>说明我们自定义的基于注解驱动的<code>@EnableHelloWorld</code>是可行的。</p><h3 id="接口编程"><a href="#接口编程" class="headerlink" title="接口编程"></a>接口编程</h3><p>除了使用上面这个方式外，我们还可以通过接口编程的方式来实现<code>@Enable</code>模块驱动。Spring中，基于接口编程方式的有<code>@EnableCaching</code>注解，查看其源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;CachingConfigurationSelector.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableCaching &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">AdviceMode <span class="title">mode</span><span class="params">()</span> <span class="keyword">default</span> AdviceMode.PROXY</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">order</span><span class="params">()</span> <span class="keyword">default</span> 2147483647</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EnableCaching</code>注解通过<code>@Import</code>导入了<code>CachingConfigurationSelector</code>类，该类间接实现了<code>ImportSelector</code>接口，在 <a href="/Spring-Bean-Regist.html">深入学习Spring组件注册</a> 中，我们曾介绍了可以通过<code>ImportSelector</code>来实现组件注册。</p><div class="note info"><p>所以通过接口编程实现<code>@Enable</code>模块驱动的本质是：通过<code>@Import</code>来导入接口<code>ImportSelector</code>实现类，该实现类里可以定义需要注册到IOC容器中的组件，以此实现相应模块对应组件的注册。</p></div><p>接下来我们根据这个思路来自个实现一遍：</p><p>在<code>com.example.demo</code>下新建<code>selector</code>包，然后在该路径下新建一个<code>HelloWorldImportSelector</code>实现<code>ImportSelector</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;HelloWorldConfiguration.class.getName()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如果看不懂上面这段代码含义的朋友可以阅读<a href="/Spring-Bean-Regist.html">深入学习Spring组件注册</a>一文。</p><p>接着我们修改<code>EnableHelloWorld</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(HelloWorldImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableHelloWorld &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面导入的是<code>HelloWorldImportSelector</code>，而非<code>HelloWorldConfiguration</code>。</p><p>再次运行<code>TestEnableBootstap</code>的main方法，你会发现输出是一样的。</p><h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><p>Spring Boot中的自动装配技术底层主要用到了下面这些技术:</p><ol><li><p>Spring 模式注解装配</p></li><li><p>Spring @Enable 模块装配</p></li><li><p>Spring 条件装配装（<a href="/Spring-Bean-Regist.html">深入学习Spring组件注册</a>中有介绍）</p></li><li><p>Spring 工厂加载机制</p></li></ol><p>Spring 工厂加载机制的实现类为<code>SpringFactoriesLoader</code>，查看其源码：</p><p><img src="img/QQ截图20190221110551.png" alt="QQ截图20190221110551.png"></p><p>该类的方法会读取META-INF目录下的spring.factories配置文件，我们查看spring-boot-autoconfigure-2.1.0.RELEASE.jar下的该文件：</p><p><img src="img/QQ截图20190221110753.png" alt="QQ截图20190221110753.png"></p><p><img src="img/QQ截图20190221110907.png" alt="QQ截图20190221110907.png"></p><p>当启动类被<code>@EnableAutoConfiguration</code>标注后，上面截图中的所有类Spring都会去扫描，看是否可以纳入到IOC容器中进行管理。</p><p>比如我们查看<code>org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration</code>的源码：</p><p><img src="img/QQ截图20190221111400.png" alt="QQ截图20190221111400.png"></p><p>可看到该类上标注了一些注解，其中<code>@Configuration</code>为模式注解，<code>@EnableConfigurationProperties</code>为模块装配技术，<code>ConditionalOnClass</code>为条件装配技术。这和我们上面列出的Spring Boot自动装配底层主要技术一致，所以我们可以根据这个思路来自定义一个自动装配实现。</p><p>新建一个配置类<code>HelloWorldAutoConfiguration</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableHelloWorld</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(name = <span class="string">"helloworld"</span>, havingValue = <span class="string">"true"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldAutoConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后在resources目录下新建META-INF目录，并创建spring.factories文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.example.demo.configuration.HelloWorldAutoConfiguration</span><br></pre></td></tr></table></figure><p>接着在配置文件application.properties中添加<code>helloworld=true</code>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helloworld=true</span><br></pre></td></tr></table></figure><p></p><p>最后创建<code>EnableAutoConfigurationBootstrap</code>，测试下<code>HelloWorldAutoConfiguration</code>是否生效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnableAutoConfigurationBootstrap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext context = <span class="keyword">new</span> SpringApplicationBuilder(EnableAutoConfigurationBootstrap.class)</span><br><span class="line">                .web(WebApplicationType.NONE)</span><br><span class="line">                .run(args);</span><br><span class="line">        String hello = context.getBean(<span class="string">"hello"</span>, String.class);</span><br><span class="line">        System.out.println(<span class="string">"hello Bean: "</span> + hello);</span><br><span class="line">        context.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>运行该main方法，控制台输出如下：</p><p><img src="img/QQ截图20190221112922.png" alt="QQ截图20190221112922.png"></p><p>说明我们自定义的自动装配已经成功了。</p><p>下面简要分析下代码的运行逻辑：</p><ol><li><p>Spring 的工厂加载机制会自动读取META-INF目录下spring.factories文件内容；</p></li><li><p>我们在spring.factories定义了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.example.demo.configuration.HelloWorldAutoConfiguration</span><br></pre></td></tr></table></figure><p>我们在测试类上使用了<code>@EnableAutoConfiguration</code>注解标注，那么<code>HelloWorldAutoConfiguration</code>就会被Spring扫描，看是否符合要求，如果符合则纳入到IOC容器中；</p></li><li><p><code>HelloWorldAutoConfiguration</code>上的<code>@ConditionalOnProperty</code>的注解作用为：当配置文件中配置了<code>helloworld=true</code>（我们确实添加了这个配置，所以符合要求）则这个类符合扫描规则；<code>@EnableHelloWorld</code>注解是我们前面例子中自定义的模块驱动注解，其引入了hello这个Bean，所以IOC容器中便会存在hello这个Bean了；</p></li><li><p>通过上面的步骤，我们就可以通过上下文获取到hello这个Bean了。</p></li></ol><blockquote><p>源码链接： <a href="https://github.com/wuyouzhuguli/SpringAll/tree/master/44.Spring-Boot-Autoconfiguration" target="_blank" rel="noopener">https://github.com/wuyouzhuguli/SpringAll/tree/master/44.Spring-Boot-Autoconfiguration</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Apr 10 2019 10:55:35 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;模式注解&quot;&gt;&lt;a href=&quot;#模式注解&quot; class=&quot;headerlink&quot; title=&quot;模式注解&quot;&gt;&lt;/a&gt;模式注解&lt;/h2&gt;&lt;p&gt;Stereotype Annotation俗称为模式注解，Spring中常见的模式注解有&lt;code&gt;@Service&lt;/code&gt;，&lt;code&gt;@Repository&lt;/code&gt;，&lt;code&gt;@Controller&lt;/code&gt;等，它们都“派生”自&lt;code&gt;@Component&lt;/code&gt;注解。我们都知道，凡是被&lt;code&gt;@Component&lt;/code&gt;标注的类都会被Spring扫描并纳入到IOC容器中，那么由&lt;code&gt;@Component&lt;/code&gt;派生的注解所标注的类也会被扫描到IOC容器中。下面我们主要来通过自定义模式注解来了解&lt;code&gt;@Component&lt;/code&gt;的“派生性”和“层次性”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="http://mrbird.cc/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://mrbird.cc/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
